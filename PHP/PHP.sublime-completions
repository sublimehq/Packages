{
	"scope": "source.php - variable.other.php - source.php meta.embedded.html",

	"completions":
	[
		"php",

		{
			"trigger": "abs()",
			"contents": "abs(${1:number})",
			"kind": "function",
			"details": "Absolute value"
		},
		{
			"trigger": "acos()",
			"contents": "acos(${1:arg})",
			"kind": "function",
			"details": "Arc cosine"
		},
		{
			"trigger": "acosh()",
			"contents": "acosh(${1:arg})",
			"kind": "function",
			"details": "Inverse hyperbolic cosine"
		},
		{
			"trigger": "addcslashes()",
			"contents": "addcslashes(${1:str}, ${2:charlist})",
			"kind": "function",
			"details": "Quote string with slashes in a C style"
		},
		{
			"trigger": "addslashes()",
			"contents": "addslashes(${1:str})",
			"kind": "function",
			"details": "Quote string with slashes"
		},
		{
			"trigger": "aggregate()",
			"contents": "aggregate(${1:object}, ${2:class_name})",
			"kind": "function"
		},
		{
			"trigger": "aggregate_info()",
			"contents": "aggregate_info(${1:object})",
			"kind": "function"
		},
		{
			"trigger": "aggregate_methods()",
			"contents": "aggregate_methods(${1:object}, ${2:class_name})",
			"kind": "function"
		},
		{
			"trigger": "aggregate_methods_by_list()",
			"contents": "aggregate_methods_by_list(${1:object}, ${2:class_name}, ${3:methods_list})",
			"kind": "function"
		},
		{
			"trigger": "aggregate_methods_by_regexp()",
			"contents": "aggregate_methods_by_regexp(${1:object}, ${2:class_name}, ${3:regexp})",
			"kind": "function"
		},
		{
			"trigger": "aggregate_properties()",
			"contents": "aggregate_properties(${1:object}, ${2:class_name})",
			"kind": "function"
		},
		{
			"trigger": "aggregate_properties_by_list()",
			"contents": "aggregate_properties_by_list(${1:object}, ${2:class_name}, ${3:properties_list})",
			"kind": "function"
		},
		{
			"trigger": "aggregate_properties_by_regexp()",
			"contents": "aggregate_properties_by_regexp(${1:object}, ${2:class_name}, ${3:regexp})",
			"kind": "function"
		},
		{
			"trigger": "aggregation_info()",
			"contents": "aggregation_info()",
			"kind": "function"
		},
		{
			"trigger": "apache_child_terminate()",
			"contents": "apache_child_terminate()",
			"kind": "function",
			"details": "Terminate apache process after this request"
		},
		{
			"trigger": "apache_get_modules()",
			"contents": "apache_get_modules()",
			"kind": "function",
			"details": "Get a list of loaded Apache modules"
		},
		{
			"trigger": "apache_get_version()",
			"contents": "apache_get_version()",
			"kind": "function",
			"details": "Fetch Apache version"
		},
		{
			"trigger": "apache_getenv()",
			"contents": "apache_getenv(${1:variable})",
			"kind": "function",
			"details": "Get an Apache subprocess_env variable"
		},
		{
			"trigger": "apache_lookup_uri()",
			"contents": "apache_lookup_uri(${1:filename})",
			"kind": "function",
			"details": "Perform a partial request for the specified URI and return all info about it"
		},
		{
			"trigger": "apache_note()",
			"contents": "apache_note(${1:note_name})",
			"kind": "function",
			"details": "Get and set apache request notes"
		},
		{
			"trigger": "apache_request_headers()",
			"contents": "apache_request_headers()",
			"kind": "function",
			"details": "Fetch all HTTP request headers"
		},
		{
			"trigger": "apache_reset_timeout()",
			"contents": "apache_reset_timeout()",
			"kind": "function",
			"details": "Reset the Apache write timer"
		},
		{
			"trigger": "apache_response_headers()",
			"contents": "apache_response_headers()",
			"kind": "function",
			"details": "Fetch all HTTP response headers"
		},
		{
			"trigger": "apache_setenv()",
			"contents": "apache_setenv(${1:variable}, ${2:value})",
			"kind": "function",
			"details": "Set an Apache subprocess_env variable"
		},
		{
			"trigger": "apc_add()",
			"contents": "apc_add(${1:key})",
			"kind": "function",
			"details": "Cache a new variable in the data store"
		},
		{
			"trigger": "apc_bin_dump()",
			"contents": "apc_bin_dump()",
			"kind": "function",
			"details": "Get a binary dump of the given files and user variables"
		},
		{
			"trigger": "apc_bin_dumpfile()",
			"contents": "apc_bin_dumpfile(${1:files}, ${2:user_vars}, ${3:filename})",
			"kind": "function",
			"details": "Output a binary dump of cached files and user variables to a file"
		},
		{
			"trigger": "apc_bin_load()",
			"contents": "apc_bin_load(${1:data})",
			"kind": "function",
			"details": "Load a binary dump into the APC file/user cache"
		},
		{
			"trigger": "apc_bin_loadfile()",
			"contents": "apc_bin_loadfile(${1:filename})",
			"kind": "function",
			"details": "Load a binary dump from a file into the APC file/user cache"
		},
		{
			"trigger": "apc_cache_info()",
			"contents": "apc_cache_info()",
			"kind": "function",
			"details": "Retrieves cached information from APC's data store"
		},
		{
			"trigger": "apc_cas()",
			"contents": "apc_cas(${1:key}, ${2:old}, ${3:new})",
			"kind": "function",
			"details": "Updates an old value with a new value"
		},
		{
			"trigger": "apc_clear_cache()",
			"contents": "apc_clear_cache()",
			"kind": "function",
			"details": "Clears the APC cache"
		},
		{
			"trigger": "apc_compile_file()",
			"contents": "apc_compile_file(${1:filename})",
			"kind": "function",
			"details": "Stores a file in the bytecode cache, bypassing all filters"
		},
		{
			"trigger": "apc_dec()",
			"contents": "apc_dec(${1:key})",
			"kind": "function",
			"details": "Decrease a stored number"
		},
		{
			"trigger": "apc_define_constants()",
			"contents": "apc_define_constants(${1:key}, ${2:constants})",
			"kind": "function",
			"details": "Defines a set of constants for retrieval and mass-definition"
		},
		{
			"trigger": "apc_delete()",
			"contents": "apc_delete(${1:key})",
			"kind": "function",
			"details": "Removes a stored variable from the cache"
		},
		{
			"trigger": "apc_delete_file()",
			"contents": "apc_delete_file(${1:keys})",
			"kind": "function",
			"details": "Deletes files from the opcode cache"
		},
		{
			"trigger": "apc_exists()",
			"contents": "apc_exists(${1:keys})",
			"kind": "function",
			"details": "Checks if APC key exists"
		},
		{
			"trigger": "apc_fetch()",
			"contents": "apc_fetch(${1:key})",
			"kind": "function",
			"details": "Fetch a stored variable from the cache"
		},
		{
			"trigger": "apc_inc()",
			"contents": "apc_inc(${1:key})",
			"kind": "function",
			"details": "Increase a stored number"
		},
		{
			"trigger": "apc_load_constants()",
			"contents": "apc_load_constants(${1:key})",
			"kind": "function",
			"details": "Loads a set of constants from the cache"
		},
		{
			"trigger": "apc_sma_info()",
			"contents": "apc_sma_info()",
			"kind": "function",
			"details": "Retrieves APC's Shared Memory Allocation information"
		},
		{
			"trigger": "apc_store()",
			"contents": "apc_store(${1:key}, ${2:var})",
			"kind": "function",
			"details": "Cache a variable in the data store"
		},
		{
			"trigger": "apcu_add()",
			"contents": "apcu_add(${1:key}, ${2:var})",
			"kind": "function",
			"details": "Cache a new variable in the data store"
		},
		{
			"trigger": "apcu_cache_info()",
			"contents": "apcu_cache_info()",
			"kind": "function",
			"details": "Retrieves cached information from APCu's data store"
		},
		{
			"trigger": "apcu_cas()",
			"contents": "apcu_cas(${1:key}, ${2:old}, ${3:new})",
			"kind": "function",
			"details": "Updates an old value with a new value"
		},
		{
			"trigger": "apcu_clear_cache()",
			"contents": "apcu_clear_cache()",
			"kind": "function",
			"details": "Clears the APCu cache"
		},
		{
			"trigger": "apcu_dec()",
			"contents": "apcu_dec(${1:key})",
			"kind": "function",
			"details": "Decrease a stored number"
		},
		{
			"trigger": "apcu_delete()",
			"contents": "apcu_delete(${1:key})",
			"kind": "function",
			"details": "Removes a stored variable from the cache"
		},
		{
			"trigger": "apcu_entry()",
			"contents": "apcu_entry(${1:key})",
			"kind": "function",
			"details": "Atomically fetch or generate a cache entry"
		},
		{
			"trigger": "apcu_exists()",
			"contents": "apcu_exists(${1:keys})",
			"kind": "function",
			"details": "Checks if entry exists"
		},
		{
			"trigger": "apcu_fetch()",
			"contents": "apcu_fetch(${1:key})",
			"kind": "function",
			"details": "Fetch a stored variable from the cache"
		},
		{
			"trigger": "apcu_inc()",
			"contents": "apcu_inc(${1:key})",
			"kind": "function",
			"details": "Increase a stored number"
		},
		{
			"trigger": "apcu_sma_info()",
			"contents": "apcu_sma_info()",
			"kind": "function",
			"details": "Retrieves APCu Shared Memory Allocation information"
		},
		{
			"trigger": "apcu_store()",
			"contents": "apcu_store(${1:key}, ${2:var})",
			"kind": "function",
			"details": "Cache a variable in the data store"
		},
		{
			"trigger": "apd_breakpoint()",
			"contents": "apd_breakpoint(${1:debug_level})",
			"kind": "function",
			"details": "Stops the interpreter and waits on a CR from the socket"
		},
		{
			"trigger": "apd_callstack()",
			"contents": "apd_callstack()",
			"kind": "function",
			"details": "Returns the current call stack as an array"
		},
		{
			"trigger": "apd_clunk()",
			"contents": "apd_clunk(${1:warning})",
			"kind": "function",
			"details": "Throw a warning and a callstack"
		},
		{
			"trigger": "apd_continue()",
			"contents": "apd_continue(${1:debug_level})",
			"kind": "function",
			"details": "Restarts the interpreter"
		},
		{
			"trigger": "apd_croak()",
			"contents": "apd_croak(${1:warning})",
			"kind": "function",
			"details": "Throw an error, a callstack and then exit"
		},
		{
			"trigger": "apd_dump_function_table()",
			"contents": "apd_dump_function_table()",
			"kind": "function",
			"details": "Outputs the current function table"
		},
		{
			"trigger": "apd_dump_persistent_resources()",
			"contents": "apd_dump_persistent_resources()",
			"kind": "function",
			"details": "Return all persistent resources as an array"
		},
		{
			"trigger": "apd_dump_regular_resources()",
			"contents": "apd_dump_regular_resources()",
			"kind": "function",
			"details": "Return all current regular resources as an array"
		},
		{
			"trigger": "apd_echo()",
			"contents": "apd_echo(${1:output})",
			"kind": "function",
			"details": "Echo to the debugging socket"
		},
		{
			"trigger": "apd_get_active_symbols()",
			"contents": "apd_get_active_symbols()",
			"kind": "function",
			"details": "Get an array of the current variables names in the local scope"
		},
		{
			"trigger": "apd_set_pprof_trace()",
			"contents": "apd_set_pprof_trace()",
			"kind": "function",
			"details": "Starts the session debugging"
		},
		{
			"trigger": "apd_set_session()",
			"contents": "apd_set_session(${1:debug_level})",
			"kind": "function",
			"details": "Changes or sets the current debugging level"
		},
		{
			"trigger": "apd_set_session_trace()",
			"contents": "apd_set_session_trace(${1:debug_level})",
			"kind": "function",
			"details": "Starts the session debugging"
		},
		{
			"trigger": "apd_set_session_trace_socket()",
			"contents": "apd_set_session_trace_socket(${1:tcp_server}, ${2:socket_type}, ${3:port}, ${4:debug_level})",
			"kind": "function",
			"details": "Starts the remote session debugging"
		},
		{
			"trigger": "array()",
			"contents": "array()",
			"kind": "function",
			"details": "Create an array"
		},
		{
			"trigger": "array_change_key_case()",
			"contents": "array_change_key_case(${1:input})",
			"kind": "function",
			"details": "Changes the case of all keys in an array"
		},
		{
			"trigger": "array_chunk()",
			"contents": "array_chunk(${1:input}, ${2:size})",
			"kind": "function",
			"details": "Split an array into chunks"
		},
		{
			"trigger": "array_column()",
			"contents": "array_column(${1:input}, ${2:column_key})",
			"kind": "function",
			"details": "Return the values from a single column in the input array"
		},
		{
			"trigger": "array_combine()",
			"contents": "array_combine(${1:keys}, ${2:values})",
			"kind": "function",
			"details": "Creates an array by using one array for keys and another for its values"
		},
		{
			"trigger": "array_count_values()",
			"contents": "array_count_values(${1:input})",
			"kind": "function",
			"details": "Counts all the values of an array"
		},
		{
			"trigger": "array_diff()",
			"contents": "array_diff(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the difference of arrays"
		},
		{
			"trigger": "array_diff_assoc()",
			"contents": "array_diff_assoc(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the difference of arrays with additional index check"
		},
		{
			"trigger": "array_diff_key()",
			"contents": "array_diff_key(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the difference of arrays using keys for comparison"
		},
		{
			"trigger": "array_diff_uassoc()",
			"contents": "array_diff_uassoc(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the difference of arrays with additional index check which is performed by a user supplied callback function"
		},
		{
			"trigger": "array_diff_ukey()",
			"contents": "array_diff_ukey(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the difference of arrays using a callback function on the keys for comparison"
		},
		{
			"trigger": "array_fill()",
			"contents": "array_fill(${1:start_index}, ${2:num}, ${3:value})",
			"kind": "function",
			"details": "Fill an array with values"
		},
		{
			"trigger": "array_fill_keys()",
			"contents": "array_fill_keys(${1:keys}, ${2:value})",
			"kind": "function",
			"details": "Fill an array with values, specifying keys"
		},
		{
			"trigger": "array_filter()",
			"contents": "array_filter(${1:input})",
			"kind": "function",
			"details": "Filters elements of an array using a callback function"
		},
		{
			"trigger": "array_flip()",
			"contents": "array_flip(${1:trans})",
			"kind": "function",
			"details": "Exchanges all keys with their associated values in an array"
		},
		{
			"trigger": "array_intersect()",
			"contents": "array_intersect(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the intersection of arrays"
		},
		{
			"trigger": "array_intersect_assoc()",
			"contents": "array_intersect_assoc(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the intersection of arrays with additional index check"
		},
		{
			"trigger": "array_intersect_key()",
			"contents": "array_intersect_key(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the intersection of arrays using keys for comparison"
		},
		{
			"trigger": "array_intersect_uassoc()",
			"contents": "array_intersect_uassoc(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the intersection of arrays with additional index check, compares indexes by a callback function"
		},
		{
			"trigger": "array_intersect_ukey()",
			"contents": "array_intersect_ukey(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the intersection of arrays using a callback function on the keys for comparison"
		},
		{
			"trigger": "array_key_exists()",
			"contents": "array_key_exists(${1:key}, ${2:array})",
			"kind": "function",
			"details": "Checks if the given key or index exists in the array"
		},
		{
			"trigger": "array_keys()",
			"contents": "array_keys(${1:input})",
			"kind": "function",
			"details": "Return all the keys or a subset of the keys of an array"
		},
		{
			"trigger": "array_map()",
			"contents": "array_map(${1:callback}, ${2:arr1})",
			"kind": "function",
			"details": "Applies the callback to the elements of the given arrays"
		},
		{
			"trigger": "array_merge()",
			"contents": "array_merge(${1:array1})",
			"kind": "function",
			"details": "Merge one or more arrays"
		},
		{
			"trigger": "array_merge_recursive()",
			"contents": "array_merge_recursive(${1:array1})",
			"kind": "function",
			"details": "Merge one or more arrays recursively"
		},
		{
			"trigger": "array_multisort()",
			"contents": "array_multisort(${1:arr})",
			"kind": "function",
			"details": "Sort multiple or multi-dimensional arrays"
		},
		{
			"trigger": "array_pad()",
			"contents": "array_pad(${1:input}, ${2:pad_size}, ${3:pad_value})",
			"kind": "function",
			"details": "Pad array to the specified length with a value"
		},
		{
			"trigger": "array_pop()",
			"contents": "array_pop(${1:array})",
			"kind": "function",
			"details": "Pop the element off the end of array"
		},
		{
			"trigger": "array_product()",
			"contents": "array_product(${1:array})",
			"kind": "function",
			"details": "Calculate the product of values in an array"
		},
		{
			"trigger": "array_push()",
			"contents": "array_push(${1:array}, ${2:var})",
			"kind": "function",
			"details": "Push one or more elements onto the end of array"
		},
		{
			"trigger": "array_rand()",
			"contents": "array_rand(${1:input})",
			"kind": "function",
			"details": "Pick one or more random keys out of an array"
		},
		{
			"trigger": "array_reduce()",
			"contents": "array_reduce(${1:input}, ${2:function})",
			"kind": "function",
			"details": "Iteratively reduce the array to a single value using a callback function"
		},
		{
			"trigger": "array_replace()",
			"contents": "array_replace(${1:array}, ${2:array1})",
			"kind": "function",
			"details": "Replaces elements from passed arrays into the first array"
		},
		{
			"trigger": "array_replace_recursive()",
			"contents": "array_replace_recursive(${1:array}, ${2:array1})",
			"kind": "function",
			"details": "Replaces elements from passed arrays into the first array recursively"
		},
		{
			"trigger": "array_reverse()",
			"contents": "array_reverse(${1:array})",
			"kind": "function",
			"details": "Return an array with elements in reverse order"
		},
		{
			"trigger": "array_search()",
			"contents": "array_search(${1:needle}, ${2:haystack})",
			"kind": "function",
			"details": "Searches the array for a given value and returns the first corresponding key if successful"
		},
		{
			"trigger": "array_shift()",
			"contents": "array_shift(${1:array})",
			"kind": "function",
			"details": "Shift an element off the beginning of array"
		},
		{
			"trigger": "array_slice()",
			"contents": "array_slice(${1:array}, ${2:offset})",
			"kind": "function",
			"details": "Extract a slice of the array"
		},
		{
			"trigger": "array_splice()",
			"contents": "array_splice(${1:input}, ${2:offset})",
			"kind": "function",
			"details": "Remove a portion of the array and replace it with something else"
		},
		{
			"trigger": "array_sum()",
			"contents": "array_sum(${1:array})",
			"kind": "function",
			"details": "Calculate the sum of values in an array"
		},
		{
			"trigger": "array_udiff()",
			"contents": "array_udiff(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the difference of arrays by using a callback function for data comparison"
		},
		{
			"trigger": "array_udiff_assoc()",
			"contents": "array_udiff_assoc(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the difference of arrays with additional index check, compares data by a callback function"
		},
		{
			"trigger": "array_udiff_uassoc()",
			"contents": "array_udiff_uassoc(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the difference of arrays with additional index check, compares data and indexes by a callback function"
		},
		{
			"trigger": "array_uintersect()",
			"contents": "array_uintersect(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the intersection of arrays, compares data by a callback function"
		},
		{
			"trigger": "array_uintersect_assoc()",
			"contents": "array_uintersect_assoc(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the intersection of arrays with additional index check, compares data by a callback function"
		},
		{
			"trigger": "array_uintersect_uassoc()",
			"contents": "array_uintersect_uassoc(${1:array1}, ${2:array2})",
			"kind": "function",
			"details": "Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions"
		},
		{
			"trigger": "array_unique()",
			"contents": "array_unique(${1:array})",
			"kind": "function",
			"details": "Removes duplicate values from an array"
		},
		{
			"trigger": "array_unshift()",
			"contents": "array_unshift(${1:array}, ${2:var})",
			"kind": "function",
			"details": "Prepend one or more elements to the beginning of an array"
		},
		{
			"trigger": "array_values()",
			"contents": "array_values(${1:input})",
			"kind": "function",
			"details": "Return all the values of an array"
		},
		{
			"trigger": "array_walk()",
			"contents": "array_walk(${1:array}, ${2:funcname})",
			"kind": "function",
			"details": "Apply a user supplied function to every member of an array"
		},
		{
			"trigger": "array_walk_recursive()",
			"contents": "array_walk_recursive(${1:input}, ${2:funcname})",
			"kind": "function",
			"details": "Apply a user function recursively to every member of an array"
		},
		{
			"trigger": "arsort()",
			"contents": "arsort(${1:array})",
			"kind": "function",
			"details": "Sort an array in reverse order and maintain index association"
		},
		{
			"trigger": "asin()",
			"contents": "asin(${1:arg})",
			"kind": "function",
			"details": "Arc sine"
		},
		{
			"trigger": "asinh()",
			"contents": "asinh(${1:arg})",
			"kind": "function",
			"details": "Inverse hyperbolic sine"
		},
		{
			"trigger": "asort()",
			"contents": "asort(${1:array})",
			"kind": "function",
			"details": "Sort an array and maintain index association"
		},
		{
			"trigger": "assert()",
			"contents": "assert(${1:assertion})",
			"kind": "function",
			"details": "Checks if assertion is FALSE"
		},
		{
			"trigger": "assert_options()",
			"contents": "assert_options(${1:what})",
			"kind": "function",
			"details": "Set/get the various assert flags"
		},
		{
			"trigger": "atan()",
			"contents": "atan(${1:arg})",
			"kind": "function",
			"details": "Arc tangent"
		},
		{
			"trigger": "atan2()",
			"contents": "atan2(${1:y}, ${2:x})",
			"kind": "function",
			"details": "Arc tangent of two variables"
		},
		{
			"trigger": "atanh()",
			"contents": "atanh(${1:arg})",
			"kind": "function",
			"details": "Inverse hyperbolic tangent"
		},
		{
			"trigger": "base64_decode()",
			"contents": "base64_decode(${1:data})",
			"kind": "function",
			"details": "Decodes data encoded with MIME base64"
		},
		{
			"trigger": "base64_encode()",
			"contents": "base64_encode(${1:data})",
			"kind": "function",
			"details": "Encodes data with MIME base64"
		},
		{
			"trigger": "base_convert()",
			"contents": "base_convert(${1:number}, ${2:frombase}, ${3:tobase})",
			"kind": "function",
			"details": "Convert a number between arbitrary bases"
		},
		{
			"trigger": "basename()",
			"contents": "basename(${1:path})",
			"kind": "function",
			"details": "Returns trailing name component of path"
		},
		{
			"trigger": "bbcode_add_element()",
			"contents": "bbcode_add_element(${1:bbcode_container}, ${2:tag_name}, ${3:tag_rules})",
			"kind": "function",
			"details": "Adds a bbcode element"
		},
		{
			"trigger": "bbcode_add_smiley()",
			"contents": "bbcode_add_smiley(${1:bbcode_container}, ${2:smiley}, ${3:replace_by})",
			"kind": "function",
			"details": "Adds a smiley to the parser"
		},
		{
			"trigger": "bbcode_create()",
			"contents": "bbcode_create()",
			"kind": "function",
			"details": "Create a BBCode Resource"
		},
		{
			"trigger": "bbcode_destroy()",
			"contents": "bbcode_destroy(${1:bbcode_container})",
			"kind": "function",
			"details": "Close BBCode_container resource"
		},
		{
			"trigger": "bbcode_parse()",
			"contents": "bbcode_parse(${1:bbcode_container}, ${2:to_parse})",
			"kind": "function",
			"details": "Parse a string following a given rule set"
		},
		{
			"trigger": "bbcode_set_arg_parser()",
			"contents": "bbcode_set_arg_parser(${1:bbcode_container}, ${2:bbcode_arg_parser})",
			"kind": "function",
			"details": "Attach another parser in order to use another rule set for argument parsing"
		},
		{
			"trigger": "bbcode_set_flags()",
			"contents": "bbcode_set_flags(${1:bbcode_container}, ${2:flags})",
			"kind": "function",
			"details": "Set or alter parser options"
		},
		{
			"trigger": "bcadd()",
			"contents": "bcadd(${1:left_operand}, ${2:right_operand})",
			"kind": "function",
			"details": "Add two arbitrary precision numbers"
		},
		{
			"trigger": "bccomp()",
			"contents": "bccomp(${1:left_operand}, ${2:right_operand})",
			"kind": "function",
			"details": "Compare two arbitrary precision numbers"
		},
		{
			"trigger": "bcdiv()",
			"contents": "bcdiv(${1:left_operand}, ${2:right_operand})",
			"kind": "function",
			"details": "Divide two arbitrary precision numbers"
		},
		{
			"trigger": "bcmod()",
			"contents": "bcmod(${1:left_operand}, ${2:modulus})",
			"kind": "function",
			"details": "Get modulus of an arbitrary precision number"
		},
		{
			"trigger": "bcmul()",
			"contents": "bcmul(${1:left_operand}, ${2:right_operand})",
			"kind": "function",
			"details": "Multiply two arbitrary precision numbers"
		},
		{
			"trigger": "bcompiler_load()",
			"contents": "bcompiler_load(${1:filename})",
			"kind": "function",
			"details": "Reads and creates classes from a bz compressed file"
		},
		{
			"trigger": "bcompiler_load_exe()",
			"contents": "bcompiler_load_exe(${1:filename})",
			"kind": "function",
			"details": "Reads and creates classes from a bcompiler exe file"
		},
		{
			"trigger": "bcompiler_parse_class()",
			"contents": "bcompiler_parse_class(${1:class}, ${2:callback})",
			"kind": "function",
			"details": "Reads the bytecodes of a class and calls back to a user function"
		},
		{
			"trigger": "bcompiler_read()",
			"contents": "bcompiler_read(${1:filehandle})",
			"kind": "function",
			"details": "Reads and creates classes from a filehandle"
		},
		{
			"trigger": "bcompiler_write_class()",
			"contents": "bcompiler_write_class(${1:filehandle}, ${2:className})",
			"kind": "function",
			"details": "Writes a defined class as bytecodes"
		},
		{
			"trigger": "bcompiler_write_constant()",
			"contents": "bcompiler_write_constant(${1:filehandle}, ${2:constantName})",
			"kind": "function",
			"details": "Writes a defined constant as bytecodes"
		},
		{
			"trigger": "bcompiler_write_exe_footer()",
			"contents": "bcompiler_write_exe_footer(${1:filehandle}, ${2:startpos})",
			"kind": "function",
			"details": "Writes the start pos, and sig to the end of a exe type file"
		},
		{
			"trigger": "bcompiler_write_file()",
			"contents": "bcompiler_write_file(${1:filehandle}, ${2:filename})",
			"kind": "function",
			"details": "Writes a php source file as bytecodes"
		},
		{
			"trigger": "bcompiler_write_footer()",
			"contents": "bcompiler_write_footer(${1:filehandle})",
			"kind": "function",
			"details": "Writes the single character \\x00 to indicate End of compiled data"
		},
		{
			"trigger": "bcompiler_write_function()",
			"contents": "bcompiler_write_function(${1:filehandle}, ${2:functionName})",
			"kind": "function",
			"details": "Writes a defined function as bytecodes"
		},
		{
			"trigger": "bcompiler_write_functions_from_file()",
			"contents": "bcompiler_write_functions_from_file(${1:filehandle}, ${2:fileName})",
			"kind": "function",
			"details": "Writes all functions defined in a file as bytecodes"
		},
		{
			"trigger": "bcompiler_write_header()",
			"contents": "bcompiler_write_header(${1:filehandle})",
			"kind": "function",
			"details": "Writes the bcompiler header"
		},
		{
			"trigger": "bcompiler_write_included_filename()",
			"contents": "bcompiler_write_included_filename(${1:filehandle}, ${2:filename})",
			"kind": "function",
			"details": "Writes an included file as bytecodes"
		},
		{
			"trigger": "bcpow()",
			"contents": "bcpow(${1:left_operand}, ${2:right_operand})",
			"kind": "function",
			"details": "Raise an arbitrary precision number to another"
		},
		{
			"trigger": "bcpowmod()",
			"contents": "bcpowmod(${1:left_operand}, ${2:right_operand}, ${3:modulus})",
			"kind": "function",
			"details": "Raise an arbitrary precision number to another, reduced by a specified modulus"
		},
		{
			"trigger": "bcscale()",
			"contents": "bcscale(${1:scale})",
			"kind": "function",
			"details": "Set or get default scale parameter for all bc math functions"
		},
		{
			"trigger": "bcsqrt()",
			"contents": "bcsqrt(${1:operand})",
			"kind": "function",
			"details": "Get the square root of an arbitrary precision number"
		},
		{
			"trigger": "bcsub()",
			"contents": "bcsub(${1:left_operand}, ${2:right_operand})",
			"kind": "function",
			"details": "Subtract one arbitrary precision number from another"
		},
		{
			"trigger": "bin2hex()",
			"contents": "bin2hex(${1:str})",
			"kind": "function",
			"details": "Convert binary data into hexadecimal representation"
		},
		{
			"trigger": "bind_textdomain_codeset()",
			"contents": "bind_textdomain_codeset(${1:domain}, ${2:codeset})",
			"kind": "function",
			"details": "Specify the character encoding in which the messages from the DOMAIN message catalog will be returned"
		},
		{
			"trigger": "bindec()",
			"contents": "bindec(${1:binary_string})",
			"kind": "function",
			"details": "Binary to decimal"
		},
		{
			"trigger": "bindtextdomain()",
			"contents": "bindtextdomain(${1:domain}, ${2:directory})",
			"kind": "function",
			"details": "Sets the path for a domain"
		},
		{
			"trigger": "boolval()",
			"contents": "boolval(${1:var})",
			"kind": "function",
			"details": "Get the boolean value of a variable"
		},
		{
			"trigger": "bson_decode()",
			"contents": "bson_decode(${1:bson})",
			"kind": "function",
			"details": "Deserializes a BSON object into a PHP array"
		},
		{
			"trigger": "bson_encode()",
			"contents": "bson_encode(${1:anything})",
			"kind": "function",
			"details": "Serializes a PHP variable into a BSON string"
		},
		{
			"trigger": "bzclose()",
			"contents": "bzclose(${1:bz})",
			"kind": "function",
			"details": "Close a bzip2 file"
		},
		{
			"trigger": "bzcompress()",
			"contents": "bzcompress(${1:source}, ${2:blocksize}, ${3:workfactor})",
			"kind": "function",
			"details": "Compress a string into bzip2 encoded data"
		},
		{
			"trigger": "bzdecompress()",
			"contents": "bzdecompress(${1:source})",
			"kind": "function",
			"details": "Decompresses bzip2 encoded data"
		},
		{
			"trigger": "bzerrno()",
			"contents": "bzerrno(${1:bz})",
			"kind": "function",
			"details": "Returns a bzip2 error number"
		},
		{
			"trigger": "bzerror()",
			"contents": "bzerror(${1:bz})",
			"kind": "function",
			"details": "Returns the bzip2 error number and error string in an array"
		},
		{
			"trigger": "bzerrstr()",
			"contents": "bzerrstr(${1:bz})",
			"kind": "function",
			"details": "Returns a bzip2 error string"
		},
		{
			"trigger": "bzflush()",
			"contents": "bzflush(${1:bz})",
			"kind": "function",
			"details": "Force a write of all buffered data"
		},
		{
			"trigger": "bzopen()",
			"contents": "bzopen(${1:filename}, ${2:mode})",
			"kind": "function",
			"details": "Opens a bzip2 compressed file"
		},
		{
			"trigger": "bzread()",
			"contents": "bzread(${1:bz})",
			"kind": "function",
			"details": "Binary safe bzip2 file read"
		},
		{
			"trigger": "bzwrite()",
			"contents": "bzwrite(${1:bz}, ${2:data})",
			"kind": "function",
			"details": "Binary safe bzip2 file write"
		},
		{
			"trigger": "cairo_create()",
			"contents": "cairo_create(${1:surface})",
			"kind": "function",
			"details": "Returns a new CairoContext object on the requested surface"
		},
		{
			"trigger": "cairo_font_face_get_type()",
			"contents": "cairo_font_face_get_type(${1:fontface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_face_status()",
			"contents": "cairo_font_face_status(${1:fontface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_create()",
			"contents": "cairo_font_options_create()",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_equal()",
			"contents": "cairo_font_options_equal(${1:options}, ${2:other})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_get_antialias()",
			"contents": "cairo_font_options_get_antialias(${1:options})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_get_hint_metrics()",
			"contents": "cairo_font_options_get_hint_metrics(${1:options})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_get_hint_style()",
			"contents": "cairo_font_options_get_hint_style(${1:options})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_get_subpixel_order()",
			"contents": "cairo_font_options_get_subpixel_order(${1:options})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_hash()",
			"contents": "cairo_font_options_hash(${1:options})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_merge()",
			"contents": "cairo_font_options_merge(${1:options}, ${2:other})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_set_antialias()",
			"contents": "cairo_font_options_set_antialias(${1:options}, ${2:antialias})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_set_hint_metrics()",
			"contents": "cairo_font_options_set_hint_metrics(${1:options}, ${2:hint_metrics})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_set_hint_style()",
			"contents": "cairo_font_options_set_hint_style(${1:options}, ${2:hint_style})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_set_subpixel_order()",
			"contents": "cairo_font_options_set_subpixel_order(${1:options}, ${2:subpixel_order})",
			"kind": "function"
		},
		{
			"trigger": "cairo_font_options_status()",
			"contents": "cairo_font_options_status(${1:options})",
			"kind": "function"
		},
		{
			"trigger": "cairo_format_stride_for_width()",
			"contents": "cairo_format_stride_for_width(${1:format}, ${2:width})",
			"kind": "function"
		},
		{
			"trigger": "cairo_image_surface_create()",
			"contents": "cairo_image_surface_create(${1:format}, ${2:width}, ${3:height})",
			"kind": "function"
		},
		{
			"trigger": "cairo_image_surface_create_for_data()",
			"contents": "cairo_image_surface_create_for_data(${1:data}, ${2:format}, ${3:width}, ${4:height})",
			"kind": "function"
		},
		{
			"trigger": "cairo_image_surface_create_from_png()",
			"contents": "cairo_image_surface_create_from_png(${1:file})",
			"kind": "function"
		},
		{
			"trigger": "cairo_image_surface_get_data()",
			"contents": "cairo_image_surface_get_data(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_image_surface_get_format()",
			"contents": "cairo_image_surface_get_format(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_image_surface_get_height()",
			"contents": "cairo_image_surface_get_height(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_image_surface_get_stride()",
			"contents": "cairo_image_surface_get_stride(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_image_surface_get_width()",
			"contents": "cairo_image_surface_get_width(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_matrix_create_scale()",
			"contents": "cairo_matrix_create_scale()",
			"kind": "function",
			"details": "Alias of CairoMatrix::initScale()"
		},
		{
			"trigger": "cairo_matrix_create_translate()",
			"contents": "cairo_matrix_create_translate()",
			"kind": "function",
			"details": "Alias of CairoMatrix::initTranslate()"
		},
		{
			"trigger": "cairo_matrix_invert()",
			"contents": "cairo_matrix_invert(${1:matrix})",
			"kind": "function"
		},
		{
			"trigger": "cairo_matrix_multiply()",
			"contents": "cairo_matrix_multiply(${1:matrix1}, ${2:matrix2})",
			"kind": "function"
		},
		{
			"trigger": "cairo_matrix_rotate()",
			"contents": "cairo_matrix_rotate(${1:matrix}, ${2:radians})",
			"kind": "function"
		},
		{
			"trigger": "cairo_matrix_transform_distance()",
			"contents": "cairo_matrix_transform_distance(${1:matrix}, ${2:dx}, ${3:dy})",
			"kind": "function"
		},
		{
			"trigger": "cairo_matrix_transform_point()",
			"contents": "cairo_matrix_transform_point(${1:matrix}, ${2:dx}, ${3:dy})",
			"kind": "function"
		},
		{
			"trigger": "cairo_matrix_translate()",
			"contents": "cairo_matrix_translate(${1:matrix}, ${2:tx}, ${3:ty})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_add_color_stop_rgb()",
			"contents": "cairo_pattern_add_color_stop_rgb(${1:pattern}, ${2:offset}, ${3:red}, ${4:green}, ${5:blue})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_add_color_stop_rgba()",
			"contents": "cairo_pattern_add_color_stop_rgba(${1:pattern}, ${2:offset}, ${3:red}, ${4:green}, ${5:blue}, ${6:alpha})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_create_for_surface()",
			"contents": "cairo_pattern_create_for_surface(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_create_linear()",
			"contents": "cairo_pattern_create_linear(${1:x0}, ${2:y0}, ${3:x1}, ${4:y1})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_create_radial()",
			"contents": "cairo_pattern_create_radial(${1:x0}, ${2:y0}, ${3:r0}, ${4:x1}, ${5:y1}, ${6:r1})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_create_rgb()",
			"contents": "cairo_pattern_create_rgb(${1:red}, ${2:green}, ${3:blue})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_create_rgba()",
			"contents": "cairo_pattern_create_rgba(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_get_color_stop_count()",
			"contents": "cairo_pattern_get_color_stop_count(${1:pattern})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_get_color_stop_rgba()",
			"contents": "cairo_pattern_get_color_stop_rgba(${1:pattern}, ${2:index})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_get_extend()",
			"contents": "cairo_pattern_get_extend(${1:pattern})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_get_filter()",
			"contents": "cairo_pattern_get_filter(${1:pattern})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_get_linear_points()",
			"contents": "cairo_pattern_get_linear_points(${1:pattern})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_get_matrix()",
			"contents": "cairo_pattern_get_matrix(${1:pattern})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_get_radial_circles()",
			"contents": "cairo_pattern_get_radial_circles(${1:pattern})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_get_rgba()",
			"contents": "cairo_pattern_get_rgba(${1:pattern})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_get_surface()",
			"contents": "cairo_pattern_get_surface(${1:pattern})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_get_type()",
			"contents": "cairo_pattern_get_type(${1:pattern})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_set_extend()",
			"contents": "cairo_pattern_set_extend(${1:pattern}, ${2:extend})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_set_filter()",
			"contents": "cairo_pattern_set_filter(${1:pattern}, ${2:filter})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_set_matrix()",
			"contents": "cairo_pattern_set_matrix(${1:pattern}, ${2:matrix})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pattern_status()",
			"contents": "cairo_pattern_status(${1:pattern})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pdf_surface_create()",
			"contents": "cairo_pdf_surface_create(${1:file}, ${2:width}, ${3:height})",
			"kind": "function"
		},
		{
			"trigger": "cairo_pdf_surface_set_size()",
			"contents": "cairo_pdf_surface_set_size(${1:surface}, ${2:width}, ${3:height})",
			"kind": "function"
		},
		{
			"trigger": "cairo_ps_get_levels()",
			"contents": "cairo_ps_get_levels()",
			"kind": "function"
		},
		{
			"trigger": "cairo_ps_level_to_string()",
			"contents": "cairo_ps_level_to_string(${1:level})",
			"kind": "function"
		},
		{
			"trigger": "cairo_ps_surface_create()",
			"contents": "cairo_ps_surface_create(${1:file}, ${2:width}, ${3:height})",
			"kind": "function"
		},
		{
			"trigger": "cairo_ps_surface_dsc_begin_page_setup()",
			"contents": "cairo_ps_surface_dsc_begin_page_setup(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_ps_surface_dsc_begin_setup()",
			"contents": "cairo_ps_surface_dsc_begin_setup(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_ps_surface_dsc_comment()",
			"contents": "cairo_ps_surface_dsc_comment(${1:surface}, ${2:comment})",
			"kind": "function"
		},
		{
			"trigger": "cairo_ps_surface_get_eps()",
			"contents": "cairo_ps_surface_get_eps(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_ps_surface_restrict_to_level()",
			"contents": "cairo_ps_surface_restrict_to_level(${1:surface}, ${2:level})",
			"kind": "function"
		},
		{
			"trigger": "cairo_ps_surface_set_eps()",
			"contents": "cairo_ps_surface_set_eps(${1:surface}, ${2:level})",
			"kind": "function"
		},
		{
			"trigger": "cairo_ps_surface_set_size()",
			"contents": "cairo_ps_surface_set_size(${1:surface}, ${2:width}, ${3:height})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_create()",
			"contents": "cairo_scaled_font_create(${1:fontface}, ${2:matrix}, ${3:ctm}, ${4:fontoptions})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_extents()",
			"contents": "cairo_scaled_font_extents(${1:scaledfont})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_get_ctm()",
			"contents": "cairo_scaled_font_get_ctm(${1:scaledfont})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_get_font_face()",
			"contents": "cairo_scaled_font_get_font_face(${1:scaledfont})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_get_font_matrix()",
			"contents": "cairo_scaled_font_get_font_matrix(${1:scaledfont})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_get_font_options()",
			"contents": "cairo_scaled_font_get_font_options(${1:scaledfont})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_get_scale_matrix()",
			"contents": "cairo_scaled_font_get_scale_matrix(${1:scaledfont})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_get_type()",
			"contents": "cairo_scaled_font_get_type(${1:scaledfont})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_glyph_extents()",
			"contents": "cairo_scaled_font_glyph_extents(${1:scaledfont}, ${2:glyphs})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_status()",
			"contents": "cairo_scaled_font_status(${1:scaledfont})",
			"kind": "function"
		},
		{
			"trigger": "cairo_scaled_font_text_extents()",
			"contents": "cairo_scaled_font_text_extents(${1:scaledfont}, ${2:text})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_copy_page()",
			"contents": "cairo_surface_copy_page(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_create_similar()",
			"contents": "cairo_surface_create_similar(${1:surface}, ${2:content}, ${3:width}, ${4:height})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_finish()",
			"contents": "cairo_surface_finish(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_flush()",
			"contents": "cairo_surface_flush(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_get_content()",
			"contents": "cairo_surface_get_content(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_get_device_offset()",
			"contents": "cairo_surface_get_device_offset(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_get_font_options()",
			"contents": "cairo_surface_get_font_options(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_get_type()",
			"contents": "cairo_surface_get_type(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_mark_dirty()",
			"contents": "cairo_surface_mark_dirty(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_mark_dirty_rectangle()",
			"contents": "cairo_surface_mark_dirty_rectangle(${1:surface}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_set_device_offset()",
			"contents": "cairo_surface_set_device_offset(${1:surface}, ${2:x}, ${3:y})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_set_fallback_resolution()",
			"contents": "cairo_surface_set_fallback_resolution(${1:surface}, ${2:x}, ${3:y})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_show_page()",
			"contents": "cairo_surface_show_page(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_status()",
			"contents": "cairo_surface_status(${1:surface})",
			"kind": "function"
		},
		{
			"trigger": "cairo_surface_write_to_png()",
			"contents": "cairo_surface_write_to_png(${1:surface}, ${2:stream})",
			"kind": "function"
		},
		{
			"trigger": "cairo_svg_surface_create()",
			"contents": "cairo_svg_surface_create(${1:file}, ${2:width}, ${3:height})",
			"kind": "function"
		},
		{
			"trigger": "cairo_svg_surface_restrict_to_version()",
			"contents": "cairo_svg_surface_restrict_to_version(${1:surface}, ${2:version})",
			"kind": "function"
		},
		{
			"trigger": "cairo_svg_version_to_string()",
			"contents": "cairo_svg_version_to_string(${1:version})",
			"kind": "function"
		},
		{
			"trigger": "cal_days_in_month()",
			"contents": "cal_days_in_month(${1:calendar}, ${2:month}, ${3:year})",
			"kind": "function",
			"details": "Return the number of days in a month for a given year and calendar"
		},
		{
			"trigger": "cal_from_jd()",
			"contents": "cal_from_jd(${1:jd}, ${2:calendar})",
			"kind": "function",
			"details": "Converts from Julian Day Count to a supported calendar"
		},
		{
			"trigger": "cal_info()",
			"contents": "cal_info()",
			"kind": "function",
			"details": "Returns information about a particular calendar"
		},
		{
			"trigger": "cal_to_jd()",
			"contents": "cal_to_jd(${1:calendar}, ${2:month}, ${3:day}, ${4:year})",
			"kind": "function",
			"details": "Converts from a supported calendar to Julian Day Count"
		},
		{
			"trigger": "calcul_hmac()",
			"contents": "calcul_hmac(${1:clent}, ${2:siretcode}, ${3:price}, ${4:reference}, ${5:validity}, ${6:taxation}, ${7:devise}, ${8:language})",
			"kind": "function"
		},
		{
			"trigger": "calculhmac()",
			"contents": "calculhmac(${1:clent}, ${2:data})",
			"kind": "function"
		},
		{
			"trigger": "call_user_func()",
			"contents": "call_user_func(${1:function})",
			"kind": "function",
			"details": "Call the callback given by the first parameter"
		},
		{
			"trigger": "call_user_func_array()",
			"contents": "call_user_func_array(${1:function}, ${2:param_arr})",
			"kind": "function",
			"details": "Call a callback with an array of parameters"
		},
		{
			"trigger": "call_user_method()",
			"contents": "call_user_method(${1:method_name}, ${2:obj})",
			"kind": "function",
			"details": "Call a user method on an specific object"
		},
		{
			"trigger": "call_user_method_array()",
			"contents": "call_user_method_array(${1:method_name}, ${2:obj}, ${3:params})",
			"kind": "function",
			"details": "Call a user method given with an array of parameters"
		},
		{
			"trigger": "ceil()",
			"contents": "ceil(${1:value})",
			"kind": "function",
			"details": "Round fractions up"
		},
		{
			"trigger": "chdb_create()",
			"contents": "chdb_create(${1:pathname}, ${2:data})",
			"kind": "function",
			"details": "Creates a chdb file"
		},
		{
			"trigger": "chdir()",
			"contents": "chdir(${1:directory})",
			"kind": "function",
			"details": "Change directory"
		},
		{
			"trigger": "checkdate()",
			"contents": "checkdate(${1:month}, ${2:day}, ${3:year})",
			"kind": "function",
			"details": "Validate a Gregorian date"
		},
		{
			"trigger": "checkdnsrr()",
			"contents": "checkdnsrr(${1:host})",
			"kind": "function",
			"details": "Check DNS records corresponding to a given Internet host name or IP address"
		},
		{
			"trigger": "chgrp()",
			"contents": "chgrp(${1:filename}, ${2:group})",
			"kind": "function",
			"details": "Changes file group"
		},
		{
			"trigger": "chmod()",
			"contents": "chmod(${1:filename}, ${2:mode})",
			"kind": "function",
			"details": "Changes file mode"
		},
		{
			"trigger": "chop()",
			"contents": "chop()",
			"kind": "function",
			"details": "Alias of rtrim()"
		},
		{
			"trigger": "chown()",
			"contents": "chown(${1:filename}, ${2:user})",
			"kind": "function",
			"details": "Changes file owner"
		},
		{
			"trigger": "chr()",
			"contents": "chr(${1:ascii})",
			"kind": "function",
			"details": "Generate a single-byte string from a number"
		},
		{
			"trigger": "chroot()",
			"contents": "chroot(${1:directory})",
			"kind": "function",
			"details": "Change the root directory"
		},
		{
			"trigger": "chunk_split()",
			"contents": "chunk_split(${1:body})",
			"kind": "function",
			"details": "Split a string into smaller chunks"
		},
		{
			"trigger": "class_alias()",
			"contents": "class_alias()",
			"kind": "function",
			"details": "Creates an alias for a class"
		},
		{
			"trigger": "class_exists()",
			"contents": "class_exists(${1:class_name})",
			"kind": "function",
			"details": "Checks if the class has been defined"
		},
		{
			"trigger": "class_implements()",
			"contents": "class_implements(${1:class})",
			"kind": "function",
			"details": "Return the interfaces which are implemented by the given class or interface"
		},
		{
			"trigger": "class_parents()",
			"contents": "class_parents(${1:class})",
			"kind": "function",
			"details": "Return the parent classes of the given class"
		},
		{
			"trigger": "classkit_import()",
			"contents": "classkit_import(${1:filename})",
			"kind": "function",
			"details": "Import new class method definitions from a file"
		},
		{
			"trigger": "classkit_method_add()",
			"contents": "classkit_method_add(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})",
			"kind": "function",
			"details": "Dynamically adds a new method to a given class"
		},
		{
			"trigger": "classkit_method_copy()",
			"contents": "classkit_method_copy(${1:dClass}, ${2:dMethod}, ${3:sClass})",
			"kind": "function",
			"details": "Copies a method from class to another"
		},
		{
			"trigger": "classkit_method_redefine()",
			"contents": "classkit_method_redefine(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})",
			"kind": "function",
			"details": "Dynamically changes the code of the given method"
		},
		{
			"trigger": "classkit_method_remove()",
			"contents": "classkit_method_remove(${1:classname}, ${2:methodname})",
			"kind": "function",
			"details": "Dynamically removes the given method"
		},
		{
			"trigger": "classkit_method_rename()",
			"contents": "classkit_method_rename(${1:classname}, ${2:methodname}, ${3:newname})",
			"kind": "function",
			"details": "Dynamically changes the name of the given method"
		},
		{
			"trigger": "clearstatcache()",
			"contents": "clearstatcache()",
			"kind": "function",
			"details": "Clears file status cache"
		},
		{
			"trigger": "closedir()",
			"contents": "closedir()",
			"kind": "function",
			"details": "Close directory handle"
		},
		{
			"trigger": "closelog()",
			"contents": "closelog()",
			"kind": "function",
			"details": "Close connection to system logger"
		},
		{
			"trigger": "com_addref()",
			"contents": "com_addref()",
			"kind": "function"
		},
		{
			"trigger": "com_create_guid()",
			"contents": "com_create_guid()",
			"kind": "function",
			"details": "Generate a globally unique identifier (GUID)"
		},
		{
			"trigger": "com_event_sink()",
			"contents": "com_event_sink(${1:comobject}, ${2:sinkobject})",
			"kind": "function",
			"details": "Connect events from a COM object to a PHP object"
		},
		{
			"trigger": "com_get()",
			"contents": "com_get()",
			"kind": "function"
		},
		{
			"trigger": "com_get_active_object()",
			"contents": "com_get_active_object(${1:progid})",
			"kind": "function",
			"details": "Returns a handle to an already running instance of a COM object"
		},
		{
			"trigger": "com_invoke()",
			"contents": "com_invoke(${1:com_object}, ${2:function_name})",
			"kind": "function"
		},
		{
			"trigger": "com_isenum()",
			"contents": "com_isenum(${1:com_module})",
			"kind": "function"
		},
		{
			"trigger": "com_load()",
			"contents": "com_load()",
			"kind": "function"
		},
		{
			"trigger": "com_load_typelib()",
			"contents": "com_load_typelib(${1:typelib_name})",
			"kind": "function",
			"details": "Loads a Typelib"
		},
		{
			"trigger": "com_message_pump()",
			"contents": "com_message_pump()",
			"kind": "function",
			"details": "Process COM messages, sleeping for up to timeoutms milliseconds"
		},
		{
			"trigger": "com_print_typeinfo()",
			"contents": "com_print_typeinfo(${1:comobject})",
			"kind": "function",
			"details": "Print out a PHP class definition for a dispatchable interface"
		},
		{
			"trigger": "com_propget()",
			"contents": "com_propget()",
			"kind": "function"
		},
		{
			"trigger": "com_propput()",
			"contents": "com_propput()",
			"kind": "function"
		},
		{
			"trigger": "com_propset()",
			"contents": "com_propset()",
			"kind": "function"
		},
		{
			"trigger": "com_release()",
			"contents": "com_release()",
			"kind": "function"
		},
		{
			"trigger": "com_set()",
			"contents": "com_set()",
			"kind": "function"
		},
		{
			"trigger": "compact()",
			"contents": "compact(${1:varname})",
			"kind": "function",
			"details": "Create array containing variables and their values"
		},
		{
			"trigger": "connection_aborted()",
			"contents": "connection_aborted()",
			"kind": "function",
			"details": "Check whether client disconnected"
		},
		{
			"trigger": "connection_status()",
			"contents": "connection_status()",
			"kind": "function",
			"details": "Returns connection status bitfield"
		},
		{
			"trigger": "connection_timeout()",
			"contents": "connection_timeout()",
			"kind": "function"
		},
		{
			"trigger": "constant()",
			"contents": "constant(${1:name})",
			"kind": "function",
			"details": "Returns the value of a constant"
		},
		{
			"trigger": "convert_cyr_string()",
			"contents": "convert_cyr_string(${1:str}, ${2:from}, ${3:to})",
			"kind": "function",
			"details": "Convert from one Cyrillic character set to another"
		},
		{
			"trigger": "convert_uudecode()",
			"contents": "convert_uudecode(${1:data})",
			"kind": "function",
			"details": "Decode a uuencoded string"
		},
		{
			"trigger": "convert_uuencode()",
			"contents": "convert_uuencode(${1:data})",
			"kind": "function",
			"details": "Uuencode a string"
		},
		{
			"trigger": "copy()",
			"contents": "copy(${1:source}, ${2:dest})",
			"kind": "function",
			"details": "Copies file"
		},
		{
			"trigger": "cos()",
			"contents": "cos(${1:arg})",
			"kind": "function",
			"details": "Cosine"
		},
		{
			"trigger": "cosh()",
			"contents": "cosh(${1:arg})",
			"kind": "function",
			"details": "Hyperbolic cosine"
		},
		{
			"trigger": "count()",
			"contents": "count(${1:var})",
			"kind": "function",
			"details": "Count all elements in an array, or something in an object"
		},
		{
			"trigger": "count_chars()",
			"contents": "count_chars(${1:string})",
			"kind": "function",
			"details": "Return information about characters used in a string"
		},
		{
			"trigger": "counter_bump()",
			"contents": "counter_bump(${1:offset})",
			"kind": "function",
			"details": "Update the current value of the basic counter"
		},
		{
			"trigger": "counter_bump_value()",
			"contents": "counter_bump_value(${1:counter}, ${2:offset})",
			"kind": "function",
			"details": "Change the current value of a counter resource"
		},
		{
			"trigger": "counter_create()",
			"contents": "counter_create(${1:name})",
			"kind": "function",
			"details": "Creates a counter which maintains a single numeric value"
		},
		{
			"trigger": "counter_get()",
			"contents": "counter_get()",
			"kind": "function",
			"details": "Get the current value of the basic counter"
		},
		{
			"trigger": "counter_get_meta()",
			"contents": "counter_get_meta(${1:counter}, ${2:attribute})",
			"kind": "function",
			"details": "Return a piece of metainformation about a counter resource"
		},
		{
			"trigger": "counter_get_named()",
			"contents": "counter_get_named(${1:name})",
			"kind": "function",
			"details": "Retrieve an existing named counter as a resource"
		},
		{
			"trigger": "counter_get_value()",
			"contents": "counter_get_value(${1:counter})",
			"kind": "function",
			"details": "Get the current value of a counter resource"
		},
		{
			"trigger": "counter_reset()",
			"contents": "counter_reset()",
			"kind": "function",
			"details": "Reset the current value of the basic counter"
		},
		{
			"trigger": "counter_reset_value()",
			"contents": "counter_reset_value(${1:counter})",
			"kind": "function",
			"details": "Reset the current value of a counter resource"
		},
		{
			"trigger": "crack_check()",
			"contents": "crack_check(${1:dictionary}, ${2:password})",
			"kind": "function",
			"details": "Performs an obscure check with the given password"
		},
		{
			"trigger": "crack_closedict()",
			"contents": "crack_closedict()",
			"kind": "function",
			"details": "Closes an open CrackLib dictionary"
		},
		{
			"trigger": "crack_getlastmessage()",
			"contents": "crack_getlastmessage()",
			"kind": "function",
			"details": "Returns the message from the last obscure check"
		},
		{
			"trigger": "crack_opendict()",
			"contents": "crack_opendict(${1:dictionary})",
			"kind": "function",
			"details": "Opens a new CrackLib dictionary"
		},
		{
			"trigger": "crc32()",
			"contents": "crc32(${1:str})",
			"kind": "function",
			"details": "Calculates the crc32 polynomial of a string"
		},
		{
			"trigger": "create_function()",
			"contents": "create_function(${1:args}, ${2:code})",
			"kind": "function",
			"details": "Create an anonymous (lambda-style) function"
		},
		{
			"trigger": "crypt()",
			"contents": "crypt(${1:str})",
			"kind": "function",
			"details": "One-way string hashing"
		},
		{
			"trigger": "ctype_alnum()",
			"contents": "ctype_alnum(${1:text})",
			"kind": "function",
			"details": "Check for alphanumeric character(s)"
		},
		{
			"trigger": "ctype_alpha()",
			"contents": "ctype_alpha(${1:text})",
			"kind": "function",
			"details": "Check for alphabetic character(s)"
		},
		{
			"trigger": "ctype_cntrl()",
			"contents": "ctype_cntrl(${1:text})",
			"kind": "function",
			"details": "Check for control character(s)"
		},
		{
			"trigger": "ctype_digit()",
			"contents": "ctype_digit(${1:text})",
			"kind": "function",
			"details": "Check for numeric character(s)"
		},
		{
			"trigger": "ctype_graph()",
			"contents": "ctype_graph(${1:text})",
			"kind": "function",
			"details": "Check for any printable character(s) except space"
		},
		{
			"trigger": "ctype_lower()",
			"contents": "ctype_lower(${1:text})",
			"kind": "function",
			"details": "Check for lowercase character(s)"
		},
		{
			"trigger": "ctype_print()",
			"contents": "ctype_print(${1:text})",
			"kind": "function",
			"details": "Check for printable character(s)"
		},
		{
			"trigger": "ctype_punct()",
			"contents": "ctype_punct(${1:text})",
			"kind": "function",
			"details": "Check for any printable character which is not whitespace or an alphanumeric character"
		},
		{
			"trigger": "ctype_space()",
			"contents": "ctype_space(${1:text})",
			"kind": "function",
			"details": "Check for whitespace character(s)"
		},
		{
			"trigger": "ctype_upper()",
			"contents": "ctype_upper(${1:text})",
			"kind": "function",
			"details": "Check for uppercase character(s)"
		},
		{
			"trigger": "ctype_xdigit()",
			"contents": "ctype_xdigit(${1:text})",
			"kind": "function",
			"details": "Check for character(s) representing a hexadecimal digit"
		},
		{
			"trigger": "cubrid_affected_rows()",
			"contents": "cubrid_affected_rows()",
			"kind": "function",
			"details": "Return the number of rows affected by the last SQL statement"
		},
		{
			"trigger": "cubrid_bind()",
			"contents": "cubrid_bind(${1:req_identifier}, ${2:bind_index}, ${3:bind_value})",
			"kind": "function",
			"details": "Bind variables to a prepared statement as parameters"
		},
		{
			"trigger": "cubrid_client_encoding()",
			"contents": "cubrid_client_encoding()",
			"kind": "function",
			"details": "Return the current CUBRID connection charset"
		},
		{
			"trigger": "cubrid_close()",
			"contents": "cubrid_close()",
			"kind": "function",
			"details": "Close CUBRID connection"
		},
		{
			"trigger": "cubrid_close_prepare()",
			"contents": "cubrid_close_prepare(${1:req_identifier})",
			"kind": "function",
			"details": "Close the request handle"
		},
		{
			"trigger": "cubrid_close_request()",
			"contents": "cubrid_close_request(${1:req_identifier})",
			"kind": "function",
			"details": "Close the request handle"
		},
		{
			"trigger": "cubrid_col_get()",
			"contents": "cubrid_col_get(${1:conn_identifier}, ${2:oid}, ${3:attr_name})",
			"kind": "function",
			"details": "Get contents of collection type column using OID"
		},
		{
			"trigger": "cubrid_col_size()",
			"contents": "cubrid_col_size(${1:conn_identifier}, ${2:oid}, ${3:attr_name})",
			"kind": "function",
			"details": "Get the number of elements in collection type column using OID"
		},
		{
			"trigger": "cubrid_column_names()",
			"contents": "cubrid_column_names(${1:req_identifier})",
			"kind": "function",
			"details": "Get the column names in result"
		},
		{
			"trigger": "cubrid_column_types()",
			"contents": "cubrid_column_types(${1:req_identifier})",
			"kind": "function",
			"details": "Get column types in result"
		},
		{
			"trigger": "cubrid_commit()",
			"contents": "cubrid_commit(${1:conn_identifier})",
			"kind": "function",
			"details": "Commit a transaction"
		},
		{
			"trigger": "cubrid_connect()",
			"contents": "cubrid_connect(${1:host}, ${2:port}, ${3:dbname})",
			"kind": "function",
			"details": "Open a connection to a CUBRID Server"
		},
		{
			"trigger": "cubrid_connect_with_url()",
			"contents": "cubrid_connect_with_url(${1:conn_url})",
			"kind": "function",
			"details": "Establish the environment for connecting to CUBRID server"
		},
		{
			"trigger": "cubrid_current_oid()",
			"contents": "cubrid_current_oid(${1:req_identifier})",
			"kind": "function",
			"details": "Get OID of the current cursor location"
		},
		{
			"trigger": "cubrid_data_seek()",
			"contents": "cubrid_data_seek(${1:req_identifier}, ${2:row_number})",
			"kind": "function",
			"details": "Move the internal row pointer of the CUBRID result"
		},
		{
			"trigger": "cubrid_db_name()",
			"contents": "cubrid_db_name(${1:result}, ${2:index})",
			"kind": "function",
			"details": "Get db name from results of cubrid_list_dbs"
		},
		{
			"trigger": "cubrid_disconnect()",
			"contents": "cubrid_disconnect(${1:conn_identifier})",
			"kind": "function",
			"details": "Close a database connection"
		},
		{
			"trigger": "cubrid_drop()",
			"contents": "cubrid_drop(${1:conn_identifier}, ${2:oid})",
			"kind": "function",
			"details": "Delete an instance using OID"
		},
		{
			"trigger": "cubrid_errno()",
			"contents": "cubrid_errno()",
			"kind": "function",
			"details": "Return the numerical value of the error message from previous CUBRID operation"
		},
		{
			"trigger": "cubrid_error()",
			"contents": "cubrid_error()",
			"kind": "function",
			"details": "Get the error message"
		},
		{
			"trigger": "cubrid_error_code()",
			"contents": "cubrid_error_code()",
			"kind": "function",
			"details": "Get error code for the most recent function call"
		},
		{
			"trigger": "cubrid_error_code_facility()",
			"contents": "cubrid_error_code_facility()",
			"kind": "function",
			"details": "Get the facility code of error"
		},
		{
			"trigger": "cubrid_error_msg()",
			"contents": "cubrid_error_msg()",
			"kind": "function",
			"details": "Get last error message for the most recent function call"
		},
		{
			"trigger": "cubrid_execute()",
			"contents": "cubrid_execute(${1:conn_identifier}, ${2:SQL})",
			"kind": "function",
			"details": "Execute a prepared SQL statement"
		},
		{
			"trigger": "cubrid_fetch()",
			"contents": "cubrid_fetch(${1:result})",
			"kind": "function",
			"details": "Fetch the next row from a result set"
		},
		{
			"trigger": "cubrid_fetch_array()",
			"contents": "cubrid_fetch_array(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an associative array, a numeric array, or both"
		},
		{
			"trigger": "cubrid_fetch_assoc()",
			"contents": "cubrid_fetch_assoc(${1:result})",
			"kind": "function",
			"details": "Return the associative array that corresponds to the fetched row"
		},
		{
			"trigger": "cubrid_fetch_field()",
			"contents": "cubrid_fetch_field(${1:result})",
			"kind": "function",
			"details": "Get column information from a result and return as an object"
		},
		{
			"trigger": "cubrid_fetch_lengths()",
			"contents": "cubrid_fetch_lengths(${1:result})",
			"kind": "function",
			"details": "Return an array with the lengths of the values of each field from the current row"
		},
		{
			"trigger": "cubrid_fetch_object()",
			"contents": "cubrid_fetch_object(${1:result})",
			"kind": "function",
			"details": "Fetch the next row and return it as an object"
		},
		{
			"trigger": "cubrid_fetch_row()",
			"contents": "cubrid_fetch_row(${1:result})",
			"kind": "function",
			"details": "Return a numerical array with the values of the current row"
		},
		{
			"trigger": "cubrid_field_flags()",
			"contents": "cubrid_field_flags(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Return a string with the flags of the given field offset"
		},
		{
			"trigger": "cubrid_field_len()",
			"contents": "cubrid_field_len(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Get the maximum length of the specified field"
		},
		{
			"trigger": "cubrid_field_name()",
			"contents": "cubrid_field_name(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Return the name of the specified field index"
		},
		{
			"trigger": "cubrid_field_seek()",
			"contents": "cubrid_field_seek(${1:result})",
			"kind": "function",
			"details": "Move the result set cursor to the specified field offset"
		},
		{
			"trigger": "cubrid_field_table()",
			"contents": "cubrid_field_table(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Return the name of the table of the specified field"
		},
		{
			"trigger": "cubrid_field_type()",
			"contents": "cubrid_field_type(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Return the type of the column corresponding to the given field offset"
		},
		{
			"trigger": "cubrid_free_result()",
			"contents": "cubrid_free_result(${1:req_identifier})",
			"kind": "function",
			"details": "Free the memory occupied by the result data"
		},
		{
			"trigger": "cubrid_get()",
			"contents": "cubrid_get(${1:conn_identifier}, ${2:oid})",
			"kind": "function",
			"details": "Get a column using OID"
		},
		{
			"trigger": "cubrid_get_charset()",
			"contents": "cubrid_get_charset(${1:conn_identifier})",
			"kind": "function",
			"details": "Return the current CUBRID connection charset"
		},
		{
			"trigger": "cubrid_get_class_name()",
			"contents": "cubrid_get_class_name(${1:conn_identifier}, ${2:oid})",
			"kind": "function",
			"details": "Get the class name using OID"
		},
		{
			"trigger": "cubrid_get_client_info()",
			"contents": "cubrid_get_client_info()",
			"kind": "function",
			"details": "Return the client library version"
		},
		{
			"trigger": "cubrid_get_db_parameter()",
			"contents": "cubrid_get_db_parameter(${1:conn_identifier})",
			"kind": "function",
			"details": "Returns the CUBRID database parameters"
		},
		{
			"trigger": "cubrid_get_server_info()",
			"contents": "cubrid_get_server_info(${1:conn_identifier})",
			"kind": "function",
			"details": "Return the CUBRID server version"
		},
		{
			"trigger": "cubrid_insert_id()",
			"contents": "cubrid_insert_id(${1:class_name})",
			"kind": "function",
			"details": "Return the ID generated for the last updated AUTO_INCREMENT column"
		},
		{
			"trigger": "cubrid_is_instance()",
			"contents": "cubrid_is_instance(${1:conn_identifier}, ${2:oid})",
			"kind": "function",
			"details": "Check whether the instance pointed by OID exists"
		},
		{
			"trigger": "cubrid_list_dbs()",
			"contents": "cubrid_list_dbs(${1:conn_identifier})",
			"kind": "function",
			"details": "Return an array with the list of all existing CUBRID databases"
		},
		{
			"trigger": "cubrid_load_from_glo()",
			"contents": "cubrid_load_from_glo(${1:conn_identifier}, ${2:oid}, ${3:file_name})",
			"kind": "function",
			"details": "Read data from a GLO instance and save it in a file"
		},
		{
			"trigger": "cubrid_lob_close()",
			"contents": "cubrid_lob_close(${1:lob_identifier_array})",
			"kind": "function",
			"details": "Close BLOB/CLOB data"
		},
		{
			"trigger": "cubrid_lob_export()",
			"contents": "cubrid_lob_export(${1:conn_identifier}, ${2:lob_identifier}, ${3:path_name})",
			"kind": "function",
			"details": "Export BLOB/CLOB data to file"
		},
		{
			"trigger": "cubrid_lob_get()",
			"contents": "cubrid_lob_get(${1:conn_identifier}, ${2:SQL})",
			"kind": "function",
			"details": "Get BLOB/CLOB data"
		},
		{
			"trigger": "cubrid_lob_send()",
			"contents": "cubrid_lob_send(${1:conn_identifier}, ${2:lob_identifier})",
			"kind": "function",
			"details": "Read BLOB/CLOB data and send straight to browser"
		},
		{
			"trigger": "cubrid_lob_size()",
			"contents": "cubrid_lob_size(${1:lob_identifier})",
			"kind": "function",
			"details": "Get BLOB/CLOB data size"
		},
		{
			"trigger": "cubrid_lock_read()",
			"contents": "cubrid_lock_read(${1:conn_identifier}, ${2:oid})",
			"kind": "function",
			"details": "Set a read lock on the given OID"
		},
		{
			"trigger": "cubrid_lock_write()",
			"contents": "cubrid_lock_write(${1:conn_identifier}, ${2:oid})",
			"kind": "function",
			"details": "Set a write lock on the given OID"
		},
		{
			"trigger": "cubrid_move_cursor()",
			"contents": "cubrid_move_cursor(${1:req_identifier}, ${2:offset})",
			"kind": "function",
			"details": "Move the cursor in the result"
		},
		{
			"trigger": "cubrid_new_glo()",
			"contents": "cubrid_new_glo(${1:conn_identifier}, ${2:class_name}, ${3:file_name})",
			"kind": "function",
			"details": "Create a glo instance"
		},
		{
			"trigger": "cubrid_num_cols()",
			"contents": "cubrid_num_cols(${1:req_identifier})",
			"kind": "function",
			"details": "Return the number of columns in the result set"
		},
		{
			"trigger": "cubrid_num_fields()",
			"contents": "cubrid_num_fields(${1:result})",
			"kind": "function",
			"details": "Return the number of columns in the result set"
		},
		{
			"trigger": "cubrid_num_rows()",
			"contents": "cubrid_num_rows(${1:req_identifier})",
			"kind": "function",
			"details": "Get the number of rows in the result set"
		},
		{
			"trigger": "cubrid_ping()",
			"contents": "cubrid_ping()",
			"kind": "function",
			"details": "Ping a server connection or reconnect if there is no connection"
		},
		{
			"trigger": "cubrid_prepare()",
			"contents": "cubrid_prepare(${1:conn_identifier}, ${2:prepare_stmt})",
			"kind": "function",
			"details": "Prepare a SQL statement for execution"
		},
		{
			"trigger": "cubrid_put()",
			"contents": "cubrid_put(${1:conn_identifier}, ${2:oid})",
			"kind": "function",
			"details": "Update a column using OID"
		},
		{
			"trigger": "cubrid_query()",
			"contents": "cubrid_query(${1:query})",
			"kind": "function",
			"details": "Send a CUBRID query"
		},
		{
			"trigger": "cubrid_real_escape_string()",
			"contents": "cubrid_real_escape_string(${1:unescaped_string})",
			"kind": "function",
			"details": "Escape special characters in a string for use in an SQL statement"
		},
		{
			"trigger": "cubrid_result()",
			"contents": "cubrid_result(${1:result}, ${2:row})",
			"kind": "function",
			"details": "Return the value of a specific field in a specific row"
		},
		{
			"trigger": "cubrid_rollback()",
			"contents": "cubrid_rollback(${1:conn_identifier})",
			"kind": "function",
			"details": "Roll back a transaction"
		},
		{
			"trigger": "cubrid_save_to_glo()",
			"contents": "cubrid_save_to_glo(${1:conn_identifier}, ${2:oid}, ${3:file_name})",
			"kind": "function",
			"details": "Save requested file in a GLO instance"
		},
		{
			"trigger": "cubrid_schema()",
			"contents": "cubrid_schema(${1:conn_identifier}, ${2:schema_type})",
			"kind": "function",
			"details": "Get the requested schema information"
		},
		{
			"trigger": "cubrid_send_glo()",
			"contents": "cubrid_send_glo(${1:conn_identifier}, ${2:oid})",
			"kind": "function",
			"details": "Read data from glo and send it to std output"
		},
		{
			"trigger": "cubrid_seq_drop()",
			"contents": "cubrid_seq_drop(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:index})",
			"kind": "function",
			"details": "Delete an element from sequence type column using OID"
		},
		{
			"trigger": "cubrid_seq_insert()",
			"contents": "cubrid_seq_insert(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:index}, ${5:seq_element})",
			"kind": "function",
			"details": "Insert an element to a sequence type column using OID"
		},
		{
			"trigger": "cubrid_seq_put()",
			"contents": "cubrid_seq_put(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:index}, ${5:seq_element})",
			"kind": "function",
			"details": "Update the element value of sequence type column using OID"
		},
		{
			"trigger": "cubrid_set_add()",
			"contents": "cubrid_set_add(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:set_element})",
			"kind": "function",
			"details": "Insert a single element to set type column using OID"
		},
		{
			"trigger": "cubrid_set_drop()",
			"contents": "cubrid_set_drop(${1:conn_identifier}, ${2:oid}, ${3:attr_name}, ${4:set_element})",
			"kind": "function",
			"details": "Delete an element from set type column using OID"
		},
		{
			"trigger": "cubrid_unbuffered_query()",
			"contents": "cubrid_unbuffered_query(${1:query})",
			"kind": "function",
			"details": "Perform a query without fetching the results into memory"
		},
		{
			"trigger": "cubrid_version()",
			"contents": "cubrid_version()",
			"kind": "function",
			"details": "Get the CUBRID PHP module's version"
		},
		{
			"trigger": "curl_close()",
			"contents": "curl_close(${1:ch})",
			"kind": "function",
			"details": "Close a cURL session"
		},
		{
			"trigger": "curl_copy_handle()",
			"contents": "curl_copy_handle(${1:ch})",
			"kind": "function",
			"details": "Copy a cURL handle along with all of its preferences"
		},
		{
			"trigger": "curl_errno()",
			"contents": "curl_errno(${1:ch})",
			"kind": "function",
			"details": "Return the last error number"
		},
		{
			"trigger": "curl_error()",
			"contents": "curl_error(${1:ch})",
			"kind": "function",
			"details": "Return a string containing the last error for the current session"
		},
		{
			"trigger": "curl_exec()",
			"contents": "curl_exec(${1:ch})",
			"kind": "function",
			"details": "Perform a cURL session"
		},
		{
			"trigger": "curl_getinfo()",
			"contents": "curl_getinfo(${1:ch})",
			"kind": "function",
			"details": "Get information regarding a specific transfer"
		},
		{
			"trigger": "curl_init()",
			"contents": "curl_init()",
			"kind": "function",
			"details": "Initialize a cURL session"
		},
		{
			"trigger": "curl_multi_add_handle()",
			"contents": "curl_multi_add_handle(${1:mh}, ${2:ch})",
			"kind": "function",
			"details": "Add a normal cURL handle to a cURL multi handle"
		},
		{
			"trigger": "curl_multi_close()",
			"contents": "curl_multi_close(${1:mh})",
			"kind": "function",
			"details": "Close a set of cURL handles"
		},
		{
			"trigger": "curl_multi_exec()",
			"contents": "curl_multi_exec(${1:mh}, ${2:still_running})",
			"kind": "function",
			"details": "Run the sub-connections of the current cURL handle"
		},
		{
			"trigger": "curl_multi_getcontent()",
			"contents": "curl_multi_getcontent(${1:ch})",
			"kind": "function",
			"details": "Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set"
		},
		{
			"trigger": "curl_multi_info_read()",
			"contents": "curl_multi_info_read(${1:mh})",
			"kind": "function",
			"details": "Get information about the current transfers"
		},
		{
			"trigger": "curl_multi_init()",
			"contents": "curl_multi_init()",
			"kind": "function",
			"details": "Returns a new cURL multi handle"
		},
		{
			"trigger": "curl_multi_remove_handle()",
			"contents": "curl_multi_remove_handle(${1:mh}, ${2:ch})",
			"kind": "function",
			"details": "Remove a multi handle from a set of cURL handles"
		},
		{
			"trigger": "curl_multi_select()",
			"contents": "curl_multi_select(${1:mh})",
			"kind": "function",
			"details": "Wait for activity on any curl_multi connection"
		},
		{
			"trigger": "curl_setopt()",
			"contents": "curl_setopt(${1:ch}, ${2:option}, ${3:value})",
			"kind": "function",
			"details": "Set an option for a cURL transfer"
		},
		{
			"trigger": "curl_setopt_array()",
			"contents": "curl_setopt_array(${1:ch}, ${2:options})",
			"kind": "function",
			"details": "Set multiple options for a cURL transfer"
		},
		{
			"trigger": "curl_version()",
			"contents": "curl_version()",
			"kind": "function",
			"details": "Gets cURL version information"
		},
		{
			"trigger": "current()",
			"contents": "current(${1:array})",
			"kind": "function",
			"details": "Return the current element in an array"
		},
		{
			"trigger": "cyrus_authenticate()",
			"contents": "cyrus_authenticate(${1:connection})",
			"kind": "function",
			"details": "Authenticate against a Cyrus IMAP server"
		},
		{
			"trigger": "cyrus_bind()",
			"contents": "cyrus_bind(${1:connection}, ${2:callbacks})",
			"kind": "function",
			"details": "Bind callbacks to a Cyrus IMAP connection"
		},
		{
			"trigger": "cyrus_close()",
			"contents": "cyrus_close(${1:connection})",
			"kind": "function",
			"details": "Close connection to a Cyrus IMAP server"
		},
		{
			"trigger": "cyrus_connect()",
			"contents": "cyrus_connect()",
			"kind": "function",
			"details": "Connect to a Cyrus IMAP server"
		},
		{
			"trigger": "cyrus_query()",
			"contents": "cyrus_query(${1:connection}, ${2:query})",
			"kind": "function",
			"details": "Send a query to a Cyrus IMAP server"
		},
		{
			"trigger": "cyrus_unbind()",
			"contents": "cyrus_unbind(${1:connection}, ${2:trigger_name})",
			"kind": "function",
			"details": "Unbind ..."
		},
		{
			"trigger": "date()",
			"contents": "date(${1:format})",
			"kind": "function",
			"details": "Format a local time/date"
		},
		{
			"trigger": "date_add()",
			"contents": "date_add()",
			"kind": "function",
			"details": "Alias of DateTime::add()"
		},
		{
			"trigger": "date_create()",
			"contents": "date_create()",
			"kind": "function",
			"details": "Alias of DateTime::__construct()"
		},
		{
			"trigger": "date_create_from_format()",
			"contents": "date_create_from_format()",
			"kind": "function",
			"details": "Alias of DateTime::createFromFormat()"
		},
		{
			"trigger": "date_date_set()",
			"contents": "date_date_set()",
			"kind": "function",
			"details": "Alias of DateTime::setDate()"
		},
		{
			"trigger": "date_default_timezone_get()",
			"contents": "date_default_timezone_get()",
			"kind": "function",
			"details": "Gets the default timezone used by all date/time functions in a script"
		},
		{
			"trigger": "date_default_timezone_set()",
			"contents": "date_default_timezone_set(${1:timezone_identifier})",
			"kind": "function",
			"details": "Sets the default timezone used by all date/time functions in a script"
		},
		{
			"trigger": "date_diff()",
			"contents": "date_diff()",
			"kind": "function",
			"details": "Alias of DateTime::diff()"
		},
		{
			"trigger": "date_format()",
			"contents": "date_format()",
			"kind": "function",
			"details": "Alias of DateTime::format()"
		},
		{
			"trigger": "date_get_last_errors()",
			"contents": "date_get_last_errors()",
			"kind": "function",
			"details": "Alias of DateTime::getLastErrors()"
		},
		{
			"trigger": "date_interval_create_from_date_string()",
			"contents": "date_interval_create_from_date_string()",
			"kind": "function",
			"details": "Alias of DateInterval::createFromDateString()"
		},
		{
			"trigger": "date_interval_format()",
			"contents": "date_interval_format()",
			"kind": "function",
			"details": "Alias of DateInterval::format()"
		},
		{
			"trigger": "date_isodate_set()",
			"contents": "date_isodate_set()",
			"kind": "function",
			"details": "Alias of DateTime::setISODate()"
		},
		{
			"trigger": "date_modify()",
			"contents": "date_modify()",
			"kind": "function",
			"details": "Alias of DateTime::modify()"
		},
		{
			"trigger": "date_offset_get()",
			"contents": "date_offset_get()",
			"kind": "function",
			"details": "Alias of DateTime::getOffset()"
		},
		{
			"trigger": "date_parse()",
			"contents": "date_parse(${1:date})",
			"kind": "function",
			"details": "Returns associative array with detailed info about given date"
		},
		{
			"trigger": "date_parse_from_format()",
			"contents": "date_parse_from_format(${1:format}, ${2:date})",
			"kind": "function",
			"details": "Get info about given date formatted according to the specified format"
		},
		{
			"trigger": "date_sub()",
			"contents": "date_sub()",
			"kind": "function",
			"details": "Alias of DateTime::sub()"
		},
		{
			"trigger": "date_sun_info()",
			"contents": "date_sun_info(${1:time}, ${2:latitude}, ${3:longitude})",
			"kind": "function",
			"details": "Returns an array with information about sunset/sunrise and twilight begin/end"
		},
		{
			"trigger": "date_sunrise()",
			"contents": "date_sunrise(${1:timestamp})",
			"kind": "function",
			"details": "Returns time of sunrise for a given day and location"
		},
		{
			"trigger": "date_sunset()",
			"contents": "date_sunset(${1:timestamp})",
			"kind": "function",
			"details": "Returns time of sunset for a given day and location"
		},
		{
			"trigger": "date_time_set()",
			"contents": "date_time_set()",
			"kind": "function",
			"details": "Alias of DateTime::setTime()"
		},
		{
			"trigger": "date_timestamp_get()",
			"contents": "date_timestamp_get()",
			"kind": "function",
			"details": "Alias of DateTime::getTimestamp()"
		},
		{
			"trigger": "date_timestamp_set()",
			"contents": "date_timestamp_set()",
			"kind": "function",
			"details": "Alias of DateTime::setTimestamp()"
		},
		{
			"trigger": "date_timezone_get()",
			"contents": "date_timezone_get()",
			"kind": "function",
			"details": "Alias of DateTime::getTimezone()"
		},
		{
			"trigger": "date_timezone_set()",
			"contents": "date_timezone_set()",
			"kind": "function",
			"details": "Alias of DateTime::setTimezone()"
		},
		{
			"trigger": "db2_autocommit()",
			"contents": "db2_autocommit(${1:connection})",
			"kind": "function",
			"details": "Returns or sets the AUTOCOMMIT state for a database connection"
		},
		{
			"trigger": "db2_bind_param()",
			"contents": "db2_bind_param(${1:stmt}, ${2:parameter-number}, ${3:variable-name})",
			"kind": "function",
			"details": "Binds a PHP variable to an SQL statement parameter"
		},
		{
			"trigger": "db2_client_info()",
			"contents": "db2_client_info(${1:connection})",
			"kind": "function",
			"details": "Returns an object with properties that describe the DB2 database client"
		},
		{
			"trigger": "db2_close()",
			"contents": "db2_close(${1:connection})",
			"kind": "function",
			"details": "Closes a database connection"
		},
		{
			"trigger": "db2_column_privileges()",
			"contents": "db2_column_privileges(${1:connection})",
			"kind": "function",
			"details": "Returns a result set listing the columns and associated privileges for a table"
		},
		{
			"trigger": "db2_columns()",
			"contents": "db2_columns(${1:connection})",
			"kind": "function",
			"details": "Returns a result set listing the columns and associated metadata for a table"
		},
		{
			"trigger": "db2_commit()",
			"contents": "db2_commit(${1:connection})",
			"kind": "function",
			"details": "Commits a transaction"
		},
		{
			"trigger": "db2_conn_error()",
			"contents": "db2_conn_error()",
			"kind": "function",
			"details": "Returns a string containing the SQLSTATE returned by the last connection attempt"
		},
		{
			"trigger": "db2_conn_errormsg()",
			"contents": "db2_conn_errormsg()",
			"kind": "function",
			"details": "Returns the last connection error message and SQLCODE value"
		},
		{
			"trigger": "db2_connect()",
			"contents": "db2_connect(${1:database}, ${2:username}, ${3:password})",
			"kind": "function",
			"details": "Returns a connection to a database"
		},
		{
			"trigger": "db2_cursor_type()",
			"contents": "db2_cursor_type(${1:stmt})",
			"kind": "function",
			"details": "Returns the cursor type used by a statement resource"
		},
		{
			"trigger": "db2_escape_string()",
			"contents": "db2_escape_string(${1:string_literal})",
			"kind": "function",
			"details": "Used to escape certain characters"
		},
		{
			"trigger": "db2_exec()",
			"contents": "db2_exec(${1:connection}, ${2:statement})",
			"kind": "function",
			"details": "Executes an SQL statement directly"
		},
		{
			"trigger": "db2_execute()",
			"contents": "db2_execute(${1:stmt})",
			"kind": "function",
			"details": "Executes a prepared SQL statement"
		},
		{
			"trigger": "db2_fetch_array()",
			"contents": "db2_fetch_array(${1:stmt})",
			"kind": "function",
			"details": "Returns an array, indexed by column position, representing a row in a result set"
		},
		{
			"trigger": "db2_fetch_assoc()",
			"contents": "db2_fetch_assoc(${1:stmt})",
			"kind": "function",
			"details": "Returns an array, indexed by column name, representing a row in a result set"
		},
		{
			"trigger": "db2_fetch_both()",
			"contents": "db2_fetch_both(${1:stmt})",
			"kind": "function",
			"details": "Returns an array, indexed by both column name and position, representing a row in a result set"
		},
		{
			"trigger": "db2_fetch_object()",
			"contents": "db2_fetch_object(${1:stmt})",
			"kind": "function",
			"details": "Returns an object with properties representing columns in the fetched row"
		},
		{
			"trigger": "db2_fetch_row()",
			"contents": "db2_fetch_row(${1:stmt})",
			"kind": "function",
			"details": "Sets the result set pointer to the next row or requested row"
		},
		{
			"trigger": "db2_field_display_size()",
			"contents": "db2_field_display_size(${1:stmt}, ${2:column})",
			"kind": "function",
			"details": "Returns the maximum number of bytes required to display a column"
		},
		{
			"trigger": "db2_field_name()",
			"contents": "db2_field_name(${1:stmt}, ${2:column})",
			"kind": "function",
			"details": "Returns the name of the column in the result set"
		},
		{
			"trigger": "db2_field_num()",
			"contents": "db2_field_num(${1:stmt}, ${2:column})",
			"kind": "function",
			"details": "Returns the position of the named column in a result set"
		},
		{
			"trigger": "db2_field_precision()",
			"contents": "db2_field_precision(${1:stmt}, ${2:column})",
			"kind": "function",
			"details": "Returns the precision of the indicated column in a result set"
		},
		{
			"trigger": "db2_field_scale()",
			"contents": "db2_field_scale(${1:stmt}, ${2:column})",
			"kind": "function",
			"details": "Returns the scale of the indicated column in a result set"
		},
		{
			"trigger": "db2_field_type()",
			"contents": "db2_field_type(${1:stmt}, ${2:column})",
			"kind": "function",
			"details": "Returns the data type of the indicated column in a result set"
		},
		{
			"trigger": "db2_field_width()",
			"contents": "db2_field_width(${1:stmt}, ${2:column})",
			"kind": "function",
			"details": "Returns the width of the current value of the indicated column in a result set"
		},
		{
			"trigger": "db2_foreign_keys()",
			"contents": "db2_foreign_keys(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table-name})",
			"kind": "function",
			"details": "Returns a result set listing the foreign keys for a table"
		},
		{
			"trigger": "db2_free_result()",
			"contents": "db2_free_result(${1:stmt})",
			"kind": "function",
			"details": "Frees resources associated with a result set"
		},
		{
			"trigger": "db2_free_stmt()",
			"contents": "db2_free_stmt(${1:stmt})",
			"kind": "function",
			"details": "Frees resources associated with the indicated statement resource"
		},
		{
			"trigger": "db2_get_option()",
			"contents": "db2_get_option(${1:resource}, ${2:option})",
			"kind": "function",
			"details": "Retrieves an option value for a statement resource or a connection resource"
		},
		{
			"trigger": "db2_last_insert_id()",
			"contents": "db2_last_insert_id(${1:resource})",
			"kind": "function",
			"details": "Returns the auto generated ID of the last insert query that successfully executed on this connection"
		},
		{
			"trigger": "db2_lob_read()",
			"contents": "db2_lob_read(${1:stmt}, ${2:colnum}, ${3:length})",
			"kind": "function",
			"details": "Gets a user defined size of LOB files with each invocation"
		},
		{
			"trigger": "db2_next_result()",
			"contents": "db2_next_result(${1:stmt})",
			"kind": "function",
			"details": "Requests the next result set from a stored procedure"
		},
		{
			"trigger": "db2_num_fields()",
			"contents": "db2_num_fields(${1:stmt})",
			"kind": "function",
			"details": "Returns the number of fields contained in a result set"
		},
		{
			"trigger": "db2_num_rows()",
			"contents": "db2_num_rows(${1:stmt})",
			"kind": "function",
			"details": "Returns the number of rows affected by an SQL statement"
		},
		{
			"trigger": "db2_pclose()",
			"contents": "db2_pclose(${1:resource})",
			"kind": "function",
			"details": "Closes a persistent database connection"
		},
		{
			"trigger": "db2_pconnect()",
			"contents": "db2_pconnect(${1:database}, ${2:username}, ${3:password})",
			"kind": "function",
			"details": "Returns a persistent connection to a database"
		},
		{
			"trigger": "db2_prepare()",
			"contents": "db2_prepare(${1:connection}, ${2:statement})",
			"kind": "function",
			"details": "Prepares an SQL statement to be executed"
		},
		{
			"trigger": "db2_primary_keys()",
			"contents": "db2_primary_keys(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table-name})",
			"kind": "function",
			"details": "Returns a result set listing primary keys for a table"
		},
		{
			"trigger": "db2_procedure_columns()",
			"contents": "db2_procedure_columns(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:procedure}, ${5:parameter})",
			"kind": "function",
			"details": "Returns a result set listing stored procedure parameters"
		},
		{
			"trigger": "db2_procedures()",
			"contents": "db2_procedures(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:procedure})",
			"kind": "function",
			"details": "Returns a result set listing the stored procedures registered in a database"
		},
		{
			"trigger": "db2_result()",
			"contents": "db2_result(${1:stmt}, ${2:column})",
			"kind": "function",
			"details": "Returns a single column from a row in the result set"
		},
		{
			"trigger": "db2_rollback()",
			"contents": "db2_rollback(${1:connection})",
			"kind": "function",
			"details": "Rolls back a transaction"
		},
		{
			"trigger": "db2_server_info()",
			"contents": "db2_server_info(${1:connection})",
			"kind": "function",
			"details": "Returns an object with properties that describe the DB2 database server"
		},
		{
			"trigger": "db2_set_option()",
			"contents": "db2_set_option(${1:resource}, ${2:options}, ${3:type})",
			"kind": "function",
			"details": "Set options for connection or statement resources"
		},
		{
			"trigger": "db2_special_columns()",
			"contents": "db2_special_columns(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table_name}, ${5:scope})",
			"kind": "function",
			"details": "Returns a result set listing the unique row identifier columns for a table"
		},
		{
			"trigger": "db2_statistics()",
			"contents": "db2_statistics(${1:connection}, ${2:qualifier}, ${3:schema}, ${4:table-name}, ${5:unique})",
			"kind": "function",
			"details": "Returns a result set listing the index and statistics for a table"
		},
		{
			"trigger": "db2_stmt_error()",
			"contents": "db2_stmt_error()",
			"kind": "function",
			"details": "Returns a string containing the SQLSTATE returned by an SQL statement"
		},
		{
			"trigger": "db2_stmt_errormsg()",
			"contents": "db2_stmt_errormsg()",
			"kind": "function",
			"details": "Returns a string containing the last SQL statement error message"
		},
		{
			"trigger": "db2_table_privileges()",
			"contents": "db2_table_privileges(${1:connection})",
			"kind": "function",
			"details": "Returns a result set listing the tables and associated privileges in a database"
		},
		{
			"trigger": "db2_tables()",
			"contents": "db2_tables(${1:connection})",
			"kind": "function",
			"details": "Returns a result set listing the tables and associated metadata in a database"
		},
		{
			"trigger": "dba_close()",
			"contents": "dba_close(${1:handle})",
			"kind": "function",
			"details": "Close a DBA database"
		},
		{
			"trigger": "dba_delete()",
			"contents": "dba_delete(${1:key}, ${2:handle})",
			"kind": "function",
			"details": "Delete DBA entry specified by key"
		},
		{
			"trigger": "dba_exists()",
			"contents": "dba_exists(${1:key}, ${2:handle})",
			"kind": "function",
			"details": "Check whether key exists"
		},
		{
			"trigger": "dba_fetch()",
			"contents": "dba_fetch(${1:key}, ${2:handle})",
			"kind": "function",
			"details": "Fetch data specified by key"
		},
		{
			"trigger": "dba_firstkey()",
			"contents": "dba_firstkey(${1:handle})",
			"kind": "function",
			"details": "Fetch first key"
		},
		{
			"trigger": "dba_handlers()",
			"contents": "dba_handlers()",
			"kind": "function",
			"details": "List all the handlers available"
		},
		{
			"trigger": "dba_insert()",
			"contents": "dba_insert(${1:key}, ${2:value}, ${3:handle})",
			"kind": "function",
			"details": "Insert entry"
		},
		{
			"trigger": "dba_key_split()",
			"contents": "dba_key_split(${1:key})",
			"kind": "function",
			"details": "Splits a key in string representation into array representation"
		},
		{
			"trigger": "dba_list()",
			"contents": "dba_list()",
			"kind": "function",
			"details": "List all open database files"
		},
		{
			"trigger": "dba_nextkey()",
			"contents": "dba_nextkey(${1:handle})",
			"kind": "function",
			"details": "Fetch next key"
		},
		{
			"trigger": "dba_open()",
			"contents": "dba_open(${1:path}, ${2:mode})",
			"kind": "function",
			"details": "Open database"
		},
		{
			"trigger": "dba_optimize()",
			"contents": "dba_optimize(${1:handle})",
			"kind": "function",
			"details": "Optimize database"
		},
		{
			"trigger": "dba_popen()",
			"contents": "dba_popen(${1:path}, ${2:mode})",
			"kind": "function",
			"details": "Open database persistently"
		},
		{
			"trigger": "dba_replace()",
			"contents": "dba_replace(${1:key}, ${2:value}, ${3:handle})",
			"kind": "function",
			"details": "Replace or insert entry"
		},
		{
			"trigger": "dba_sync()",
			"contents": "dba_sync(${1:handle})",
			"kind": "function",
			"details": "Synchronize database"
		},
		{
			"trigger": "dbase_add_record()",
			"contents": "dbase_add_record(${1:dbase_identifier}, ${2:record})",
			"kind": "function",
			"details": "Adds a record to a database"
		},
		{
			"trigger": "dbase_close()",
			"contents": "dbase_close(${1:dbase_identifier})",
			"kind": "function",
			"details": "Closes a database"
		},
		{
			"trigger": "dbase_create()",
			"contents": "dbase_create(${1:filename}, ${2:fields})",
			"kind": "function",
			"details": "Creates a database"
		},
		{
			"trigger": "dbase_delete_record()",
			"contents": "dbase_delete_record(${1:dbase_identifier}, ${2:record_number})",
			"kind": "function",
			"details": "Deletes a record from a database"
		},
		{
			"trigger": "dbase_get_header_info()",
			"contents": "dbase_get_header_info(${1:dbase_identifier})",
			"kind": "function",
			"details": "Gets the header info of a database"
		},
		{
			"trigger": "dbase_get_record()",
			"contents": "dbase_get_record(${1:dbase_identifier}, ${2:record_number})",
			"kind": "function",
			"details": "Gets a record from a database as an indexed array"
		},
		{
			"trigger": "dbase_get_record_with_names()",
			"contents": "dbase_get_record_with_names(${1:dbase_identifier}, ${2:record_number})",
			"kind": "function",
			"details": "Gets a record from a database as an associative array"
		},
		{
			"trigger": "dbase_numfields()",
			"contents": "dbase_numfields(${1:dbase_identifier})",
			"kind": "function",
			"details": "Gets the number of fields of a database"
		},
		{
			"trigger": "dbase_numrecords()",
			"contents": "dbase_numrecords(${1:dbase_identifier})",
			"kind": "function",
			"details": "Gets the number of records in a database"
		},
		{
			"trigger": "dbase_open()",
			"contents": "dbase_open(${1:filename}, ${2:mode})",
			"kind": "function",
			"details": "Opens a database"
		},
		{
			"trigger": "dbase_pack()",
			"contents": "dbase_pack(${1:dbase_identifier})",
			"kind": "function",
			"details": "Packs a database"
		},
		{
			"trigger": "dbase_replace_record()",
			"contents": "dbase_replace_record(${1:dbase_identifier}, ${2:record}, ${3:record_number})",
			"kind": "function",
			"details": "Replaces a record in a database"
		},
		{
			"trigger": "dbplus_add()",
			"contents": "dbplus_add(${1:relation}, ${2:tuple})",
			"kind": "function",
			"details": "Add a tuple to a relation"
		},
		{
			"trigger": "dbplus_aql()",
			"contents": "dbplus_aql(${1:query})",
			"kind": "function",
			"details": "Perform AQL query"
		},
		{
			"trigger": "dbplus_chdir()",
			"contents": "dbplus_chdir()",
			"kind": "function",
			"details": "Get/Set database virtual current directory"
		},
		{
			"trigger": "dbplus_close()",
			"contents": "dbplus_close(${1:relation})",
			"kind": "function",
			"details": "Close a relation"
		},
		{
			"trigger": "dbplus_curr()",
			"contents": "dbplus_curr(${1:relation}, ${2:tuple})",
			"kind": "function",
			"details": "Get current tuple from relation"
		},
		{
			"trigger": "dbplus_errcode()",
			"contents": "dbplus_errcode()",
			"kind": "function",
			"details": "Get error string for given errorcode or last error"
		},
		{
			"trigger": "dbplus_errno()",
			"contents": "dbplus_errno()",
			"kind": "function",
			"details": "Get error code for last operation"
		},
		{
			"trigger": "dbplus_find()",
			"contents": "dbplus_find(${1:relation}, ${2:constraints}, ${3:tuple})",
			"kind": "function",
			"details": "Set a constraint on a relation"
		},
		{
			"trigger": "dbplus_first()",
			"contents": "dbplus_first(${1:relation}, ${2:tuple})",
			"kind": "function",
			"details": "Get first tuple from relation"
		},
		{
			"trigger": "dbplus_flush()",
			"contents": "dbplus_flush(${1:relation})",
			"kind": "function",
			"details": "Flush all changes made on a relation"
		},
		{
			"trigger": "dbplus_freealllocks()",
			"contents": "dbplus_freealllocks()",
			"kind": "function",
			"details": "Free all locks held by this client"
		},
		{
			"trigger": "dbplus_freelock()",
			"contents": "dbplus_freelock(${1:relation}, ${2:tuple})",
			"kind": "function",
			"details": "Release write lock on tuple"
		},
		{
			"trigger": "dbplus_freerlocks()",
			"contents": "dbplus_freerlocks(${1:relation})",
			"kind": "function",
			"details": "Free all tuple locks on given relation"
		},
		{
			"trigger": "dbplus_getlock()",
			"contents": "dbplus_getlock(${1:relation}, ${2:tuple})",
			"kind": "function",
			"details": "Get a write lock on a tuple"
		},
		{
			"trigger": "dbplus_getunique()",
			"contents": "dbplus_getunique(${1:relation}, ${2:uniqueid})",
			"kind": "function",
			"details": "Get an id number unique to a relation"
		},
		{
			"trigger": "dbplus_info()",
			"contents": "dbplus_info(${1:relation}, ${2:key}, ${3:result})",
			"kind": "function",
			"details": "Get information about a relation"
		},
		{
			"trigger": "dbplus_last()",
			"contents": "dbplus_last(${1:relation}, ${2:tuple})",
			"kind": "function",
			"details": "Get last tuple from relation"
		},
		{
			"trigger": "dbplus_lockrel()",
			"contents": "dbplus_lockrel(${1:relation})",
			"kind": "function",
			"details": "Request write lock on relation"
		},
		{
			"trigger": "dbplus_next()",
			"contents": "dbplus_next(${1:relation}, ${2:tuple})",
			"kind": "function",
			"details": "Get next tuple from relation"
		},
		{
			"trigger": "dbplus_open()",
			"contents": "dbplus_open(${1:name})",
			"kind": "function",
			"details": "Open relation file"
		},
		{
			"trigger": "dbplus_prev()",
			"contents": "dbplus_prev(${1:relation}, ${2:tuple})",
			"kind": "function",
			"details": "Get previous tuple from relation"
		},
		{
			"trigger": "dbplus_rchperm()",
			"contents": "dbplus_rchperm(${1:relation}, ${2:mask}, ${3:user}, ${4:group})",
			"kind": "function",
			"details": "Change relation permissions"
		},
		{
			"trigger": "dbplus_rcreate()",
			"contents": "dbplus_rcreate(${1:name}, ${2:domlist})",
			"kind": "function",
			"details": "Creates a new DB++ relation"
		},
		{
			"trigger": "dbplus_rcrtexact()",
			"contents": "dbplus_rcrtexact(${1:name}, ${2:relation})",
			"kind": "function",
			"details": "Creates an exact but empty copy of a relation including indices"
		},
		{
			"trigger": "dbplus_rcrtlike()",
			"contents": "dbplus_rcrtlike(${1:name}, ${2:relation})",
			"kind": "function",
			"details": "Creates an empty copy of a relation with default indices"
		},
		{
			"trigger": "dbplus_resolve()",
			"contents": "dbplus_resolve(${1:relation_name})",
			"kind": "function",
			"details": "Resolve host information for relation"
		},
		{
			"trigger": "dbplus_restorepos()",
			"contents": "dbplus_restorepos(${1:relation}, ${2:tuple})",
			"kind": "function",
			"details": "Restore position"
		},
		{
			"trigger": "dbplus_rkeys()",
			"contents": "dbplus_rkeys(${1:relation}, ${2:domlist})",
			"kind": "function",
			"details": "Specify new primary key for a relation"
		},
		{
			"trigger": "dbplus_ropen()",
			"contents": "dbplus_ropen(${1:name})",
			"kind": "function",
			"details": "Open relation file local"
		},
		{
			"trigger": "dbplus_rquery()",
			"contents": "dbplus_rquery(${1:query})",
			"kind": "function",
			"details": "Perform local (raw) AQL query"
		},
		{
			"trigger": "dbplus_rrename()",
			"contents": "dbplus_rrename(${1:relation}, ${2:name})",
			"kind": "function",
			"details": "Rename a relation"
		},
		{
			"trigger": "dbplus_rsecindex()",
			"contents": "dbplus_rsecindex(${1:relation}, ${2:domlist}, ${3:type})",
			"kind": "function",
			"details": "Create a new secondary index for a relation"
		},
		{
			"trigger": "dbplus_runlink()",
			"contents": "dbplus_runlink(${1:relation})",
			"kind": "function",
			"details": "Remove relation from filesystem"
		},
		{
			"trigger": "dbplus_rzap()",
			"contents": "dbplus_rzap(${1:relation})",
			"kind": "function",
			"details": "Remove all tuples from relation"
		},
		{
			"trigger": "dbplus_savepos()",
			"contents": "dbplus_savepos(${1:relation})",
			"kind": "function",
			"details": "Save position"
		},
		{
			"trigger": "dbplus_setindex()",
			"contents": "dbplus_setindex(${1:relation}, ${2:idx_name})",
			"kind": "function",
			"details": "Set index"
		},
		{
			"trigger": "dbplus_setindexbynumber()",
			"contents": "dbplus_setindexbynumber(${1:relation}, ${2:idx_number})",
			"kind": "function",
			"details": "Set index by number"
		},
		{
			"trigger": "dbplus_sql()",
			"contents": "dbplus_sql(${1:query})",
			"kind": "function",
			"details": "Perform SQL query"
		},
		{
			"trigger": "dbplus_tcl()",
			"contents": "dbplus_tcl(${1:sid}, ${2:script})",
			"kind": "function",
			"details": "Execute TCL code on server side"
		},
		{
			"trigger": "dbplus_tremove()",
			"contents": "dbplus_tremove(${1:relation}, ${2:tuple})",
			"kind": "function",
			"details": "Remove tuple and return new current tuple"
		},
		{
			"trigger": "dbplus_undo()",
			"contents": "dbplus_undo(${1:relation})",
			"kind": "function",
			"details": "Undo"
		},
		{
			"trigger": "dbplus_undoprepare()",
			"contents": "dbplus_undoprepare(${1:relation})",
			"kind": "function",
			"details": "Prepare undo"
		},
		{
			"trigger": "dbplus_unlockrel()",
			"contents": "dbplus_unlockrel(${1:relation})",
			"kind": "function",
			"details": "Give up write lock on relation"
		},
		{
			"trigger": "dbplus_unselect()",
			"contents": "dbplus_unselect(${1:relation})",
			"kind": "function",
			"details": "Remove a constraint from relation"
		},
		{
			"trigger": "dbplus_update()",
			"contents": "dbplus_update(${1:relation}, ${2:old}, ${3:new})",
			"kind": "function",
			"details": "Update specified tuple in relation"
		},
		{
			"trigger": "dbplus_xlockrel()",
			"contents": "dbplus_xlockrel(${1:relation})",
			"kind": "function",
			"details": "Request exclusive lock on relation"
		},
		{
			"trigger": "dbplus_xunlockrel()",
			"contents": "dbplus_xunlockrel(${1:relation})",
			"kind": "function",
			"details": "Free exclusive lock on relation"
		},
		{
			"trigger": "dbx_close()",
			"contents": "dbx_close(${1:link_identifier})",
			"kind": "function",
			"details": "Close an open connection/database"
		},
		{
			"trigger": "dbx_compare()",
			"contents": "dbx_compare(${1:row_a}, ${2:row_b}, ${3:column_key})",
			"kind": "function",
			"details": "Compare two rows for sorting purposes"
		},
		{
			"trigger": "dbx_connect()",
			"contents": "dbx_connect(${1:module}, ${2:host}, ${3:database}, ${4:username}, ${5:password})",
			"kind": "function",
			"details": "Open a connection/database"
		},
		{
			"trigger": "dbx_error()",
			"contents": "dbx_error(${1:link_identifier})",
			"kind": "function",
			"details": "Report the error message of the latest function call in the module"
		},
		{
			"trigger": "dbx_escape_string()",
			"contents": "dbx_escape_string(${1:link_identifier}, ${2:text})",
			"kind": "function",
			"details": "Escape a string so it can safely be used in an sql-statement"
		},
		{
			"trigger": "dbx_fetch_row()",
			"contents": "dbx_fetch_row(${1:result_identifier})",
			"kind": "function",
			"details": "Fetches rows from a query-result that had the DBX_RESULT_UNBUFFERED flag set"
		},
		{
			"trigger": "dbx_query()",
			"contents": "dbx_query(${1:link_identifier}, ${2:sql_statement})",
			"kind": "function",
			"details": "Send a query and fetch all results (if any)"
		},
		{
			"trigger": "dbx_sort()",
			"contents": "dbx_sort(${1:result}, ${2:user_compare_function})",
			"kind": "function",
			"details": "Sort a result from a dbx_query by a custom sort function"
		},
		{
			"trigger": "dcgettext()",
			"contents": "dcgettext(${1:domain}, ${2:message}, ${3:category})",
			"kind": "function",
			"details": "Overrides the domain for a single lookup"
		},
		{
			"trigger": "dcngettext()",
			"contents": "dcngettext(${1:domain}, ${2:msgid1}, ${3:msgid2}, ${4:n}, ${5:category})",
			"kind": "function",
			"details": "Plural version of dcgettext"
		},
		{
			"trigger": "deaggregate()",
			"contents": "deaggregate(${1:object})",
			"kind": "function"
		},
		{
			"trigger": "debug_backtrace()",
			"contents": "debug_backtrace()",
			"kind": "function",
			"details": "Generates a backtrace"
		},
		{
			"trigger": "debug_print_backtrace()",
			"contents": "debug_print_backtrace()",
			"kind": "function",
			"details": "Prints a backtrace"
		},
		{
			"trigger": "debug_zval_dump()",
			"contents": "debug_zval_dump(${1:variable})",
			"kind": "function",
			"details": "Dumps a string representation of an internal zend value to output"
		},
		{
			"trigger": "decbin()",
			"contents": "decbin(${1:number})",
			"kind": "function",
			"details": "Decimal to binary"
		},
		{
			"trigger": "dechex()",
			"contents": "dechex(${1:number})",
			"kind": "function",
			"details": "Decimal to hexadecimal"
		},
		{
			"trigger": "decoct()",
			"contents": "decoct(${1:number})",
			"kind": "function",
			"details": "Decimal to octal"
		},
		{
			"trigger": "define()",
			"contents": "define(${1:name}, ${2:value})",
			"kind": "function",
			"details": "Defines a named constant"
		},
		{
			"trigger": "define_syslog_variables()",
			"contents": "define_syslog_variables()",
			"kind": "function",
			"details": "Initializes all syslog related variables"
		},
		{
			"trigger": "defined()",
			"contents": "defined(${1:name})",
			"kind": "function",
			"details": "Checks whether a given named constant exists"
		},
		{
			"trigger": "deg2rad()",
			"contents": "deg2rad(${1:number})",
			"kind": "function",
			"details": "Converts the number in degrees to the radian equivalent"
		},
		{
			"trigger": "delete()",
			"contents": "delete()",
			"kind": "function",
			"details": "See unlink() or unset()"
		},
		{
			"trigger": "dgettext()",
			"contents": "dgettext(${1:domain}, ${2:message})",
			"kind": "function",
			"details": "Override the current domain"
		},
		{
			"trigger": "die()",
			"contents": "die()",
			"kind": "function",
			"details": "Equivalent to exit"
		},
		{
			"trigger": "dio_close()",
			"contents": "dio_close(${1:fd})",
			"kind": "function",
			"details": "Closes the file descriptor given by fd"
		},
		{
			"trigger": "dio_fcntl()",
			"contents": "dio_fcntl(${1:fd}, ${2:cmd})",
			"kind": "function",
			"details": "Performs a c library fcntl on fd"
		},
		{
			"trigger": "dio_open()",
			"contents": "dio_open(${1:filename}, ${2:flags})",
			"kind": "function",
			"details": "Opens a file (creating it if necessary) at a lower level than the C library input/ouput stream functions allow"
		},
		{
			"trigger": "dio_read()",
			"contents": "dio_read(${1:fd})",
			"kind": "function",
			"details": "Reads bytes from a file descriptor"
		},
		{
			"trigger": "dio_seek()",
			"contents": "dio_seek(${1:fd}, ${2:pos})",
			"kind": "function",
			"details": "Seeks to pos on fd from whence"
		},
		{
			"trigger": "dio_stat()",
			"contents": "dio_stat(${1:fd})",
			"kind": "function",
			"details": "Gets stat information about the file descriptor fd"
		},
		{
			"trigger": "dio_tcsetattr()",
			"contents": "dio_tcsetattr(${1:fd}, ${2:options})",
			"kind": "function",
			"details": "Sets terminal attributes and baud rate for a serial port"
		},
		{
			"trigger": "dio_truncate()",
			"contents": "dio_truncate(${1:fd}, ${2:offset})",
			"kind": "function",
			"details": "Truncates file descriptor fd to offset bytes"
		},
		{
			"trigger": "dio_write()",
			"contents": "dio_write(${1:fd}, ${2:data})",
			"kind": "function",
			"details": "Writes data to fd with optional truncation at length"
		},
		{
			"trigger": "dirname()",
			"contents": "dirname(${1:path})",
			"kind": "function",
			"details": "Returns a parent directory's path"
		},
		{
			"trigger": "disk_free_space()",
			"contents": "disk_free_space(${1:directory})",
			"kind": "function",
			"details": "Returns available space on filesystem or disk partition"
		},
		{
			"trigger": "disk_total_space()",
			"contents": "disk_total_space(${1:directory})",
			"kind": "function",
			"details": "Returns the total size of a filesystem or disk partition"
		},
		{
			"trigger": "diskfreespace()",
			"contents": "diskfreespace()",
			"kind": "function",
			"details": "Alias of disk_free_space()"
		},
		{
			"trigger": "dl()",
			"contents": "dl(${1:library})",
			"kind": "function",
			"details": "Loads a PHP extension at runtime"
		},
		{
			"trigger": "dngettext()",
			"contents": "dngettext(${1:domain}, ${2:msgid1}, ${3:msgid2}, ${4:n})",
			"kind": "function",
			"details": "Plural version of dgettext"
		},
		{
			"trigger": "dns_check_record()",
			"contents": "dns_check_record()",
			"kind": "function",
			"details": "Alias of checkdnsrr()"
		},
		{
			"trigger": "dns_get_mx()",
			"contents": "dns_get_mx()",
			"kind": "function",
			"details": "Alias of getmxrr()"
		},
		{
			"trigger": "dns_get_record()",
			"contents": "dns_get_record(${1:hostname})",
			"kind": "function",
			"details": "Fetch DNS Resource Records associated with a hostname"
		},
		{
			"trigger": "dom_import_simplexml()",
			"contents": "dom_import_simplexml(${1:node})",
			"kind": "function",
			"details": "Gets a DOMElement object from a SimpleXMLElement object"
		},
		{
			"trigger": "domxml_new_doc()",
			"contents": "domxml_new_doc(${1:version})",
			"kind": "function"
		},
		{
			"trigger": "domxml_open_file()",
			"contents": "domxml_open_file(${1:filename})",
			"kind": "function"
		},
		{
			"trigger": "domxml_open_mem()",
			"contents": "domxml_open_mem(${1:str})",
			"kind": "function"
		},
		{
			"trigger": "domxml_version()",
			"contents": "domxml_version()",
			"kind": "function"
		},
		{
			"trigger": "domxml_xmltree()",
			"contents": "domxml_xmltree(${1:str})",
			"kind": "function"
		},
		{
			"trigger": "domxml_xslt_stylesheet()",
			"contents": "domxml_xslt_stylesheet(${1:xsl_buf})",
			"kind": "function"
		},
		{
			"trigger": "domxml_xslt_stylesheet_doc()",
			"contents": "domxml_xslt_stylesheet_doc(${1:xsl_doc})",
			"kind": "function"
		},
		{
			"trigger": "domxml_xslt_stylesheet_file()",
			"contents": "domxml_xslt_stylesheet_file(${1:xsl_file})",
			"kind": "function"
		},
		{
			"trigger": "domxml_xslt_version()",
			"contents": "domxml_xslt_version()",
			"kind": "function"
		},
		{
			"trigger": "dotnet_load()",
			"contents": "dotnet_load(${1:assembly_name})",
			"kind": "function"
		},
		{
			"trigger": "doubleval()",
			"contents": "doubleval()",
			"kind": "function",
			"details": "Alias of floatval()"
		},
		{
			"trigger": "each()",
			"contents": "each(${1:array})",
			"kind": "function",
			"details": "Return the current key and value pair from an array and advance the array cursor"
		},
		{
			"trigger": "easter_date()",
			"contents": "easter_date()",
			"kind": "function",
			"details": "Get Unix timestamp for midnight on Easter of a given year"
		},
		{
			"trigger": "easter_days()",
			"contents": "easter_days()",
			"kind": "function",
			"details": "Get number of days after March 21 on which Easter falls for a given year"
		},
		{
			"trigger": "echo()",
			"contents": "echo(${1:arg1})",
			"kind": "function",
			"details": "Output one or more strings"
		},
		{
			"trigger": "empty()",
			"contents": "empty(${1:var})",
			"kind": "function",
			"details": "Determine whether a variable is empty"
		},
		{
			"trigger": "enchant_broker_describe()",
			"contents": "enchant_broker_describe(${1:broker})",
			"kind": "function",
			"details": "Enumerates the Enchant providers"
		},
		{
			"trigger": "enchant_broker_dict_exists()",
			"contents": "enchant_broker_dict_exists(${1:broker}, ${2:tag})",
			"kind": "function",
			"details": "Whether a dictionary exists or not. Using non-empty tag"
		},
		{
			"trigger": "enchant_broker_free()",
			"contents": "enchant_broker_free(${1:broker})",
			"kind": "function",
			"details": "Free the broker resource and its dictionaries"
		},
		{
			"trigger": "enchant_broker_free_dict()",
			"contents": "enchant_broker_free_dict(${1:dict})",
			"kind": "function",
			"details": "Free a dictionary resource"
		},
		{
			"trigger": "enchant_broker_get_error()",
			"contents": "enchant_broker_get_error(${1:broker})",
			"kind": "function",
			"details": "Returns the last error of the broker"
		},
		{
			"trigger": "enchant_broker_init()",
			"contents": "enchant_broker_init()",
			"kind": "function",
			"details": "Create a new broker object capable of requesting"
		},
		{
			"trigger": "enchant_broker_list_dicts()",
			"contents": "enchant_broker_list_dicts(${1:broker})",
			"kind": "function",
			"details": "Returns a list of available dictionaries"
		},
		{
			"trigger": "enchant_broker_request_dict()",
			"contents": "enchant_broker_request_dict(${1:broker}, ${2:tag})",
			"kind": "function",
			"details": "Create a new dictionary using a tag"
		},
		{
			"trigger": "enchant_broker_request_pwl_dict()",
			"contents": "enchant_broker_request_pwl_dict(${1:broker}, ${2:filename})",
			"kind": "function",
			"details": "Creates a dictionary using a PWL file"
		},
		{
			"trigger": "enchant_broker_set_ordering()",
			"contents": "enchant_broker_set_ordering(${1:broker}, ${2:tag}, ${3:ordering})",
			"kind": "function",
			"details": "Declares a preference of dictionaries to use for the language"
		},
		{
			"trigger": "enchant_dict_add_to_personal()",
			"contents": "enchant_dict_add_to_personal(${1:dict}, ${2:word})",
			"kind": "function",
			"details": "Add a word to personal word list"
		},
		{
			"trigger": "enchant_dict_add_to_session()",
			"contents": "enchant_dict_add_to_session(${1:dict}, ${2:word})",
			"kind": "function",
			"details": "Add 'word' to this spell-checking session"
		},
		{
			"trigger": "enchant_dict_check()",
			"contents": "enchant_dict_check(${1:dict}, ${2:word})",
			"kind": "function",
			"details": "Check whether a word is correctly spelled or not"
		},
		{
			"trigger": "enchant_dict_describe()",
			"contents": "enchant_dict_describe(${1:dict})",
			"kind": "function",
			"details": "Describes an individual dictionary"
		},
		{
			"trigger": "enchant_dict_get_error()",
			"contents": "enchant_dict_get_error(${1:dict})",
			"kind": "function",
			"details": "Returns the last error of the current spelling-session"
		},
		{
			"trigger": "enchant_dict_is_in_session()",
			"contents": "enchant_dict_is_in_session(${1:dict}, ${2:word})",
			"kind": "function",
			"details": "Whether or not 'word' exists in this spelling-session"
		},
		{
			"trigger": "enchant_dict_quick_check()",
			"contents": "enchant_dict_quick_check(${1:dict}, ${2:word})",
			"kind": "function",
			"details": "Check the word is correctly spelled and provide suggestions"
		},
		{
			"trigger": "enchant_dict_store_replacement()",
			"contents": "enchant_dict_store_replacement(${1:dict}, ${2:mis}, ${3:cor})",
			"kind": "function",
			"details": "Add a correction for a word"
		},
		{
			"trigger": "enchant_dict_suggest()",
			"contents": "enchant_dict_suggest(${1:dict}, ${2:word})",
			"kind": "function",
			"details": "Will return a list of values if any of those pre-conditions are not met"
		},
		{
			"trigger": "end()",
			"contents": "end(${1:array})",
			"kind": "function",
			"details": "Set the internal pointer of an array to its last element"
		},
		{
			"trigger": "ereg()",
			"contents": "ereg(${1:pattern}, ${2:string})",
			"kind": "function",
			"details": "Regular expression match"
		},
		{
			"trigger": "ereg_replace()",
			"contents": "ereg_replace(${1:pattern}, ${2:replacement}, ${3:string})",
			"kind": "function",
			"details": "Replace regular expression"
		},
		{
			"trigger": "eregi()",
			"contents": "eregi(${1:pattern}, ${2:string})",
			"kind": "function",
			"details": "Case insensitive regular expression match"
		},
		{
			"trigger": "eregi_replace()",
			"contents": "eregi_replace(${1:pattern}, ${2:replacement}, ${3:string})",
			"kind": "function",
			"details": "Replace regular expression case insensitive"
		},
		{
			"trigger": "error_get_last()",
			"contents": "error_get_last()",
			"kind": "function",
			"details": "Get the last occurred error"
		},
		{
			"trigger": "error_log()",
			"contents": "error_log(${1:message})",
			"kind": "function",
			"details": "Send an error message to the defined error handling routines"
		},
		{
			"trigger": "error_reporting()",
			"contents": "error_reporting()",
			"kind": "function",
			"details": "Sets which PHP errors are reported"
		},
		{
			"trigger": "escapeshellarg()",
			"contents": "escapeshellarg(${1:arg})",
			"kind": "function",
			"details": "Escape a string to be used as a shell argument"
		},
		{
			"trigger": "escapeshellcmd()",
			"contents": "escapeshellcmd(${1:command})",
			"kind": "function",
			"details": "Escape shell metacharacters"
		},
		{
			"trigger": "eval()",
			"contents": "eval(${1:code_str})",
			"kind": "function",
			"details": "Evaluate a string as PHP code"
		},
		{
			"trigger": "event_add()",
			"contents": "event_add(${1:event})",
			"kind": "function",
			"details": "Add an event to the set of monitored events"
		},
		{
			"trigger": "event_base_free()",
			"contents": "event_base_free(${1:event_base})",
			"kind": "function",
			"details": "Destroy event base"
		},
		{
			"trigger": "event_base_loop()",
			"contents": "event_base_loop(${1:event_base})",
			"kind": "function",
			"details": "Handle events"
		},
		{
			"trigger": "event_base_loopbreak()",
			"contents": "event_base_loopbreak(${1:event_base})",
			"kind": "function",
			"details": "Abort event loop"
		},
		{
			"trigger": "event_base_loopexit()",
			"contents": "event_base_loopexit(${1:event_base})",
			"kind": "function",
			"details": "Exit loop after a time"
		},
		{
			"trigger": "event_base_new()",
			"contents": "event_base_new()",
			"kind": "function",
			"details": "Create and initialize new event base"
		},
		{
			"trigger": "event_base_priority_init()",
			"contents": "event_base_priority_init(${1:event_base}, ${2:npriorities})",
			"kind": "function",
			"details": "Set the number of event priority levels"
		},
		{
			"trigger": "event_base_set()",
			"contents": "event_base_set(${1:event}, ${2:event_base})",
			"kind": "function",
			"details": "Associate event base with an event"
		},
		{
			"trigger": "event_buffer_base_set()",
			"contents": "event_buffer_base_set(${1:bevent}, ${2:event_base})",
			"kind": "function",
			"details": "Associate buffered event with an event base"
		},
		{
			"trigger": "event_buffer_disable()",
			"contents": "event_buffer_disable(${1:bevent}, ${2:events})",
			"kind": "function",
			"details": "Disable a buffered event"
		},
		{
			"trigger": "event_buffer_enable()",
			"contents": "event_buffer_enable(${1:bevent}, ${2:events})",
			"kind": "function",
			"details": "Enable a buffered event"
		},
		{
			"trigger": "event_buffer_fd_set()",
			"contents": "event_buffer_fd_set(${1:bevent}, ${2:fd})",
			"kind": "function",
			"details": "Change a buffered event file descriptor"
		},
		{
			"trigger": "event_buffer_free()",
			"contents": "event_buffer_free(${1:bevent})",
			"kind": "function",
			"details": "Destroy buffered event"
		},
		{
			"trigger": "event_buffer_new()",
			"contents": "event_buffer_new(${1:stream}, ${2:readcb}, ${3:writecb}, ${4:errorcb})",
			"kind": "function",
			"details": "Create new buffered event"
		},
		{
			"trigger": "event_buffer_priority_set()",
			"contents": "event_buffer_priority_set(${1:bevent}, ${2:priority})",
			"kind": "function",
			"details": "Assign a priority to a buffered event"
		},
		{
			"trigger": "event_buffer_read()",
			"contents": "event_buffer_read(${1:bevent}, ${2:data_size})",
			"kind": "function",
			"details": "Read data from a buffered event"
		},
		{
			"trigger": "event_buffer_set_callback()",
			"contents": "event_buffer_set_callback(${1:event}, ${2:readcb}, ${3:writecb}, ${4:errorcb})",
			"kind": "function",
			"details": "Set or reset callbacks for a buffered event"
		},
		{
			"trigger": "event_buffer_timeout_set()",
			"contents": "event_buffer_timeout_set(${1:bevent}, ${2:read_timeout}, ${3:write_timeout})",
			"kind": "function",
			"details": "Set read and write timeouts for a buffered event"
		},
		{
			"trigger": "event_buffer_watermark_set()",
			"contents": "event_buffer_watermark_set(${1:bevent}, ${2:events}, ${3:lowmark}, ${4:highmark})",
			"kind": "function",
			"details": "Set the watermarks for read and write events"
		},
		{
			"trigger": "event_buffer_write()",
			"contents": "event_buffer_write(${1:bevent}, ${2:data})",
			"kind": "function",
			"details": "Write data to a buffered event"
		},
		{
			"trigger": "event_del()",
			"contents": "event_del(${1:event})",
			"kind": "function",
			"details": "Remove an event from the set of monitored events"
		},
		{
			"trigger": "event_free()",
			"contents": "event_free(${1:event})",
			"kind": "function",
			"details": "Free event resource"
		},
		{
			"trigger": "event_new()",
			"contents": "event_new()",
			"kind": "function",
			"details": "Create new event"
		},
		{
			"trigger": "event_set()",
			"contents": "event_set(${1:event}, ${2:fd}, ${3:events}, ${4:callback})",
			"kind": "function",
			"details": "Prepare an event"
		},
		{
			"trigger": "exec()",
			"contents": "exec(${1:command})",
			"kind": "function",
			"details": "Execute an external program"
		},
		{
			"trigger": "exif_imagetype()",
			"contents": "exif_imagetype(${1:filename})",
			"kind": "function",
			"details": "Determine the type of an image"
		},
		{
			"trigger": "exif_read_data()",
			"contents": "exif_read_data(${1:filename})",
			"kind": "function",
			"details": "Reads the EXIF headers from an image file"
		},
		{
			"trigger": "exif_tagname()",
			"contents": "exif_tagname(${1:index})",
			"kind": "function",
			"details": "Get the header name for an index"
		},
		{
			"trigger": "exif_thumbnail()",
			"contents": "exif_thumbnail(${1:filename})",
			"kind": "function",
			"details": "Retrieve the embedded thumbnail of an image"
		},
		{
			"trigger": "exit()",
			"contents": "exit()",
			"kind": "function",
			"details": "Output a message and terminate the current script"
		},
		{
			"trigger": "exp()",
			"contents": "exp(${1:arg})",
			"kind": "function",
			"details": "Calculates the exponent of e"
		},
		{
			"trigger": "expect_expectl()",
			"contents": "expect_expectl(${1:expect}, ${2:cases})",
			"kind": "function",
			"details": "Waits until the output from a process matches one of the patterns, a specified time period has passed, or an EOF is seen"
		},
		{
			"trigger": "expect_popen()",
			"contents": "expect_popen(${1:command})",
			"kind": "function",
			"details": "Execute command via Bourne shell, and open the PTY stream to the process"
		},
		{
			"trigger": "explode()",
			"contents": "explode(${1:delimiter}, ${2:string})",
			"kind": "function",
			"details": "Split a string by a string"
		},
		{
			"trigger": "expm1()",
			"contents": "expm1(${1:arg})",
			"kind": "function",
			"details": "Returns exp(number) - 1, computed in a way that is accurate even when the value of number is close to zero"
		},
		{
			"trigger": "extension_loaded()",
			"contents": "extension_loaded(${1:name})",
			"kind": "function",
			"details": "Find out whether an extension is loaded"
		},
		{
			"trigger": "extract()",
			"contents": "extract(${1:var_array})",
			"kind": "function",
			"details": "Import variables into the current symbol table from an array"
		},
		{
			"trigger": "ezmlm_hash()",
			"contents": "ezmlm_hash(${1:addr})",
			"kind": "function",
			"details": "Calculate the hash value needed by EZMLM"
		},
		{
			"trigger": "fam_cancel_monitor()",
			"contents": "fam_cancel_monitor(${1:fam}, ${2:fam_monitor})",
			"kind": "function",
			"details": "Terminate monitoring"
		},
		{
			"trigger": "fam_close()",
			"contents": "fam_close(${1:fam})",
			"kind": "function",
			"details": "Close FAM connection"
		},
		{
			"trigger": "fam_monitor_collection()",
			"contents": "fam_monitor_collection(${1:fam}, ${2:dirname}, ${3:depth}, ${4:mask})",
			"kind": "function",
			"details": "Monitor a collection of files in a directory for changes"
		},
		{
			"trigger": "fam_monitor_directory()",
			"contents": "fam_monitor_directory(${1:fam}, ${2:dirname})",
			"kind": "function",
			"details": "Monitor a directory for changes"
		},
		{
			"trigger": "fam_monitor_file()",
			"contents": "fam_monitor_file(${1:fam}, ${2:filename})",
			"kind": "function",
			"details": "Monitor a regular file for changes"
		},
		{
			"trigger": "fam_next_event()",
			"contents": "fam_next_event(${1:fam})",
			"kind": "function",
			"details": "Get next pending FAM event"
		},
		{
			"trigger": "fam_open()",
			"contents": "fam_open()",
			"kind": "function",
			"details": "Open connection to FAM daemon"
		},
		{
			"trigger": "fam_pending()",
			"contents": "fam_pending(${1:fam})",
			"kind": "function",
			"details": "Check for pending FAM events"
		},
		{
			"trigger": "fam_resume_monitor()",
			"contents": "fam_resume_monitor(${1:fam}, ${2:fam_monitor})",
			"kind": "function",
			"details": "Resume suspended monitoring"
		},
		{
			"trigger": "fam_suspend_monitor()",
			"contents": "fam_suspend_monitor(${1:fam}, ${2:fam_monitor})",
			"kind": "function",
			"details": "Temporarily suspend monitoring"
		},
		{
			"trigger": "fbsql_affected_rows()",
			"contents": "fbsql_affected_rows()",
			"kind": "function",
			"details": "Get number of affected rows in previous FrontBase operation"
		},
		{
			"trigger": "fbsql_autocommit()",
			"contents": "fbsql_autocommit(${1:link_identifier})",
			"kind": "function",
			"details": "Enable or disable autocommit"
		},
		{
			"trigger": "fbsql_blob_size()",
			"contents": "fbsql_blob_size(${1:blob_handle})",
			"kind": "function",
			"details": "Get the size of a BLOB"
		},
		{
			"trigger": "fbsql_change_user()",
			"contents": "fbsql_change_user(${1:user}, ${2:password})",
			"kind": "function",
			"details": "Change logged in user of the active connection"
		},
		{
			"trigger": "fbsql_clob_size()",
			"contents": "fbsql_clob_size(${1:clob_handle})",
			"kind": "function",
			"details": "Get the size of a CLOB"
		},
		{
			"trigger": "fbsql_close()",
			"contents": "fbsql_close()",
			"kind": "function",
			"details": "Close FrontBase connection"
		},
		{
			"trigger": "fbsql_commit()",
			"contents": "fbsql_commit()",
			"kind": "function",
			"details": "Commits a transaction to the database"
		},
		{
			"trigger": "fbsql_connect()",
			"contents": "fbsql_connect()",
			"kind": "function",
			"details": "Open a connection to a FrontBase Server"
		},
		{
			"trigger": "fbsql_create_blob()",
			"contents": "fbsql_create_blob(${1:blob_data})",
			"kind": "function",
			"details": "Create a BLOB"
		},
		{
			"trigger": "fbsql_create_clob()",
			"contents": "fbsql_create_clob(${1:clob_data})",
			"kind": "function",
			"details": "Create a CLOB"
		},
		{
			"trigger": "fbsql_create_db()",
			"contents": "fbsql_create_db(${1:database_name})",
			"kind": "function",
			"details": "Create a FrontBase database"
		},
		{
			"trigger": "fbsql_data_seek()",
			"contents": "fbsql_data_seek(${1:result}, ${2:row_number})",
			"kind": "function",
			"details": "Move internal result pointer"
		},
		{
			"trigger": "fbsql_database()",
			"contents": "fbsql_database(${1:link_identifier})",
			"kind": "function",
			"details": "Get or set the database name used with a connection"
		},
		{
			"trigger": "fbsql_database_password()",
			"contents": "fbsql_database_password(${1:link_identifier})",
			"kind": "function",
			"details": "Sets or retrieves the password for a FrontBase database"
		},
		{
			"trigger": "fbsql_db_query()",
			"contents": "fbsql_db_query(${1:database}, ${2:query})",
			"kind": "function",
			"details": "Send a FrontBase query"
		},
		{
			"trigger": "fbsql_db_status()",
			"contents": "fbsql_db_status(${1:database_name})",
			"kind": "function",
			"details": "Get the status for a given database"
		},
		{
			"trigger": "fbsql_drop_db()",
			"contents": "fbsql_drop_db(${1:database_name})",
			"kind": "function",
			"details": "Drop (delete) a FrontBase database"
		},
		{
			"trigger": "fbsql_errno()",
			"contents": "fbsql_errno()",
			"kind": "function",
			"details": "Returns the error number from previous operation"
		},
		{
			"trigger": "fbsql_error()",
			"contents": "fbsql_error()",
			"kind": "function",
			"details": "Returns the error message from previous operation"
		},
		{
			"trigger": "fbsql_fetch_array()",
			"contents": "fbsql_fetch_array(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an associative array, a numeric array, or both"
		},
		{
			"trigger": "fbsql_fetch_assoc()",
			"contents": "fbsql_fetch_assoc(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an associative array"
		},
		{
			"trigger": "fbsql_fetch_field()",
			"contents": "fbsql_fetch_field(${1:result})",
			"kind": "function",
			"details": "Get column information from a result and return as an object"
		},
		{
			"trigger": "fbsql_fetch_lengths()",
			"contents": "fbsql_fetch_lengths(${1:result})",
			"kind": "function",
			"details": "Get the length of each output in a result"
		},
		{
			"trigger": "fbsql_fetch_object()",
			"contents": "fbsql_fetch_object(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an object"
		},
		{
			"trigger": "fbsql_fetch_row()",
			"contents": "fbsql_fetch_row(${1:result})",
			"kind": "function",
			"details": "Get a result row as an enumerated array"
		},
		{
			"trigger": "fbsql_field_flags()",
			"contents": "fbsql_field_flags(${1:result})",
			"kind": "function",
			"details": "Get the flags associated with the specified field in a result"
		},
		{
			"trigger": "fbsql_field_len()",
			"contents": "fbsql_field_len(${1:result})",
			"kind": "function",
			"details": "Returns the length of the specified field"
		},
		{
			"trigger": "fbsql_field_name()",
			"contents": "fbsql_field_name(${1:result})",
			"kind": "function",
			"details": "Get the name of the specified field in a result"
		},
		{
			"trigger": "fbsql_field_seek()",
			"contents": "fbsql_field_seek(${1:result})",
			"kind": "function",
			"details": "Set result pointer to a specified field offset"
		},
		{
			"trigger": "fbsql_field_table()",
			"contents": "fbsql_field_table(${1:result})",
			"kind": "function",
			"details": "Get name of the table the specified field is in"
		},
		{
			"trigger": "fbsql_field_type()",
			"contents": "fbsql_field_type(${1:result})",
			"kind": "function",
			"details": "Get the type of the specified field in a result"
		},
		{
			"trigger": "fbsql_free_result()",
			"contents": "fbsql_free_result(${1:result})",
			"kind": "function",
			"details": "Free result memory"
		},
		{
			"trigger": "fbsql_get_autostart_info()",
			"contents": "fbsql_get_autostart_info()",
			"kind": "function"
		},
		{
			"trigger": "fbsql_hostname()",
			"contents": "fbsql_hostname(${1:link_identifier})",
			"kind": "function",
			"details": "Get or set the host name used with a connection"
		},
		{
			"trigger": "fbsql_insert_id()",
			"contents": "fbsql_insert_id()",
			"kind": "function",
			"details": "Get the id generated from the previous INSERT operation"
		},
		{
			"trigger": "fbsql_list_dbs()",
			"contents": "fbsql_list_dbs()",
			"kind": "function",
			"details": "List databases available on a FrontBase server"
		},
		{
			"trigger": "fbsql_list_fields()",
			"contents": "fbsql_list_fields(${1:database_name}, ${2:table_name})",
			"kind": "function",
			"details": "List FrontBase result fields"
		},
		{
			"trigger": "fbsql_list_tables()",
			"contents": "fbsql_list_tables(${1:database})",
			"kind": "function",
			"details": "List tables in a FrontBase database"
		},
		{
			"trigger": "fbsql_next_result()",
			"contents": "fbsql_next_result(${1:result})",
			"kind": "function",
			"details": "Move the internal result pointer to the next result"
		},
		{
			"trigger": "fbsql_num_fields()",
			"contents": "fbsql_num_fields(${1:result})",
			"kind": "function",
			"details": "Get number of fields in result"
		},
		{
			"trigger": "fbsql_num_rows()",
			"contents": "fbsql_num_rows(${1:result})",
			"kind": "function",
			"details": "Get number of rows in result"
		},
		{
			"trigger": "fbsql_password()",
			"contents": "fbsql_password(${1:link_identifier})",
			"kind": "function",
			"details": "Get or set the user password used with a connection"
		},
		{
			"trigger": "fbsql_pconnect()",
			"contents": "fbsql_pconnect()",
			"kind": "function",
			"details": "Open a persistent connection to a FrontBase Server"
		},
		{
			"trigger": "fbsql_query()",
			"contents": "fbsql_query(${1:query})",
			"kind": "function",
			"details": "Send a FrontBase query"
		},
		{
			"trigger": "fbsql_read_blob()",
			"contents": "fbsql_read_blob(${1:blob_handle})",
			"kind": "function",
			"details": "Read a BLOB from the database"
		},
		{
			"trigger": "fbsql_read_clob()",
			"contents": "fbsql_read_clob(${1:clob_handle})",
			"kind": "function",
			"details": "Read a CLOB from the database"
		},
		{
			"trigger": "fbsql_result()",
			"contents": "fbsql_result(${1:result})",
			"kind": "function",
			"details": "Get result data"
		},
		{
			"trigger": "fbsql_rollback()",
			"contents": "fbsql_rollback()",
			"kind": "function",
			"details": "Rollback a transaction to the database"
		},
		{
			"trigger": "fbsql_rows_fetched()",
			"contents": "fbsql_rows_fetched(${1:result})",
			"kind": "function",
			"details": "Get the number of rows affected by the last statement"
		},
		{
			"trigger": "fbsql_select_db()",
			"contents": "fbsql_select_db()",
			"kind": "function",
			"details": "Select a FrontBase database"
		},
		{
			"trigger": "fbsql_set_characterset()",
			"contents": "fbsql_set_characterset(${1:link_identifier}, ${2:characterset})",
			"kind": "function",
			"details": "Change input/output character set"
		},
		{
			"trigger": "fbsql_set_lob_mode()",
			"contents": "fbsql_set_lob_mode(${1:result}, ${2:lob_mode})",
			"kind": "function",
			"details": "Set the LOB retrieve mode for a FrontBase result set"
		},
		{
			"trigger": "fbsql_set_password()",
			"contents": "fbsql_set_password(${1:link_identifier}, ${2:user}, ${3:password}, ${4:old_password})",
			"kind": "function",
			"details": "Change the password for a given user"
		},
		{
			"trigger": "fbsql_set_transaction()",
			"contents": "fbsql_set_transaction(${1:link_identifier}, ${2:locking}, ${3:isolation})",
			"kind": "function",
			"details": "Set the transaction locking and isolation"
		},
		{
			"trigger": "fbsql_start_db()",
			"contents": "fbsql_start_db(${1:database_name})",
			"kind": "function",
			"details": "Start a database on local or remote server"
		},
		{
			"trigger": "fbsql_stop_db()",
			"contents": "fbsql_stop_db(${1:database_name})",
			"kind": "function",
			"details": "Stop a database on local or remote server"
		},
		{
			"trigger": "fbsql_table_name()",
			"contents": "fbsql_table_name(${1:result}, ${2:index})",
			"kind": "function",
			"details": "Get table name of field"
		},
		{
			"trigger": "fbsql_tablename()",
			"contents": "fbsql_tablename()",
			"kind": "function",
			"details": "Alias of fbsql_table_name()"
		},
		{
			"trigger": "fbsql_username()",
			"contents": "fbsql_username(${1:link_identifier})",
			"kind": "function",
			"details": "Get or set the username for the connection"
		},
		{
			"trigger": "fbsql_warnings()",
			"contents": "fbsql_warnings()",
			"kind": "function",
			"details": "Enable or disable FrontBase warnings"
		},
		{
			"trigger": "fclose()",
			"contents": "fclose(${1:handle})",
			"kind": "function",
			"details": "Closes an open file pointer"
		},
		{
			"trigger": "fdf_add_doc_javascript()",
			"contents": "fdf_add_doc_javascript(${1:fdf_document}, ${2:script_name}, ${3:script_code})",
			"kind": "function",
			"details": "Adds javascript code to the FDF document"
		},
		{
			"trigger": "fdf_add_template()",
			"contents": "fdf_add_template(${1:fdf_document}, ${2:newpage}, ${3:filename}, ${4:template}, ${5:rename})",
			"kind": "function",
			"details": "Adds a template into the FDF document"
		},
		{
			"trigger": "fdf_close()",
			"contents": "fdf_close(${1:fdf_document})",
			"kind": "function",
			"details": "Close an FDF document"
		},
		{
			"trigger": "fdf_create()",
			"contents": "fdf_create()",
			"kind": "function",
			"details": "Create a new FDF document"
		},
		{
			"trigger": "fdf_enum_values()",
			"contents": "fdf_enum_values(${1:fdf_document}, ${2:function})",
			"kind": "function",
			"details": "Call a user defined function for each document value"
		},
		{
			"trigger": "fdf_errno()",
			"contents": "fdf_errno()",
			"kind": "function",
			"details": "Return error code for last fdf operation"
		},
		{
			"trigger": "fdf_error()",
			"contents": "fdf_error()",
			"kind": "function",
			"details": "Return error description for FDF error code"
		},
		{
			"trigger": "fdf_get_ap()",
			"contents": "fdf_get_ap(${1:fdf_document}, ${2:field}, ${3:face}, ${4:filename})",
			"kind": "function",
			"details": "Get the appearance of a field"
		},
		{
			"trigger": "fdf_get_attachment()",
			"contents": "fdf_get_attachment(${1:fdf_document}, ${2:fieldname}, ${3:savepath})",
			"kind": "function",
			"details": "Extracts uploaded file embedded in the FDF"
		},
		{
			"trigger": "fdf_get_encoding()",
			"contents": "fdf_get_encoding(${1:fdf_document})",
			"kind": "function",
			"details": "Get the value of the /Encoding key"
		},
		{
			"trigger": "fdf_get_file()",
			"contents": "fdf_get_file(${1:fdf_document})",
			"kind": "function",
			"details": "Get the value of the /F key"
		},
		{
			"trigger": "fdf_get_flags()",
			"contents": "fdf_get_flags(${1:fdf_document}, ${2:fieldname}, ${3:whichflags})",
			"kind": "function",
			"details": "Gets the flags of a field"
		},
		{
			"trigger": "fdf_get_opt()",
			"contents": "fdf_get_opt(${1:fdf_document}, ${2:fieldname})",
			"kind": "function",
			"details": "Gets a value from the opt array of a field"
		},
		{
			"trigger": "fdf_get_status()",
			"contents": "fdf_get_status(${1:fdf_document})",
			"kind": "function",
			"details": "Get the value of the /STATUS key"
		},
		{
			"trigger": "fdf_get_value()",
			"contents": "fdf_get_value(${1:fdf_document}, ${2:fieldname})",
			"kind": "function",
			"details": "Get the value of a field"
		},
		{
			"trigger": "fdf_get_version()",
			"contents": "fdf_get_version()",
			"kind": "function",
			"details": "Gets version number for FDF API or file"
		},
		{
			"trigger": "fdf_header()",
			"contents": "fdf_header()",
			"kind": "function",
			"details": "Sets FDF-specific output headers"
		},
		{
			"trigger": "fdf_next_field_name()",
			"contents": "fdf_next_field_name(${1:fdf_document})",
			"kind": "function",
			"details": "Get the next field name"
		},
		{
			"trigger": "fdf_open()",
			"contents": "fdf_open(${1:filename})",
			"kind": "function",
			"details": "Open a FDF document"
		},
		{
			"trigger": "fdf_open_string()",
			"contents": "fdf_open_string(${1:fdf_data})",
			"kind": "function",
			"details": "Read a FDF document from a string"
		},
		{
			"trigger": "fdf_remove_item()",
			"contents": "fdf_remove_item(${1:fdf_document}, ${2:fieldname}, ${3:item})",
			"kind": "function",
			"details": "Sets target frame for form"
		},
		{
			"trigger": "fdf_save()",
			"contents": "fdf_save(${1:fdf_document})",
			"kind": "function",
			"details": "Save a FDF document"
		},
		{
			"trigger": "fdf_save_string()",
			"contents": "fdf_save_string(${1:fdf_document})",
			"kind": "function",
			"details": "Returns the FDF document as a string"
		},
		{
			"trigger": "fdf_set_ap()",
			"contents": "fdf_set_ap(${1:fdf_document}, ${2:field_name}, ${3:face}, ${4:filename}, ${5:page_number})",
			"kind": "function",
			"details": "Set the appearance of a field"
		},
		{
			"trigger": "fdf_set_encoding()",
			"contents": "fdf_set_encoding(${1:fdf_document}, ${2:encoding})",
			"kind": "function",
			"details": "Sets FDF character encoding"
		},
		{
			"trigger": "fdf_set_file()",
			"contents": "fdf_set_file(${1:fdf_document}, ${2:url})",
			"kind": "function",
			"details": "Set PDF document to display FDF data in"
		},
		{
			"trigger": "fdf_set_flags()",
			"contents": "fdf_set_flags(${1:fdf_document}, ${2:fieldname}, ${3:whichFlags}, ${4:newFlags})",
			"kind": "function",
			"details": "Sets a flag of a field"
		},
		{
			"trigger": "fdf_set_javascript_action()",
			"contents": "fdf_set_javascript_action(${1:fdf_document}, ${2:fieldname}, ${3:trigger}, ${4:script})",
			"kind": "function",
			"details": "Sets an javascript action of a field"
		},
		{
			"trigger": "fdf_set_on_import_javascript()",
			"contents": "fdf_set_on_import_javascript(${1:fdf_document}, ${2:script}, ${3:before_data_import})",
			"kind": "function",
			"details": "Adds javascript code to be executed when Acrobat opens the FDF"
		},
		{
			"trigger": "fdf_set_opt()",
			"contents": "fdf_set_opt(${1:fdf_document}, ${2:fieldname}, ${3:element}, ${4:str1}, ${5:str2})",
			"kind": "function",
			"details": "Sets an option of a field"
		},
		{
			"trigger": "fdf_set_status()",
			"contents": "fdf_set_status(${1:fdf_document}, ${2:status})",
			"kind": "function",
			"details": "Set the value of the /STATUS key"
		},
		{
			"trigger": "fdf_set_submit_form_action()",
			"contents": "fdf_set_submit_form_action(${1:fdf_document}, ${2:fieldname}, ${3:trigger}, ${4:script}, ${5:flags})",
			"kind": "function",
			"details": "Sets a submit form action of a field"
		},
		{
			"trigger": "fdf_set_target_frame()",
			"contents": "fdf_set_target_frame(${1:fdf_document}, ${2:frame_name})",
			"kind": "function",
			"details": "Set target frame for form display"
		},
		{
			"trigger": "fdf_set_value()",
			"contents": "fdf_set_value(${1:fdf_document}, ${2:fieldname}, ${3:value})",
			"kind": "function",
			"details": "Set the value of a field"
		},
		{
			"trigger": "fdf_set_version()",
			"contents": "fdf_set_version(${1:fdf_document}, ${2:version})",
			"kind": "function",
			"details": "Sets version number for a FDF file"
		},
		{
			"trigger": "fdiv()",
			"contents": "fdiv(${1:dividend}, ${2:divisor})",
			"kind": "function",
			"details": "Float division."
		},
		{
			"trigger": "feof()",
			"contents": "feof(${1:handle})",
			"kind": "function",
			"details": "Tests for end-of-file on a file pointer"
		},
		{
			"trigger": "fflush()",
			"contents": "fflush(${1:handle})",
			"kind": "function",
			"details": "Flushes the output to a file"
		},
		{
			"trigger": "fgetc()",
			"contents": "fgetc(${1:handle})",
			"kind": "function",
			"details": "Gets character from file pointer"
		},
		{
			"trigger": "fgetcsv()",
			"contents": "fgetcsv(${1:handle})",
			"kind": "function",
			"details": "Gets line from file pointer and parse for CSV fields"
		},
		{
			"trigger": "fgets()",
			"contents": "fgets(${1:handle})",
			"kind": "function",
			"details": "Gets line from file pointer"
		},
		{
			"trigger": "fgetss()",
			"contents": "fgetss(${1:handle})",
			"kind": "function",
			"details": "Gets line from file pointer and strip HTML tags"
		},
		{
			"trigger": "file()",
			"contents": "file(${1:filename})",
			"kind": "function",
			"details": "Reads entire file into an array"
		},
		{
			"trigger": "file_exists()",
			"contents": "file_exists(${1:filename})",
			"kind": "function",
			"details": "Checks whether a file or directory exists"
		},
		{
			"trigger": "file_get_contents()",
			"contents": "file_get_contents(${1:filename})",
			"kind": "function",
			"details": "Reads entire file into a string"
		},
		{
			"trigger": "file_put_contents()",
			"contents": "file_put_contents(${1:filename}, ${2:data})",
			"kind": "function",
			"details": "Write data to a file"
		},
		{
			"trigger": "fileatime()",
			"contents": "fileatime(${1:filename})",
			"kind": "function",
			"details": "Gets last access time of file"
		},
		{
			"trigger": "filectime()",
			"contents": "filectime(${1:filename})",
			"kind": "function",
			"details": "Gets inode change time of file"
		},
		{
			"trigger": "filegroup()",
			"contents": "filegroup(${1:filename})",
			"kind": "function",
			"details": "Gets file group"
		},
		{
			"trigger": "fileinode()",
			"contents": "fileinode(${1:filename})",
			"kind": "function",
			"details": "Gets file inode"
		},
		{
			"trigger": "filemtime()",
			"contents": "filemtime(${1:filename})",
			"kind": "function",
			"details": "Gets file modification time"
		},
		{
			"trigger": "fileowner()",
			"contents": "fileowner(${1:filename})",
			"kind": "function",
			"details": "Gets file owner"
		},
		{
			"trigger": "fileperms()",
			"contents": "fileperms(${1:filename})",
			"kind": "function",
			"details": "Gets file permissions"
		},
		{
			"trigger": "filepro()",
			"contents": "filepro(${1:directory})",
			"kind": "function",
			"details": "Read and verify the map file"
		},
		{
			"trigger": "filepro_fieldcount()",
			"contents": "filepro_fieldcount()",
			"kind": "function",
			"details": "Find out how many fields are in a filePro database"
		},
		{
			"trigger": "filepro_fieldname()",
			"contents": "filepro_fieldname(${1:field_number})",
			"kind": "function",
			"details": "Gets the name of a field"
		},
		{
			"trigger": "filepro_fieldtype()",
			"contents": "filepro_fieldtype(${1:field_number})",
			"kind": "function",
			"details": "Gets the type of a field"
		},
		{
			"trigger": "filepro_fieldwidth()",
			"contents": "filepro_fieldwidth(${1:field_number})",
			"kind": "function",
			"details": "Gets the width of a field"
		},
		{
			"trigger": "filepro_retrieve()",
			"contents": "filepro_retrieve(${1:row_number}, ${2:field_number})",
			"kind": "function",
			"details": "Retrieves data from a filePro database"
		},
		{
			"trigger": "filepro_rowcount()",
			"contents": "filepro_rowcount()",
			"kind": "function",
			"details": "Find out how many rows are in a filePro database"
		},
		{
			"trigger": "filesize()",
			"contents": "filesize(${1:filename})",
			"kind": "function",
			"details": "Gets file size"
		},
		{
			"trigger": "filetype()",
			"contents": "filetype(${1:filename})",
			"kind": "function",
			"details": "Gets file type"
		},
		{
			"trigger": "filter_has_var()",
			"contents": "filter_has_var(${1:type}, ${2:variable_name})",
			"kind": "function",
			"details": "Checks if variable of specified type exists"
		},
		{
			"trigger": "filter_id()",
			"contents": "filter_id(${1:filtername})",
			"kind": "function",
			"details": "Returns the filter ID belonging to a named filter"
		},
		{
			"trigger": "filter_input()",
			"contents": "filter_input(${1:type}, ${2:variable_name})",
			"kind": "function",
			"details": "Gets a specific external variable by name and optionally filters it"
		},
		{
			"trigger": "filter_input_array()",
			"contents": "filter_input_array(${1:type})",
			"kind": "function",
			"details": "Gets external variables and optionally filters them"
		},
		{
			"trigger": "filter_list()",
			"contents": "filter_list()",
			"kind": "function",
			"details": "Returns a list of all supported filters"
		},
		{
			"trigger": "filter_var()",
			"contents": "filter_var(${1:variable})",
			"kind": "function",
			"details": "Filters a variable with a specified filter"
		},
		{
			"trigger": "filter_var_array()",
			"contents": "filter_var_array(${1:data})",
			"kind": "function",
			"details": "Gets multiple variables and optionally filters them"
		},
		{
			"trigger": "finfo_buffer()",
			"contents": "finfo_buffer(${1:finfo}, ${2:string = NULL})",
			"kind": "function",
			"details": "Return information about a string buffer"
		},
		{
			"trigger": "finfo_close()",
			"contents": "finfo_close(${1:finfo})",
			"kind": "function",
			"details": "Close fileinfo resource"
		},
		{
			"trigger": "finfo_file()",
			"contents": "finfo_file(${1:finfo}, ${2:file_name = NULL})",
			"kind": "function",
			"details": "Return information about a file"
		},
		{
			"trigger": "finfo_set_flags()",
			"contents": "finfo_set_flags(${1:finfo}, ${2:options})",
			"kind": "function",
			"details": "Set libmagic configuration options"
		},
		{
			"trigger": "floatval()",
			"contents": "floatval(${1:var})",
			"kind": "function",
			"details": "Get float value of a variable"
		},
		{
			"trigger": "flock()",
			"contents": "flock(${1:handle}, ${2:operation})",
			"kind": "function",
			"details": "Portable advisory file locking"
		},
		{
			"trigger": "floor()",
			"contents": "floor(${1:value})",
			"kind": "function",
			"details": "Round fractions down"
		},
		{
			"trigger": "flush()",
			"contents": "flush()",
			"kind": "function",
			"details": "Flush system output buffer"
		},
		{
			"trigger": "fmod()",
			"contents": "fmod(${1:x}, ${2:y})",
			"kind": "function",
			"details": "Returns the floating point remainder (modulo) of the division of the arguments"
		},
		{
			"trigger": "fnmatch()",
			"contents": "fnmatch(${1:pattern}, ${2:string})",
			"kind": "function",
			"details": "Match filename against a pattern"
		},
		{
			"trigger": "fopen()",
			"contents": "fopen(${1:filename}, ${2:mode})",
			"kind": "function",
			"details": "Opens file or URL"
		},
		{
			"trigger": "forward_static_call()",
			"contents": "forward_static_call(${1:function})",
			"kind": "function",
			"details": "Call a static method"
		},
		{
			"trigger": "forward_static_call_array()",
			"contents": "forward_static_call_array(${1:function}, ${2:parameters})",
			"kind": "function",
			"details": "Call a static method and pass the arguments as array"
		},
		{
			"trigger": "fpassthru()",
			"contents": "fpassthru(${1:handle})",
			"kind": "function",
			"details": "Output all remaining data on a file pointer"
		},
		{
			"trigger": "fprintf()",
			"contents": "fprintf(${1:handle}, ${2:format})",
			"kind": "function",
			"details": "Write a formatted string to a stream"
		},
		{
			"trigger": "fputcsv()",
			"contents": "fputcsv(${1:handle}, ${2:fields})",
			"kind": "function",
			"details": "Format line as CSV and write to file pointer"
		},
		{
			"trigger": "fputs()",
			"contents": "fputs()",
			"kind": "function",
			"details": "Alias of fwrite()"
		},
		{
			"trigger": "fread()",
			"contents": "fread(${1:handle}, ${2:length})",
			"kind": "function",
			"details": "Binary-safe file read"
		},
		{
			"trigger": "FrenchToJD()",
			"contents": "FrenchToJD(${1:month}, ${2:day}, ${3:year})",
			"kind": "function"
		},
		{
			"trigger": "fribidi_log2vis()",
			"contents": "fribidi_log2vis(${1:str}, ${2:direction}, ${3:charset})",
			"kind": "function",
			"details": "Convert a logical string to a visual one"
		},
		{
			"trigger": "fscanf()",
			"contents": "fscanf(${1:handle}, ${2:format})",
			"kind": "function",
			"details": "Parses input from a file according to a format"
		},
		{
			"trigger": "fseek()",
			"contents": "fseek(${1:handle}, ${2:offset})",
			"kind": "function",
			"details": "Seeks on a file pointer"
		},
		{
			"trigger": "fsockopen()",
			"contents": "fsockopen(${1:hostname})",
			"kind": "function",
			"details": "Open Internet or Unix domain socket connection"
		},
		{
			"trigger": "fstat()",
			"contents": "fstat(${1:handle})",
			"kind": "function",
			"details": "Gets information about a file using an open file pointer"
		},
		{
			"trigger": "ftell()",
			"contents": "ftell(${1:handle})",
			"kind": "function",
			"details": "Returns the current position of the file read/write pointer"
		},
		{
			"trigger": "ftok()",
			"contents": "ftok(${1:pathname}, ${2:proj})",
			"kind": "function",
			"details": "Convert a pathname and a project identifier to a System V IPC key"
		},
		{
			"trigger": "ftp_alloc()",
			"contents": "ftp_alloc(${1:ftp_stream}, ${2:filesize})",
			"kind": "function",
			"details": "Allocates space for a file to be uploaded"
		},
		{
			"trigger": "ftp_cdup()",
			"contents": "ftp_cdup(${1:ftp_stream})",
			"kind": "function",
			"details": "Changes to the parent directory"
		},
		{
			"trigger": "ftp_chdir()",
			"contents": "ftp_chdir(${1:ftp_stream}, ${2:directory})",
			"kind": "function",
			"details": "Changes the current directory on a FTP server"
		},
		{
			"trigger": "ftp_chmod()",
			"contents": "ftp_chmod(${1:ftp_stream}, ${2:mode}, ${3:filename})",
			"kind": "function",
			"details": "Set permissions on a file via FTP"
		},
		{
			"trigger": "ftp_close()",
			"contents": "ftp_close(${1:ftp_stream})",
			"kind": "function",
			"details": "Closes an FTP connection"
		},
		{
			"trigger": "ftp_connect()",
			"contents": "ftp_connect(${1:host})",
			"kind": "function",
			"details": "Opens an FTP connection"
		},
		{
			"trigger": "ftp_delete()",
			"contents": "ftp_delete(${1:ftp_stream}, ${2:path})",
			"kind": "function",
			"details": "Deletes a file on the FTP server"
		},
		{
			"trigger": "ftp_exec()",
			"contents": "ftp_exec(${1:ftp_stream}, ${2:command})",
			"kind": "function",
			"details": "Requests execution of a command on the FTP server"
		},
		{
			"trigger": "ftp_fget()",
			"contents": "ftp_fget(${1:ftp_stream}, ${2:handle}, ${3:remote_file}, ${4:mode})",
			"kind": "function",
			"details": "Downloads a file from the FTP server and saves to an open file"
		},
		{
			"trigger": "ftp_fput()",
			"contents": "ftp_fput(${1:ftp_stream}, ${2:remote_file}, ${3:handle}, ${4:mode})",
			"kind": "function",
			"details": "Uploads from an open file to the FTP server"
		},
		{
			"trigger": "ftp_get()",
			"contents": "ftp_get(${1:ftp_stream}, ${2:local_file}, ${3:remote_file}, ${4:mode})",
			"kind": "function",
			"details": "Downloads a file from the FTP server"
		},
		{
			"trigger": "ftp_get_option()",
			"contents": "ftp_get_option(${1:ftp_stream}, ${2:option})",
			"kind": "function",
			"details": "Retrieves various runtime behaviours of the current FTP stream"
		},
		{
			"trigger": "ftp_login()",
			"contents": "ftp_login(${1:ftp_stream}, ${2:username}, ${3:password})",
			"kind": "function",
			"details": "Logs in to an FTP connection"
		},
		{
			"trigger": "ftp_mdtm()",
			"contents": "ftp_mdtm(${1:ftp_stream}, ${2:remote_file})",
			"kind": "function",
			"details": "Returns the last modified time of the given file"
		},
		{
			"trigger": "ftp_mkdir()",
			"contents": "ftp_mkdir(${1:ftp_stream}, ${2:directory})",
			"kind": "function",
			"details": "Creates a directory"
		},
		{
			"trigger": "ftp_nb_continue()",
			"contents": "ftp_nb_continue(${1:ftp_stream})",
			"kind": "function",
			"details": "Continues retrieving/sending a file (non-blocking)"
		},
		{
			"trigger": "ftp_nb_fget()",
			"contents": "ftp_nb_fget(${1:ftp_stream}, ${2:handle}, ${3:remote_file}, ${4:mode})",
			"kind": "function",
			"details": "Retrieves a file from the FTP server and writes it to an open file (non-blocking)"
		},
		{
			"trigger": "ftp_nb_fput()",
			"contents": "ftp_nb_fput(${1:ftp_stream}, ${2:remote_file}, ${3:handle}, ${4:mode})",
			"kind": "function",
			"details": "Stores a file from an open file to the FTP server (non-blocking)"
		},
		{
			"trigger": "ftp_nb_get()",
			"contents": "ftp_nb_get(${1:ftp_stream}, ${2:local_file}, ${3:remote_file}, ${4:mode})",
			"kind": "function",
			"details": "Retrieves a file from the FTP server and writes it to a local file (non-blocking)"
		},
		{
			"trigger": "ftp_nb_put()",
			"contents": "ftp_nb_put(${1:ftp_stream}, ${2:remote_file}, ${3:local_file}, ${4:mode})",
			"kind": "function",
			"details": "Stores a file on the FTP server (non-blocking)"
		},
		{
			"trigger": "ftp_nlist()",
			"contents": "ftp_nlist(${1:ftp_stream}, ${2:directory})",
			"kind": "function",
			"details": "Returns a list of files in the given directory"
		},
		{
			"trigger": "ftp_pasv()",
			"contents": "ftp_pasv(${1:ftp_stream}, ${2:pasv})",
			"kind": "function",
			"details": "Turns passive mode on or off"
		},
		{
			"trigger": "ftp_put()",
			"contents": "ftp_put(${1:ftp_stream}, ${2:remote_file}, ${3:local_file}, ${4:mode})",
			"kind": "function",
			"details": "Uploads a file to the FTP server"
		},
		{
			"trigger": "ftp_pwd()",
			"contents": "ftp_pwd(${1:ftp_stream})",
			"kind": "function",
			"details": "Returns the current directory name"
		},
		{
			"trigger": "ftp_quit()",
			"contents": "ftp_quit()",
			"kind": "function",
			"details": "Alias of ftp_close()"
		},
		{
			"trigger": "ftp_raw()",
			"contents": "ftp_raw(${1:ftp_stream}, ${2:command})",
			"kind": "function",
			"details": "Sends an arbitrary command to an FTP server"
		},
		{
			"trigger": "ftp_rawlist()",
			"contents": "ftp_rawlist(${1:ftp_stream}, ${2:directory})",
			"kind": "function",
			"details": "Returns a detailed list of files in the given directory"
		},
		{
			"trigger": "ftp_rename()",
			"contents": "ftp_rename(${1:ftp_stream}, ${2:oldname}, ${3:newname})",
			"kind": "function",
			"details": "Renames a file or a directory on the FTP server"
		},
		{
			"trigger": "ftp_rmdir()",
			"contents": "ftp_rmdir(${1:ftp_stream}, ${2:directory})",
			"kind": "function",
			"details": "Removes a directory"
		},
		{
			"trigger": "ftp_set_option()",
			"contents": "ftp_set_option(${1:ftp_stream}, ${2:option}, ${3:value})",
			"kind": "function",
			"details": "Set miscellaneous runtime FTP options"
		},
		{
			"trigger": "ftp_site()",
			"contents": "ftp_site(${1:ftp_stream}, ${2:command})",
			"kind": "function",
			"details": "Sends a SITE command to the server"
		},
		{
			"trigger": "ftp_size()",
			"contents": "ftp_size(${1:ftp_stream}, ${2:remote_file})",
			"kind": "function",
			"details": "Returns the size of the given file"
		},
		{
			"trigger": "ftp_ssl_connect()",
			"contents": "ftp_ssl_connect(${1:host})",
			"kind": "function",
			"details": "Opens a Secure SSL-FTP connection"
		},
		{
			"trigger": "ftp_systype()",
			"contents": "ftp_systype(${1:ftp_stream})",
			"kind": "function",
			"details": "Returns the system type identifier of the remote FTP server"
		},
		{
			"trigger": "ftruncate()",
			"contents": "ftruncate(${1:handle}, ${2:size})",
			"kind": "function",
			"details": "Truncates a file to a given length"
		},
		{
			"trigger": "func_get_arg()",
			"contents": "func_get_arg(${1:arg_num})",
			"kind": "function",
			"details": "Return an item from the argument list"
		},
		{
			"trigger": "func_get_args()",
			"contents": "func_get_args()",
			"kind": "function",
			"details": "Returns an array comprising a function's argument list"
		},
		{
			"trigger": "func_num_args()",
			"contents": "func_num_args()",
			"kind": "function",
			"details": "Returns the number of arguments passed to the function"
		},
		{
			"trigger": "function_exists()",
			"contents": "function_exists(${1:function_name})",
			"kind": "function",
			"details": "Return TRUE if the given function has been defined"
		},
		{
			"trigger": "fwrite()",
			"contents": "fwrite(${1:handle}, ${2:string})",
			"kind": "function",
			"details": "Binary-safe file write"
		},
		{
			"trigger": "gc_collect_cycles()",
			"contents": "gc_collect_cycles()",
			"kind": "function",
			"details": "Forces collection of any existing garbage cycles"
		},
		{
			"trigger": "gc_disable()",
			"contents": "gc_disable()",
			"kind": "function",
			"details": "Deactivates the circular reference collector"
		},
		{
			"trigger": "gc_enable()",
			"contents": "gc_enable()",
			"kind": "function",
			"details": "Activates the circular reference collector"
		},
		{
			"trigger": "gc_enabled()",
			"contents": "gc_enabled()",
			"kind": "function",
			"details": "Returns status of the circular reference collector"
		},
		{
			"trigger": "gd_info()",
			"contents": "gd_info()",
			"kind": "function",
			"details": "Retrieve information about the currently installed GD library"
		},
		{
			"trigger": "geoip_continent_code_by_name()",
			"contents": "geoip_continent_code_by_name(${1:hostname})",
			"kind": "function",
			"details": "Get the two letter continent code"
		},
		{
			"trigger": "geoip_country_code3_by_name()",
			"contents": "geoip_country_code3_by_name(${1:hostname})",
			"kind": "function",
			"details": "Get the three letter country code"
		},
		{
			"trigger": "geoip_country_code_by_name()",
			"contents": "geoip_country_code_by_name(${1:hostname})",
			"kind": "function",
			"details": "Get the two letter country code"
		},
		{
			"trigger": "geoip_country_name_by_name()",
			"contents": "geoip_country_name_by_name(${1:hostname})",
			"kind": "function",
			"details": "Get the full country name"
		},
		{
			"trigger": "geoip_database_info()",
			"contents": "geoip_database_info()",
			"kind": "function",
			"details": "Get GeoIP Database information"
		},
		{
			"trigger": "geoip_db_avail()",
			"contents": "geoip_db_avail(${1:database})",
			"kind": "function",
			"details": "Determine if GeoIP Database is available"
		},
		{
			"trigger": "geoip_db_filename()",
			"contents": "geoip_db_filename(${1:database})",
			"kind": "function",
			"details": "Returns the filename of the corresponding GeoIP Database"
		},
		{
			"trigger": "geoip_db_get_all_info()",
			"contents": "geoip_db_get_all_info()",
			"kind": "function",
			"details": "Returns detailed information about all GeoIP database types"
		},
		{
			"trigger": "geoip_id_by_name()",
			"contents": "geoip_id_by_name(${1:hostname})",
			"kind": "function",
			"details": "Get the Internet connection type"
		},
		{
			"trigger": "geoip_isp_by_name()",
			"contents": "geoip_isp_by_name(${1:hostname})",
			"kind": "function",
			"details": "Get the Internet Service Provider (ISP) name"
		},
		{
			"trigger": "geoip_org_by_name()",
			"contents": "geoip_org_by_name(${1:hostname})",
			"kind": "function",
			"details": "Get the organization name"
		},
		{
			"trigger": "geoip_record_by_name()",
			"contents": "geoip_record_by_name(${1:hostname})",
			"kind": "function",
			"details": "Returns the detailed City information found in the GeoIP Database"
		},
		{
			"trigger": "geoip_region_by_name()",
			"contents": "geoip_region_by_name(${1:hostname})",
			"kind": "function",
			"details": "Get the country code and region"
		},
		{
			"trigger": "geoip_region_name_by_code()",
			"contents": "geoip_region_name_by_code(${1:country_code}, ${2:region_code})",
			"kind": "function",
			"details": "Returns the region name for some country and region code combo"
		},
		{
			"trigger": "geoip_time_zone_by_country_and_region()",
			"contents": "geoip_time_zone_by_country_and_region(${1:country_code})",
			"kind": "function",
			"details": "Returns the time zone for some country and region code combo"
		},
		{
			"trigger": "get_browser()",
			"contents": "get_browser()",
			"kind": "function",
			"details": "Tells what the user's browser is capable of"
		},
		{
			"trigger": "get_called_class()",
			"contents": "get_called_class()",
			"kind": "function",
			"details": "The \"Late Static Binding\" class name"
		},
		{
			"trigger": "get_cfg_var()",
			"contents": "get_cfg_var(${1:option})",
			"kind": "function",
			"details": "Gets the value of a PHP configuration option"
		},
		{
			"trigger": "get_class()",
			"contents": "get_class()",
			"kind": "function",
			"details": "Returns the name of the class of an object"
		},
		{
			"trigger": "get_class_methods()",
			"contents": "get_class_methods(${1:class_name})",
			"kind": "function",
			"details": "Gets the class methods' names"
		},
		{
			"trigger": "get_class_vars()",
			"contents": "get_class_vars(${1:class_name})",
			"kind": "function",
			"details": "Get the default properties of the class"
		},
		{
			"trigger": "get_current_user()",
			"contents": "get_current_user()",
			"kind": "function",
			"details": "Gets the name of the owner of the current PHP script"
		},
		{
			"trigger": "get_debug_type()",
			"contents": "get_debug_type(${1:variable})",
			"kind": "function",
			"details": "Gets the debug type (type hint) of a variable."
		},
		{
			"trigger": "get_declared_classes()",
			"contents": "get_declared_classes()",
			"kind": "function",
			"details": "Returns an array with the name of the defined classes"
		},
		{
			"trigger": "get_declared_interfaces()",
			"contents": "get_declared_interfaces()",
			"kind": "function",
			"details": "Returns an array of all declared interfaces"
		},
		{
			"trigger": "get_defined_constants()",
			"contents": "get_defined_constants()",
			"kind": "function",
			"details": "Returns an associative array with the names of all the constants and their values"
		},
		{
			"trigger": "get_defined_functions()",
			"contents": "get_defined_functions()",
			"kind": "function",
			"details": "Returns an array of all defined functions"
		},
		{
			"trigger": "get_defined_vars()",
			"contents": "get_defined_vars()",
			"kind": "function",
			"details": "Returns an array of all defined variables"
		},
		{
			"trigger": "get_extension_funcs()",
			"contents": "get_extension_funcs(${1:module_name})",
			"kind": "function",
			"details": "Returns an array with the names of the functions of a module"
		},
		{
			"trigger": "get_headers()",
			"contents": "get_headers(${1:url})",
			"kind": "function",
			"details": "Fetches all the headers sent by the server in response to an HTTP request"
		},
		{
			"trigger": "get_html_translation_table()",
			"contents": "get_html_translation_table()",
			"kind": "function",
			"details": "Returns the translation table used by htmlspecialchars() and htmlentities()"
		},
		{
			"trigger": "get_include_path()",
			"contents": "get_include_path()",
			"kind": "function",
			"details": "Gets the current include_path configuration option"
		},
		{
			"trigger": "get_included_files()",
			"contents": "get_included_files()",
			"kind": "function",
			"details": "Returns an array with the names of included or required files"
		},
		{
			"trigger": "get_loaded_extensions()",
			"contents": "get_loaded_extensions()",
			"kind": "function",
			"details": "Returns an array with the names of all modules compiled and loaded"
		},
		{
			"trigger": "get_magic_quotes_gpc()",
			"contents": "get_magic_quotes_gpc()",
			"kind": "function",
			"details": "Gets the current configuration setting of magic_quotes_gpc"
		},
		{
			"trigger": "get_magic_quotes_runtime()",
			"contents": "get_magic_quotes_runtime()",
			"kind": "function",
			"details": "Gets the current active configuration setting of magic_quotes_runtime"
		},
		{
			"trigger": "get_meta_tags()",
			"contents": "get_meta_tags(${1:filename})",
			"kind": "function",
			"details": "Extracts all meta tag content attributes from a file and returns an array"
		},
		{
			"trigger": "get_object_vars()",
			"contents": "get_object_vars(${1:object})",
			"kind": "function",
			"details": "Gets the properties of the given object"
		},
		{
			"trigger": "get_parent_class()",
			"contents": "get_parent_class()",
			"kind": "function",
			"details": "Retrieves the parent class name for object or class"
		},
		{
			"trigger": "get_required_files()",
			"contents": "get_required_files()",
			"kind": "function",
			"details": "Alias of get_included_files()"
		},
		{
			"trigger": "get_resource_id()",
			"contents": "get_resource_id(${1:handle})",
			"kind": "function",
			"details": "Get the resource ID."
		},
		{
			"trigger": "get_resource_type()",
			"contents": "get_resource_type(${1:handle})",
			"kind": "function",
			"details": "Returns the resource type"
		},
		{
			"trigger": "getallheaders()",
			"contents": "getallheaders()",
			"kind": "function",
			"details": "Fetch all HTTP request headers"
		},
		{
			"trigger": "getcwd()",
			"contents": "getcwd()",
			"kind": "function",
			"details": "Gets the current working directory"
		},
		{
			"trigger": "getdate()",
			"contents": "getdate()",
			"kind": "function",
			"details": "Get date/time information"
		},
		{
			"trigger": "getenv()",
			"contents": "getenv(${1:varname})",
			"kind": "function",
			"details": "Gets the value of an environment variable"
		},
		{
			"trigger": "gethostbyaddr()",
			"contents": "gethostbyaddr(${1:ip_address})",
			"kind": "function",
			"details": "Get the Internet host name corresponding to a given IP address"
		},
		{
			"trigger": "gethostbyname()",
			"contents": "gethostbyname(${1:hostname})",
			"kind": "function",
			"details": "Get the IPv4 address corresponding to a given Internet host name"
		},
		{
			"trigger": "gethostbynamel()",
			"contents": "gethostbynamel(${1:hostname})",
			"kind": "function",
			"details": "Get a list of IPv4 addresses corresponding to a given Internet host name"
		},
		{
			"trigger": "gethostname()",
			"contents": "gethostname()",
			"kind": "function",
			"details": "Gets the host name"
		},
		{
			"trigger": "getimagesize()",
			"contents": "getimagesize(${1:filename})",
			"kind": "function",
			"details": "Get the size of an image"
		},
		{
			"trigger": "getlastmod()",
			"contents": "getlastmod()",
			"kind": "function",
			"details": "Gets time of last page modification"
		},
		{
			"trigger": "getmxrr()",
			"contents": "getmxrr(${1:hostname}, ${2:mxhosts})",
			"kind": "function",
			"details": "Get MX records corresponding to a given Internet host name"
		},
		{
			"trigger": "getmygid()",
			"contents": "getmygid()",
			"kind": "function",
			"details": "Get PHP script owner's GID"
		},
		{
			"trigger": "getmyinode()",
			"contents": "getmyinode()",
			"kind": "function",
			"details": "Gets the inode of the current script"
		},
		{
			"trigger": "getmypid()",
			"contents": "getmypid()",
			"kind": "function",
			"details": "Gets PHP's process ID"
		},
		{
			"trigger": "getmyuid()",
			"contents": "getmyuid()",
			"kind": "function",
			"details": "Gets PHP script owner's UID"
		},
		{
			"trigger": "getopt()",
			"contents": "getopt(${1:options})",
			"kind": "function",
			"details": "Gets options from the command line argument list"
		},
		{
			"trigger": "getprotobyname()",
			"contents": "getprotobyname(${1:name})",
			"kind": "function",
			"details": "Get protocol number associated with protocol name"
		},
		{
			"trigger": "getprotobynumber()",
			"contents": "getprotobynumber(${1:number})",
			"kind": "function",
			"details": "Get protocol name associated with protocol number"
		},
		{
			"trigger": "getrandmax()",
			"contents": "getrandmax()",
			"kind": "function",
			"details": "Show largest possible random value"
		},
		{
			"trigger": "getrusage()",
			"contents": "getrusage()",
			"kind": "function",
			"details": "Gets the current resource usages"
		},
		{
			"trigger": "getservbyname()",
			"contents": "getservbyname(${1:service}, ${2:protocol})",
			"kind": "function",
			"details": "Get port number associated with an Internet service and protocol"
		},
		{
			"trigger": "getservbyport()",
			"contents": "getservbyport(${1:port}, ${2:protocol})",
			"kind": "function",
			"details": "Get Internet service which corresponds to port and protocol"
		},
		{
			"trigger": "gettext()",
			"contents": "gettext(${1:message})",
			"kind": "function",
			"details": "Lookup a message in the current domain"
		},
		{
			"trigger": "gettimeofday()",
			"contents": "gettimeofday()",
			"kind": "function",
			"details": "Get current time"
		},
		{
			"trigger": "gettype()",
			"contents": "gettype(${1:var})",
			"kind": "function",
			"details": "Get the type of a variable"
		},
		{
			"trigger": "glob()",
			"contents": "glob(${1:pattern})",
			"kind": "function",
			"details": "Find pathnames matching a pattern"
		},
		{
			"trigger": "gmdate()",
			"contents": "gmdate(${1:format})",
			"kind": "function",
			"details": "Format a GMT/UTC date/time"
		},
		{
			"trigger": "gmmktime()",
			"contents": "gmmktime()",
			"kind": "function",
			"details": "Get Unix timestamp for a GMT date"
		},
		{
			"trigger": "gmp_abs()",
			"contents": "gmp_abs(${1:a})",
			"kind": "function",
			"details": "Absolute value"
		},
		{
			"trigger": "gmp_add()",
			"contents": "gmp_add(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Add numbers"
		},
		{
			"trigger": "gmp_and()",
			"contents": "gmp_and(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Bitwise AND"
		},
		{
			"trigger": "gmp_clrbit()",
			"contents": "gmp_clrbit(${1:a}, ${2:index})",
			"kind": "function",
			"details": "Clear bit"
		},
		{
			"trigger": "gmp_cmp()",
			"contents": "gmp_cmp(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Compare numbers"
		},
		{
			"trigger": "gmp_com()",
			"contents": "gmp_com(${1:a})",
			"kind": "function",
			"details": "Calculates one's complement"
		},
		{
			"trigger": "gmp_div()",
			"contents": "gmp_div()",
			"kind": "function",
			"details": "Alias of gmp_div_q()"
		},
		{
			"trigger": "gmp_div_q()",
			"contents": "gmp_div_q(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Divide numbers"
		},
		{
			"trigger": "gmp_div_qr()",
			"contents": "gmp_div_qr(${1:n}, ${2:d})",
			"kind": "function",
			"details": "Divide numbers and get quotient and remainder"
		},
		{
			"trigger": "gmp_div_r()",
			"contents": "gmp_div_r(${1:n}, ${2:d})",
			"kind": "function",
			"details": "Remainder of the division of numbers"
		},
		{
			"trigger": "gmp_divexact()",
			"contents": "gmp_divexact(${1:n}, ${2:d})",
			"kind": "function",
			"details": "Exact division of numbers"
		},
		{
			"trigger": "gmp_fact()",
			"contents": "gmp_fact(${1:a})",
			"kind": "function",
			"details": "Factorial"
		},
		{
			"trigger": "gmp_gcd()",
			"contents": "gmp_gcd(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Calculate GCD"
		},
		{
			"trigger": "gmp_gcdext()",
			"contents": "gmp_gcdext(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Calculate GCD and multipliers"
		},
		{
			"trigger": "gmp_hamdist()",
			"contents": "gmp_hamdist(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Hamming distance"
		},
		{
			"trigger": "gmp_init()",
			"contents": "gmp_init(${1:number})",
			"kind": "function",
			"details": "Create GMP number"
		},
		{
			"trigger": "gmp_intval()",
			"contents": "gmp_intval(${1:gmpnumber})",
			"kind": "function",
			"details": "Convert GMP number to integer"
		},
		{
			"trigger": "gmp_invert()",
			"contents": "gmp_invert(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Inverse by modulo"
		},
		{
			"trigger": "gmp_jacobi()",
			"contents": "gmp_jacobi(${1:a}, ${2:p})",
			"kind": "function",
			"details": "Jacobi symbol"
		},
		{
			"trigger": "gmp_legendre()",
			"contents": "gmp_legendre(${1:a}, ${2:p})",
			"kind": "function",
			"details": "Legendre symbol"
		},
		{
			"trigger": "gmp_mod()",
			"contents": "gmp_mod(${1:n}, ${2:d})",
			"kind": "function",
			"details": "Modulo operation"
		},
		{
			"trigger": "gmp_mul()",
			"contents": "gmp_mul(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Multiply numbers"
		},
		{
			"trigger": "gmp_neg()",
			"contents": "gmp_neg(${1:a})",
			"kind": "function",
			"details": "Negate number"
		},
		{
			"trigger": "gmp_nextprime()",
			"contents": "gmp_nextprime(${1:a})",
			"kind": "function",
			"details": "Find next prime number"
		},
		{
			"trigger": "gmp_or()",
			"contents": "gmp_or(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Bitwise OR"
		},
		{
			"trigger": "gmp_perfect_square()",
			"contents": "gmp_perfect_square(${1:a})",
			"kind": "function",
			"details": "Perfect square check"
		},
		{
			"trigger": "gmp_popcount()",
			"contents": "gmp_popcount(${1:a})",
			"kind": "function",
			"details": "Population count"
		},
		{
			"trigger": "gmp_pow()",
			"contents": "gmp_pow(${1:base}, ${2:exp})",
			"kind": "function",
			"details": "Raise number into power"
		},
		{
			"trigger": "gmp_powm()",
			"contents": "gmp_powm(${1:base}, ${2:exp}, ${3:mod})",
			"kind": "function",
			"details": "Raise number into power with modulo"
		},
		{
			"trigger": "gmp_prob_prime()",
			"contents": "gmp_prob_prime(${1:a})",
			"kind": "function",
			"details": "Check if number is \"probably prime\""
		},
		{
			"trigger": "gmp_random()",
			"contents": "gmp_random()",
			"kind": "function",
			"details": "Random number"
		},
		{
			"trigger": "gmp_scan0()",
			"contents": "gmp_scan0(${1:a}, ${2:start})",
			"kind": "function",
			"details": "Scan for 0"
		},
		{
			"trigger": "gmp_scan1()",
			"contents": "gmp_scan1(${1:a}, ${2:start})",
			"kind": "function",
			"details": "Scan for 1"
		},
		{
			"trigger": "gmp_setbit()",
			"contents": "gmp_setbit(${1:a}, ${2:index})",
			"kind": "function",
			"details": "Set bit"
		},
		{
			"trigger": "gmp_sign()",
			"contents": "gmp_sign(${1:a})",
			"kind": "function",
			"details": "Sign of number"
		},
		{
			"trigger": "gmp_sqrt()",
			"contents": "gmp_sqrt(${1:a})",
			"kind": "function",
			"details": "Calculate square root"
		},
		{
			"trigger": "gmp_sqrtrem()",
			"contents": "gmp_sqrtrem(${1:a})",
			"kind": "function",
			"details": "Square root with remainder"
		},
		{
			"trigger": "gmp_strval()",
			"contents": "gmp_strval(${1:gmpnumber})",
			"kind": "function",
			"details": "Convert GMP number to string"
		},
		{
			"trigger": "gmp_sub()",
			"contents": "gmp_sub(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Subtract numbers"
		},
		{
			"trigger": "gmp_testbit()",
			"contents": "gmp_testbit(${1:a}, ${2:index})",
			"kind": "function",
			"details": "Tests if a bit is set"
		},
		{
			"trigger": "gmp_xor()",
			"contents": "gmp_xor(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Bitwise XOR"
		},
		{
			"trigger": "gmstrftime()",
			"contents": "gmstrftime(${1:format})",
			"kind": "function",
			"details": "Format a GMT/UTC time/date according to locale settings"
		},
		{
			"trigger": "gnupg_adddecryptkey()",
			"contents": "gnupg_adddecryptkey(${1:identifier}, ${2:fingerprint}, ${3:passphrase})",
			"kind": "function",
			"details": "Add a key for decryption"
		},
		{
			"trigger": "gnupg_addencryptkey()",
			"contents": "gnupg_addencryptkey(${1:identifier}, ${2:fingerprint})",
			"kind": "function",
			"details": "Add a key for encryption"
		},
		{
			"trigger": "gnupg_addsignkey()",
			"contents": "gnupg_addsignkey(${1:identifier}, ${2:fingerprint})",
			"kind": "function",
			"details": "Add a key for signing"
		},
		{
			"trigger": "gnupg_cleardecryptkeys()",
			"contents": "gnupg_cleardecryptkeys(${1:identifier})",
			"kind": "function",
			"details": "Removes all keys which were set for decryption before"
		},
		{
			"trigger": "gnupg_clearencryptkeys()",
			"contents": "gnupg_clearencryptkeys(${1:identifier})",
			"kind": "function",
			"details": "Removes all keys which were set for encryption before"
		},
		{
			"trigger": "gnupg_clearsignkeys()",
			"contents": "gnupg_clearsignkeys(${1:identifier})",
			"kind": "function",
			"details": "Removes all keys which were set for signing before"
		},
		{
			"trigger": "gnupg_decrypt()",
			"contents": "gnupg_decrypt(${1:identifier}, ${2:text})",
			"kind": "function",
			"details": "Decrypts a given text"
		},
		{
			"trigger": "gnupg_decryptverify()",
			"contents": "gnupg_decryptverify(${1:identifier}, ${2:text}, ${3:plaintext})",
			"kind": "function",
			"details": "Decrypts and verifies a given text"
		},
		{
			"trigger": "gnupg_encrypt()",
			"contents": "gnupg_encrypt(${1:identifier}, ${2:plaintext})",
			"kind": "function",
			"details": "Encrypts a given text"
		},
		{
			"trigger": "gnupg_encryptsign()",
			"contents": "gnupg_encryptsign(${1:identifier}, ${2:plaintext})",
			"kind": "function",
			"details": "Encrypts and signs a given text"
		},
		{
			"trigger": "gnupg_export()",
			"contents": "gnupg_export(${1:identifier}, ${2:fingerprint})",
			"kind": "function",
			"details": "Exports a key"
		},
		{
			"trigger": "gnupg_geterror()",
			"contents": "gnupg_geterror(${1:identifier})",
			"kind": "function",
			"details": "Returns the errortext, if a function fails"
		},
		{
			"trigger": "gnupg_getprotocol()",
			"contents": "gnupg_getprotocol(${1:identifier})",
			"kind": "function",
			"details": "Returns the currently active protocol for all operations"
		},
		{
			"trigger": "gnupg_import()",
			"contents": "gnupg_import(${1:identifier}, ${2:keydata})",
			"kind": "function",
			"details": "Imports a key"
		},
		{
			"trigger": "gnupg_init()",
			"contents": "gnupg_init()",
			"kind": "function",
			"details": "Initialize a connection"
		},
		{
			"trigger": "gnupg_keyinfo()",
			"contents": "gnupg_keyinfo(${1:identifier}, ${2:pattern})",
			"kind": "function",
			"details": "Returns an array with information about all keys that matches the given pattern"
		},
		{
			"trigger": "gnupg_setarmor()",
			"contents": "gnupg_setarmor(${1:identifier}, ${2:armor})",
			"kind": "function",
			"details": "Toggle armored output"
		},
		{
			"trigger": "gnupg_seterrormode()",
			"contents": "gnupg_seterrormode(${1:identifier}, ${2:errormode})",
			"kind": "function",
			"details": "Sets the mode for error_reporting"
		},
		{
			"trigger": "gnupg_setsignmode()",
			"contents": "gnupg_setsignmode(${1:identifier}, ${2:signmode})",
			"kind": "function",
			"details": "Sets the mode for signing"
		},
		{
			"trigger": "gnupg_sign()",
			"contents": "gnupg_sign(${1:identifier}, ${2:plaintext})",
			"kind": "function",
			"details": "Signs a given text"
		},
		{
			"trigger": "gnupg_verify()",
			"contents": "gnupg_verify(${1:identifier}, ${2:signed_text}, ${3:signature})",
			"kind": "function",
			"details": "Verifies a signed text"
		},
		{
			"trigger": "gopher_parsedir()",
			"contents": "gopher_parsedir(${1:dirent})",
			"kind": "function",
			"details": "Translate a gopher formatted directory entry into an associative array"
		},
		{
			"trigger": "grapheme_extract()",
			"contents": "grapheme_extract(${1:haystack}, ${2:size})",
			"kind": "function",
			"details": "Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8"
		},
		{
			"trigger": "grapheme_stripos()",
			"contents": "grapheme_stripos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find position (in grapheme units) of first occurrence of a case-insensitive string"
		},
		{
			"trigger": "grapheme_stristr()",
			"contents": "grapheme_stristr(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack"
		},
		{
			"trigger": "grapheme_strlen()",
			"contents": "grapheme_strlen(${1:input})",
			"kind": "function",
			"details": "Get string length in grapheme units"
		},
		{
			"trigger": "grapheme_strpos()",
			"contents": "grapheme_strpos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find position (in grapheme units) of first occurrence of a string"
		},
		{
			"trigger": "grapheme_strripos()",
			"contents": "grapheme_strripos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find position (in grapheme units) of last occurrence of a case-insensitive string"
		},
		{
			"trigger": "grapheme_strrpos()",
			"contents": "grapheme_strrpos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find position (in grapheme units) of last occurrence of a string"
		},
		{
			"trigger": "grapheme_strstr()",
			"contents": "grapheme_strstr(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Returns part of haystack string from the first occurrence of needle to the end of haystack"
		},
		{
			"trigger": "grapheme_substr()",
			"contents": "grapheme_substr(${1:string}, ${2:start})",
			"kind": "function",
			"details": "Return part of a string"
		},
		{
			"trigger": "GregorianToJD()",
			"contents": "GregorianToJD(${1:month}, ${2:day}, ${3:year})",
			"kind": "function"
		},
		{
			"trigger": "gupnp_context_get_host_ip()",
			"contents": "gupnp_context_get_host_ip(${1:context})",
			"kind": "function",
			"details": "Get the IP address"
		},
		{
			"trigger": "gupnp_context_get_port()",
			"contents": "gupnp_context_get_port(${1:context})",
			"kind": "function",
			"details": "Get the port"
		},
		{
			"trigger": "gupnp_context_get_subscription_timeout()",
			"contents": "gupnp_context_get_subscription_timeout(${1:context})",
			"kind": "function",
			"details": "Get the event subscription timeout"
		},
		{
			"trigger": "gupnp_context_host_path()",
			"contents": "gupnp_context_host_path(${1:context}, ${2:local_path}, ${3:server_path})",
			"kind": "function",
			"details": "Start hosting"
		},
		{
			"trigger": "gupnp_context_new()",
			"contents": "gupnp_context_new()",
			"kind": "function",
			"details": "Create a new context"
		},
		{
			"trigger": "gupnp_context_set_subscription_timeout()",
			"contents": "gupnp_context_set_subscription_timeout(${1:context}, ${2:timeout})",
			"kind": "function",
			"details": "Sets the event subscription timeout"
		},
		{
			"trigger": "gupnp_context_timeout_add()",
			"contents": "gupnp_context_timeout_add(${1:context}, ${2:timeout}, ${3:callback})",
			"kind": "function",
			"details": "Sets a function to be called at regular intervals"
		},
		{
			"trigger": "gupnp_context_unhost_path()",
			"contents": "gupnp_context_unhost_path(${1:context}, ${2:server_path})",
			"kind": "function",
			"details": "Stop hosting"
		},
		{
			"trigger": "gupnp_control_point_browse_start()",
			"contents": "gupnp_control_point_browse_start(${1:cpoint})",
			"kind": "function",
			"details": "Start browsing"
		},
		{
			"trigger": "gupnp_control_point_browse_stop()",
			"contents": "gupnp_control_point_browse_stop(${1:cpoint})",
			"kind": "function",
			"details": "Stop browsing"
		},
		{
			"trigger": "gupnp_control_point_callback_set()",
			"contents": "gupnp_control_point_callback_set(${1:cpoint}, ${2:signal}, ${3:callback})",
			"kind": "function",
			"details": "Set control point callback"
		},
		{
			"trigger": "gupnp_control_point_new()",
			"contents": "gupnp_control_point_new(${1:context}, ${2:target})",
			"kind": "function",
			"details": "Create a new control point"
		},
		{
			"trigger": "gupnp_device_action_callback_set()",
			"contents": "gupnp_device_action_callback_set(${1:root_device}, ${2:signal}, ${3:action_name}, ${4:callback})",
			"kind": "function",
			"details": "Set device callback function"
		},
		{
			"trigger": "gupnp_device_info_get()",
			"contents": "gupnp_device_info_get(${1:root_device})",
			"kind": "function",
			"details": "Get info of root device"
		},
		{
			"trigger": "gupnp_device_info_get_service()",
			"contents": "gupnp_device_info_get_service(${1:root_device}, ${2:type})",
			"kind": "function",
			"details": "Get the service with type"
		},
		{
			"trigger": "gupnp_root_device_get_available()",
			"contents": "gupnp_root_device_get_available(${1:root_device})",
			"kind": "function",
			"details": "Check whether root device is available"
		},
		{
			"trigger": "gupnp_root_device_get_relative_location()",
			"contents": "gupnp_root_device_get_relative_location(${1:root_device})",
			"kind": "function",
			"details": "Get the relative location of root device"
		},
		{
			"trigger": "gupnp_root_device_new()",
			"contents": "gupnp_root_device_new(${1:context}, ${2:location}, ${3:description_dir})",
			"kind": "function",
			"details": "Create a new root device"
		},
		{
			"trigger": "gupnp_root_device_set_available()",
			"contents": "gupnp_root_device_set_available(${1:root_device}, ${2:available})",
			"kind": "function",
			"details": "Set whether or not root_device is available"
		},
		{
			"trigger": "gupnp_root_device_start()",
			"contents": "gupnp_root_device_start(${1:root_device})",
			"kind": "function",
			"details": "Start main loop"
		},
		{
			"trigger": "gupnp_root_device_stop()",
			"contents": "gupnp_root_device_stop(${1:root_device})",
			"kind": "function",
			"details": "Stop main loop"
		},
		{
			"trigger": "gupnp_service_action_get()",
			"contents": "gupnp_service_action_get(${1:action}, ${2:name}, ${3:type})",
			"kind": "function",
			"details": "Retrieves the specified action arguments"
		},
		{
			"trigger": "gupnp_service_action_return()",
			"contents": "gupnp_service_action_return(${1:action})",
			"kind": "function",
			"details": "Return successfully"
		},
		{
			"trigger": "gupnp_service_action_return_error()",
			"contents": "gupnp_service_action_return_error(${1:action}, ${2:error_code})",
			"kind": "function",
			"details": "Return error code"
		},
		{
			"trigger": "gupnp_service_action_set()",
			"contents": "gupnp_service_action_set(${1:action}, ${2:name}, ${3:type}, ${4:value})",
			"kind": "function",
			"details": "Sets the specified action return values"
		},
		{
			"trigger": "gupnp_service_freeze_notify()",
			"contents": "gupnp_service_freeze_notify(${1:service})",
			"kind": "function",
			"details": "Freeze new notifications"
		},
		{
			"trigger": "gupnp_service_info_get()",
			"contents": "gupnp_service_info_get(${1:proxy})",
			"kind": "function",
			"details": "Get full info of service"
		},
		{
			"trigger": "gupnp_service_info_get_introspection()",
			"contents": "gupnp_service_info_get_introspection(${1:proxy})",
			"kind": "function",
			"details": "Get resource introspection of service"
		},
		{
			"trigger": "gupnp_service_introspection_get_state_variable()",
			"contents": "gupnp_service_introspection_get_state_variable(${1:introspection}, ${2:variable_name})",
			"kind": "function",
			"details": "Returns the state variable data"
		},
		{
			"trigger": "gupnp_service_notify()",
			"contents": "gupnp_service_notify(${1:service}, ${2:name}, ${3:type}, ${4:value})",
			"kind": "function",
			"details": "Notifies listening clients"
		},
		{
			"trigger": "gupnp_service_proxy_action_get()",
			"contents": "gupnp_service_proxy_action_get(${1:proxy}, ${2:action}, ${3:name}, ${4:type})",
			"kind": "function",
			"details": "Send action to the service and get value"
		},
		{
			"trigger": "gupnp_service_proxy_action_set()",
			"contents": "gupnp_service_proxy_action_set(${1:proxy}, ${2:action}, ${3:name}, ${4:value}, ${5:type})",
			"kind": "function",
			"details": "Send action to the service and set value"
		},
		{
			"trigger": "gupnp_service_proxy_add_notify()",
			"contents": "gupnp_service_proxy_add_notify(${1:proxy}, ${2:value}, ${3:type}, ${4:callback})",
			"kind": "function",
			"details": "Sets up callback for variable change notification"
		},
		{
			"trigger": "gupnp_service_proxy_callback_set()",
			"contents": "gupnp_service_proxy_callback_set(${1:proxy}, ${2:signal}, ${3:callback})",
			"kind": "function",
			"details": "Set service proxy callback for signal"
		},
		{
			"trigger": "gupnp_service_proxy_get_subscribed()",
			"contents": "gupnp_service_proxy_get_subscribed(${1:proxy})",
			"kind": "function",
			"details": "Check whether subscription is valid to the service"
		},
		{
			"trigger": "gupnp_service_proxy_remove_notify()",
			"contents": "gupnp_service_proxy_remove_notify(${1:proxy}, ${2:value})",
			"kind": "function",
			"details": "Cancels the variable change notification"
		},
		{
			"trigger": "gupnp_service_proxy_set_subscribed()",
			"contents": "gupnp_service_proxy_set_subscribed(${1:proxy}, ${2:subscribed})",
			"kind": "function",
			"details": "(Un)subscribes to the service"
		},
		{
			"trigger": "gupnp_service_thaw_notify()",
			"contents": "gupnp_service_thaw_notify(${1:service})",
			"kind": "function",
			"details": "Sends out any pending notifications and stops queuing of new ones"
		},
		{
			"trigger": "gzclose()",
			"contents": "gzclose(${1:zp})",
			"kind": "function",
			"details": "Close an open gz-file pointer"
		},
		{
			"trigger": "gzcompress()",
			"contents": "gzcompress(${1:data})",
			"kind": "function",
			"details": "Compress a string"
		},
		{
			"trigger": "gzdecode()",
			"contents": "gzdecode(${1:data}, ${2:length})",
			"kind": "function",
			"details": "Decodes a gzip compressed string"
		},
		{
			"trigger": "gzdeflate()",
			"contents": "gzdeflate(${1:data})",
			"kind": "function",
			"details": "Deflate a string"
		},
		{
			"trigger": "gzencode()",
			"contents": "gzencode(${1:data})",
			"kind": "function",
			"details": "Create a gzip compressed string"
		},
		{
			"trigger": "gzeof()",
			"contents": "gzeof(${1:zp})",
			"kind": "function",
			"details": "Test for EOF on a gz-file pointer"
		},
		{
			"trigger": "gzfile()",
			"contents": "gzfile(${1:filename})",
			"kind": "function",
			"details": "Read entire gz-file into an array"
		},
		{
			"trigger": "gzgetc()",
			"contents": "gzgetc(${1:zp})",
			"kind": "function",
			"details": "Get character from gz-file pointer"
		},
		{
			"trigger": "gzgets()",
			"contents": "gzgets(${1:zp}, ${2:length})",
			"kind": "function",
			"details": "Get line from file pointer"
		},
		{
			"trigger": "gzgetss()",
			"contents": "gzgetss(${1:zp}, ${2:length})",
			"kind": "function",
			"details": "Get line from gz-file pointer and strip HTML tags"
		},
		{
			"trigger": "gzinflate()",
			"contents": "gzinflate(${1:data})",
			"kind": "function",
			"details": "Inflate a deflated string"
		},
		{
			"trigger": "gzopen()",
			"contents": "gzopen(${1:filename}, ${2:mode})",
			"kind": "function",
			"details": "Open gz-file"
		},
		{
			"trigger": "gzpassthru()",
			"contents": "gzpassthru(${1:zp})",
			"kind": "function",
			"details": "Output all remaining data on a gz-file pointer"
		},
		{
			"trigger": "gzputs()",
			"contents": "gzputs()",
			"kind": "function",
			"details": "Alias of gzwrite()"
		},
		{
			"trigger": "gzread()",
			"contents": "gzread(${1:zp}, ${2:length})",
			"kind": "function",
			"details": "Binary-safe gz-file read"
		},
		{
			"trigger": "gzrewind()",
			"contents": "gzrewind(${1:zp})",
			"kind": "function",
			"details": "Rewind the position of a gz-file pointer"
		},
		{
			"trigger": "gzseek()",
			"contents": "gzseek(${1:zp}, ${2:offset})",
			"kind": "function",
			"details": "Seek on a gz-file pointer"
		},
		{
			"trigger": "gztell()",
			"contents": "gztell(${1:zp})",
			"kind": "function",
			"details": "Tell gz-file pointer read/write position"
		},
		{
			"trigger": "gzuncompress()",
			"contents": "gzuncompress(${1:data})",
			"kind": "function",
			"details": "Uncompress a compressed string"
		},
		{
			"trigger": "gzwrite()",
			"contents": "gzwrite(${1:zp}, ${2:string})",
			"kind": "function",
			"details": "Binary-safe gz-file write"
		},
		{
			"trigger": "__halt_compiler()",
			"contents": "__halt_compiler()",
			"kind": "function",
			"details": "Halts the compiler execution"
		},
		{
			"trigger": "hash()",
			"contents": "hash(${1:algo}, ${2:data})",
			"kind": "function",
			"details": "Generate a hash value (message digest)"
		},
		{
			"trigger": "hash_algos()",
			"contents": "hash_algos()",
			"kind": "function",
			"details": "Return a list of registered hashing algorithms"
		},
		{
			"trigger": "hash_copy()",
			"contents": "hash_copy(${1:context})",
			"kind": "function",
			"details": "Copy hashing context"
		},
		{
			"trigger": "hash_file()",
			"contents": "hash_file(${1:algo}, ${2:filename})",
			"kind": "function",
			"details": "Generate a hash value using the contents of a given file"
		},
		{
			"trigger": "hash_final()",
			"contents": "hash_final(${1:context})",
			"kind": "function",
			"details": "Finalize an incremental hash and return resulting digest"
		},
		{
			"trigger": "hash_hmac()",
			"contents": "hash_hmac(${1:algo}, ${2:data}, ${3:key})",
			"kind": "function",
			"details": "Generate a keyed hash value using the HMAC method"
		},
		{
			"trigger": "hash_hmac_file()",
			"contents": "hash_hmac_file(${1:algo}, ${2:filename}, ${3:key})",
			"kind": "function",
			"details": "Generate a keyed hash value using the HMAC method and the contents of a given file"
		},
		{
			"trigger": "hash_init()",
			"contents": "hash_init(${1:algo})",
			"kind": "function",
			"details": "Initialize an incremental hashing context"
		},
		{
			"trigger": "hash_update()",
			"contents": "hash_update(${1:context}, ${2:data})",
			"kind": "function",
			"details": "Pump data into an active hashing context"
		},
		{
			"trigger": "hash_update_file()",
			"contents": "hash_update_file(${1:context}, ${2:filename})",
			"kind": "function",
			"details": "Pump data into an active hashing context from a file"
		},
		{
			"trigger": "hash_update_stream()",
			"contents": "hash_update_stream(${1:context}, ${2:handle})",
			"kind": "function",
			"details": "Pump data into an active hashing context from an open stream"
		},
		{
			"trigger": "header()",
			"contents": "header(${1:string})",
			"kind": "function",
			"details": "Send a raw HTTP header"
		},
		{
			"trigger": "header_remove()",
			"contents": "header_remove()",
			"kind": "function",
			"details": "Remove previously set headers"
		},
		{
			"trigger": "headers_list()",
			"contents": "headers_list()",
			"kind": "function",
			"details": "Returns a list of response headers sent (or ready to send)"
		},
		{
			"trigger": "headers_sent()",
			"contents": "headers_sent()",
			"kind": "function",
			"details": "Checks if or where headers have been sent"
		},
		{
			"trigger": "hebrev()",
			"contents": "hebrev(${1:hebrew_text})",
			"kind": "function",
			"details": "Convert logical Hebrew text to visual text"
		},
		{
			"trigger": "hebrevc()",
			"contents": "hebrevc(${1:hebrew_text})",
			"kind": "function",
			"details": "Convert logical Hebrew text to visual text with newline conversion"
		},
		{
			"trigger": "hexdec()",
			"contents": "hexdec(${1:hex_string})",
			"kind": "function",
			"details": "Hexadecimal to decimal"
		},
		{
			"trigger": "highlight_file()",
			"contents": "highlight_file(${1:filename})",
			"kind": "function",
			"details": "Syntax highlighting of a file"
		},
		{
			"trigger": "highlight_string()",
			"contents": "highlight_string(${1:str})",
			"kind": "function",
			"details": "Syntax highlighting of a string"
		},
		{
			"trigger": "html_entity_decode()",
			"contents": "html_entity_decode(${1:string})",
			"kind": "function",
			"details": "Convert HTML entities to their corresponding characters"
		},
		{
			"trigger": "htmlentities()",
			"contents": "htmlentities(${1:string})",
			"kind": "function",
			"details": "Convert all applicable characters to HTML entities"
		},
		{
			"trigger": "htmlspecialchars()",
			"contents": "htmlspecialchars(${1:string})",
			"kind": "function",
			"details": "Convert special characters to HTML entities"
		},
		{
			"trigger": "htmlspecialchars_decode()",
			"contents": "htmlspecialchars_decode(${1:string})",
			"kind": "function",
			"details": "Convert special HTML entities back to characters"
		},
		{
			"trigger": "http_build_cookie()",
			"contents": "http_build_cookie(${1:cookie})",
			"kind": "function"
		},
		{
			"trigger": "http_build_query()",
			"contents": "http_build_query(${1:query_data})",
			"kind": "function",
			"details": "Generate URL-encoded query string"
		},
		{
			"trigger": "http_build_str()",
			"contents": "http_build_str(${1:query})",
			"kind": "function"
		},
		{
			"trigger": "http_build_url()",
			"contents": "http_build_url()",
			"kind": "function"
		},
		{
			"trigger": "http_cache_etag()",
			"contents": "http_cache_etag()",
			"kind": "function"
		},
		{
			"trigger": "http_cache_last_modified()",
			"contents": "http_cache_last_modified()",
			"kind": "function"
		},
		{
			"trigger": "http_chunked_decode()",
			"contents": "http_chunked_decode(${1:encoded})",
			"kind": "function"
		},
		{
			"trigger": "http_date()",
			"contents": "http_date()",
			"kind": "function"
		},
		{
			"trigger": "http_deflate()",
			"contents": "http_deflate(${1:data})",
			"kind": "function"
		},
		{
			"trigger": "http_get()",
			"contents": "http_get(${1:url})",
			"kind": "function"
		},
		{
			"trigger": "http_get_request_body()",
			"contents": "http_get_request_body()",
			"kind": "function"
		},
		{
			"trigger": "http_get_request_body_stream()",
			"contents": "http_get_request_body_stream()",
			"kind": "function"
		},
		{
			"trigger": "http_get_request_headers()",
			"contents": "http_get_request_headers()",
			"kind": "function"
		},
		{
			"trigger": "http_head()",
			"contents": "http_head(${1:url})",
			"kind": "function"
		},
		{
			"trigger": "http_inflate()",
			"contents": "http_inflate(${1:data})",
			"kind": "function"
		},
		{
			"trigger": "http_match_etag()",
			"contents": "http_match_etag(${1:etag})",
			"kind": "function"
		},
		{
			"trigger": "http_match_modified()",
			"contents": "http_match_modified()",
			"kind": "function"
		},
		{
			"trigger": "http_match_request_header()",
			"contents": "http_match_request_header(${1:header}, ${2:value})",
			"kind": "function"
		},
		{
			"trigger": "http_negotiate_charset()",
			"contents": "http_negotiate_charset(${1:supported})",
			"kind": "function"
		},
		{
			"trigger": "http_negotiate_content_type()",
			"contents": "http_negotiate_content_type(${1:supported})",
			"kind": "function"
		},
		{
			"trigger": "http_negotiate_language()",
			"contents": "http_negotiate_language(${1:supported})",
			"kind": "function"
		},
		{
			"trigger": "http_parse_cookie()",
			"contents": "http_parse_cookie(${1:cookie})",
			"kind": "function"
		},
		{
			"trigger": "http_parse_headers()",
			"contents": "http_parse_headers(${1:header})",
			"kind": "function"
		},
		{
			"trigger": "http_parse_message()",
			"contents": "http_parse_message(${1:message})",
			"kind": "function"
		},
		{
			"trigger": "http_parse_params()",
			"contents": "http_parse_params(${1:param})",
			"kind": "function"
		},
		{
			"trigger": "http_persistent_handles_clean()",
			"contents": "http_persistent_handles_clean()",
			"kind": "function"
		},
		{
			"trigger": "http_persistent_handles_count()",
			"contents": "http_persistent_handles_count()",
			"kind": "function"
		},
		{
			"trigger": "http_persistent_handles_ident()",
			"contents": "http_persistent_handles_ident()",
			"kind": "function"
		},
		{
			"trigger": "http_post_data()",
			"contents": "http_post_data(${1:url}, ${2:data})",
			"kind": "function"
		},
		{
			"trigger": "http_post_fields()",
			"contents": "http_post_fields(${1:url}, ${2:data})",
			"kind": "function"
		},
		{
			"trigger": "http_put_data()",
			"contents": "http_put_data(${1:url}, ${2:data})",
			"kind": "function"
		},
		{
			"trigger": "http_put_file()",
			"contents": "http_put_file(${1:url}, ${2:file})",
			"kind": "function"
		},
		{
			"trigger": "http_put_stream()",
			"contents": "http_put_stream(${1:url}, ${2:stream})",
			"kind": "function"
		},
		{
			"trigger": "http_redirect()",
			"contents": "http_redirect()",
			"kind": "function"
		},
		{
			"trigger": "http_request()",
			"contents": "http_request(${1:method}, ${2:url})",
			"kind": "function"
		},
		{
			"trigger": "http_request_body_encode()",
			"contents": "http_request_body_encode(${1:fields}, ${2:files})",
			"kind": "function"
		},
		{
			"trigger": "http_request_method_exists()",
			"contents": "http_request_method_exists(${1:method})",
			"kind": "function"
		},
		{
			"trigger": "http_request_method_name()",
			"contents": "http_request_method_name(${1:method})",
			"kind": "function"
		},
		{
			"trigger": "http_request_method_register()",
			"contents": "http_request_method_register(${1:method})",
			"kind": "function"
		},
		{
			"trigger": "http_request_method_unregister()",
			"contents": "http_request_method_unregister(${1:method})",
			"kind": "function"
		},
		{
			"trigger": "http_response_code()",
			"contents": "http_response_code(${1:code})",
			"kind": "function",
			"details": "Get or Set the HTTP response code"
		},
		{
			"trigger": "http_send_content_disposition()",
			"contents": "http_send_content_disposition(${1:filename})",
			"kind": "function"
		},
		{
			"trigger": "http_send_content_type()",
			"contents": "http_send_content_type()",
			"kind": "function"
		},
		{
			"trigger": "http_send_data()",
			"contents": "http_send_data(${1:data})",
			"kind": "function"
		},
		{
			"trigger": "http_send_file()",
			"contents": "http_send_file(${1:file})",
			"kind": "function"
		},
		{
			"trigger": "http_send_last_modified()",
			"contents": "http_send_last_modified()",
			"kind": "function"
		},
		{
			"trigger": "http_send_status()",
			"contents": "http_send_status(${1:status})",
			"kind": "function"
		},
		{
			"trigger": "http_send_stream()",
			"contents": "http_send_stream(${1:stream})",
			"kind": "function"
		},
		{
			"trigger": "http_support()",
			"contents": "http_support()",
			"kind": "function"
		},
		{
			"trigger": "http_throttle()",
			"contents": "http_throttle(${1:sec})",
			"kind": "function"
		},
		{
			"trigger": "hw_Array2Objrec()",
			"contents": "hw_Array2Objrec(${1:object_array})",
			"kind": "function"
		},
		{
			"trigger": "hw_changeobject()",
			"contents": "hw_changeobject(${1:link}, ${2:objid}, ${3:attributes})",
			"kind": "function"
		},
		{
			"trigger": "hw_Children()",
			"contents": "hw_Children(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_ChildrenObj()",
			"contents": "hw_ChildrenObj(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_Close()",
			"contents": "hw_Close(${1:connection})",
			"kind": "function"
		},
		{
			"trigger": "hw_Connect()",
			"contents": "hw_Connect(${1:host}, ${2:port})",
			"kind": "function"
		},
		{
			"trigger": "hw_connection_info()",
			"contents": "hw_connection_info(${1:link})",
			"kind": "function"
		},
		{
			"trigger": "hw_cp()",
			"contents": "hw_cp(${1:connection}, ${2:object_id_array}, ${3:destination_id})",
			"kind": "function"
		},
		{
			"trigger": "hw_Deleteobject()",
			"contents": "hw_Deleteobject(${1:connection}, ${2:object_to_delete})",
			"kind": "function"
		},
		{
			"trigger": "hw_DocByAnchor()",
			"contents": "hw_DocByAnchor(${1:connection}, ${2:anchorID})",
			"kind": "function"
		},
		{
			"trigger": "hw_DocByAnchorObj()",
			"contents": "hw_DocByAnchorObj(${1:connection}, ${2:anchorID})",
			"kind": "function"
		},
		{
			"trigger": "hw_Document_Attributes()",
			"contents": "hw_Document_Attributes(${1:hw_document})",
			"kind": "function"
		},
		{
			"trigger": "hw_Document_BodyTag()",
			"contents": "hw_Document_BodyTag(${1:hw_document})",
			"kind": "function"
		},
		{
			"trigger": "hw_Document_Content()",
			"contents": "hw_Document_Content(${1:hw_document})",
			"kind": "function"
		},
		{
			"trigger": "hw_Document_SetContent()",
			"contents": "hw_Document_SetContent(${1:hw_document}, ${2:content})",
			"kind": "function"
		},
		{
			"trigger": "hw_Document_Size()",
			"contents": "hw_Document_Size(${1:hw_document})",
			"kind": "function"
		},
		{
			"trigger": "hw_dummy()",
			"contents": "hw_dummy(${1:link}, ${2:id}, ${3:msgid})",
			"kind": "function"
		},
		{
			"trigger": "hw_EditText()",
			"contents": "hw_EditText(${1:connection}, ${2:hw_document})",
			"kind": "function"
		},
		{
			"trigger": "hw_Error()",
			"contents": "hw_Error(${1:connection})",
			"kind": "function"
		},
		{
			"trigger": "hw_ErrorMsg()",
			"contents": "hw_ErrorMsg(${1:connection})",
			"kind": "function"
		},
		{
			"trigger": "hw_Free_Document()",
			"contents": "hw_Free_Document(${1:hw_document})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetAnchors()",
			"contents": "hw_GetAnchors(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetAnchorsObj()",
			"contents": "hw_GetAnchorsObj(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetAndLock()",
			"contents": "hw_GetAndLock(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetChildColl()",
			"contents": "hw_GetChildColl(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetChildCollObj()",
			"contents": "hw_GetChildCollObj(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetChildDocColl()",
			"contents": "hw_GetChildDocColl(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetChildDocCollObj()",
			"contents": "hw_GetChildDocCollObj(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetObject()",
			"contents": "hw_GetObject(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetObjectByQuery()",
			"contents": "hw_GetObjectByQuery(${1:connection}, ${2:query}, ${3:max_hits})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetObjectByQueryColl()",
			"contents": "hw_GetObjectByQueryColl(${1:connection}, ${2:objectID}, ${3:query}, ${4:max_hits})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetObjectByQueryCollObj()",
			"contents": "hw_GetObjectByQueryCollObj(${1:connection}, ${2:objectID}, ${3:query}, ${4:max_hits})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetObjectByQueryObj()",
			"contents": "hw_GetObjectByQueryObj(${1:connection}, ${2:query}, ${3:max_hits})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetParents()",
			"contents": "hw_GetParents(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetParentsObj()",
			"contents": "hw_GetParentsObj(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_getrellink()",
			"contents": "hw_getrellink(${1:link}, ${2:rootid}, ${3:sourceid}, ${4:destid})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetRemote()",
			"contents": "hw_GetRemote(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_getremotechildren()",
			"contents": "hw_getremotechildren(${1:connection}, ${2:object_record})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetSrcByDestObj()",
			"contents": "hw_GetSrcByDestObj(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_GetText()",
			"contents": "hw_GetText(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_getusername()",
			"contents": "hw_getusername(${1:connection})",
			"kind": "function"
		},
		{
			"trigger": "hw_Identify()",
			"contents": "hw_Identify(${1:link}, ${2:username}, ${3:password})",
			"kind": "function"
		},
		{
			"trigger": "hw_InCollections()",
			"contents": "hw_InCollections(${1:connection}, ${2:object_id_array}, ${3:collection_id_array}, ${4:return_collections})",
			"kind": "function"
		},
		{
			"trigger": "hw_Info()",
			"contents": "hw_Info(${1:connection})",
			"kind": "function"
		},
		{
			"trigger": "hw_InsColl()",
			"contents": "hw_InsColl(${1:connection}, ${2:objectID}, ${3:object_array})",
			"kind": "function"
		},
		{
			"trigger": "hw_InsDoc()",
			"contents": "hw_InsDoc(${1:connection}, ${2:parentID}, ${3:object_record})",
			"kind": "function"
		},
		{
			"trigger": "hw_insertanchors()",
			"contents": "hw_insertanchors(${1:hwdoc}, ${2:anchorecs}, ${3:dest})",
			"kind": "function"
		},
		{
			"trigger": "hw_InsertDocument()",
			"contents": "hw_InsertDocument(${1:connection}, ${2:parent_id}, ${3:hw_document})",
			"kind": "function"
		},
		{
			"trigger": "hw_InsertObject()",
			"contents": "hw_InsertObject(${1:connection}, ${2:object_rec}, ${3:parameter})",
			"kind": "function"
		},
		{
			"trigger": "hw_mapid()",
			"contents": "hw_mapid(${1:connection}, ${2:server_id}, ${3:object_id})",
			"kind": "function"
		},
		{
			"trigger": "hw_Modifyobject()",
			"contents": "hw_Modifyobject(${1:connection}, ${2:object_to_change}, ${3:remove}, ${4:add})",
			"kind": "function"
		},
		{
			"trigger": "hw_mv()",
			"contents": "hw_mv(${1:connection}, ${2:object_id_array}, ${3:source_id}, ${4:destination_id})",
			"kind": "function"
		},
		{
			"trigger": "hw_New_Document()",
			"contents": "hw_New_Document(${1:object_record}, ${2:document_data}, ${3:document_size})",
			"kind": "function"
		},
		{
			"trigger": "hw_objrec2array()",
			"contents": "hw_objrec2array(${1:object_record})",
			"kind": "function"
		},
		{
			"trigger": "hw_Output_Document()",
			"contents": "hw_Output_Document(${1:hw_document})",
			"kind": "function"
		},
		{
			"trigger": "hw_pConnect()",
			"contents": "hw_pConnect(${1:host}, ${2:port})",
			"kind": "function"
		},
		{
			"trigger": "hw_PipeDocument()",
			"contents": "hw_PipeDocument(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_Root()",
			"contents": "hw_Root()",
			"kind": "function"
		},
		{
			"trigger": "hw_setlinkroot()",
			"contents": "hw_setlinkroot(${1:link}, ${2:rootid})",
			"kind": "function"
		},
		{
			"trigger": "hw_stat()",
			"contents": "hw_stat(${1:link})",
			"kind": "function"
		},
		{
			"trigger": "hw_Unlock()",
			"contents": "hw_Unlock(${1:connection}, ${2:objectID})",
			"kind": "function"
		},
		{
			"trigger": "hw_Who()",
			"contents": "hw_Who(${1:connection})",
			"kind": "function"
		},
		{
			"trigger": "hw_api_attribute()",
			"contents": "hw_api_attribute()",
			"kind": "function"
		},
		{
			"trigger": "hwapi_hgcsp()",
			"contents": "hwapi_hgcsp(${1:hostname})",
			"kind": "function",
			"details": "Returns object of class hw_api"
		},
		{
			"trigger": "hw_api_content()",
			"contents": "hw_api_content(${1:content}, ${2:mimetype})",
			"kind": "function"
		},
		{
			"trigger": "hw_api_object()",
			"contents": "hw_api_object(${1:parameter})",
			"kind": "function"
		},
		{
			"trigger": "hypot()",
			"contents": "hypot(${1:x}, ${2:y})",
			"kind": "function",
			"details": "Calculate the length of the hypotenuse of a right-angle triangle"
		},
		{
			"trigger": "ibase_add_user()",
			"contents": "ibase_add_user(${1:service_handle}, ${2:user_name}, ${3:password})",
			"kind": "function",
			"details": "Add a user to a security database"
		},
		{
			"trigger": "ibase_affected_rows()",
			"contents": "ibase_affected_rows()",
			"kind": "function",
			"details": "Return the number of rows that were affected by the previous query"
		},
		{
			"trigger": "ibase_backup()",
			"contents": "ibase_backup(${1:service_handle}, ${2:source_db}, ${3:dest_file})",
			"kind": "function",
			"details": "Initiates a backup task in the service manager and returns immediately"
		},
		{
			"trigger": "ibase_blob_add()",
			"contents": "ibase_blob_add(${1:blob_handle}, ${2:data})",
			"kind": "function",
			"details": "Add data into a newly created blob"
		},
		{
			"trigger": "ibase_blob_cancel()",
			"contents": "ibase_blob_cancel(${1:blob_handle})",
			"kind": "function",
			"details": "Cancel creating blob"
		},
		{
			"trigger": "ibase_blob_close()",
			"contents": "ibase_blob_close(${1:blob_handle})",
			"kind": "function",
			"details": "Close blob"
		},
		{
			"trigger": "ibase_blob_create()",
			"contents": "ibase_blob_create()",
			"kind": "function",
			"details": "Create a new blob for adding data"
		},
		{
			"trigger": "ibase_blob_echo()",
			"contents": "ibase_blob_echo(${1:blob_id})",
			"kind": "function",
			"details": "Output blob contents to browser"
		},
		{
			"trigger": "ibase_blob_get()",
			"contents": "ibase_blob_get(${1:blob_handle}, ${2:len})",
			"kind": "function",
			"details": "Get len bytes data from open blob"
		},
		{
			"trigger": "ibase_blob_import()",
			"contents": "ibase_blob_import(${1:link_identifier}, ${2:file_handle})",
			"kind": "function",
			"details": "Create blob, copy file in it, and close it"
		},
		{
			"trigger": "ibase_blob_info()",
			"contents": "ibase_blob_info(${1:link_identifier}, ${2:blob_id})",
			"kind": "function",
			"details": "Return blob length and other useful info"
		},
		{
			"trigger": "ibase_blob_open()",
			"contents": "ibase_blob_open(${1:link_identifier}, ${2:blob_id})",
			"kind": "function",
			"details": "Open blob for retrieving data parts"
		},
		{
			"trigger": "ibase_close()",
			"contents": "ibase_close()",
			"kind": "function",
			"details": "Close a connection to an InterBase database"
		},
		{
			"trigger": "ibase_commit()",
			"contents": "ibase_commit()",
			"kind": "function",
			"details": "Commit a transaction"
		},
		{
			"trigger": "ibase_commit_ret()",
			"contents": "ibase_commit_ret()",
			"kind": "function",
			"details": "Commit a transaction without closing it"
		},
		{
			"trigger": "ibase_connect()",
			"contents": "ibase_connect()",
			"kind": "function",
			"details": "Open a connection to a database"
		},
		{
			"trigger": "ibase_db_info()",
			"contents": "ibase_db_info(${1:service_handle}, ${2:db}, ${3:action})",
			"kind": "function",
			"details": "Request statistics about a database"
		},
		{
			"trigger": "ibase_delete_user()",
			"contents": "ibase_delete_user(${1:service_handle}, ${2:user_name})",
			"kind": "function",
			"details": "Delete a user from a security database"
		},
		{
			"trigger": "ibase_drop_db()",
			"contents": "ibase_drop_db()",
			"kind": "function",
			"details": "Drops a database"
		},
		{
			"trigger": "ibase_errcode()",
			"contents": "ibase_errcode()",
			"kind": "function",
			"details": "Return an error code"
		},
		{
			"trigger": "ibase_errmsg()",
			"contents": "ibase_errmsg()",
			"kind": "function",
			"details": "Return error messages"
		},
		{
			"trigger": "ibase_execute()",
			"contents": "ibase_execute(${1:query})",
			"kind": "function",
			"details": "Execute a previously prepared query"
		},
		{
			"trigger": "ibase_fetch_assoc()",
			"contents": "ibase_fetch_assoc(${1:result})",
			"kind": "function",
			"details": "Fetch a result row from a query as an associative array"
		},
		{
			"trigger": "ibase_fetch_object()",
			"contents": "ibase_fetch_object(${1:result_id})",
			"kind": "function",
			"details": "Get an object from a InterBase database"
		},
		{
			"trigger": "ibase_fetch_row()",
			"contents": "ibase_fetch_row(${1:result_identifier})",
			"kind": "function",
			"details": "Fetch a row from an InterBase database"
		},
		{
			"trigger": "ibase_field_info()",
			"contents": "ibase_field_info(${1:result}, ${2:field_number})",
			"kind": "function",
			"details": "Get information about a field"
		},
		{
			"trigger": "ibase_free_event_handler()",
			"contents": "ibase_free_event_handler(${1:event})",
			"kind": "function",
			"details": "Cancels a registered event handler"
		},
		{
			"trigger": "ibase_free_query()",
			"contents": "ibase_free_query(${1:query})",
			"kind": "function",
			"details": "Free memory allocated by a prepared query"
		},
		{
			"trigger": "ibase_free_result()",
			"contents": "ibase_free_result(${1:result_identifier})",
			"kind": "function",
			"details": "Free a result set"
		},
		{
			"trigger": "ibase_gen_id()",
			"contents": "ibase_gen_id(${1:generator})",
			"kind": "function",
			"details": "Increments the named generator and returns its new value"
		},
		{
			"trigger": "ibase_maintain_db()",
			"contents": "ibase_maintain_db(${1:service_handle}, ${2:db}, ${3:action})",
			"kind": "function",
			"details": "Execute a maintenance command on the database server"
		},
		{
			"trigger": "ibase_modify_user()",
			"contents": "ibase_modify_user(${1:service_handle}, ${2:user_name}, ${3:password})",
			"kind": "function",
			"details": "Modify a user to a security database"
		},
		{
			"trigger": "ibase_name_result()",
			"contents": "ibase_name_result(${1:result}, ${2:name})",
			"kind": "function",
			"details": "Assigns a name to a result set"
		},
		{
			"trigger": "ibase_num_fields()",
			"contents": "ibase_num_fields(${1:result_id})",
			"kind": "function",
			"details": "Get the number of fields in a result set"
		},
		{
			"trigger": "ibase_num_params()",
			"contents": "ibase_num_params(${1:query})",
			"kind": "function",
			"details": "Return the number of parameters in a prepared query"
		},
		{
			"trigger": "ibase_param_info()",
			"contents": "ibase_param_info(${1:query}, ${2:param_number})",
			"kind": "function",
			"details": "Return information about a parameter in a prepared query"
		},
		{
			"trigger": "ibase_pconnect()",
			"contents": "ibase_pconnect()",
			"kind": "function",
			"details": "Open a persistent connection to an InterBase database"
		},
		{
			"trigger": "ibase_prepare()",
			"contents": "ibase_prepare(${1:query})",
			"kind": "function",
			"details": "Prepare a query for later binding of parameter placeholders and execution"
		},
		{
			"trigger": "ibase_query()",
			"contents": "ibase_query()",
			"kind": "function",
			"details": "Execute a query on an InterBase database"
		},
		{
			"trigger": "ibase_restore()",
			"contents": "ibase_restore(${1:service_handle}, ${2:source_file}, ${3:dest_db})",
			"kind": "function",
			"details": "Initiates a restore task in the service manager and returns immediately"
		},
		{
			"trigger": "ibase_rollback()",
			"contents": "ibase_rollback()",
			"kind": "function",
			"details": "Roll back a transaction"
		},
		{
			"trigger": "ibase_rollback_ret()",
			"contents": "ibase_rollback_ret()",
			"kind": "function",
			"details": "Roll back a transaction without closing it"
		},
		{
			"trigger": "ibase_server_info()",
			"contents": "ibase_server_info(${1:service_handle}, ${2:action})",
			"kind": "function",
			"details": "Request information about a database server"
		},
		{
			"trigger": "ibase_service_attach()",
			"contents": "ibase_service_attach(${1:host}, ${2:dba_username}, ${3:dba_password})",
			"kind": "function",
			"details": "Connect to the service manager"
		},
		{
			"trigger": "ibase_service_detach()",
			"contents": "ibase_service_detach(${1:service_handle})",
			"kind": "function",
			"details": "Disconnect from the service manager"
		},
		{
			"trigger": "ibase_set_event_handler()",
			"contents": "ibase_set_event_handler(${1:event_handler}, ${2:event_name1})",
			"kind": "function",
			"details": "Register a callback function to be called when events are posted"
		},
		{
			"trigger": "ibase_timefmt()",
			"contents": "ibase_timefmt(${1:format})",
			"kind": "function"
		},
		{
			"trigger": "ibase_trans()",
			"contents": "ibase_trans()",
			"kind": "function",
			"details": "Begin a transaction"
		},
		{
			"trigger": "ibase_wait_event()",
			"contents": "ibase_wait_event(${1:event_name1})",
			"kind": "function",
			"details": "Wait for an event to be posted by the database"
		},
		{
			"trigger": "iconv()",
			"contents": "iconv(${1:in_charset}, ${2:out_charset}, ${3:str})",
			"kind": "function",
			"details": "Convert string to requested character encoding"
		},
		{
			"trigger": "iconv_get_encoding()",
			"contents": "iconv_get_encoding()",
			"kind": "function",
			"details": "Retrieve internal configuration variables of iconv extension"
		},
		{
			"trigger": "iconv_mime_decode()",
			"contents": "iconv_mime_decode(${1:encoded_header})",
			"kind": "function",
			"details": "Decodes a MIME header field"
		},
		{
			"trigger": "iconv_mime_decode_headers()",
			"contents": "iconv_mime_decode_headers(${1:encoded_headers})",
			"kind": "function",
			"details": "Decodes multiple MIME header fields at once"
		},
		{
			"trigger": "iconv_mime_encode()",
			"contents": "iconv_mime_encode(${1:field_name}, ${2:field_value})",
			"kind": "function",
			"details": "Composes a MIME header field"
		},
		{
			"trigger": "iconv_set_encoding()",
			"contents": "iconv_set_encoding(${1:type}, ${2:charset})",
			"kind": "function",
			"details": "Set current setting for character encoding conversion"
		},
		{
			"trigger": "iconv_strlen()",
			"contents": "iconv_strlen(${1:str})",
			"kind": "function",
			"details": "Returns the character count of string"
		},
		{
			"trigger": "iconv_strpos()",
			"contents": "iconv_strpos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Finds position of first occurrence of a needle within a haystack"
		},
		{
			"trigger": "iconv_strrpos()",
			"contents": "iconv_strrpos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Finds the last occurrence of a needle within a haystack"
		},
		{
			"trigger": "iconv_substr()",
			"contents": "iconv_substr(${1:str}, ${2:offset})",
			"kind": "function",
			"details": "Cut out part of a string"
		},
		{
			"trigger": "id3_get_frame_long_name()",
			"contents": "id3_get_frame_long_name(${1:frameId})",
			"kind": "function",
			"details": "Get the long name of an ID3v2 frame"
		},
		{
			"trigger": "id3_get_frame_short_name()",
			"contents": "id3_get_frame_short_name(${1:frameId})",
			"kind": "function",
			"details": "Get the short name of an ID3v2 frame"
		},
		{
			"trigger": "id3_get_genre_id()",
			"contents": "id3_get_genre_id(${1:genre})",
			"kind": "function",
			"details": "Get the id for a genre"
		},
		{
			"trigger": "id3_get_genre_list()",
			"contents": "id3_get_genre_list()",
			"kind": "function",
			"details": "Get all possible genre values"
		},
		{
			"trigger": "id3_get_genre_name()",
			"contents": "id3_get_genre_name(${1:genre_id})",
			"kind": "function",
			"details": "Get the name for a genre id"
		},
		{
			"trigger": "id3_get_tag()",
			"contents": "id3_get_tag(${1:filename})",
			"kind": "function",
			"details": "Get all information stored in an ID3 tag"
		},
		{
			"trigger": "id3_get_version()",
			"contents": "id3_get_version(${1:filename})",
			"kind": "function",
			"details": "Get version of an ID3 tag"
		},
		{
			"trigger": "id3_remove_tag()",
			"contents": "id3_remove_tag(${1:filename})",
			"kind": "function",
			"details": "Remove an existing ID3 tag"
		},
		{
			"trigger": "id3_set_tag()",
			"contents": "id3_set_tag(${1:filename}, ${2:tag})",
			"kind": "function",
			"details": "Update information stored in an ID3 tag"
		},
		{
			"trigger": "idate()",
			"contents": "idate(${1:format})",
			"kind": "function",
			"details": "Format a local time/date as integer"
		},
		{
			"trigger": "idn_to_ascii()",
			"contents": "idn_to_ascii(${1:domain})",
			"kind": "function",
			"details": "Convert domain name to IDNA ASCII form"
		},
		{
			"trigger": "idn_to_unicode()",
			"contents": "idn_to_unicode()",
			"kind": "function"
		},
		{
			"trigger": "idn_to_utf8()",
			"contents": "idn_to_utf8(${1:domain})",
			"kind": "function",
			"details": "Convert domain name from IDNA ASCII to Unicode"
		},
		{
			"trigger": "ifx_affected_rows()",
			"contents": "ifx_affected_rows(${1:result_id})",
			"kind": "function",
			"details": "Get number of rows affected by a query"
		},
		{
			"trigger": "ifx_blobinfile_mode()",
			"contents": "ifx_blobinfile_mode(${1:mode})",
			"kind": "function",
			"details": "Set the default blob mode for all select queries"
		},
		{
			"trigger": "ifx_byteasvarchar()",
			"contents": "ifx_byteasvarchar(${1:mode})",
			"kind": "function",
			"details": "Set the default byte mode"
		},
		{
			"trigger": "ifx_close()",
			"contents": "ifx_close()",
			"kind": "function",
			"details": "Close Informix connection"
		},
		{
			"trigger": "ifx_connect()",
			"contents": "ifx_connect()",
			"kind": "function",
			"details": "Open Informix server connection"
		},
		{
			"trigger": "ifx_copy_blob()",
			"contents": "ifx_copy_blob(${1:bid})",
			"kind": "function",
			"details": "Duplicates the given blob object"
		},
		{
			"trigger": "ifx_create_blob()",
			"contents": "ifx_create_blob(${1:type}, ${2:mode}, ${3:param})",
			"kind": "function",
			"details": "Creates an blob object"
		},
		{
			"trigger": "ifx_create_char()",
			"contents": "ifx_create_char(${1:param})",
			"kind": "function",
			"details": "Creates an char object"
		},
		{
			"trigger": "ifx_do()",
			"contents": "ifx_do(${1:result_id})",
			"kind": "function",
			"details": "Execute a previously prepared SQL-statement"
		},
		{
			"trigger": "ifx_error()",
			"contents": "ifx_error()",
			"kind": "function",
			"details": "Returns error code of last Informix call"
		},
		{
			"trigger": "ifx_errormsg()",
			"contents": "ifx_errormsg()",
			"kind": "function",
			"details": "Returns error message of last Informix call"
		},
		{
			"trigger": "ifx_fetch_row()",
			"contents": "ifx_fetch_row(${1:result_id})",
			"kind": "function",
			"details": "Get row as an associative array"
		},
		{
			"trigger": "ifx_fieldproperties()",
			"contents": "ifx_fieldproperties(${1:result_id})",
			"kind": "function",
			"details": "List of SQL fieldproperties"
		},
		{
			"trigger": "ifx_fieldtypes()",
			"contents": "ifx_fieldtypes(${1:result_id})",
			"kind": "function",
			"details": "List of Informix SQL fields"
		},
		{
			"trigger": "ifx_free_blob()",
			"contents": "ifx_free_blob(${1:bid})",
			"kind": "function",
			"details": "Deletes the blob object"
		},
		{
			"trigger": "ifx_free_char()",
			"contents": "ifx_free_char(${1:bid})",
			"kind": "function",
			"details": "Deletes the char object"
		},
		{
			"trigger": "ifx_free_result()",
			"contents": "ifx_free_result(${1:result_id})",
			"kind": "function",
			"details": "Releases resources for the query"
		},
		{
			"trigger": "ifx_get_blob()",
			"contents": "ifx_get_blob(${1:bid})",
			"kind": "function",
			"details": "Return the content of a blob object"
		},
		{
			"trigger": "ifx_get_char()",
			"contents": "ifx_get_char(${1:bid})",
			"kind": "function",
			"details": "Return the content of the char object"
		},
		{
			"trigger": "ifx_getsqlca()",
			"contents": "ifx_getsqlca(${1:result_id})",
			"kind": "function",
			"details": "Get the contents of sqlca.sqlerrd[0..5] after a query"
		},
		{
			"trigger": "ifx_htmltbl_result()",
			"contents": "ifx_htmltbl_result(${1:result_id})",
			"kind": "function",
			"details": "Formats all rows of a query into a HTML table"
		},
		{
			"trigger": "ifx_nullformat()",
			"contents": "ifx_nullformat(${1:mode})",
			"kind": "function",
			"details": "Sets the default return value on a fetch row"
		},
		{
			"trigger": "ifx_num_fields()",
			"contents": "ifx_num_fields(${1:result_id})",
			"kind": "function",
			"details": "Returns the number of columns in the query"
		},
		{
			"trigger": "ifx_num_rows()",
			"contents": "ifx_num_rows(${1:result_id})",
			"kind": "function",
			"details": "Count the rows already fetched from a query"
		},
		{
			"trigger": "ifx_pconnect()",
			"contents": "ifx_pconnect()",
			"kind": "function",
			"details": "Open persistent Informix connection"
		},
		{
			"trigger": "ifx_prepare()",
			"contents": "ifx_prepare(${1:query}, ${2:link_identifier})",
			"kind": "function",
			"details": "Prepare an SQL-statement for execution"
		},
		{
			"trigger": "ifx_query()",
			"contents": "ifx_query(${1:query}, ${2:link_identifier})",
			"kind": "function",
			"details": "Send Informix query"
		},
		{
			"trigger": "ifx_textasvarchar()",
			"contents": "ifx_textasvarchar(${1:mode})",
			"kind": "function",
			"details": "Set the default text mode"
		},
		{
			"trigger": "ifx_update_blob()",
			"contents": "ifx_update_blob(${1:bid}, ${2:content})",
			"kind": "function",
			"details": "Updates the content of the blob object"
		},
		{
			"trigger": "ifx_update_char()",
			"contents": "ifx_update_char(${1:bid}, ${2:content})",
			"kind": "function",
			"details": "Updates the content of the char object"
		},
		{
			"trigger": "ifxus_close_slob()",
			"contents": "ifxus_close_slob(${1:bid})",
			"kind": "function",
			"details": "Deletes the slob object"
		},
		{
			"trigger": "ifxus_create_slob()",
			"contents": "ifxus_create_slob(${1:mode})",
			"kind": "function",
			"details": "Creates an slob object and opens it"
		},
		{
			"trigger": "ifxus_free_slob()",
			"contents": "ifxus_free_slob(${1:bid})",
			"kind": "function",
			"details": "Deletes the slob object"
		},
		{
			"trigger": "ifxus_open_slob()",
			"contents": "ifxus_open_slob(${1:bid}, ${2:mode})",
			"kind": "function",
			"details": "Opens an slob object"
		},
		{
			"trigger": "ifxus_read_slob()",
			"contents": "ifxus_read_slob(${1:bid}, ${2:nbytes})",
			"kind": "function",
			"details": "Reads nbytes of the slob object"
		},
		{
			"trigger": "ifxus_seek_slob()",
			"contents": "ifxus_seek_slob(${1:bid}, ${2:mode}, ${3:offset})",
			"kind": "function",
			"details": "Sets the current file or seek position"
		},
		{
			"trigger": "ifxus_tell_slob()",
			"contents": "ifxus_tell_slob(${1:bid})",
			"kind": "function",
			"details": "Returns the current file or seek position"
		},
		{
			"trigger": "ifxus_write_slob()",
			"contents": "ifxus_write_slob(${1:bid}, ${2:content})",
			"kind": "function",
			"details": "Writes a string into the slob object"
		},
		{
			"trigger": "ignore_user_abort()",
			"contents": "ignore_user_abort()",
			"kind": "function",
			"details": "Set whether a client disconnect should abort script execution"
		},
		{
			"trigger": "iis_add_server()",
			"contents": "iis_add_server(${1:path}, ${2:comment}, ${3:server_ip}, ${4:port}, ${5:host_name}, ${6:rights}, ${7:start_server})",
			"kind": "function",
			"details": "Creates a new virtual web server"
		},
		{
			"trigger": "iis_get_dir_security()",
			"contents": "iis_get_dir_security(${1:server_instance}, ${2:virtual_path})",
			"kind": "function",
			"details": "Gets Directory Security"
		},
		{
			"trigger": "iis_get_script_map()",
			"contents": "iis_get_script_map(${1:server_instance}, ${2:virtual_path}, ${3:script_extension})",
			"kind": "function",
			"details": "Gets script mapping on a virtual directory for a specific extension"
		},
		{
			"trigger": "iis_get_server_by_comment()",
			"contents": "iis_get_server_by_comment(${1:comment})",
			"kind": "function",
			"details": "Return the instance number associated with the Comment"
		},
		{
			"trigger": "iis_get_server_by_path()",
			"contents": "iis_get_server_by_path(${1:path})",
			"kind": "function",
			"details": "Return the instance number associated with the Path"
		},
		{
			"trigger": "iis_get_server_rights()",
			"contents": "iis_get_server_rights(${1:server_instance}, ${2:virtual_path})",
			"kind": "function",
			"details": "Gets server rights"
		},
		{
			"trigger": "iis_get_service_state()",
			"contents": "iis_get_service_state(${1:service_id})",
			"kind": "function",
			"details": "Returns the state for the service defined by ServiceId"
		},
		{
			"trigger": "iis_remove_server()",
			"contents": "iis_remove_server(${1:server_instance})",
			"kind": "function",
			"details": "Removes the virtual web server indicated by ServerInstance"
		},
		{
			"trigger": "iis_set_app_settings()",
			"contents": "iis_set_app_settings(${1:server_instance}, ${2:virtual_path}, ${3:application_scope})",
			"kind": "function",
			"details": "Creates application scope for a virtual directory"
		},
		{
			"trigger": "iis_set_dir_security()",
			"contents": "iis_set_dir_security(${1:server_instance}, ${2:virtual_path}, ${3:directory_flags})",
			"kind": "function",
			"details": "Sets Directory Security"
		},
		{
			"trigger": "iis_set_script_map()",
			"contents": "iis_set_script_map(${1:server_instance}, ${2:virtual_path}, ${3:script_extension}, ${4:engine_path}, ${5:allow_scripting})",
			"kind": "function",
			"details": "Sets script mapping on a virtual directory"
		},
		{
			"trigger": "iis_set_server_rights()",
			"contents": "iis_set_server_rights(${1:server_instance}, ${2:virtual_path}, ${3:directory_flags})",
			"kind": "function",
			"details": "Sets server rights"
		},
		{
			"trigger": "iis_start_server()",
			"contents": "iis_start_server(${1:server_instance})",
			"kind": "function",
			"details": "Starts the virtual web server"
		},
		{
			"trigger": "iis_start_service()",
			"contents": "iis_start_service(${1:service_id})",
			"kind": "function",
			"details": "Starts the service defined by ServiceId"
		},
		{
			"trigger": "iis_stop_server()",
			"contents": "iis_stop_server(${1:server_instance})",
			"kind": "function",
			"details": "Stops the virtual web server"
		},
		{
			"trigger": "iis_stop_service()",
			"contents": "iis_stop_service(${1:service_id})",
			"kind": "function",
			"details": "Stops the service defined by ServiceId"
		},
		{
			"trigger": "image2wbmp()",
			"contents": "image2wbmp(${1:image})",
			"kind": "function",
			"details": "Output image to browser or file"
		},
		{
			"trigger": "image_type_to_extension()",
			"contents": "image_type_to_extension(${1:imagetype})",
			"kind": "function",
			"details": "Get file extension for image type"
		},
		{
			"trigger": "image_type_to_mime_type()",
			"contents": "image_type_to_mime_type(${1:imagetype})",
			"kind": "function",
			"details": "Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype"
		},
		{
			"trigger": "imagealphablending()",
			"contents": "imagealphablending(${1:image}, ${2:blendmode})",
			"kind": "function",
			"details": "Set the blending mode for an image"
		},
		{
			"trigger": "imageantialias()",
			"contents": "imageantialias(${1:image}, ${2:enabled})",
			"kind": "function",
			"details": "Should antialias functions be used or not"
		},
		{
			"trigger": "imagearc()",
			"contents": "imagearc(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:start}, ${7:end}, ${8:color})",
			"kind": "function",
			"details": "Draws an arc"
		},
		{
			"trigger": "imagechar()",
			"contents": "imagechar(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:c}, ${6:color})",
			"kind": "function",
			"details": "Draw a character horizontally"
		},
		{
			"trigger": "imagecharup()",
			"contents": "imagecharup(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:c}, ${6:color})",
			"kind": "function",
			"details": "Draw a character vertically"
		},
		{
			"trigger": "imagecolorallocate()",
			"contents": "imagecolorallocate(${1:image}, ${2:red}, ${3:green}, ${4:blue})",
			"kind": "function",
			"details": "Allocate a color for an image"
		},
		{
			"trigger": "imagecolorallocatealpha()",
			"contents": "imagecolorallocatealpha(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
			"kind": "function",
			"details": "Allocate a color for an image"
		},
		{
			"trigger": "imagecolorat()",
			"contents": "imagecolorat(${1:image}, ${2:x}, ${3:y})",
			"kind": "function",
			"details": "Get the index of the color of a pixel"
		},
		{
			"trigger": "imagecolorclosest()",
			"contents": "imagecolorclosest(${1:image}, ${2:red}, ${3:green}, ${4:blue})",
			"kind": "function",
			"details": "Get the index of the closest color to the specified color"
		},
		{
			"trigger": "imagecolorclosestalpha()",
			"contents": "imagecolorclosestalpha(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
			"kind": "function",
			"details": "Get the index of the closest color to the specified color + alpha"
		},
		{
			"trigger": "imagecolorclosesthwb()",
			"contents": "imagecolorclosesthwb(${1:image}, ${2:red}, ${3:green}, ${4:blue})",
			"kind": "function",
			"details": "Get the index of the color which has the hue, white and blackness"
		},
		{
			"trigger": "imagecolordeallocate()",
			"contents": "imagecolordeallocate(${1:image}, ${2:color})",
			"kind": "function",
			"details": "De-allocate a color for an image"
		},
		{
			"trigger": "imagecolorexact()",
			"contents": "imagecolorexact(${1:image}, ${2:red}, ${3:green}, ${4:blue})",
			"kind": "function",
			"details": "Get the index of the specified color"
		},
		{
			"trigger": "imagecolorexactalpha()",
			"contents": "imagecolorexactalpha(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
			"kind": "function",
			"details": "Get the index of the specified color + alpha"
		},
		{
			"trigger": "imagecolormatch()",
			"contents": "imagecolormatch(${1:image1}, ${2:image2})",
			"kind": "function",
			"details": "Makes the colors of the palette version of an image more closely match the true color version"
		},
		{
			"trigger": "imagecolorresolve()",
			"contents": "imagecolorresolve(${1:image}, ${2:red}, ${3:green}, ${4:blue})",
			"kind": "function",
			"details": "Get the index of the specified color or its closest possible alternative"
		},
		{
			"trigger": "imagecolorresolvealpha()",
			"contents": "imagecolorresolvealpha(${1:image}, ${2:red}, ${3:green}, ${4:blue}, ${5:alpha})",
			"kind": "function",
			"details": "Get the index of the specified color + alpha or its closest possible alternative"
		},
		{
			"trigger": "imagecolorset()",
			"contents": "imagecolorset(${1:image}, ${2:index}, ${3:red}, ${4:green}, ${5:blue})",
			"kind": "function",
			"details": "Set the color for the specified palette index"
		},
		{
			"trigger": "imagecolorsforindex()",
			"contents": "imagecolorsforindex(${1:image}, ${2:index})",
			"kind": "function",
			"details": "Get the colors for an index"
		},
		{
			"trigger": "imagecolorstotal()",
			"contents": "imagecolorstotal(${1:image})",
			"kind": "function",
			"details": "Find out the number of colors in an image's palette"
		},
		{
			"trigger": "imagecolortransparent()",
			"contents": "imagecolortransparent(${1:image})",
			"kind": "function",
			"details": "Define a color as transparent"
		},
		{
			"trigger": "imageconvolution()",
			"contents": "imageconvolution(${1:image}, ${2:matrix}, ${3:div}, ${4:offset})",
			"kind": "function",
			"details": "Apply a 3x3 convolution matrix, using coefficient and offset"
		},
		{
			"trigger": "imagecopy()",
			"contents": "imagecopy(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h})",
			"kind": "function",
			"details": "Copy part of an image"
		},
		{
			"trigger": "imagecopymerge()",
			"contents": "imagecopymerge(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h}, ${9:pct})",
			"kind": "function",
			"details": "Copy and merge part of an image"
		},
		{
			"trigger": "imagecopymergegray()",
			"contents": "imagecopymergegray(${1:dst_im}, ${2:src_im}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:src_w}, ${8:src_h}, ${9:pct})",
			"kind": "function",
			"details": "Copy and merge part of an image with gray scale"
		},
		{
			"trigger": "imagecopyresampled()",
			"contents": "imagecopyresampled(${1:dst_image}, ${2:src_image}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:dst_w}, ${8:dst_h}, ${9:src_w}, ${10:src_h})",
			"kind": "function",
			"details": "Copy and resize part of an image with resampling"
		},
		{
			"trigger": "imagecopyresized()",
			"contents": "imagecopyresized(${1:dst_image}, ${2:src_image}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:dst_w}, ${8:dst_h}, ${9:src_w}, ${10:src_h})",
			"kind": "function",
			"details": "Copy and resize part of an image"
		},
		{
			"trigger": "imagecreate()",
			"contents": "imagecreate(${1:width}, ${2:height})",
			"kind": "function",
			"details": "Create a new palette based image"
		},
		{
			"trigger": "imagecreatefromgd()",
			"contents": "imagecreatefromgd(${1:filename})",
			"kind": "function",
			"details": "Create a new image from GD file or URL"
		},
		{
			"trigger": "imagecreatefromgd2()",
			"contents": "imagecreatefromgd2(${1:filename})",
			"kind": "function",
			"details": "Create a new image from GD2 file or URL"
		},
		{
			"trigger": "imagecreatefromgd2part()",
			"contents": "imagecreatefromgd2part(${1:filename}, ${2:srcX}, ${3:srcY}, ${4:width}, ${5:height})",
			"kind": "function",
			"details": "Create a new image from a given part of GD2 file or URL"
		},
		{
			"trigger": "imagecreatefromgif()",
			"contents": "imagecreatefromgif(${1:filename})",
			"kind": "function",
			"details": "Create a new image from file or URL"
		},
		{
			"trigger": "imagecreatefromjpeg()",
			"contents": "imagecreatefromjpeg(${1:filename})",
			"kind": "function",
			"details": "Create a new image from file or URL"
		},
		{
			"trigger": "imagecreatefrompng()",
			"contents": "imagecreatefrompng(${1:filename})",
			"kind": "function",
			"details": "Create a new image from file or URL"
		},
		{
			"trigger": "imagecreatefromstring()",
			"contents": "imagecreatefromstring(${1:data})",
			"kind": "function",
			"details": "Create a new image from the image stream in the string"
		},
		{
			"trigger": "imagecreatefromwbmp()",
			"contents": "imagecreatefromwbmp(${1:filename})",
			"kind": "function",
			"details": "Create a new image from file or URL"
		},
		{
			"trigger": "imagecreatefromxbm()",
			"contents": "imagecreatefromxbm(${1:filename})",
			"kind": "function",
			"details": "Create a new image from file or URL"
		},
		{
			"trigger": "imagecreatefromxpm()",
			"contents": "imagecreatefromxpm(${1:filename})",
			"kind": "function",
			"details": "Create a new image from file or URL"
		},
		{
			"trigger": "imagecreatetruecolor()",
			"contents": "imagecreatetruecolor(${1:width}, ${2:height})",
			"kind": "function",
			"details": "Create a new true color image"
		},
		{
			"trigger": "imagedashedline()",
			"contents": "imagedashedline(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})",
			"kind": "function",
			"details": "Draw a dashed line"
		},
		{
			"trigger": "imagedestroy()",
			"contents": "imagedestroy(${1:image})",
			"kind": "function",
			"details": "Destroy an image"
		},
		{
			"trigger": "imageellipse()",
			"contents": "imageellipse(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:color})",
			"kind": "function",
			"details": "Draw an ellipse"
		},
		{
			"trigger": "imagefill()",
			"contents": "imagefill(${1:image}, ${2:x}, ${3:y}, ${4:color})",
			"kind": "function",
			"details": "Flood fill"
		},
		{
			"trigger": "imagefilledarc()",
			"contents": "imagefilledarc(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:start}, ${7:end}, ${8:color}, ${9:style})",
			"kind": "function",
			"details": "Draw a partial arc and fill it"
		},
		{
			"trigger": "imagefilledellipse()",
			"contents": "imagefilledellipse(${1:image}, ${2:cx}, ${3:cy}, ${4:width}, ${5:height}, ${6:color})",
			"kind": "function",
			"details": "Draw a filled ellipse"
		},
		{
			"trigger": "imagefilledpolygon()",
			"contents": "imagefilledpolygon(${1:image}, ${2:points}, ${3:num_points}, ${4:color})",
			"kind": "function",
			"details": "Draw a filled polygon"
		},
		{
			"trigger": "imagefilledrectangle()",
			"contents": "imagefilledrectangle(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})",
			"kind": "function",
			"details": "Draw a filled rectangle"
		},
		{
			"trigger": "imagefilltoborder()",
			"contents": "imagefilltoborder(${1:image}, ${2:x}, ${3:y}, ${4:border}, ${5:color})",
			"kind": "function",
			"details": "Flood fill to specific color"
		},
		{
			"trigger": "imagefilter()",
			"contents": "imagefilter(${1:image}, ${2:filtertype})",
			"kind": "function",
			"details": "Applies a filter to an image"
		},
		{
			"trigger": "imagefontheight()",
			"contents": "imagefontheight(${1:font})",
			"kind": "function",
			"details": "Get font height"
		},
		{
			"trigger": "imagefontwidth()",
			"contents": "imagefontwidth(${1:font})",
			"kind": "function",
			"details": "Get font width"
		},
		{
			"trigger": "imageftbbox()",
			"contents": "imageftbbox(${1:size}, ${2:angle}, ${3:fontfile}, ${4:text})",
			"kind": "function",
			"details": "Give the bounding box of a text using fonts via freetype2"
		},
		{
			"trigger": "imagefttext()",
			"contents": "imagefttext(${1:image}, ${2:size}, ${3:angle}, ${4:x}, ${5:y}, ${6:color}, ${7:fontfile}, ${8:text})",
			"kind": "function",
			"details": "Write text to the image using fonts using FreeType 2"
		},
		{
			"trigger": "imagegammacorrect()",
			"contents": "imagegammacorrect(${1:image}, ${2:inputgamma}, ${3:outputgamma})",
			"kind": "function",
			"details": "Apply a gamma correction to a GD image"
		},
		{
			"trigger": "imagegd()",
			"contents": "imagegd(${1:image})",
			"kind": "function",
			"details": "Output GD image to browser or file"
		},
		{
			"trigger": "imagegd2()",
			"contents": "imagegd2(${1:image})",
			"kind": "function",
			"details": "Output GD2 image to browser or file"
		},
		{
			"trigger": "imagegif()",
			"contents": "imagegif(${1:image})",
			"kind": "function",
			"details": "Output image to browser or file"
		},
		{
			"trigger": "imagegrabscreen()",
			"contents": "imagegrabscreen()",
			"kind": "function",
			"details": "Captures the whole screen"
		},
		{
			"trigger": "imagegrabwindow()",
			"contents": "imagegrabwindow(${1:window_handle})",
			"kind": "function",
			"details": "Captures a window"
		},
		{
			"trigger": "imageinterlace()",
			"contents": "imageinterlace(${1:image})",
			"kind": "function",
			"details": "Enable or disable interlace"
		},
		{
			"trigger": "imageistruecolor()",
			"contents": "imageistruecolor(${1:image})",
			"kind": "function",
			"details": "Finds whether an image is a truecolor image"
		},
		{
			"trigger": "imagejpeg()",
			"contents": "imagejpeg(${1:image})",
			"kind": "function",
			"details": "Output image to browser or file"
		},
		{
			"trigger": "imagelayereffect()",
			"contents": "imagelayereffect(${1:image}, ${2:effect})",
			"kind": "function",
			"details": "Set the alpha blending flag to use layering effects"
		},
		{
			"trigger": "imageline()",
			"contents": "imageline(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})",
			"kind": "function",
			"details": "Draw a line"
		},
		{
			"trigger": "imageloadfont()",
			"contents": "imageloadfont(${1:file})",
			"kind": "function",
			"details": "Load a new font"
		},
		{
			"trigger": "imagepalettecopy()",
			"contents": "imagepalettecopy(${1:destination}, ${2:source})",
			"kind": "function",
			"details": "Copy the palette from one image to another"
		},
		{
			"trigger": "imagepng()",
			"contents": "imagepng(${1:image})",
			"kind": "function",
			"details": "Output a PNG image to either the browser or a file"
		},
		{
			"trigger": "imagepolygon()",
			"contents": "imagepolygon(${1:image}, ${2:points}, ${3:num_points}, ${4:color})",
			"kind": "function",
			"details": "Draws a polygon"
		},
		{
			"trigger": "imagepsbbox()",
			"contents": "imagepsbbox(${1:text}, ${2:font}, ${3:size})",
			"kind": "function",
			"details": "Give the bounding box of a text rectangle using PostScript Type1 fonts"
		},
		{
			"trigger": "imagepsencodefont()",
			"contents": "imagepsencodefont(${1:font_index}, ${2:encodingfile})",
			"kind": "function",
			"details": "Change the character encoding vector of a font"
		},
		{
			"trigger": "imagepsextendfont()",
			"contents": "imagepsextendfont(${1:font_index}, ${2:extend})",
			"kind": "function",
			"details": "Extend or condense a font"
		},
		{
			"trigger": "imagepsfreefont()",
			"contents": "imagepsfreefont(${1:font_index})",
			"kind": "function",
			"details": "Free memory used by a PostScript Type 1 font"
		},
		{
			"trigger": "imagepsloadfont()",
			"contents": "imagepsloadfont(${1:filename})",
			"kind": "function",
			"details": "Load a PostScript Type 1 font from file"
		},
		{
			"trigger": "imagepsslantfont()",
			"contents": "imagepsslantfont(${1:font_index}, ${2:slant})",
			"kind": "function",
			"details": "Slant a font"
		},
		{
			"trigger": "imagepstext()",
			"contents": "imagepstext(${1:image}, ${2:text}, ${3:font_index}, ${4:size}, ${5:foreground}, ${6:background}, ${7:x}, ${8:y})",
			"kind": "function",
			"details": "Draws a text over an image using PostScript Type1 fonts"
		},
		{
			"trigger": "imagerectangle()",
			"contents": "imagerectangle(${1:image}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color})",
			"kind": "function",
			"details": "Draw a rectangle"
		},
		{
			"trigger": "imagerotate()",
			"contents": "imagerotate(${1:image}, ${2:angle}, ${3:bgd_color})",
			"kind": "function",
			"details": "Rotate an image with a given angle"
		},
		{
			"trigger": "imagesavealpha()",
			"contents": "imagesavealpha(${1:image}, ${2:saveflag})",
			"kind": "function",
			"details": "Whether to retain full alpha channel information when saving PNG images"
		},
		{
			"trigger": "imagesetbrush()",
			"contents": "imagesetbrush(${1:image}, ${2:brush})",
			"kind": "function",
			"details": "Set the brush image for line drawing"
		},
		{
			"trigger": "imagesetpixel()",
			"contents": "imagesetpixel(${1:image}, ${2:x}, ${3:y}, ${4:color})",
			"kind": "function",
			"details": "Set a single pixel"
		},
		{
			"trigger": "imagesetstyle()",
			"contents": "imagesetstyle(${1:image}, ${2:style})",
			"kind": "function",
			"details": "Set the style for line drawing"
		},
		{
			"trigger": "imagesetthickness()",
			"contents": "imagesetthickness(${1:image}, ${2:thickness})",
			"kind": "function",
			"details": "Set the thickness for line drawing"
		},
		{
			"trigger": "imagesettile()",
			"contents": "imagesettile(${1:image}, ${2:tile})",
			"kind": "function",
			"details": "Set the tile image for filling"
		},
		{
			"trigger": "imagestring()",
			"contents": "imagestring(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:string}, ${6:color})",
			"kind": "function",
			"details": "Draw a string horizontally"
		},
		{
			"trigger": "imagestringup()",
			"contents": "imagestringup(${1:image}, ${2:font}, ${3:x}, ${4:y}, ${5:string}, ${6:color})",
			"kind": "function",
			"details": "Draw a string vertically"
		},
		{
			"trigger": "imagesx()",
			"contents": "imagesx(${1:image})",
			"kind": "function",
			"details": "Get image width"
		},
		{
			"trigger": "imagesy()",
			"contents": "imagesy(${1:image})",
			"kind": "function",
			"details": "Get image height"
		},
		{
			"trigger": "imagetruecolortopalette()",
			"contents": "imagetruecolortopalette(${1:image}, ${2:dither}, ${3:ncolors})",
			"kind": "function",
			"details": "Convert a true color image to a palette image"
		},
		{
			"trigger": "imagettfbbox()",
			"contents": "imagettfbbox(${1:size}, ${2:angle}, ${3:fontfile}, ${4:text})",
			"kind": "function",
			"details": "Give the bounding box of a text using TrueType fonts"
		},
		{
			"trigger": "imagettftext()",
			"contents": "imagettftext(${1:image}, ${2:size}, ${3:angle}, ${4:x}, ${5:y}, ${6:color}, ${7:fontfile}, ${8:text})",
			"kind": "function",
			"details": "Write text to the image using TrueType fonts"
		},
		{
			"trigger": "imagetypes()",
			"contents": "imagetypes()",
			"kind": "function",
			"details": "Return the image types supported by this PHP build"
		},
		{
			"trigger": "imagewbmp()",
			"contents": "imagewbmp(${1:image})",
			"kind": "function",
			"details": "Output image to browser or file"
		},
		{
			"trigger": "imagexbm()",
			"contents": "imagexbm(${1:image}, ${2:filename})",
			"kind": "function",
			"details": "Output an XBM image to browser or file"
		},
		{
			"trigger": "imap_8bit()",
			"contents": "imap_8bit(${1:string})",
			"kind": "function",
			"details": "Convert an 8bit string to a quoted-printable string"
		},
		{
			"trigger": "imap_alerts()",
			"contents": "imap_alerts()",
			"kind": "function",
			"details": "Returns all IMAP alert messages that have occurred"
		},
		{
			"trigger": "imap_append()",
			"contents": "imap_append(${1:imap_stream}, ${2:mailbox}, ${3:message})",
			"kind": "function",
			"details": "Append a string message to a specified mailbox"
		},
		{
			"trigger": "imap_base64()",
			"contents": "imap_base64(${1:text})",
			"kind": "function",
			"details": "Decode BASE64 encoded text"
		},
		{
			"trigger": "imap_binary()",
			"contents": "imap_binary(${1:string})",
			"kind": "function",
			"details": "Convert an 8bit string to a base64 string"
		},
		{
			"trigger": "imap_body()",
			"contents": "imap_body(${1:imap_stream}, ${2:msg_number})",
			"kind": "function",
			"details": "Read the message body"
		},
		{
			"trigger": "imap_bodystruct()",
			"contents": "imap_bodystruct(${1:imap_stream}, ${2:msg_number}, ${3:section})",
			"kind": "function",
			"details": "Read the structure of a specified body section of a specific message"
		},
		{
			"trigger": "imap_check()",
			"contents": "imap_check(${1:imap_stream})",
			"kind": "function",
			"details": "Check current mailbox"
		},
		{
			"trigger": "imap_clearflag_full()",
			"contents": "imap_clearflag_full(${1:imap_stream}, ${2:sequence}, ${3:flag})",
			"kind": "function",
			"details": "Clears flags on messages"
		},
		{
			"trigger": "imap_close()",
			"contents": "imap_close(${1:imap_stream})",
			"kind": "function",
			"details": "Close an IMAP stream"
		},
		{
			"trigger": "imap_createmailbox()",
			"contents": "imap_createmailbox(${1:imap_stream}, ${2:mailbox})",
			"kind": "function",
			"details": "Create a new mailbox"
		},
		{
			"trigger": "imap_delete()",
			"contents": "imap_delete(${1:imap_stream}, ${2:msg_number})",
			"kind": "function",
			"details": "Mark a message for deletion from current mailbox"
		},
		{
			"trigger": "imap_deletemailbox()",
			"contents": "imap_deletemailbox(${1:imap_stream}, ${2:mailbox})",
			"kind": "function",
			"details": "Delete a mailbox"
		},
		{
			"trigger": "imap_errors()",
			"contents": "imap_errors()",
			"kind": "function",
			"details": "Returns all of the IMAP errors that have occurred"
		},
		{
			"trigger": "imap_expunge()",
			"contents": "imap_expunge(${1:imap_stream})",
			"kind": "function",
			"details": "Delete all messages marked for deletion"
		},
		{
			"trigger": "imap_fetch_overview()",
			"contents": "imap_fetch_overview(${1:imap_stream}, ${2:sequence})",
			"kind": "function",
			"details": "Read an overview of the information in the headers of the given message"
		},
		{
			"trigger": "imap_fetchbody()",
			"contents": "imap_fetchbody(${1:imap_stream}, ${2:msg_number}, ${3:section})",
			"kind": "function",
			"details": "Fetch a particular section of the body of the message"
		},
		{
			"trigger": "imap_fetchheader()",
			"contents": "imap_fetchheader(${1:imap_stream}, ${2:msg_number})",
			"kind": "function",
			"details": "Returns header for a message"
		},
		{
			"trigger": "imap_fetchstructure()",
			"contents": "imap_fetchstructure(${1:imap_stream}, ${2:msg_number})",
			"kind": "function",
			"details": "Read the structure of a particular message"
		},
		{
			"trigger": "imap_gc()",
			"contents": "imap_gc(${1:imap_stream}, ${2:caches})",
			"kind": "function",
			"details": "Clears IMAP cache"
		},
		{
			"trigger": "imap_get_quota()",
			"contents": "imap_get_quota(${1:imap_stream}, ${2:quota_root})",
			"kind": "function",
			"details": "Retrieve the quota level settings, and usage statics per mailbox"
		},
		{
			"trigger": "imap_get_quotaroot()",
			"contents": "imap_get_quotaroot(${1:imap_stream}, ${2:quota_root})",
			"kind": "function",
			"details": "Retrieve the quota settings per user"
		},
		{
			"trigger": "imap_getacl()",
			"contents": "imap_getacl(${1:imap_stream}, ${2:mailbox})",
			"kind": "function",
			"details": "Gets the ACL for a given mailbox"
		},
		{
			"trigger": "imap_getmailboxes()",
			"contents": "imap_getmailboxes(${1:imap_stream}, ${2:ref}, ${3:pattern})",
			"kind": "function",
			"details": "Read the list of mailboxes, returning detailed information on each one"
		},
		{
			"trigger": "imap_getsubscribed()",
			"contents": "imap_getsubscribed(${1:imap_stream}, ${2:ref}, ${3:pattern})",
			"kind": "function",
			"details": "List all the subscribed mailboxes"
		},
		{
			"trigger": "imap_header()",
			"contents": "imap_header()",
			"kind": "function",
			"details": "Alias of imap_headerinfo()"
		},
		{
			"trigger": "imap_headerinfo()",
			"contents": "imap_headerinfo(${1:imap_stream}, ${2:msg_number})",
			"kind": "function",
			"details": "Read the header of the message"
		},
		{
			"trigger": "imap_headers()",
			"contents": "imap_headers(${1:imap_stream})",
			"kind": "function",
			"details": "Returns headers for all messages in a mailbox"
		},
		{
			"trigger": "imap_last_error()",
			"contents": "imap_last_error()",
			"kind": "function",
			"details": "Gets the last IMAP error that occurred during this page request"
		},
		{
			"trigger": "imap_list()",
			"contents": "imap_list(${1:imap_stream}, ${2:ref}, ${3:pattern})",
			"kind": "function",
			"details": "Read the list of mailboxes"
		},
		{
			"trigger": "imap_listmailbox()",
			"contents": "imap_listmailbox()",
			"kind": "function",
			"details": "Alias of imap_list()"
		},
		{
			"trigger": "imap_listscan()",
			"contents": "imap_listscan(${1:imap_stream}, ${2:ref}, ${3:pattern}, ${4:content})",
			"kind": "function",
			"details": "Returns the list of mailboxes that matches the given text"
		},
		{
			"trigger": "imap_listsubscribed()",
			"contents": "imap_listsubscribed()",
			"kind": "function",
			"details": "Alias of imap_lsub()"
		},
		{
			"trigger": "imap_lsub()",
			"contents": "imap_lsub(${1:imap_stream}, ${2:ref}, ${3:pattern})",
			"kind": "function",
			"details": "List all the subscribed mailboxes"
		},
		{
			"trigger": "imap_mail()",
			"contents": "imap_mail(${1:to}, ${2:subject}, ${3:message})",
			"kind": "function",
			"details": "Send an email message"
		},
		{
			"trigger": "imap_mail_compose()",
			"contents": "imap_mail_compose(${1:envelope}, ${2:body})",
			"kind": "function",
			"details": "Create a MIME message based on given envelope and body sections"
		},
		{
			"trigger": "imap_mail_copy()",
			"contents": "imap_mail_copy(${1:imap_stream}, ${2:msglist}, ${3:mailbox})",
			"kind": "function",
			"details": "Copy specified messages to a mailbox"
		},
		{
			"trigger": "imap_mail_move()",
			"contents": "imap_mail_move(${1:imap_stream}, ${2:msglist}, ${3:mailbox})",
			"kind": "function",
			"details": "Move specified messages to a mailbox"
		},
		{
			"trigger": "imap_mailboxmsginfo()",
			"contents": "imap_mailboxmsginfo(${1:imap_stream})",
			"kind": "function",
			"details": "Get information about the current mailbox"
		},
		{
			"trigger": "imap_mime_header_decode()",
			"contents": "imap_mime_header_decode(${1:text})",
			"kind": "function",
			"details": "Decode MIME header elements"
		},
		{
			"trigger": "imap_msgno()",
			"contents": "imap_msgno(${1:imap_stream}, ${2:uid})",
			"kind": "function",
			"details": "Gets the message sequence number for the given UID"
		},
		{
			"trigger": "imap_num_msg()",
			"contents": "imap_num_msg(${1:imap_stream})",
			"kind": "function",
			"details": "Gets the number of messages in the current mailbox"
		},
		{
			"trigger": "imap_num_recent()",
			"contents": "imap_num_recent(${1:imap_stream})",
			"kind": "function",
			"details": "Gets the number of recent messages in current mailbox"
		},
		{
			"trigger": "imap_open()",
			"contents": "imap_open(${1:mailbox}, ${2:username}, ${3:password})",
			"kind": "function",
			"details": "Open an IMAP stream to a mailbox"
		},
		{
			"trigger": "imap_ping()",
			"contents": "imap_ping(${1:imap_stream})",
			"kind": "function",
			"details": "Check if the IMAP stream is still active"
		},
		{
			"trigger": "imap_qprint()",
			"contents": "imap_qprint(${1:string})",
			"kind": "function",
			"details": "Convert a quoted-printable string to an 8 bit string"
		},
		{
			"trigger": "imap_renamemailbox()",
			"contents": "imap_renamemailbox(${1:imap_stream}, ${2:old_mbox}, ${3:new_mbox})",
			"kind": "function",
			"details": "Rename an old mailbox to new mailbox"
		},
		{
			"trigger": "imap_reopen()",
			"contents": "imap_reopen(${1:imap_stream}, ${2:mailbox})",
			"kind": "function",
			"details": "Reopen IMAP stream to new mailbox"
		},
		{
			"trigger": "imap_rfc822_parse_adrlist()",
			"contents": "imap_rfc822_parse_adrlist(${1:address}, ${2:default_host})",
			"kind": "function",
			"details": "Parses an address string"
		},
		{
			"trigger": "imap_rfc822_parse_headers()",
			"contents": "imap_rfc822_parse_headers(${1:headers})",
			"kind": "function",
			"details": "Parse mail headers from a string"
		},
		{
			"trigger": "imap_rfc822_write_address()",
			"contents": "imap_rfc822_write_address(${1:mailbox}, ${2:host}, ${3:personal})",
			"kind": "function",
			"details": "Returns a properly formatted email address given the mailbox, host, and personal info"
		},
		{
			"trigger": "imap_savebody()",
			"contents": "imap_savebody(${1:imap_stream}, ${2:file}, ${3:msg_number})",
			"kind": "function",
			"details": "Save a specific body section to a file"
		},
		{
			"trigger": "imap_scanmailbox()",
			"contents": "imap_scanmailbox()",
			"kind": "function",
			"details": "Alias of imap_listscan()"
		},
		{
			"trigger": "imap_search()",
			"contents": "imap_search(${1:imap_stream}, ${2:criteria})",
			"kind": "function",
			"details": "This function returns an array of messages matching the given search criteria"
		},
		{
			"trigger": "imap_set_quota()",
			"contents": "imap_set_quota(${1:imap_stream}, ${2:quota_root}, ${3:quota_limit})",
			"kind": "function",
			"details": "Sets a quota for a given mailbox"
		},
		{
			"trigger": "imap_setacl()",
			"contents": "imap_setacl(${1:imap_stream}, ${2:mailbox}, ${3:id}, ${4:rights})",
			"kind": "function",
			"details": "Sets the ACL for a given mailbox"
		},
		{
			"trigger": "imap_setflag_full()",
			"contents": "imap_setflag_full(${1:imap_stream}, ${2:sequence}, ${3:flag})",
			"kind": "function",
			"details": "Sets flags on messages"
		},
		{
			"trigger": "imap_sort()",
			"contents": "imap_sort(${1:imap_stream}, ${2:criteria}, ${3:reverse})",
			"kind": "function",
			"details": "Gets and sort messages"
		},
		{
			"trigger": "imap_status()",
			"contents": "imap_status(${1:imap_stream}, ${2:mailbox}, ${3:options})",
			"kind": "function",
			"details": "Returns status information on a mailbox"
		},
		{
			"trigger": "imap_subscribe()",
			"contents": "imap_subscribe(${1:imap_stream}, ${2:mailbox})",
			"kind": "function",
			"details": "Subscribe to a mailbox"
		},
		{
			"trigger": "imap_thread()",
			"contents": "imap_thread(${1:imap_stream})",
			"kind": "function",
			"details": "Returns a tree of threaded message"
		},
		{
			"trigger": "imap_timeout()",
			"contents": "imap_timeout(${1:timeout_type})",
			"kind": "function",
			"details": "Set or fetch imap timeout"
		},
		{
			"trigger": "imap_uid()",
			"contents": "imap_uid(${1:imap_stream}, ${2:msg_number})",
			"kind": "function",
			"details": "This function returns the UID for the given message sequence number"
		},
		{
			"trigger": "imap_undelete()",
			"contents": "imap_undelete(${1:imap_stream}, ${2:msg_number})",
			"kind": "function",
			"details": "Unmark the message which is marked deleted"
		},
		{
			"trigger": "imap_unsubscribe()",
			"contents": "imap_unsubscribe(${1:imap_stream}, ${2:mailbox})",
			"kind": "function",
			"details": "Unsubscribe from a mailbox"
		},
		{
			"trigger": "imap_utf7_decode()",
			"contents": "imap_utf7_decode(${1:text})",
			"kind": "function",
			"details": "Decodes a modified UTF-7 encoded string"
		},
		{
			"trigger": "imap_utf7_encode()",
			"contents": "imap_utf7_encode(${1:data})",
			"kind": "function",
			"details": "Converts ISO-8859-1 string to modified UTF-7 text"
		},
		{
			"trigger": "imap_utf8()",
			"contents": "imap_utf8(${1:mime_encoded_text})",
			"kind": "function",
			"details": "Converts MIME-encoded text to UTF-8"
		},
		{
			"trigger": "implode()",
			"contents": "implode(${1:glue}, ${2:pieces})",
			"kind": "function",
			"details": "Join array elements with a string"
		},
		{
			"trigger": "import_request_variables()",
			"contents": "import_request_variables(${1:types})",
			"kind": "function",
			"details": "Import GET/POST/Cookie variables into the global scope"
		},
		{
			"trigger": "in_array()",
			"contents": "in_array(${1:needle}, ${2:haystack})",
			"kind": "function",
			"details": "Checks if a value exists in an array"
		},
		{
			"trigger": "inclued_get_data()",
			"contents": "inclued_get_data()",
			"kind": "function",
			"details": "Get the inclued data"
		},
		{
			"trigger": "inet_ntop()",
			"contents": "inet_ntop(${1:in_addr})",
			"kind": "function",
			"details": "Converts a packed internet address to a human readable representation"
		},
		{
			"trigger": "inet_pton()",
			"contents": "inet_pton(${1:address})",
			"kind": "function",
			"details": "Converts a human readable IP address to its packed in_addr representation"
		},
		{
			"trigger": "ingres_autocommit()",
			"contents": "ingres_autocommit(${1:link})",
			"kind": "function",
			"details": "Switch autocommit on or off"
		},
		{
			"trigger": "ingres_autocommit_state()",
			"contents": "ingres_autocommit_state(${1:link})",
			"kind": "function",
			"details": "Test if the connection is using autocommit"
		},
		{
			"trigger": "ingres_charset()",
			"contents": "ingres_charset(${1:link})",
			"kind": "function",
			"details": "Returns the installation character set"
		},
		{
			"trigger": "ingres_close()",
			"contents": "ingres_close(${1:link})",
			"kind": "function",
			"details": "Close an Ingres database connection"
		},
		{
			"trigger": "ingres_commit()",
			"contents": "ingres_commit(${1:link})",
			"kind": "function",
			"details": "Commit a transaction"
		},
		{
			"trigger": "ingres_connect()",
			"contents": "ingres_connect()",
			"kind": "function",
			"details": "Open a connection to an Ingres database"
		},
		{
			"trigger": "ingres_cursor()",
			"contents": "ingres_cursor(${1:result})",
			"kind": "function",
			"details": "Get a cursor name for a given result resource"
		},
		{
			"trigger": "ingres_errno()",
			"contents": "ingres_errno()",
			"kind": "function",
			"details": "Get the last Ingres error number generated"
		},
		{
			"trigger": "ingres_error()",
			"contents": "ingres_error()",
			"kind": "function",
			"details": "Get a meaningful error message for the last error generated"
		},
		{
			"trigger": "ingres_errsqlstate()",
			"contents": "ingres_errsqlstate()",
			"kind": "function",
			"details": "Get the last SQLSTATE error code generated"
		},
		{
			"trigger": "ingres_escape_string()",
			"contents": "ingres_escape_string(${1:link}, ${2:source_string})",
			"kind": "function",
			"details": "Escape special characters for use in a query"
		},
		{
			"trigger": "ingres_execute()",
			"contents": "ingres_execute(${1:result})",
			"kind": "function",
			"details": "Execute a prepared query"
		},
		{
			"trigger": "ingres_fetch_array()",
			"contents": "ingres_fetch_array(${1:result})",
			"kind": "function",
			"details": "Fetch a row of result into an array"
		},
		{
			"trigger": "ingres_fetch_assoc()",
			"contents": "ingres_fetch_assoc(${1:result})",
			"kind": "function",
			"details": "Fetch a row of result into an associative array"
		},
		{
			"trigger": "ingres_fetch_object()",
			"contents": "ingres_fetch_object(${1:result})",
			"kind": "function",
			"details": "Fetch a row of result into an object"
		},
		{
			"trigger": "ingres_fetch_proc_return()",
			"contents": "ingres_fetch_proc_return(${1:result})",
			"kind": "function",
			"details": "Get the return value from a procedure call"
		},
		{
			"trigger": "ingres_fetch_row()",
			"contents": "ingres_fetch_row(${1:result})",
			"kind": "function",
			"details": "Fetch a row of result into an enumerated array"
		},
		{
			"trigger": "ingres_field_length()",
			"contents": "ingres_field_length(${1:result}, ${2:index})",
			"kind": "function",
			"details": "Get the length of a field"
		},
		{
			"trigger": "ingres_field_name()",
			"contents": "ingres_field_name(${1:result}, ${2:index})",
			"kind": "function",
			"details": "Get the name of a field in a query result"
		},
		{
			"trigger": "ingres_field_nullable()",
			"contents": "ingres_field_nullable(${1:result}, ${2:index})",
			"kind": "function",
			"details": "Test if a field is nullable"
		},
		{
			"trigger": "ingres_field_precision()",
			"contents": "ingres_field_precision(${1:result}, ${2:index})",
			"kind": "function",
			"details": "Get the precision of a field"
		},
		{
			"trigger": "ingres_field_scale()",
			"contents": "ingres_field_scale(${1:result}, ${2:index})",
			"kind": "function",
			"details": "Get the scale of a field"
		},
		{
			"trigger": "ingres_field_type()",
			"contents": "ingres_field_type(${1:result}, ${2:index})",
			"kind": "function",
			"details": "Get the type of a field in a query result"
		},
		{
			"trigger": "ingres_free_result()",
			"contents": "ingres_free_result(${1:result})",
			"kind": "function",
			"details": "Free the resources associated with a result identifier"
		},
		{
			"trigger": "ingres_next_error()",
			"contents": "ingres_next_error()",
			"kind": "function",
			"details": "Get the next Ingres error"
		},
		{
			"trigger": "ingres_num_fields()",
			"contents": "ingres_num_fields(${1:result})",
			"kind": "function",
			"details": "Get the number of fields returned by the last query"
		},
		{
			"trigger": "ingres_num_rows()",
			"contents": "ingres_num_rows(${1:result})",
			"kind": "function",
			"details": "Get the number of rows affected or returned by a query"
		},
		{
			"trigger": "ingres_pconnect()",
			"contents": "ingres_pconnect()",
			"kind": "function",
			"details": "Open a persistent connection to an Ingres database"
		},
		{
			"trigger": "ingres_prepare()",
			"contents": "ingres_prepare(${1:link}, ${2:query})",
			"kind": "function",
			"details": "Prepare a query for later execution"
		},
		{
			"trigger": "ingres_query()",
			"contents": "ingres_query(${1:link}, ${2:query})",
			"kind": "function",
			"details": "Send an SQL query to Ingres"
		},
		{
			"trigger": "ingres_result_seek()",
			"contents": "ingres_result_seek(${1:result}, ${2:position})",
			"kind": "function",
			"details": "Set the row position before fetching data"
		},
		{
			"trigger": "ingres_rollback()",
			"contents": "ingres_rollback(${1:link})",
			"kind": "function",
			"details": "Roll back a transaction"
		},
		{
			"trigger": "ingres_set_environment()",
			"contents": "ingres_set_environment(${1:link}, ${2:options})",
			"kind": "function",
			"details": "Set environment features controlling output options"
		},
		{
			"trigger": "ingres_unbuffered_query()",
			"contents": "ingres_unbuffered_query(${1:link}, ${2:query})",
			"kind": "function",
			"details": "Send an unbuffered SQL query to Ingres"
		},
		{
			"trigger": "ini_alter()",
			"contents": "ini_alter()",
			"kind": "function",
			"details": "Alias of ini_set()"
		},
		{
			"trigger": "ini_get()",
			"contents": "ini_get(${1:varname})",
			"kind": "function",
			"details": "Gets the value of a configuration option"
		},
		{
			"trigger": "ini_get_all()",
			"contents": "ini_get_all()",
			"kind": "function",
			"details": "Gets all configuration options"
		},
		{
			"trigger": "ini_restore()",
			"contents": "ini_restore(${1:varname})",
			"kind": "function",
			"details": "Restores the value of a configuration option"
		},
		{
			"trigger": "ini_set()",
			"contents": "ini_set(${1:varname}, ${2:newvalue})",
			"kind": "function",
			"details": "Sets the value of a configuration option"
		},
		{
			"trigger": "inotify_add_watch()",
			"contents": "inotify_add_watch(${1:inotify_instance}, ${2:pathname}, ${3:mask})",
			"kind": "function",
			"details": "Add a watch to an initialized inotify instance"
		},
		{
			"trigger": "inotify_init()",
			"contents": "inotify_init()",
			"kind": "function",
			"details": "Initialize an inotify instance"
		},
		{
			"trigger": "inotify_queue_len()",
			"contents": "inotify_queue_len(${1:inotify_instance})",
			"kind": "function",
			"details": "Return a number upper than zero if there are pending events"
		},
		{
			"trigger": "inotify_read()",
			"contents": "inotify_read(${1:inotify_instance})",
			"kind": "function",
			"details": "Read events from an inotify instance"
		},
		{
			"trigger": "inotify_rm_watch()",
			"contents": "inotify_rm_watch(${1:inotify_instance}, ${2:watch_descriptor})",
			"kind": "function",
			"details": "Remove an existing watch from an inotify instance"
		},
		{
			"trigger": "intdiv()",
			"contents": "intdiv(${1:dividend}, ${2:divisor})",
			"kind": "function",
			"details": "Integer division"
		},
		{
			"trigger": "interface_exists()",
			"contents": "interface_exists(${1:interface_name})",
			"kind": "function",
			"details": "Checks if the interface has been defined"
		},
		{
			"trigger": "intl_error_name()",
			"contents": "intl_error_name(${1:error_code})",
			"kind": "function",
			"details": "Get symbolic name for a given error code"
		},
		{
			"trigger": "intl_get_error_code()",
			"contents": "intl_get_error_code()",
			"kind": "function",
			"details": "Get the last error code"
		},
		{
			"trigger": "intl_get_error_message()",
			"contents": "intl_get_error_message()",
			"kind": "function",
			"details": "Get description of the last error"
		},
		{
			"trigger": "intl_is_failure()",
			"contents": "intl_is_failure(${1:error_code})",
			"kind": "function",
			"details": "Check whether the given error code indicates failure"
		},
		{
			"trigger": "intval()",
			"contents": "intval(${1:var})",
			"kind": "function",
			"details": "Get the integer value of a variable"
		},
		{
			"trigger": "ip2long()",
			"contents": "ip2long(${1:ip_address})",
			"kind": "function",
			"details": "Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer"
		},
		{
			"trigger": "iptcembed()",
			"contents": "iptcembed(${1:iptcdata}, ${2:jpeg_file_name})",
			"kind": "function",
			"details": "Embeds binary IPTC data into a JPEG image"
		},
		{
			"trigger": "iptcparse()",
			"contents": "iptcparse(${1:iptcblock})",
			"kind": "function",
			"details": "Parse a binary IPTC block into single tags"
		},
		{
			"trigger": "is_a()",
			"contents": "is_a(${1:object}, ${2:class_name})",
			"kind": "function",
			"details": "Checks if the object is of this class or has this class as one of its parents"
		},
		{
			"trigger": "is_array()",
			"contents": "is_array(${1:var})",
			"kind": "function",
			"details": "Finds whether a variable is an array"
		},
		{
			"trigger": "is_bool()",
			"contents": "is_bool(${1:var})",
			"kind": "function",
			"details": "Finds out whether a variable is a boolean"
		},
		{
			"trigger": "is_callable()",
			"contents": "is_callable(${1:name})",
			"kind": "function",
			"details": "Verify that the contents of a variable can be called as a function"
		},
		{
			"trigger": "is_dir()",
			"contents": "is_dir(${1:filename})",
			"kind": "function",
			"details": "Tells whether the filename is a directory"
		},
		{
			"trigger": "is_double()",
			"contents": "is_double()",
			"kind": "function",
			"details": "Alias of is_float()"
		},
		{
			"trigger": "is_executable()",
			"contents": "is_executable(${1:filename})",
			"kind": "function",
			"details": "Tells whether the filename is executable"
		},
		{
			"trigger": "is_file()",
			"contents": "is_file(${1:filename})",
			"kind": "function",
			"details": "Tells whether the filename is a regular file"
		},
		{
			"trigger": "is_finite()",
			"contents": "is_finite(${1:val})",
			"kind": "function",
			"details": "Finds whether a value is a legal finite number"
		},
		{
			"trigger": "is_float()",
			"contents": "is_float(${1:var})",
			"kind": "function",
			"details": "Finds whether the type of a variable is float"
		},
		{
			"trigger": "is_infinite()",
			"contents": "is_infinite(${1:val})",
			"kind": "function",
			"details": "Finds whether a value is infinite"
		},
		{
			"trigger": "is_int()",
			"contents": "is_int(${1:var})",
			"kind": "function",
			"details": "Find whether the type of a variable is integer"
		},
		{
			"trigger": "is_integer()",
			"contents": "is_integer()",
			"kind": "function",
			"details": "Alias of is_int()"
		},
		{
			"trigger": "is_link()",
			"contents": "is_link(${1:filename})",
			"kind": "function",
			"details": "Tells whether the filename is a symbolic link"
		},
		{
			"trigger": "is_long()",
			"contents": "is_long()",
			"kind": "function",
			"details": "Alias of is_int()"
		},
		{
			"trigger": "is_nan()",
			"contents": "is_nan(${1:val})",
			"kind": "function",
			"details": "Finds whether a value is not a number"
		},
		{
			"trigger": "is_null()",
			"contents": "is_null(${1:var})",
			"kind": "function",
			"details": "Finds whether a variable is NULL"
		},
		{
			"trigger": "is_numeric()",
			"contents": "is_numeric(${1:var})",
			"kind": "function",
			"details": "Finds whether a variable is a number or a numeric string"
		},
		{
			"trigger": "is_object()",
			"contents": "is_object(${1:var})",
			"kind": "function",
			"details": "Finds whether a variable is an object"
		},
		{
			"trigger": "is_readable()",
			"contents": "is_readable(${1:filename})",
			"kind": "function",
			"details": "Tells whether a file exists and is readable"
		},
		{
			"trigger": "is_real()",
			"contents": "is_real()",
			"kind": "function",
			"details": "Alias of is_float()"
		},
		{
			"trigger": "is_resource()",
			"contents": "is_resource(${1:var})",
			"kind": "function",
			"details": "Finds whether a variable is a resource"
		},
		{
			"trigger": "is_scalar()",
			"contents": "is_scalar(${1:var})",
			"kind": "function",
			"details": "Finds whether a variable is a scalar"
		},
		{
			"trigger": "is_soap_fault()",
			"contents": "is_soap_fault(${1:object})",
			"kind": "function",
			"details": "Checks if a SOAP call has failed"
		},
		{
			"trigger": "is_string()",
			"contents": "is_string(${1:var})",
			"kind": "function",
			"details": "Find whether the type of a variable is string"
		},
		{
			"trigger": "is_subclass_of()",
			"contents": "is_subclass_of(${1:object}, ${2:class_name})",
			"kind": "function",
			"details": "Checks if the object has this class as one of its parents or implements it"
		},
		{
			"trigger": "is_uploaded_file()",
			"contents": "is_uploaded_file(${1:filename})",
			"kind": "function",
			"details": "Tells whether the file was uploaded via HTTP POST"
		},
		{
			"trigger": "is_writable()",
			"contents": "is_writable(${1:filename})",
			"kind": "function",
			"details": "Tells whether the filename is writable"
		},
		{
			"trigger": "is_writeable()",
			"contents": "is_writeable()",
			"kind": "function",
			"details": "Alias of is_writable()"
		},
		{
			"trigger": "isset()",
			"contents": "isset(${1:var})",
			"kind": "function",
			"details": "Determine if a variable is declared and is different than NULL"
		},
		{
			"trigger": "iterator_apply()",
			"contents": "iterator_apply(${1:iterator}, ${2:function})",
			"kind": "function",
			"details": "Call a function for every element in an iterator"
		},
		{
			"trigger": "iterator_count()",
			"contents": "iterator_count(${1:iterator})",
			"kind": "function",
			"details": "Count the elements in an iterator"
		},
		{
			"trigger": "iterator_to_array()",
			"contents": "iterator_to_array(${1:iterator})",
			"kind": "function",
			"details": "Copy the iterator into an array"
		},
		{
			"trigger": "java_last_exception_clear()",
			"contents": "java_last_exception_clear()",
			"kind": "function"
		},
		{
			"trigger": "java_last_exception_get()",
			"contents": "java_last_exception_get()",
			"kind": "function"
		},
		{
			"trigger": "JDDayOfWeek()",
			"contents": "JDDayOfWeek(${1:julianday})",
			"kind": "function"
		},
		{
			"trigger": "JDMonthName()",
			"contents": "JDMonthName(${1:julianday}, ${2:mode})",
			"kind": "function"
		},
		{
			"trigger": "JDToFrench()",
			"contents": "JDToFrench(${1:juliandaycount})",
			"kind": "function"
		},
		{
			"trigger": "JDToGregorian()",
			"contents": "JDToGregorian(${1:julianday})",
			"kind": "function"
		},
		{
			"trigger": "jdtojewish()",
			"contents": "jdtojewish(${1:juliandaycount})",
			"kind": "function",
			"details": "Converts a Julian day count to a Jewish calendar date"
		},
		{
			"trigger": "JDToJulian()",
			"contents": "JDToJulian(${1:julianday})",
			"kind": "function"
		},
		{
			"trigger": "jdtounix()",
			"contents": "jdtounix(${1:jday})",
			"kind": "function",
			"details": "Convert Julian Day to Unix timestamp"
		},
		{
			"trigger": "JewishToJD()",
			"contents": "JewishToJD(${1:month}, ${2:day}, ${3:year})",
			"kind": "function"
		},
		{
			"trigger": "join()",
			"contents": "join()",
			"kind": "function",
			"details": "Alias of implode()"
		},
		{
			"trigger": "jpeg2wbmp()",
			"contents": "jpeg2wbmp(${1:jpegname}, ${2:wbmpname}, ${3:dest_height}, ${4:dest_width}, ${5:threshold})",
			"kind": "function",
			"details": "Convert JPEG image file to WBMP image file"
		},
		{
			"trigger": "json_decode()",
			"contents": "json_decode(${1:json})",
			"kind": "function",
			"details": "Decodes a JSON string"
		},
		{
			"trigger": "json_encode()",
			"contents": "json_encode(${1:value})",
			"kind": "function",
			"details": "Returns the JSON representation of a value"
		},
		{
			"trigger": "json_last_error()",
			"contents": "json_last_error()",
			"kind": "function",
			"details": "Returns the last error occurred"
		},
		{
			"trigger": "judy_type()",
			"contents": "judy_type(${1:array})",
			"kind": "function",
			"details": "Return the type of a Judy array"
		},
		{
			"trigger": "judy_version()",
			"contents": "judy_version()",
			"kind": "function",
			"details": "Return or print the current PHP Judy version"
		},
		{
			"trigger": "JulianToJD()",
			"contents": "JulianToJD(${1:month}, ${2:day}, ${3:year})",
			"kind": "function"
		},
		{
			"trigger": "kadm5_chpass_principal()",
			"contents": "kadm5_chpass_principal(${1:handle}, ${2:principal}, ${3:password})",
			"kind": "function",
			"details": "Changes the principal's password"
		},
		{
			"trigger": "kadm5_create_principal()",
			"contents": "kadm5_create_principal(${1:handle}, ${2:principal})",
			"kind": "function",
			"details": "Creates a kerberos principal with the given parameters"
		},
		{
			"trigger": "kadm5_delete_principal()",
			"contents": "kadm5_delete_principal(${1:handle}, ${2:principal})",
			"kind": "function",
			"details": "Deletes a kerberos principal"
		},
		{
			"trigger": "kadm5_destroy()",
			"contents": "kadm5_destroy(${1:handle})",
			"kind": "function",
			"details": "Closes the connection to the admin server and releases all related resources"
		},
		{
			"trigger": "kadm5_flush()",
			"contents": "kadm5_flush(${1:handle})",
			"kind": "function",
			"details": "Flush all changes to the Kerberos database"
		},
		{
			"trigger": "kadm5_get_policies()",
			"contents": "kadm5_get_policies(${1:handle})",
			"kind": "function",
			"details": "Gets all policies from the Kerberos database"
		},
		{
			"trigger": "kadm5_get_principal()",
			"contents": "kadm5_get_principal(${1:handle}, ${2:principal})",
			"kind": "function",
			"details": "Gets the principal's entries from the Kerberos database"
		},
		{
			"trigger": "kadm5_get_principals()",
			"contents": "kadm5_get_principals(${1:handle})",
			"kind": "function",
			"details": "Gets all principals from the Kerberos database"
		},
		{
			"trigger": "kadm5_init_with_password()",
			"contents": "kadm5_init_with_password(${1:admin_server}, ${2:realm}, ${3:principal}, ${4:password})",
			"kind": "function",
			"details": "Opens a connection to the KADM5 library"
		},
		{
			"trigger": "kadm5_modify_principal()",
			"contents": "kadm5_modify_principal(${1:handle}, ${2:principal}, ${3:options})",
			"kind": "function",
			"details": "Modifies a kerberos principal with the given parameters"
		},
		{
			"trigger": "key()",
			"contents": "key(${1:array})",
			"kind": "function",
			"details": "Fetch a key from an array"
		},
		{
			"trigger": "krsort()",
			"contents": "krsort(${1:array})",
			"kind": "function",
			"details": "Sort an array by key in reverse order"
		},
		{
			"trigger": "ksort()",
			"contents": "ksort(${1:array})",
			"kind": "function",
			"details": "Sort an array by key"
		},
		{
			"trigger": "lcfirst()",
			"contents": "lcfirst(${1:str})",
			"kind": "function",
			"details": "Make a string's first character lowercase"
		},
		{
			"trigger": "lcg_value()",
			"contents": "lcg_value()",
			"kind": "function",
			"details": "Combined linear congruential generator"
		},
		{
			"trigger": "lchgrp()",
			"contents": "lchgrp(${1:filename}, ${2:group})",
			"kind": "function",
			"details": "Changes group ownership of symlink"
		},
		{
			"trigger": "lchown()",
			"contents": "lchown(${1:filename}, ${2:user})",
			"kind": "function",
			"details": "Changes user ownership of symlink"
		},
		{
			"trigger": "ldap_8859_to_t61()",
			"contents": "ldap_8859_to_t61(${1:value})",
			"kind": "function",
			"details": "Translate 8859 characters to t61 characters"
		},
		{
			"trigger": "ldap_add()",
			"contents": "ldap_add(${1:link_identifier}, ${2:dn}, ${3:entry})",
			"kind": "function",
			"details": "Add entries to LDAP directory"
		},
		{
			"trigger": "ldap_bind()",
			"contents": "ldap_bind(${1:link_identifier})",
			"kind": "function",
			"details": "Bind to LDAP directory"
		},
		{
			"trigger": "ldap_close()",
			"contents": "ldap_close()",
			"kind": "function",
			"details": "Alias of ldap_unbind()"
		},
		{
			"trigger": "ldap_compare()",
			"contents": "ldap_compare(${1:link_identifier}, ${2:dn}, ${3:attribute}, ${4:value})",
			"kind": "function",
			"details": "Compare value of attribute found in entry specified with DN"
		},
		{
			"trigger": "ldap_connect()",
			"contents": "ldap_connect()",
			"kind": "function",
			"details": "Connect to an LDAP server"
		},
		{
			"trigger": "ldap_count_entries()",
			"contents": "ldap_count_entries(${1:link_identifier}, ${2:result_identifier})",
			"kind": "function",
			"details": "Count the number of entries in a search"
		},
		{
			"trigger": "ldap_delete()",
			"contents": "ldap_delete(${1:link_identifier}, ${2:dn})",
			"kind": "function",
			"details": "Delete an entry from a directory"
		},
		{
			"trigger": "ldap_dn2ufn()",
			"contents": "ldap_dn2ufn(${1:dn})",
			"kind": "function",
			"details": "Convert DN to User Friendly Naming format"
		},
		{
			"trigger": "ldap_err2str()",
			"contents": "ldap_err2str(${1:errno})",
			"kind": "function",
			"details": "Convert LDAP error number into string error message"
		},
		{
			"trigger": "ldap_errno()",
			"contents": "ldap_errno(${1:link_identifier})",
			"kind": "function",
			"details": "Return the LDAP error number of the last LDAP command"
		},
		{
			"trigger": "ldap_error()",
			"contents": "ldap_error(${1:link_identifier})",
			"kind": "function",
			"details": "Return the LDAP error message of the last LDAP command"
		},
		{
			"trigger": "ldap_explode_dn()",
			"contents": "ldap_explode_dn(${1:dn}, ${2:with_attrib})",
			"kind": "function",
			"details": "Splits DN into its component parts"
		},
		{
			"trigger": "ldap_first_attribute()",
			"contents": "ldap_first_attribute(${1:link_identifier}, ${2:result_entry_identifier})",
			"kind": "function",
			"details": "Return first attribute"
		},
		{
			"trigger": "ldap_first_entry()",
			"contents": "ldap_first_entry(${1:link_identifier}, ${2:result_identifier})",
			"kind": "function",
			"details": "Return first result id"
		},
		{
			"trigger": "ldap_first_reference()",
			"contents": "ldap_first_reference(${1:link}, ${2:result})",
			"kind": "function",
			"details": "Return first reference"
		},
		{
			"trigger": "ldap_free_result()",
			"contents": "ldap_free_result(${1:result_identifier})",
			"kind": "function",
			"details": "Free result memory"
		},
		{
			"trigger": "ldap_get_attributes()",
			"contents": "ldap_get_attributes(${1:link_identifier}, ${2:result_entry_identifier})",
			"kind": "function",
			"details": "Get attributes from a search result entry"
		},
		{
			"trigger": "ldap_get_dn()",
			"contents": "ldap_get_dn(${1:link_identifier}, ${2:result_entry_identifier})",
			"kind": "function",
			"details": "Get the DN of a result entry"
		},
		{
			"trigger": "ldap_get_entries()",
			"contents": "ldap_get_entries(${1:link_identifier}, ${2:result_identifier})",
			"kind": "function",
			"details": "Get all result entries"
		},
		{
			"trigger": "ldap_get_option()",
			"contents": "ldap_get_option(${1:link_identifier}, ${2:option}, ${3:retval})",
			"kind": "function",
			"details": "Get the current value for given option"
		},
		{
			"trigger": "ldap_get_values()",
			"contents": "ldap_get_values(${1:link_identifier}, ${2:result_entry_identifier}, ${3:attribute})",
			"kind": "function",
			"details": "Get all values from a result entry"
		},
		{
			"trigger": "ldap_get_values_len()",
			"contents": "ldap_get_values_len(${1:link_identifier}, ${2:result_entry_identifier}, ${3:attribute})",
			"kind": "function",
			"details": "Get all binary values from a result entry"
		},
		{
			"trigger": "ldap_list()",
			"contents": "ldap_list(${1:link_identifier}, ${2:base_dn}, ${3:filter})",
			"kind": "function",
			"details": "Single-level search"
		},
		{
			"trigger": "ldap_mod_add()",
			"contents": "ldap_mod_add(${1:link_identifier}, ${2:dn}, ${3:entry})",
			"kind": "function",
			"details": "Add attribute values to current attributes"
		},
		{
			"trigger": "ldap_mod_del()",
			"contents": "ldap_mod_del(${1:link_identifier}, ${2:dn}, ${3:entry})",
			"kind": "function",
			"details": "Delete attribute values from current attributes"
		},
		{
			"trigger": "ldap_mod_replace()",
			"contents": "ldap_mod_replace(${1:link_identifier}, ${2:dn}, ${3:entry})",
			"kind": "function",
			"details": "Replace attribute values with new ones"
		},
		{
			"trigger": "ldap_modify()",
			"contents": "ldap_modify(${1:link_identifier}, ${2:dn}, ${3:entry})",
			"kind": "function",
			"details": "Alias of ldap_mod_replace()"
		},
		{
			"trigger": "ldap_next_attribute()",
			"contents": "ldap_next_attribute(${1:link_identifier}, ${2:result_entry_identifier})",
			"kind": "function",
			"details": "Get the next attribute in result"
		},
		{
			"trigger": "ldap_next_entry()",
			"contents": "ldap_next_entry(${1:link_identifier}, ${2:result_entry_identifier})",
			"kind": "function",
			"details": "Get next result entry"
		},
		{
			"trigger": "ldap_next_reference()",
			"contents": "ldap_next_reference(${1:link}, ${2:entry})",
			"kind": "function",
			"details": "Get next reference"
		},
		{
			"trigger": "ldap_parse_reference()",
			"contents": "ldap_parse_reference(${1:link}, ${2:entry}, ${3:referrals})",
			"kind": "function",
			"details": "Extract information from reference entry"
		},
		{
			"trigger": "ldap_parse_result()",
			"contents": "ldap_parse_result(${1:link}, ${2:result}, ${3:errcode})",
			"kind": "function",
			"details": "Extract information from result"
		},
		{
			"trigger": "ldap_read()",
			"contents": "ldap_read(${1:link_identifier}, ${2:base_dn}, ${3:filter})",
			"kind": "function",
			"details": "Read an entry"
		},
		{
			"trigger": "ldap_rename()",
			"contents": "ldap_rename(${1:link_identifier}, ${2:dn}, ${3:newrdn}, ${4:newparent}, ${5:deleteoldrdn})",
			"kind": "function",
			"details": "Modify the name of an entry"
		},
		{
			"trigger": "ldap_sasl_bind()",
			"contents": "ldap_sasl_bind(${1:link})",
			"kind": "function",
			"details": "Bind to LDAP directory using SASL"
		},
		{
			"trigger": "ldap_search()",
			"contents": "ldap_search(${1:link_identifier}, ${2:base_dn}, ${3:filter})",
			"kind": "function",
			"details": "Search LDAP tree"
		},
		{
			"trigger": "ldap_set_option()",
			"contents": "ldap_set_option(${1:link_identifier}, ${2:option}, ${3:newval})",
			"kind": "function",
			"details": "Set the value of the given option"
		},
		{
			"trigger": "ldap_set_rebind_proc()",
			"contents": "ldap_set_rebind_proc(${1:link}, ${2:callback})",
			"kind": "function",
			"details": "Set a callback function to do re-binds on referral chasing"
		},
		{
			"trigger": "ldap_sort()",
			"contents": "ldap_sort(${1:link}, ${2:result}, ${3:sortfilter})",
			"kind": "function",
			"details": "Sort LDAP result entries on the client side"
		},
		{
			"trigger": "ldap_start_tls()",
			"contents": "ldap_start_tls(${1:link})",
			"kind": "function",
			"details": "Start TLS"
		},
		{
			"trigger": "ldap_t61_to_8859()",
			"contents": "ldap_t61_to_8859(${1:value})",
			"kind": "function",
			"details": "Translate t61 characters to 8859 characters"
		},
		{
			"trigger": "ldap_unbind()",
			"contents": "ldap_unbind(${1:link_identifier})",
			"kind": "function",
			"details": "Unbind from LDAP directory"
		},
		{
			"trigger": "levenshtein()",
			"contents": "levenshtein(${1:str1}, ${2:str2})",
			"kind": "function",
			"details": "Calculate Levenshtein distance between two strings"
		},
		{
			"trigger": "libxml_clear_errors()",
			"contents": "libxml_clear_errors()",
			"kind": "function",
			"details": "Clear libxml error buffer"
		},
		{
			"trigger": "libxml_disable_entity_loader()",
			"contents": "libxml_disable_entity_loader()",
			"kind": "function",
			"details": "Disable the ability to load external entities"
		},
		{
			"trigger": "libxml_get_errors()",
			"contents": "libxml_get_errors()",
			"kind": "function",
			"details": "Retrieve array of errors"
		},
		{
			"trigger": "libxml_get_last_error()",
			"contents": "libxml_get_last_error()",
			"kind": "function",
			"details": "Retrieve last error from libxml"
		},
		{
			"trigger": "libxml_set_streams_context()",
			"contents": "libxml_set_streams_context(${1:streams_context})",
			"kind": "function",
			"details": "Set the streams context for the next libxml document load or write"
		},
		{
			"trigger": "libxml_use_internal_errors()",
			"contents": "libxml_use_internal_errors()",
			"kind": "function",
			"details": "Disable libxml errors and allow user to fetch error information as needed"
		},
		{
			"trigger": "link()",
			"contents": "link(${1:target}, ${2:link})",
			"kind": "function",
			"details": "Create a hard link"
		},
		{
			"trigger": "linkinfo()",
			"contents": "linkinfo(${1:path})",
			"kind": "function",
			"details": "Gets information about a link"
		},
		{
			"trigger": "list()",
			"contents": "list(${1:varname})",
			"kind": "function",
			"details": "Assign variables as if they were an array"
		},
		{
			"trigger": "localeconv()",
			"contents": "localeconv()",
			"kind": "function",
			"details": "Get numeric formatting information"
		},
		{
			"trigger": "localtime()",
			"contents": "localtime()",
			"kind": "function",
			"details": "Get the local time"
		},
		{
			"trigger": "log()",
			"contents": "log(${1:arg})",
			"kind": "function",
			"details": "Natural logarithm"
		},
		{
			"trigger": "log10()",
			"contents": "log10(${1:arg})",
			"kind": "function",
			"details": "Base-10 logarithm"
		},
		{
			"trigger": "log1p()",
			"contents": "log1p(${1:number})",
			"kind": "function",
			"details": "Returns log(1 + number), computed in a way that is accurate even when the value of number is close to zero"
		},
		{
			"trigger": "long2ip()",
			"contents": "long2ip(${1:proper_address})",
			"kind": "function",
			"details": "Converts an long integer address into a string in (IPv4) Internet standard dotted format"
		},
		{
			"trigger": "lstat()",
			"contents": "lstat(${1:filename})",
			"kind": "function",
			"details": "Gives information about a file or symbolic link"
		},
		{
			"trigger": "ltrim()",
			"contents": "ltrim(${1:str})",
			"kind": "function",
			"details": "Strip whitespace (or other characters) from the beginning of a string"
		},
		{
			"trigger": "lzf_compress()",
			"contents": "lzf_compress(${1:data})",
			"kind": "function",
			"details": "LZF compression"
		},
		{
			"trigger": "lzf_decompress()",
			"contents": "lzf_decompress(${1:data})",
			"kind": "function",
			"details": "LZF decompression"
		},
		{
			"trigger": "lzf_optimized_for()",
			"contents": "lzf_optimized_for()",
			"kind": "function",
			"details": "Determines what LZF extension was optimized for"
		},
		{
			"trigger": "m_checkstatus()",
			"contents": "m_checkstatus(${1:conn}, ${2:identifier})",
			"kind": "function",
			"details": "Check to see if a transaction has completed"
		},
		{
			"trigger": "m_completeauthorizations()",
			"contents": "m_completeauthorizations(${1:conn}, ${2:array})",
			"kind": "function",
			"details": "Number of complete authorizations in queue, returning an array of their identifiers"
		},
		{
			"trigger": "m_connect()",
			"contents": "m_connect(${1:conn})",
			"kind": "function",
			"details": "Establish the connection to MCVE"
		},
		{
			"trigger": "m_connectionerror()",
			"contents": "m_connectionerror(${1:conn})",
			"kind": "function",
			"details": "Get a textual representation of why a connection failed"
		},
		{
			"trigger": "m_deletetrans()",
			"contents": "m_deletetrans(${1:conn}, ${2:identifier})",
			"kind": "function",
			"details": "Delete specified transaction from MCVE_CONN structure"
		},
		{
			"trigger": "m_destroyconn()",
			"contents": "m_destroyconn(${1:conn})",
			"kind": "function",
			"details": "Destroy the connection and MCVE_CONN structure"
		},
		{
			"trigger": "m_destroyengine()",
			"contents": "m_destroyengine()",
			"kind": "function",
			"details": "Free memory associated with IP/SSL connectivity"
		},
		{
			"trigger": "m_getcell()",
			"contents": "m_getcell(${1:conn}, ${2:identifier}, ${3:column}, ${4:row})",
			"kind": "function",
			"details": "Get a specific cell from a comma delimited response by column name"
		},
		{
			"trigger": "m_getcellbynum()",
			"contents": "m_getcellbynum(${1:conn}, ${2:identifier}, ${3:column}, ${4:row})",
			"kind": "function",
			"details": "Get a specific cell from a comma delimited response by column number"
		},
		{
			"trigger": "m_getcommadelimited()",
			"contents": "m_getcommadelimited(${1:conn}, ${2:identifier})",
			"kind": "function",
			"details": "Get the RAW comma delimited data returned from MCVE"
		},
		{
			"trigger": "m_getheader()",
			"contents": "m_getheader(${1:conn}, ${2:identifier}, ${3:column_num})",
			"kind": "function",
			"details": "Get the name of the column in a comma-delimited response"
		},
		{
			"trigger": "m_initconn()",
			"contents": "m_initconn()",
			"kind": "function",
			"details": "Create and initialize an MCVE_CONN structure"
		},
		{
			"trigger": "m_initengine()",
			"contents": "m_initengine(${1:location})",
			"kind": "function",
			"details": "Ready the client for IP/SSL Communication"
		},
		{
			"trigger": "m_iscommadelimited()",
			"contents": "m_iscommadelimited(${1:conn}, ${2:identifier})",
			"kind": "function",
			"details": "Checks to see if response is comma delimited"
		},
		{
			"trigger": "m_maxconntimeout()",
			"contents": "m_maxconntimeout(${1:conn}, ${2:secs})",
			"kind": "function",
			"details": "The maximum amount of time the API will attempt a connection to MCVE"
		},
		{
			"trigger": "m_monitor()",
			"contents": "m_monitor(${1:conn})",
			"kind": "function",
			"details": "Perform communication with MCVE (send/receive data) Non-blocking"
		},
		{
			"trigger": "m_numcolumns()",
			"contents": "m_numcolumns(${1:conn}, ${2:identifier})",
			"kind": "function",
			"details": "Number of columns returned in a comma delimited response"
		},
		{
			"trigger": "m_numrows()",
			"contents": "m_numrows(${1:conn}, ${2:identifier})",
			"kind": "function",
			"details": "Number of rows returned in a comma delimited response"
		},
		{
			"trigger": "m_parsecommadelimited()",
			"contents": "m_parsecommadelimited(${1:conn}, ${2:identifier})",
			"kind": "function",
			"details": "Parse the comma delimited response so m_getcell, etc will work"
		},
		{
			"trigger": "m_responsekeys()",
			"contents": "m_responsekeys(${1:conn}, ${2:identifier})",
			"kind": "function",
			"details": "Returns array of strings which represents the keys that can be used for response parameters on this transaction"
		},
		{
			"trigger": "m_responseparam()",
			"contents": "m_responseparam(${1:conn}, ${2:identifier}, ${3:key})",
			"kind": "function",
			"details": "Get a custom response parameter"
		},
		{
			"trigger": "m_returnstatus()",
			"contents": "m_returnstatus(${1:conn}, ${2:identifier})",
			"kind": "function",
			"details": "Check to see if the transaction was successful"
		},
		{
			"trigger": "m_setblocking()",
			"contents": "m_setblocking(${1:conn}, ${2:tf})",
			"kind": "function",
			"details": "Set blocking/non-blocking mode for connection"
		},
		{
			"trigger": "m_setdropfile()",
			"contents": "m_setdropfile(${1:conn}, ${2:directory})",
			"kind": "function",
			"details": "Set the connection method to Drop-File"
		},
		{
			"trigger": "m_setip()",
			"contents": "m_setip(${1:conn}, ${2:host}, ${3:port})",
			"kind": "function",
			"details": "Set the connection method to IP"
		},
		{
			"trigger": "m_setssl()",
			"contents": "m_setssl(${1:conn}, ${2:host}, ${3:port})",
			"kind": "function",
			"details": "Set the connection method to SSL"
		},
		{
			"trigger": "m_setssl_cafile()",
			"contents": "m_setssl_cafile(${1:conn}, ${2:cafile})",
			"kind": "function",
			"details": "Set SSL CA (Certificate Authority) file for verification of server certificate"
		},
		{
			"trigger": "m_setssl_files()",
			"contents": "m_setssl_files(${1:conn}, ${2:sslkeyfile}, ${3:sslcertfile})",
			"kind": "function",
			"details": "Set certificate key files and certificates if server requires client certificate verification"
		},
		{
			"trigger": "m_settimeout()",
			"contents": "m_settimeout(${1:conn}, ${2:seconds})",
			"kind": "function",
			"details": "Set maximum transaction time (per trans)"
		},
		{
			"trigger": "m_sslcert_gen_hash()",
			"contents": "m_sslcert_gen_hash(${1:filename})",
			"kind": "function",
			"details": "Generate hash for SSL client certificate verification"
		},
		{
			"trigger": "m_transactionssent()",
			"contents": "m_transactionssent(${1:conn})",
			"kind": "function",
			"details": "Check to see if outgoing buffer is clear"
		},
		{
			"trigger": "m_transinqueue()",
			"contents": "m_transinqueue(${1:conn})",
			"kind": "function",
			"details": "Number of transactions in client-queue"
		},
		{
			"trigger": "m_transkeyval()",
			"contents": "m_transkeyval(${1:conn}, ${2:identifier}, ${3:key}, ${4:value})",
			"kind": "function",
			"details": "Add key/value pair to a transaction. Replaces deprecated transparam()"
		},
		{
			"trigger": "m_transnew()",
			"contents": "m_transnew(${1:conn})",
			"kind": "function",
			"details": "Start a new transaction"
		},
		{
			"trigger": "m_transsend()",
			"contents": "m_transsend(${1:conn}, ${2:identifier})",
			"kind": "function",
			"details": "Finalize and send the transaction"
		},
		{
			"trigger": "m_uwait()",
			"contents": "m_uwait(${1:microsecs})",
			"kind": "function",
			"details": "Wait x microsecs"
		},
		{
			"trigger": "m_validateidentifier()",
			"contents": "m_validateidentifier(${1:conn}, ${2:tf})",
			"kind": "function",
			"details": "Whether or not to validate the passed identifier on any transaction it is passed to"
		},
		{
			"trigger": "m_verifyconnection()",
			"contents": "m_verifyconnection(${1:conn}, ${2:tf})",
			"kind": "function",
			"details": "Set whether or not to PING upon connect to verify connection"
		},
		{
			"trigger": "m_verifysslcert()",
			"contents": "m_verifysslcert(${1:conn}, ${2:tf})",
			"kind": "function",
			"details": "Set whether or not to verify the server ssl certificate"
		},
		{
			"trigger": "magic_quotes_runtime()",
			"contents": "magic_quotes_runtime()",
			"kind": "function",
			"details": "Alias of set_magic_quotes_runtime()"
		},
		{
			"trigger": "mail()",
			"contents": "mail(${1:to}, ${2:subject}, ${3:message})",
			"kind": "function",
			"details": "Send mail"
		},
		{
			"trigger": "mailparse_determine_best_xfer_encoding()",
			"contents": "mailparse_determine_best_xfer_encoding(${1:fp})",
			"kind": "function",
			"details": "Gets the best way of encoding"
		},
		{
			"trigger": "mailparse_msg_create()",
			"contents": "mailparse_msg_create()",
			"kind": "function",
			"details": "Create a mime mail resource"
		},
		{
			"trigger": "mailparse_msg_extract_part()",
			"contents": "mailparse_msg_extract_part(${1:mimemail}, ${2:msgbody})",
			"kind": "function",
			"details": "Extracts/decodes a message section"
		},
		{
			"trigger": "mailparse_msg_extract_part_file()",
			"contents": "mailparse_msg_extract_part_file(${1:mimemail}, ${2:filename})",
			"kind": "function",
			"details": "Extracts/decodes a message section"
		},
		{
			"trigger": "mailparse_msg_extract_whole_part_file()",
			"contents": "mailparse_msg_extract_whole_part_file(${1:mimemail}, ${2:filename})",
			"kind": "function",
			"details": "Extracts a message section including headers without decoding the transfer encoding"
		},
		{
			"trigger": "mailparse_msg_free()",
			"contents": "mailparse_msg_free(${1:mimemail})",
			"kind": "function",
			"details": "Frees a MIME resource"
		},
		{
			"trigger": "mailparse_msg_get_part()",
			"contents": "mailparse_msg_get_part(${1:mimemail}, ${2:mimesection})",
			"kind": "function",
			"details": "Returns a handle on a given section in a mimemessage"
		},
		{
			"trigger": "mailparse_msg_get_part_data()",
			"contents": "mailparse_msg_get_part_data(${1:mimemail})",
			"kind": "function",
			"details": "Returns an associative array of info about the message"
		},
		{
			"trigger": "mailparse_msg_get_structure()",
			"contents": "mailparse_msg_get_structure(${1:mimemail})",
			"kind": "function",
			"details": "Returns an array of mime section names in the supplied message"
		},
		{
			"trigger": "mailparse_msg_parse()",
			"contents": "mailparse_msg_parse(${1:mimemail}, ${2:data})",
			"kind": "function",
			"details": "Incrementally parse data into buffer"
		},
		{
			"trigger": "mailparse_msg_parse_file()",
			"contents": "mailparse_msg_parse_file(${1:filename})",
			"kind": "function",
			"details": "Parses a file"
		},
		{
			"trigger": "mailparse_rfc822_parse_addresses()",
			"contents": "mailparse_rfc822_parse_addresses(${1:addresses})",
			"kind": "function",
			"details": "Parse RFC 822 compliant addresses"
		},
		{
			"trigger": "mailparse_stream_encode()",
			"contents": "mailparse_stream_encode(${1:sourcefp}, ${2:destfp}, ${3:encoding})",
			"kind": "function",
			"details": "Streams data from source file pointer, apply encoding and write to destfp"
		},
		{
			"trigger": "mailparse_uudecode_all()",
			"contents": "mailparse_uudecode_all(${1:fp})",
			"kind": "function",
			"details": "Scans the data from fp and extract each embedded uuencoded file"
		},
		{
			"trigger": "main()",
			"contents": "main()",
			"kind": "function",
			"details": "Dummy for main()"
		},
		{
			"trigger": "max()",
			"contents": "max(${1:values})",
			"kind": "function",
			"details": "Find highest value"
		},
		{
			"trigger": "maxdb_bind_param()",
			"contents": "maxdb_bind_param()",
			"kind": "function",
			"details": "Alias of maxdb_stmt_bind_param()"
		},
		{
			"trigger": "maxdb_bind_result()",
			"contents": "maxdb_bind_result()",
			"kind": "function",
			"details": "Alias of maxdb_stmt_bind_result()"
		},
		{
			"trigger": "maxdb_client_encoding()",
			"contents": "maxdb_client_encoding()",
			"kind": "function",
			"details": "Alias of maxdb_character_set_name()"
		},
		{
			"trigger": "maxdb_connect_errno()",
			"contents": "maxdb_connect_errno()",
			"kind": "function",
			"details": "Returns the error code from last connect call"
		},
		{
			"trigger": "maxdb_connect_error()",
			"contents": "maxdb_connect_error()",
			"kind": "function",
			"details": "Returns a string description of the last connect error"
		},
		{
			"trigger": "maxdb_debug()",
			"contents": "maxdb_debug(${1:debug})",
			"kind": "function",
			"details": "Performs debugging operations"
		},
		{
			"trigger": "maxdb_disable_rpl_parse()",
			"contents": "maxdb_disable_rpl_parse(${1:link})",
			"kind": "function",
			"details": "Disable RPL parse"
		},
		{
			"trigger": "maxdb_dump_debug_info()",
			"contents": "maxdb_dump_debug_info(${1:link})",
			"kind": "function",
			"details": "Dump debugging information into the log"
		},
		{
			"trigger": "maxdb_embedded_connect()",
			"contents": "maxdb_embedded_connect()",
			"kind": "function",
			"details": "Open a connection to an embedded MaxDB server"
		},
		{
			"trigger": "maxdb_enable_reads_from_master()",
			"contents": "maxdb_enable_reads_from_master(${1:link})",
			"kind": "function",
			"details": "Enable reads from master"
		},
		{
			"trigger": "maxdb_enable_rpl_parse()",
			"contents": "maxdb_enable_rpl_parse(${1:link})",
			"kind": "function",
			"details": "Enable RPL parse"
		},
		{
			"trigger": "maxdb_escape_string()",
			"contents": "maxdb_escape_string()",
			"kind": "function",
			"details": "Alias of maxdb_real_escape_string()"
		},
		{
			"trigger": "maxdb_execute()",
			"contents": "maxdb_execute()",
			"kind": "function",
			"details": "Alias of maxdb_stmt_execute()"
		},
		{
			"trigger": "maxdb_fetch()",
			"contents": "maxdb_fetch()",
			"kind": "function",
			"details": "Alias of maxdb_stmt_fetch()"
		},
		{
			"trigger": "maxdb_get_client_info()",
			"contents": "maxdb_get_client_info()",
			"kind": "function",
			"details": "Returns the MaxDB client version as a string"
		},
		{
			"trigger": "maxdb_get_client_version()",
			"contents": "maxdb_get_client_version()",
			"kind": "function",
			"details": "Get MaxDB client info"
		},
		{
			"trigger": "maxdb_get_metadata()",
			"contents": "maxdb_get_metadata()",
			"kind": "function",
			"details": "Alias of maxdb_stmt_result_metadata()"
		},
		{
			"trigger": "maxdb_init()",
			"contents": "maxdb_init()",
			"kind": "function",
			"details": "Initializes MaxDB and returns an resource for use with maxdb_real_connect"
		},
		{
			"trigger": "maxdb_master_query()",
			"contents": "maxdb_master_query(${1:link}, ${2:query})",
			"kind": "function",
			"details": "Enforce execution of a query on the master in a master/slave setup"
		},
		{
			"trigger": "maxdb_param_count()",
			"contents": "maxdb_param_count()",
			"kind": "function",
			"details": "Alias of maxdb_stmt_param_count()"
		},
		{
			"trigger": "maxdb_report()",
			"contents": "maxdb_report(${1:flags})",
			"kind": "function",
			"details": "Enables or disables internal report functions"
		},
		{
			"trigger": "maxdb_rpl_parse_enabled()",
			"contents": "maxdb_rpl_parse_enabled(${1:link})",
			"kind": "function",
			"details": "Check if RPL parse is enabled"
		},
		{
			"trigger": "maxdb_rpl_probe()",
			"contents": "maxdb_rpl_probe(${1:link})",
			"kind": "function",
			"details": "RPL probe"
		},
		{
			"trigger": "maxdb_send_long_data()",
			"contents": "maxdb_send_long_data()",
			"kind": "function",
			"details": "Alias of maxdb_stmt_send_long_data()"
		},
		{
			"trigger": "maxdb_server_end()",
			"contents": "maxdb_server_end()",
			"kind": "function",
			"details": "Shut down the embedded server"
		},
		{
			"trigger": "maxdb_server_init()",
			"contents": "maxdb_server_init()",
			"kind": "function",
			"details": "Initialize embedded server"
		},
		{
			"trigger": "maxdb_set_opt()",
			"contents": "maxdb_set_opt()",
			"kind": "function",
			"details": "Alias of maxdb_options()"
		},
		{
			"trigger": "maxdb_stmt_sqlstate()",
			"contents": "maxdb_stmt_sqlstate(${1:stmt})",
			"kind": "function",
			"details": "Returns SQLSTATE error from previous statement operation"
		},
		{
			"trigger": "maxdb_thread_safe()",
			"contents": "maxdb_thread_safe()",
			"kind": "function",
			"details": "Returns whether thread safety is given or not"
		},
		{
			"trigger": "mb_check_encoding()",
			"contents": "mb_check_encoding()",
			"kind": "function",
			"details": "Check if strings are valid for the specified encoding"
		},
		{
			"trigger": "mb_convert_case()",
			"contents": "mb_convert_case(${1:str}, ${2:mode = MB_CASE_UPPER})",
			"kind": "function",
			"details": "Perform case folding on a string"
		},
		{
			"trigger": "mb_convert_encoding()",
			"contents": "mb_convert_encoding(${1:str}, ${2:to_encoding})",
			"kind": "function",
			"details": "Convert character encoding"
		},
		{
			"trigger": "mb_convert_kana()",
			"contents": "mb_convert_kana(${1:str})",
			"kind": "function",
			"details": "Convert \"kana\" one from another (\"zen-kaku\", \"han-kaku\" and more)"
		},
		{
			"trigger": "mb_convert_variables()",
			"contents": "mb_convert_variables(${1:to_encoding}, ${2:from_encoding}, ${3:vars})",
			"kind": "function",
			"details": "Convert character code in variable(s)"
		},
		{
			"trigger": "mb_decode_mimeheader()",
			"contents": "mb_decode_mimeheader(${1:str})",
			"kind": "function",
			"details": "Decode string in MIME header field"
		},
		{
			"trigger": "mb_decode_numericentity()",
			"contents": "mb_decode_numericentity(${1:str}, ${2:convmap}, ${3:encoding})",
			"kind": "function",
			"details": "Decode HTML numeric string reference to character"
		},
		{
			"trigger": "mb_detect_encoding()",
			"contents": "mb_detect_encoding(${1:str})",
			"kind": "function",
			"details": "Detect character encoding"
		},
		{
			"trigger": "mb_detect_order()",
			"contents": "mb_detect_order()",
			"kind": "function",
			"details": "Set/Get character encoding detection order"
		},
		{
			"trigger": "mb_encode_mimeheader()",
			"contents": "mb_encode_mimeheader(${1:str})",
			"kind": "function",
			"details": "Encode string for MIME header"
		},
		{
			"trigger": "mb_encode_numericentity()",
			"contents": "mb_encode_numericentity(${1:str}, ${2:convmap}, ${3:encoding})",
			"kind": "function",
			"details": "Encode character to HTML numeric string reference"
		},
		{
			"trigger": "mb_encoding_aliases()",
			"contents": "mb_encoding_aliases(${1:encoding})",
			"kind": "function",
			"details": "Get aliases of a known encoding type"
		},
		{
			"trigger": "mb_ereg()",
			"contents": "mb_ereg(${1:pattern}, ${2:string})",
			"kind": "function",
			"details": "Regular expression match with multibyte support"
		},
		{
			"trigger": "mb_ereg_match()",
			"contents": "mb_ereg_match(${1:pattern}, ${2:string})",
			"kind": "function",
			"details": "Regular expression match for multibyte string"
		},
		{
			"trigger": "mb_ereg_replace()",
			"contents": "mb_ereg_replace(${1:pattern}, ${2:replacement}, ${3:string})",
			"kind": "function",
			"details": "Replace regular expression with multibyte support"
		},
		{
			"trigger": "mb_ereg_search()",
			"contents": "mb_ereg_search()",
			"kind": "function",
			"details": "Multibyte regular expression match for predefined multibyte string"
		},
		{
			"trigger": "mb_ereg_search_getpos()",
			"contents": "mb_ereg_search_getpos()",
			"kind": "function",
			"details": "Returns start point for next regular expression match"
		},
		{
			"trigger": "mb_ereg_search_getregs()",
			"contents": "mb_ereg_search_getregs()",
			"kind": "function",
			"details": "Retrieve the result from the last multibyte regular expression match"
		},
		{
			"trigger": "mb_ereg_search_init()",
			"contents": "mb_ereg_search_init(${1:string})",
			"kind": "function",
			"details": "Setup string and regular expression for a multibyte regular expression match"
		},
		{
			"trigger": "mb_ereg_search_pos()",
			"contents": "mb_ereg_search_pos()",
			"kind": "function",
			"details": "Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string"
		},
		{
			"trigger": "mb_ereg_search_regs()",
			"contents": "mb_ereg_search_regs()",
			"kind": "function",
			"details": "Returns the matched part of a multibyte regular expression"
		},
		{
			"trigger": "mb_ereg_search_setpos()",
			"contents": "mb_ereg_search_setpos(${1:position})",
			"kind": "function",
			"details": "Set start point of next regular expression match"
		},
		{
			"trigger": "mb_eregi()",
			"contents": "mb_eregi(${1:pattern}, ${2:string})",
			"kind": "function",
			"details": "Regular expression match ignoring case with multibyte support"
		},
		{
			"trigger": "mb_eregi_replace()",
			"contents": "mb_eregi_replace(${1:pattern}, ${2:replace}, ${3:string})",
			"kind": "function",
			"details": "Replace regular expression with multibyte support ignoring case"
		},
		{
			"trigger": "mb_get_info()",
			"contents": "mb_get_info()",
			"kind": "function",
			"details": "Get internal settings of mbstring"
		},
		{
			"trigger": "mb_http_input()",
			"contents": "mb_http_input()",
			"kind": "function",
			"details": "Detect HTTP input character encoding"
		},
		{
			"trigger": "mb_http_output()",
			"contents": "mb_http_output()",
			"kind": "function",
			"details": "Set/Get HTTP output character encoding"
		},
		{
			"trigger": "mb_internal_encoding()",
			"contents": "mb_internal_encoding()",
			"kind": "function",
			"details": "Set/Get internal character encoding"
		},
		{
			"trigger": "mb_language()",
			"contents": "mb_language()",
			"kind": "function",
			"details": "Set/Get current language"
		},
		{
			"trigger": "mb_list_encodings()",
			"contents": "mb_list_encodings()",
			"kind": "function",
			"details": "Returns an array of all supported encodings"
		},
		{
			"trigger": "mb_output_handler()",
			"contents": "mb_output_handler(${1:contents}, ${2:status})",
			"kind": "function",
			"details": "Callback function converts character encoding in output buffer"
		},
		{
			"trigger": "mb_parse_str()",
			"contents": "mb_parse_str(${1:encoded_string})",
			"kind": "function",
			"details": "Parse GET/POST/COOKIE data and set global variable"
		},
		{
			"trigger": "mb_preferred_mime_name()",
			"contents": "mb_preferred_mime_name(${1:encoding})",
			"kind": "function",
			"details": "Get MIME charset string"
		},
		{
			"trigger": "mb_regex_encoding()",
			"contents": "mb_regex_encoding()",
			"kind": "function",
			"details": "Set/Get character encoding for multibyte regex"
		},
		{
			"trigger": "mb_regex_set_options()",
			"contents": "mb_regex_set_options()",
			"kind": "function",
			"details": "Set/Get the default options for mbregex functions"
		},
		{
			"trigger": "mb_send_mail()",
			"contents": "mb_send_mail(${1:to}, ${2:subject}, ${3:message})",
			"kind": "function",
			"details": "Send encoded mail"
		},
		{
			"trigger": "mb_split()",
			"contents": "mb_split(${1:pattern}, ${2:string})",
			"kind": "function",
			"details": "Split multibyte string using regular expression"
		},
		{
			"trigger": "mb_strcut()",
			"contents": "mb_strcut(${1:str}, ${2:start})",
			"kind": "function",
			"details": "Get part of string"
		},
		{
			"trigger": "mb_strimwidth()",
			"contents": "mb_strimwidth(${1:str}, ${2:start}, ${3:width})",
			"kind": "function",
			"details": "Get truncated string with specified width"
		},
		{
			"trigger": "mb_stripos()",
			"contents": "mb_stripos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Finds position of first occurrence of a string within another, case insensitive"
		},
		{
			"trigger": "mb_stristr()",
			"contents": "mb_stristr(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Finds first occurrence of a string within another, case insensitive"
		},
		{
			"trigger": "mb_strlen()",
			"contents": "mb_strlen(${1:str})",
			"kind": "function",
			"details": "Get string length"
		},
		{
			"trigger": "mb_strpos()",
			"contents": "mb_strpos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find position of first occurrence of string in a string"
		},
		{
			"trigger": "mb_strrchr()",
			"contents": "mb_strrchr(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Finds the last occurrence of a character in a string within another"
		},
		{
			"trigger": "mb_strrichr()",
			"contents": "mb_strrichr(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Finds the last occurrence of a character in a string within another, case insensitive"
		},
		{
			"trigger": "mb_strripos()",
			"contents": "mb_strripos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Finds position of last occurrence of a string within another, case insensitive"
		},
		{
			"trigger": "mb_strrpos()",
			"contents": "mb_strrpos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find position of last occurrence of a string in a string"
		},
		{
			"trigger": "mb_strstr()",
			"contents": "mb_strstr(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Finds first occurrence of a string within another"
		},
		{
			"trigger": "mb_strtolower()",
			"contents": "mb_strtolower(${1:str})",
			"kind": "function",
			"details": "Make a string lowercase"
		},
		{
			"trigger": "mb_strtoupper()",
			"contents": "mb_strtoupper(${1:str})",
			"kind": "function",
			"details": "Make a string uppercase"
		},
		{
			"trigger": "mb_strwidth()",
			"contents": "mb_strwidth(${1:str})",
			"kind": "function",
			"details": "Return width of string"
		},
		{
			"trigger": "mb_substitute_character()",
			"contents": "mb_substitute_character()",
			"kind": "function",
			"details": "Set/Get substitution character"
		},
		{
			"trigger": "mb_substr()",
			"contents": "mb_substr(${1:str}, ${2:start})",
			"kind": "function",
			"details": "Get part of string"
		},
		{
			"trigger": "mb_substr_count()",
			"contents": "mb_substr_count(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Count the number of substring occurrences"
		},
		{
			"trigger": "mcrypt_cbc()",
			"contents": "mcrypt_cbc(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})",
			"kind": "function",
			"details": "Encrypts/decrypts data in CBC mode"
		},
		{
			"trigger": "mcrypt_cfb()",
			"contents": "mcrypt_cfb(${1:cipher}, ${2:key}, ${3:data}, ${4:mode}, ${5:iv})",
			"kind": "function",
			"details": "Encrypts/decrypts data in CFB mode"
		},
		{
			"trigger": "mcrypt_create_iv()",
			"contents": "mcrypt_create_iv(${1:size})",
			"kind": "function",
			"details": "Creates an initialization vector (IV) from a random source"
		},
		{
			"trigger": "mcrypt_decrypt()",
			"contents": "mcrypt_decrypt(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})",
			"kind": "function",
			"details": "Decrypts crypttext with given parameters"
		},
		{
			"trigger": "mcrypt_ecb()",
			"contents": "mcrypt_ecb(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})",
			"kind": "function",
			"details": "Deprecated: Encrypts/decrypts data in ECB mode"
		},
		{
			"trigger": "mcrypt_enc_get_algorithms_name()",
			"contents": "mcrypt_enc_get_algorithms_name(${1:td})",
			"kind": "function",
			"details": "Returns the name of the opened algorithm"
		},
		{
			"trigger": "mcrypt_enc_get_block_size()",
			"contents": "mcrypt_enc_get_block_size(${1:td})",
			"kind": "function",
			"details": "Returns the blocksize of the opened algorithm"
		},
		{
			"trigger": "mcrypt_enc_get_iv_size()",
			"contents": "mcrypt_enc_get_iv_size(${1:td})",
			"kind": "function",
			"details": "Returns the size of the IV of the opened algorithm"
		},
		{
			"trigger": "mcrypt_enc_get_key_size()",
			"contents": "mcrypt_enc_get_key_size(${1:td})",
			"kind": "function",
			"details": "Returns the maximum supported keysize of the opened mode"
		},
		{
			"trigger": "mcrypt_enc_get_modes_name()",
			"contents": "mcrypt_enc_get_modes_name(${1:td})",
			"kind": "function",
			"details": "Returns the name of the opened mode"
		},
		{
			"trigger": "mcrypt_enc_get_supported_key_sizes()",
			"contents": "mcrypt_enc_get_supported_key_sizes(${1:td})",
			"kind": "function",
			"details": "Returns an array with the supported keysizes of the opened algorithm"
		},
		{
			"trigger": "mcrypt_enc_is_block_algorithm()",
			"contents": "mcrypt_enc_is_block_algorithm(${1:td})",
			"kind": "function",
			"details": "Checks whether the algorithm of the opened mode is a block algorithm"
		},
		{
			"trigger": "mcrypt_enc_is_block_algorithm_mode()",
			"contents": "mcrypt_enc_is_block_algorithm_mode(${1:td})",
			"kind": "function",
			"details": "Checks whether the encryption of the opened mode works on blocks"
		},
		{
			"trigger": "mcrypt_enc_is_block_mode()",
			"contents": "mcrypt_enc_is_block_mode(${1:td})",
			"kind": "function",
			"details": "Checks whether the opened mode outputs blocks"
		},
		{
			"trigger": "mcrypt_enc_self_test()",
			"contents": "mcrypt_enc_self_test(${1:td})",
			"kind": "function",
			"details": "Runs a self test on the opened module"
		},
		{
			"trigger": "mcrypt_encrypt()",
			"contents": "mcrypt_encrypt(${1:cipher}, ${2:key}, ${3:data}, ${4:mode})",
			"kind": "function",
			"details": "Encrypts plaintext with given parameters"
		},
		{
			"trigger": "mcrypt_generic()",
			"contents": "mcrypt_generic(${1:td}, ${2:data})",
			"kind": "function",
			"details": "This function encrypts data"
		},
		{
			"trigger": "mcrypt_generic_deinit()",
			"contents": "mcrypt_generic_deinit(${1:td})",
			"kind": "function",
			"details": "This function deinitializes an encryption module"
		},
		{
			"trigger": "mcrypt_generic_end()",
			"contents": "mcrypt_generic_end(${1:td})",
			"kind": "function",
			"details": "This function terminates encryption"
		},
		{
			"trigger": "mcrypt_generic_init()",
			"contents": "mcrypt_generic_init(${1:td}, ${2:key}, ${3:iv})",
			"kind": "function",
			"details": "This function initializes all buffers needed for encryption"
		},
		{
			"trigger": "mcrypt_get_block_size()",
			"contents": "mcrypt_get_block_size(${1:cipher})",
			"kind": "function",
			"details": "Gets the block size of the specified cipher"
		},
		{
			"trigger": "mcrypt_get_cipher_name()",
			"contents": "mcrypt_get_cipher_name(${1:cipher})",
			"kind": "function",
			"details": "Gets the name of the specified cipher"
		},
		{
			"trigger": "mcrypt_get_iv_size()",
			"contents": "mcrypt_get_iv_size(${1:cipher}, ${2:mode})",
			"kind": "function",
			"details": "Returns the size of the IV belonging to a specific cipher/mode combination"
		},
		{
			"trigger": "mcrypt_get_key_size()",
			"contents": "mcrypt_get_key_size(${1:cipher})",
			"kind": "function",
			"details": "Gets the key size of the specified cipher"
		},
		{
			"trigger": "mcrypt_list_algorithms()",
			"contents": "mcrypt_list_algorithms()",
			"kind": "function",
			"details": "Gets an array of all supported ciphers"
		},
		{
			"trigger": "mcrypt_list_modes()",
			"contents": "mcrypt_list_modes()",
			"kind": "function",
			"details": "Gets an array of all supported modes"
		},
		{
			"trigger": "mcrypt_module_close()",
			"contents": "mcrypt_module_close(${1:td})",
			"kind": "function",
			"details": "Closes the mcrypt module"
		},
		{
			"trigger": "mcrypt_module_get_algo_block_size()",
			"contents": "mcrypt_module_get_algo_block_size(${1:algorithm})",
			"kind": "function",
			"details": "Returns the blocksize of the specified algorithm"
		},
		{
			"trigger": "mcrypt_module_get_algo_key_size()",
			"contents": "mcrypt_module_get_algo_key_size(${1:algorithm})",
			"kind": "function",
			"details": "Returns the maximum supported keysize of the opened mode"
		},
		{
			"trigger": "mcrypt_module_get_supported_key_sizes()",
			"contents": "mcrypt_module_get_supported_key_sizes(${1:algorithm})",
			"kind": "function",
			"details": "Returns an array with the supported keysizes of the opened algorithm"
		},
		{
			"trigger": "mcrypt_module_is_block_algorithm()",
			"contents": "mcrypt_module_is_block_algorithm(${1:algorithm})",
			"kind": "function",
			"details": "This function checks whether the specified algorithm is a block algorithm"
		},
		{
			"trigger": "mcrypt_module_is_block_algorithm_mode()",
			"contents": "mcrypt_module_is_block_algorithm_mode(${1:mode})",
			"kind": "function",
			"details": "Returns if the specified module is a block algorithm or not"
		},
		{
			"trigger": "mcrypt_module_is_block_mode()",
			"contents": "mcrypt_module_is_block_mode(${1:mode})",
			"kind": "function",
			"details": "Returns if the specified mode outputs blocks or not"
		},
		{
			"trigger": "mcrypt_module_open()",
			"contents": "mcrypt_module_open(${1:algorithm}, ${2:algorithm_directory}, ${3:mode}, ${4:mode_directory})",
			"kind": "function",
			"details": "Opens the module of the algorithm and the mode to be used"
		},
		{
			"trigger": "mcrypt_module_self_test()",
			"contents": "mcrypt_module_self_test(${1:algorithm})",
			"kind": "function",
			"details": "This function runs a self test on the specified module"
		},
		{
			"trigger": "mcrypt_ofb()",
			"contents": "mcrypt_ofb(${1:cipher}, ${2:key}, ${3:data}, ${4:mode}, ${5:iv})",
			"kind": "function",
			"details": "Encrypts/decrypts data in OFB mode"
		},
		{
			"trigger": "md5()",
			"contents": "md5(${1:str})",
			"kind": "function",
			"details": "Calculate the md5 hash of a string"
		},
		{
			"trigger": "md5_file()",
			"contents": "md5_file(${1:filename})",
			"kind": "function",
			"details": "Calculates the md5 hash of a given file"
		},
		{
			"trigger": "mdecrypt_generic()",
			"contents": "mdecrypt_generic(${1:td}, ${2:data})",
			"kind": "function",
			"details": "Decrypts data"
		},
		{
			"trigger": "memcache_debug()",
			"contents": "memcache_debug(${1:on_off})",
			"kind": "function",
			"details": "Turn debug output on/off"
		},
		{
			"trigger": "memory_get_peak_usage()",
			"contents": "memory_get_peak_usage()",
			"kind": "function",
			"details": "Returns the peak of memory allocated by PHP"
		},
		{
			"trigger": "memory_get_usage()",
			"contents": "memory_get_usage()",
			"kind": "function",
			"details": "Returns the amount of memory allocated to PHP"
		},
		{
			"trigger": "metaphone()",
			"contents": "metaphone(${1:str})",
			"kind": "function",
			"details": "Calculate the metaphone key of a string"
		},
		{
			"trigger": "method_exists()",
			"contents": "method_exists(${1:object}, ${2:method_name})",
			"kind": "function",
			"details": "Checks if the class method exists"
		},
		{
			"trigger": "mhash()",
			"contents": "mhash(${1:hash}, ${2:data})",
			"kind": "function",
			"details": "Computes hash"
		},
		{
			"trigger": "mhash_count()",
			"contents": "mhash_count()",
			"kind": "function",
			"details": "Gets the highest available hash ID"
		},
		{
			"trigger": "mhash_get_block_size()",
			"contents": "mhash_get_block_size(${1:hash})",
			"kind": "function",
			"details": "Gets the block size of the specified hash"
		},
		{
			"trigger": "mhash_get_hash_name()",
			"contents": "mhash_get_hash_name(${1:hash})",
			"kind": "function",
			"details": "Gets the name of the specified hash"
		},
		{
			"trigger": "mhash_keygen_s2k()",
			"contents": "mhash_keygen_s2k(${1:hash}, ${2:password}, ${3:salt}, ${4:bytes})",
			"kind": "function",
			"details": "Generates a key"
		},
		{
			"trigger": "microtime()",
			"contents": "microtime()",
			"kind": "function",
			"details": "Return current Unix timestamp with microseconds"
		},
		{
			"trigger": "mime_content_type()",
			"contents": "mime_content_type(${1:filename})",
			"kind": "function",
			"details": "Detect MIME Content-type for a file"
		},
		{
			"trigger": "min()",
			"contents": "min(${1:values})",
			"kind": "function",
			"details": "Find lowest value"
		},
		{
			"trigger": "ming_keypress()",
			"contents": "ming_keypress(${1:char})",
			"kind": "function",
			"details": "Returns the action flag for keyPress(char)"
		},
		{
			"trigger": "ming_setcubicthreshold()",
			"contents": "ming_setcubicthreshold(${1:threshold})",
			"kind": "function",
			"details": "Set cubic threshold"
		},
		{
			"trigger": "ming_setscale()",
			"contents": "ming_setscale(${1:scale})",
			"kind": "function",
			"details": "Set the global scaling factor"
		},
		{
			"trigger": "ming_setswfcompression()",
			"contents": "ming_setswfcompression(${1:level})",
			"kind": "function",
			"details": "Sets the SWF output compression"
		},
		{
			"trigger": "ming_useconstants()",
			"contents": "ming_useconstants(${1:use})",
			"kind": "function",
			"details": "Use constant pool"
		},
		{
			"trigger": "ming_useswfversion()",
			"contents": "ming_useswfversion(${1:version})",
			"kind": "function",
			"details": "Sets the SWF version"
		},
		{
			"trigger": "mkdir()",
			"contents": "mkdir(${1:pathname})",
			"kind": "function",
			"details": "Makes directory"
		},
		{
			"trigger": "mktime()",
			"contents": "mktime()",
			"kind": "function",
			"details": "Get Unix timestamp for a date"
		},
		{
			"trigger": "money_format()",
			"contents": "money_format(${1:format}, ${2:number})",
			"kind": "function",
			"details": "Formats a number as a currency string"
		},
		{
			"trigger": "move_uploaded_file()",
			"contents": "move_uploaded_file(${1:filename}, ${2:destination})",
			"kind": "function",
			"details": "Moves an uploaded file to a new location"
		},
		{
			"trigger": "mqseries_back()",
			"contents": "mqseries_back(${1:hconn}, ${2:compCode}, ${3:reason})",
			"kind": "function",
			"details": "MQSeries MQBACK"
		},
		{
			"trigger": "mqseries_begin()",
			"contents": "mqseries_begin(${1:hconn}, ${2:beginOptions}, ${3:compCode}, ${4:reason})",
			"kind": "function",
			"details": "MQseries MQBEGIN"
		},
		{
			"trigger": "mqseries_close()",
			"contents": "mqseries_close(${1:hconn}, ${2:hobj}, ${3:options}, ${4:compCode}, ${5:reason})",
			"kind": "function",
			"details": "MQSeries MQCLOSE"
		},
		{
			"trigger": "mqseries_cmit()",
			"contents": "mqseries_cmit(${1:hconn}, ${2:compCode}, ${3:reason})",
			"kind": "function",
			"details": "MQSeries MQCMIT"
		},
		{
			"trigger": "mqseries_conn()",
			"contents": "mqseries_conn(${1:qManagerName}, ${2:hconn}, ${3:compCode}, ${4:reason})",
			"kind": "function",
			"details": "MQSeries MQCONN"
		},
		{
			"trigger": "mqseries_connx()",
			"contents": "mqseries_connx(${1:qManagerName}, ${2:connOptions}, ${3:hconn}, ${4:compCode}, ${5:reason})",
			"kind": "function",
			"details": "MQSeries MQCONNX"
		},
		{
			"trigger": "mqseries_disc()",
			"contents": "mqseries_disc(${1:hconn}, ${2:compCode}, ${3:reason})",
			"kind": "function",
			"details": "MQSeries MQDISC"
		},
		{
			"trigger": "mqseries_get()",
			"contents": "mqseries_get(${1:hConn}, ${2:hObj}, ${3:md}, ${4:gmo}, ${5:bufferLength}, ${6:msg}, ${7:data_length}, ${8:compCode}, ${9:reason})",
			"kind": "function",
			"details": "MQSeries MQGET"
		},
		{
			"trigger": "mqseries_inq()",
			"contents": "mqseries_inq(${1:hconn}, ${2:hobj}, ${3:selectorCount}, ${4:selectors}, ${5:intAttrCount}, ${6:intAttr}, ${7:charAttrLength}, ${8:charAttr}, ${9:compCode}, ${10:reason})",
			"kind": "function",
			"details": "MQSeries MQINQ"
		},
		{
			"trigger": "mqseries_open()",
			"contents": "mqseries_open(${1:hconn}, ${2:objDesc}, ${3:option}, ${4:hobj}, ${5:compCode}, ${6:reason})",
			"kind": "function",
			"details": "MQSeries MQOPEN"
		},
		{
			"trigger": "mqseries_put()",
			"contents": "mqseries_put(${1:hConn}, ${2:hObj}, ${3:md}, ${4:pmo}, ${5:message}, ${6:compCode}, ${7:reason})",
			"kind": "function",
			"details": "MQSeries MQPUT"
		},
		{
			"trigger": "mqseries_put1()",
			"contents": "mqseries_put1(${1:hconn}, ${2:objDesc}, ${3:msgDesc}, ${4:pmo}, ${5:buffer}, ${6:compCode}, ${7:reason})",
			"kind": "function",
			"details": "MQSeries MQPUT1"
		},
		{
			"trigger": "mqseries_set()",
			"contents": "mqseries_set(${1:hconn}, ${2:hobj}, ${3:selectorcount}, ${4:selectors}, ${5:intattrcount}, ${6:intattrs}, ${7:charattrlength}, ${8:charattrs}, ${9:compCode}, ${10:reason})",
			"kind": "function",
			"details": "MQSeries MQSET"
		},
		{
			"trigger": "mqseries_strerror()",
			"contents": "mqseries_strerror(${1:reason})",
			"kind": "function",
			"details": "Returns the error message corresponding to a result code (MQRC)"
		},
		{
			"trigger": "msession_connect()",
			"contents": "msession_connect(${1:host}, ${2:port})",
			"kind": "function",
			"details": "Connect to msession server"
		},
		{
			"trigger": "msession_count()",
			"contents": "msession_count()",
			"kind": "function",
			"details": "Get session count"
		},
		{
			"trigger": "msession_create()",
			"contents": "msession_create(${1:session})",
			"kind": "function",
			"details": "Create a session"
		},
		{
			"trigger": "msession_destroy()",
			"contents": "msession_destroy(${1:name})",
			"kind": "function",
			"details": "Destroy a session"
		},
		{
			"trigger": "msession_disconnect()",
			"contents": "msession_disconnect()",
			"kind": "function",
			"details": "Close connection to msession server"
		},
		{
			"trigger": "msession_find()",
			"contents": "msession_find(${1:name}, ${2:value})",
			"kind": "function",
			"details": "Find all sessions with name and value"
		},
		{
			"trigger": "msession_get()",
			"contents": "msession_get(${1:session}, ${2:name}, ${3:value})",
			"kind": "function",
			"details": "Get value from session"
		},
		{
			"trigger": "msession_get_array()",
			"contents": "msession_get_array(${1:session})",
			"kind": "function",
			"details": "Get array of msession variables"
		},
		{
			"trigger": "msession_get_data()",
			"contents": "msession_get_data(${1:session})",
			"kind": "function",
			"details": "Get data session unstructured data"
		},
		{
			"trigger": "msession_inc()",
			"contents": "msession_inc(${1:session}, ${2:name})",
			"kind": "function",
			"details": "Increment value in session"
		},
		{
			"trigger": "msession_list()",
			"contents": "msession_list()",
			"kind": "function",
			"details": "List all sessions"
		},
		{
			"trigger": "msession_listvar()",
			"contents": "msession_listvar(${1:name})",
			"kind": "function",
			"details": "List sessions with variable"
		},
		{
			"trigger": "msession_lock()",
			"contents": "msession_lock(${1:name})",
			"kind": "function",
			"details": "Lock a session"
		},
		{
			"trigger": "msession_plugin()",
			"contents": "msession_plugin(${1:session}, ${2:val})",
			"kind": "function",
			"details": "Call an escape function within the msession personality plugin"
		},
		{
			"trigger": "msession_randstr()",
			"contents": "msession_randstr(${1:param})",
			"kind": "function",
			"details": "Get random string"
		},
		{
			"trigger": "msession_set()",
			"contents": "msession_set(${1:session}, ${2:name}, ${3:value})",
			"kind": "function",
			"details": "Set value in session"
		},
		{
			"trigger": "msession_set_array()",
			"contents": "msession_set_array(${1:session}, ${2:tuples})",
			"kind": "function",
			"details": "Set msession variables from an array"
		},
		{
			"trigger": "msession_set_data()",
			"contents": "msession_set_data(${1:session}, ${2:value})",
			"kind": "function",
			"details": "Set data session unstructured data"
		},
		{
			"trigger": "msession_timeout()",
			"contents": "msession_timeout(${1:session})",
			"kind": "function",
			"details": "Set/get session timeout"
		},
		{
			"trigger": "msession_uniq()",
			"contents": "msession_uniq(${1:param})",
			"kind": "function",
			"details": "Get unique id"
		},
		{
			"trigger": "msession_unlock()",
			"contents": "msession_unlock(${1:session}, ${2:key})",
			"kind": "function",
			"details": "Unlock a session"
		},
		{
			"trigger": "msg_get_queue()",
			"contents": "msg_get_queue(${1:key})",
			"kind": "function",
			"details": "Create or attach to a message queue"
		},
		{
			"trigger": "msg_queue_exists()",
			"contents": "msg_queue_exists(${1:key})",
			"kind": "function",
			"details": "Check whether a message queue exists"
		},
		{
			"trigger": "msg_receive()",
			"contents": "msg_receive(${1:queue}, ${2:desiredmsgtype}, ${3:msgtype}, ${4:maxsize}, ${5:message})",
			"kind": "function",
			"details": "Receive a message from a message queue"
		},
		{
			"trigger": "msg_remove_queue()",
			"contents": "msg_remove_queue(${1:queue})",
			"kind": "function",
			"details": "Destroy a message queue"
		},
		{
			"trigger": "msg_send()",
			"contents": "msg_send(${1:queue}, ${2:msgtype}, ${3:message})",
			"kind": "function",
			"details": "Send a message to a message queue"
		},
		{
			"trigger": "msg_set_queue()",
			"contents": "msg_set_queue(${1:queue}, ${2:data})",
			"kind": "function",
			"details": "Set information in the message queue data structure"
		},
		{
			"trigger": "msg_stat_queue()",
			"contents": "msg_stat_queue(${1:queue})",
			"kind": "function",
			"details": "Returns information from the message queue data structure"
		},
		{
			"trigger": "msql()",
			"contents": "msql()",
			"kind": "function",
			"details": "Alias of msql_db_query()"
		},
		{
			"trigger": "msql_affected_rows()",
			"contents": "msql_affected_rows(${1:result})",
			"kind": "function",
			"details": "Returns number of affected rows"
		},
		{
			"trigger": "msql_close()",
			"contents": "msql_close()",
			"kind": "function",
			"details": "Close mSQL connection"
		},
		{
			"trigger": "msql_connect()",
			"contents": "msql_connect()",
			"kind": "function",
			"details": "Open mSQL connection"
		},
		{
			"trigger": "msql_create_db()",
			"contents": "msql_create_db(${1:database_name})",
			"kind": "function",
			"details": "Create mSQL database"
		},
		{
			"trigger": "msql_createdb()",
			"contents": "msql_createdb()",
			"kind": "function",
			"details": "Alias of msql_create_db()"
		},
		{
			"trigger": "msql_data_seek()",
			"contents": "msql_data_seek(${1:result}, ${2:row_number})",
			"kind": "function",
			"details": "Move internal row pointer"
		},
		{
			"trigger": "msql_db_query()",
			"contents": "msql_db_query(${1:database}, ${2:query})",
			"kind": "function",
			"details": "Send mSQL query"
		},
		{
			"trigger": "msql_dbname()",
			"contents": "msql_dbname()",
			"kind": "function",
			"details": "Alias of msql_result()"
		},
		{
			"trigger": "msql_drop_db()",
			"contents": "msql_drop_db(${1:database_name})",
			"kind": "function",
			"details": "Drop (delete) mSQL database"
		},
		{
			"trigger": "msql_error()",
			"contents": "msql_error()",
			"kind": "function",
			"details": "Returns error message of last msql call"
		},
		{
			"trigger": "msql_fetch_array()",
			"contents": "msql_fetch_array(${1:result})",
			"kind": "function",
			"details": "Fetch row as array"
		},
		{
			"trigger": "msql_fetch_field()",
			"contents": "msql_fetch_field(${1:result})",
			"kind": "function",
			"details": "Get field information"
		},
		{
			"trigger": "msql_fetch_object()",
			"contents": "msql_fetch_object(${1:result})",
			"kind": "function",
			"details": "Fetch row as object"
		},
		{
			"trigger": "msql_fetch_row()",
			"contents": "msql_fetch_row(${1:result})",
			"kind": "function",
			"details": "Get row as enumerated array"
		},
		{
			"trigger": "msql_field_flags()",
			"contents": "msql_field_flags(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Get field flags"
		},
		{
			"trigger": "msql_field_len()",
			"contents": "msql_field_len(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Get field length"
		},
		{
			"trigger": "msql_field_name()",
			"contents": "msql_field_name(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Get the name of the specified field in a result"
		},
		{
			"trigger": "msql_field_seek()",
			"contents": "msql_field_seek(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Set field offset"
		},
		{
			"trigger": "msql_field_table()",
			"contents": "msql_field_table(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Get table name for field"
		},
		{
			"trigger": "msql_field_type()",
			"contents": "msql_field_type(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Get field type"
		},
		{
			"trigger": "msql_fieldflags()",
			"contents": "msql_fieldflags()",
			"kind": "function",
			"details": "Alias of msql_field_flags()"
		},
		{
			"trigger": "msql_fieldlen()",
			"contents": "msql_fieldlen()",
			"kind": "function",
			"details": "Alias of msql_field_len()"
		},
		{
			"trigger": "msql_fieldname()",
			"contents": "msql_fieldname()",
			"kind": "function",
			"details": "Alias of msql_field_name()"
		},
		{
			"trigger": "msql_fieldtable()",
			"contents": "msql_fieldtable()",
			"kind": "function",
			"details": "Alias of msql_field_table()"
		},
		{
			"trigger": "msql_fieldtype()",
			"contents": "msql_fieldtype()",
			"kind": "function",
			"details": "Alias of msql_field_type()"
		},
		{
			"trigger": "msql_free_result()",
			"contents": "msql_free_result(${1:result})",
			"kind": "function",
			"details": "Free result memory"
		},
		{
			"trigger": "msql_list_dbs()",
			"contents": "msql_list_dbs()",
			"kind": "function",
			"details": "List mSQL databases on server"
		},
		{
			"trigger": "msql_list_fields()",
			"contents": "msql_list_fields(${1:database}, ${2:tablename})",
			"kind": "function",
			"details": "List result fields"
		},
		{
			"trigger": "msql_list_tables()",
			"contents": "msql_list_tables(${1:database})",
			"kind": "function",
			"details": "List tables in an mSQL database"
		},
		{
			"trigger": "msql_num_fields()",
			"contents": "msql_num_fields(${1:result})",
			"kind": "function",
			"details": "Get number of fields in result"
		},
		{
			"trigger": "msql_num_rows()",
			"contents": "msql_num_rows(${1:query_identifier})",
			"kind": "function",
			"details": "Get number of rows in result"
		},
		{
			"trigger": "msql_numfields()",
			"contents": "msql_numfields()",
			"kind": "function",
			"details": "Alias of msql_num_fields()"
		},
		{
			"trigger": "msql_numrows()",
			"contents": "msql_numrows()",
			"kind": "function",
			"details": "Alias of msql_num_rows()"
		},
		{
			"trigger": "msql_pconnect()",
			"contents": "msql_pconnect()",
			"kind": "function",
			"details": "Open persistent mSQL connection"
		},
		{
			"trigger": "msql_query()",
			"contents": "msql_query(${1:query})",
			"kind": "function",
			"details": "Send mSQL query"
		},
		{
			"trigger": "msql_regcase()",
			"contents": "msql_regcase()",
			"kind": "function",
			"details": "Alias of sql_regcase()"
		},
		{
			"trigger": "msql_result()",
			"contents": "msql_result(${1:result}, ${2:row})",
			"kind": "function",
			"details": "Get result data"
		},
		{
			"trigger": "msql_select_db()",
			"contents": "msql_select_db(${1:database_name})",
			"kind": "function",
			"details": "Select mSQL database"
		},
		{
			"trigger": "msql_tablename()",
			"contents": "msql_tablename()",
			"kind": "function",
			"details": "Alias of msql_result()"
		},
		{
			"trigger": "mssql_bind()",
			"contents": "mssql_bind(${1:stmt}, ${2:param_name}, ${3:var}, ${4:type})",
			"kind": "function",
			"details": "Adds a parameter to a stored procedure or a remote stored procedure"
		},
		{
			"trigger": "mssql_close()",
			"contents": "mssql_close()",
			"kind": "function",
			"details": "Close MS SQL Server connection"
		},
		{
			"trigger": "mssql_connect()",
			"contents": "mssql_connect()",
			"kind": "function",
			"details": "Open MS SQL server connection"
		},
		{
			"trigger": "mssql_data_seek()",
			"contents": "mssql_data_seek(${1:result_identifier}, ${2:row_number})",
			"kind": "function",
			"details": "Moves internal row pointer"
		},
		{
			"trigger": "mssql_execute()",
			"contents": "mssql_execute(${1:stmt})",
			"kind": "function",
			"details": "Executes a stored procedure on a MS SQL server database"
		},
		{
			"trigger": "mssql_fetch_array()",
			"contents": "mssql_fetch_array(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an associative array, a numeric array, or both"
		},
		{
			"trigger": "mssql_fetch_assoc()",
			"contents": "mssql_fetch_assoc(${1:result_id})",
			"kind": "function",
			"details": "Returns an associative array of the current row in the result"
		},
		{
			"trigger": "mssql_fetch_batch()",
			"contents": "mssql_fetch_batch(${1:result})",
			"kind": "function",
			"details": "Returns the next batch of records"
		},
		{
			"trigger": "mssql_fetch_field()",
			"contents": "mssql_fetch_field(${1:result})",
			"kind": "function",
			"details": "Get field information"
		},
		{
			"trigger": "mssql_fetch_object()",
			"contents": "mssql_fetch_object(${1:result})",
			"kind": "function",
			"details": "Fetch row as object"
		},
		{
			"trigger": "mssql_fetch_row()",
			"contents": "mssql_fetch_row(${1:result})",
			"kind": "function",
			"details": "Get row as enumerated array"
		},
		{
			"trigger": "mssql_field_length()",
			"contents": "mssql_field_length(${1:result})",
			"kind": "function",
			"details": "Get the length of a field"
		},
		{
			"trigger": "mssql_field_name()",
			"contents": "mssql_field_name(${1:result})",
			"kind": "function",
			"details": "Get the name of a field"
		},
		{
			"trigger": "mssql_field_seek()",
			"contents": "mssql_field_seek(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Seeks to the specified field offset"
		},
		{
			"trigger": "mssql_field_type()",
			"contents": "mssql_field_type(${1:result})",
			"kind": "function",
			"details": "Gets the type of a field"
		},
		{
			"trigger": "mssql_free_result()",
			"contents": "mssql_free_result(${1:result})",
			"kind": "function",
			"details": "Free result memory"
		},
		{
			"trigger": "mssql_free_statement()",
			"contents": "mssql_free_statement(${1:stmt})",
			"kind": "function",
			"details": "Free statement memory"
		},
		{
			"trigger": "mssql_get_last_message()",
			"contents": "mssql_get_last_message()",
			"kind": "function",
			"details": "Returns the last message from the server"
		},
		{
			"trigger": "mssql_guid_string()",
			"contents": "mssql_guid_string(${1:binary})",
			"kind": "function",
			"details": "Converts a 16 byte binary GUID to a string"
		},
		{
			"trigger": "mssql_init()",
			"contents": "mssql_init(${1:sp_name})",
			"kind": "function",
			"details": "Initializes a stored procedure or a remote stored procedure"
		},
		{
			"trigger": "mssql_min_error_severity()",
			"contents": "mssql_min_error_severity(${1:severity})",
			"kind": "function",
			"details": "Sets the minimum error severity"
		},
		{
			"trigger": "mssql_min_message_severity()",
			"contents": "mssql_min_message_severity(${1:severity})",
			"kind": "function",
			"details": "Sets the minimum message severity"
		},
		{
			"trigger": "mssql_next_result()",
			"contents": "mssql_next_result(${1:result_id})",
			"kind": "function",
			"details": "Move the internal result pointer to the next result"
		},
		{
			"trigger": "mssql_num_fields()",
			"contents": "mssql_num_fields(${1:result})",
			"kind": "function",
			"details": "Gets the number of fields in result"
		},
		{
			"trigger": "mssql_num_rows()",
			"contents": "mssql_num_rows(${1:result})",
			"kind": "function",
			"details": "Gets the number of rows in result"
		},
		{
			"trigger": "mssql_pconnect()",
			"contents": "mssql_pconnect()",
			"kind": "function",
			"details": "Open persistent MS SQL connection"
		},
		{
			"trigger": "mssql_query()",
			"contents": "mssql_query(${1:query})",
			"kind": "function",
			"details": "Send MS SQL query"
		},
		{
			"trigger": "mssql_result()",
			"contents": "mssql_result(${1:result}, ${2:row}, ${3:field})",
			"kind": "function",
			"details": "Get result data"
		},
		{
			"trigger": "mssql_rows_affected()",
			"contents": "mssql_rows_affected(${1:link_identifier})",
			"kind": "function",
			"details": "Returns the number of records affected by the query"
		},
		{
			"trigger": "mssql_select_db()",
			"contents": "mssql_select_db(${1:database_name})",
			"kind": "function",
			"details": "Select MS SQL database"
		},
		{
			"trigger": "mt_getrandmax()",
			"contents": "mt_getrandmax()",
			"kind": "function",
			"details": "Show largest possible random value"
		},
		{
			"trigger": "mt_rand()",
			"contents": "mt_rand()",
			"kind": "function",
			"details": "Generate a random value via the Mersenne Twister Random Number Generator"
		},
		{
			"trigger": "mt_srand()",
			"contents": "mt_srand()",
			"kind": "function",
			"details": "Seeds the Mersenne Twister Random Number Generator"
		},
		{
			"trigger": "mysql_affected_rows()",
			"contents": "mysql_affected_rows()",
			"kind": "function",
			"details": "Get number of affected rows in previous MySQL operation"
		},
		{
			"trigger": "mysql_client_encoding()",
			"contents": "mysql_client_encoding()",
			"kind": "function",
			"details": "Returns the name of the character set"
		},
		{
			"trigger": "mysql_close()",
			"contents": "mysql_close()",
			"kind": "function",
			"details": "Close MySQL connection"
		},
		{
			"trigger": "mysql_connect()",
			"contents": "mysql_connect()",
			"kind": "function",
			"details": "Open a connection to a MySQL Server"
		},
		{
			"trigger": "mysql_create_db()",
			"contents": "mysql_create_db(${1:database_name})",
			"kind": "function",
			"details": "Create a MySQL database"
		},
		{
			"trigger": "mysql_data_seek()",
			"contents": "mysql_data_seek(${1:result}, ${2:row_number})",
			"kind": "function",
			"details": "Move internal result pointer"
		},
		{
			"trigger": "mysql_db_name()",
			"contents": "mysql_db_name(${1:result}, ${2:row})",
			"kind": "function",
			"details": "Retrieves database name from the call to mysql_list_dbs()"
		},
		{
			"trigger": "mysql_db_query()",
			"contents": "mysql_db_query(${1:database}, ${2:query})",
			"kind": "function",
			"details": "Selects a database and executes a query on it"
		},
		{
			"trigger": "mysql_drop_db()",
			"contents": "mysql_drop_db(${1:database_name})",
			"kind": "function",
			"details": "Drop (delete) a MySQL database"
		},
		{
			"trigger": "mysql_errno()",
			"contents": "mysql_errno()",
			"kind": "function",
			"details": "Returns the numerical value of the error message from previous MySQL operation"
		},
		{
			"trigger": "mysql_error()",
			"contents": "mysql_error()",
			"kind": "function",
			"details": "Returns the text of the error message from previous MySQL operation"
		},
		{
			"trigger": "mysql_escape_string()",
			"contents": "mysql_escape_string(${1:unescaped_string})",
			"kind": "function",
			"details": "Escapes a string for use in a mysql_query"
		},
		{
			"trigger": "mysql_fetch_array()",
			"contents": "mysql_fetch_array(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an associative array, a numeric array, or both"
		},
		{
			"trigger": "mysql_fetch_assoc()",
			"contents": "mysql_fetch_assoc(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an associative array"
		},
		{
			"trigger": "mysql_fetch_field()",
			"contents": "mysql_fetch_field(${1:result})",
			"kind": "function",
			"details": "Get column information from a result and return as an object"
		},
		{
			"trigger": "mysql_fetch_lengths()",
			"contents": "mysql_fetch_lengths(${1:result})",
			"kind": "function",
			"details": "Get the length of each output in a result"
		},
		{
			"trigger": "mysql_fetch_object()",
			"contents": "mysql_fetch_object(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an object"
		},
		{
			"trigger": "mysql_fetch_row()",
			"contents": "mysql_fetch_row(${1:result})",
			"kind": "function",
			"details": "Get a result row as an enumerated array"
		},
		{
			"trigger": "mysql_field_flags()",
			"contents": "mysql_field_flags(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Get the flags associated with the specified field in a result"
		},
		{
			"trigger": "mysql_field_len()",
			"contents": "mysql_field_len(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Returns the length of the specified field"
		},
		{
			"trigger": "mysql_field_name()",
			"contents": "mysql_field_name(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Get the name of the specified field in a result"
		},
		{
			"trigger": "mysql_field_seek()",
			"contents": "mysql_field_seek(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Set result pointer to a specified field offset"
		},
		{
			"trigger": "mysql_field_table()",
			"contents": "mysql_field_table(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Get name of the table the specified field is in"
		},
		{
			"trigger": "mysql_field_type()",
			"contents": "mysql_field_type(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Get the type of the specified field in a result"
		},
		{
			"trigger": "mysql_free_result()",
			"contents": "mysql_free_result(${1:result})",
			"kind": "function",
			"details": "Free result memory"
		},
		{
			"trigger": "mysql_get_client_info()",
			"contents": "mysql_get_client_info()",
			"kind": "function",
			"details": "Get MySQL client info"
		},
		{
			"trigger": "mysql_get_host_info()",
			"contents": "mysql_get_host_info()",
			"kind": "function",
			"details": "Get MySQL host info"
		},
		{
			"trigger": "mysql_get_proto_info()",
			"contents": "mysql_get_proto_info()",
			"kind": "function",
			"details": "Get MySQL protocol info"
		},
		{
			"trigger": "mysql_get_server_info()",
			"contents": "mysql_get_server_info()",
			"kind": "function",
			"details": "Get MySQL server info"
		},
		{
			"trigger": "mysql_info()",
			"contents": "mysql_info()",
			"kind": "function",
			"details": "Get information about the most recent query"
		},
		{
			"trigger": "mysql_insert_id()",
			"contents": "mysql_insert_id()",
			"kind": "function",
			"details": "Get the ID generated in the last query"
		},
		{
			"trigger": "mysql_list_dbs()",
			"contents": "mysql_list_dbs()",
			"kind": "function",
			"details": "List databases available on a MySQL server"
		},
		{
			"trigger": "mysql_list_fields()",
			"contents": "mysql_list_fields(${1:database_name}, ${2:table_name})",
			"kind": "function",
			"details": "List MySQL table fields"
		},
		{
			"trigger": "mysql_list_processes()",
			"contents": "mysql_list_processes()",
			"kind": "function",
			"details": "List MySQL processes"
		},
		{
			"trigger": "mysql_list_tables()",
			"contents": "mysql_list_tables(${1:database})",
			"kind": "function",
			"details": "List tables in a MySQL database"
		},
		{
			"trigger": "mysql_num_fields()",
			"contents": "mysql_num_fields(${1:result})",
			"kind": "function",
			"details": "Get number of fields in result"
		},
		{
			"trigger": "mysql_num_rows()",
			"contents": "mysql_num_rows(${1:result})",
			"kind": "function",
			"details": "Get number of rows in result"
		},
		{
			"trigger": "mysql_pconnect()",
			"contents": "mysql_pconnect()",
			"kind": "function",
			"details": "Open a persistent connection to a MySQL server"
		},
		{
			"trigger": "mysql_ping()",
			"contents": "mysql_ping()",
			"kind": "function",
			"details": "Ping a server connection or reconnect if there is no connection"
		},
		{
			"trigger": "mysql_query()",
			"contents": "mysql_query(${1:query})",
			"kind": "function",
			"details": "Send a MySQL query"
		},
		{
			"trigger": "mysql_real_escape_string()",
			"contents": "mysql_real_escape_string(${1:unescaped_string})",
			"kind": "function",
			"details": "Escapes special characters in a string for use in an SQL statement"
		},
		{
			"trigger": "mysql_result()",
			"contents": "mysql_result(${1:result}, ${2:row})",
			"kind": "function",
			"details": "Get result data"
		},
		{
			"trigger": "mysql_select_db()",
			"contents": "mysql_select_db(${1:database_name})",
			"kind": "function",
			"details": "Select a MySQL database"
		},
		{
			"trigger": "mysql_set_charset()",
			"contents": "mysql_set_charset(${1:charset})",
			"kind": "function",
			"details": "Sets the client character set"
		},
		{
			"trigger": "mysql_stat()",
			"contents": "mysql_stat()",
			"kind": "function",
			"details": "Get current system status"
		},
		{
			"trigger": "mysql_tablename()",
			"contents": "mysql_tablename(${1:result}, ${2:i})",
			"kind": "function",
			"details": "Get table name of field"
		},
		{
			"trigger": "mysql_thread_id()",
			"contents": "mysql_thread_id()",
			"kind": "function",
			"details": "Return the current thread ID"
		},
		{
			"trigger": "mysql_unbuffered_query()",
			"contents": "mysql_unbuffered_query(${1:query})",
			"kind": "function",
			"details": "Send an SQL query to MySQL without fetching and buffering the result rows"
		},
		{
			"trigger": "mysqli_bind_param()",
			"contents": "mysqli_bind_param()",
			"kind": "function",
			"details": "Alias for mysqli_stmt_bind_param()"
		},
		{
			"trigger": "mysqli_bind_result()",
			"contents": "mysqli_bind_result()",
			"kind": "function",
			"details": "Alias for mysqli_stmt_bind_result()"
		},
		{
			"trigger": "mysqli_client_encoding()",
			"contents": "mysqli_client_encoding()",
			"kind": "function",
			"details": "Alias of mysqli_character_set_name()"
		},
		{
			"trigger": "mysqli_connect()",
			"contents": "mysqli_connect()",
			"kind": "function",
			"details": "Alias of mysqli::__construct()"
		},
		{
			"trigger": "mysqli_disable_rpl_parse()",
			"contents": "mysqli_disable_rpl_parse(${1:link})",
			"kind": "function",
			"details": "Disable RPL parse"
		},
		{
			"trigger": "mysqli_enable_reads_from_master()",
			"contents": "mysqli_enable_reads_from_master(${1:link})",
			"kind": "function",
			"details": "Enable reads from master"
		},
		{
			"trigger": "mysqli_enable_rpl_parse()",
			"contents": "mysqli_enable_rpl_parse(${1:link})",
			"kind": "function",
			"details": "Enable RPL parse"
		},
		{
			"trigger": "mysqli_escape_string()",
			"contents": "mysqli_escape_string()",
			"kind": "function",
			"details": "Alias of mysqli_real_escape_string()"
		},
		{
			"trigger": "mysqli_execute()",
			"contents": "mysqli_execute()",
			"kind": "function",
			"details": "Alias for mysqli_stmt_execute()"
		},
		{
			"trigger": "mysqli_fetch()",
			"contents": "mysqli_fetch()",
			"kind": "function",
			"details": "Alias for mysqli_stmt_fetch()"
		},
		{
			"trigger": "mysqli_get_metadata()",
			"contents": "mysqli_get_metadata()",
			"kind": "function",
			"details": "Alias for mysqli_stmt_result_metadata()"
		},
		{
			"trigger": "mysqli_master_query()",
			"contents": "mysqli_master_query(${1:link}, ${2:query})",
			"kind": "function",
			"details": "Enforce execution of a query on the master in a master/slave setup"
		},
		{
			"trigger": "mysqli_param_count()",
			"contents": "mysqli_param_count()",
			"kind": "function",
			"details": "Alias for mysqli_stmt_param_count()"
		},
		{
			"trigger": "mysqli_report()",
			"contents": "mysqli_report(${1:flags})",
			"kind": "function",
			"details": "Alias of mysqli_driver->report_mode"
		},
		{
			"trigger": "mysqli_rpl_parse_enabled()",
			"contents": "mysqli_rpl_parse_enabled(${1:link})",
			"kind": "function",
			"details": "Check if RPL parse is enabled"
		},
		{
			"trigger": "mysqli_rpl_probe()",
			"contents": "mysqli_rpl_probe(${1:link})",
			"kind": "function",
			"details": "RPL probe"
		},
		{
			"trigger": "mysqli_send_long_data()",
			"contents": "mysqli_send_long_data()",
			"kind": "function",
			"details": "Alias for mysqli_stmt_send_long_data()"
		},
		{
			"trigger": "mysqli_set_opt()",
			"contents": "mysqli_set_opt()",
			"kind": "function"
		},
		{
			"trigger": "mysqli_slave_query()",
			"contents": "mysqli_slave_query(${1:link}, ${2:query})",
			"kind": "function",
			"details": "Force execution of a query on a slave in a master/slave setup"
		},
		{
			"trigger": "mysqlnd_qc_change_handler()",
			"contents": "mysqlnd_qc_change_handler(${1:handler})",
			"kind": "function"
		},
		{
			"trigger": "mysqlnd_qc_clear_cache()",
			"contents": "mysqlnd_qc_clear_cache()",
			"kind": "function",
			"details": "Flush all cache contents"
		},
		{
			"trigger": "mysqlnd_qc_get_cache_info()",
			"contents": "mysqlnd_qc_get_cache_info()",
			"kind": "function",
			"details": "Returns information on the current handler, the number of cache entries and cache entries, if available"
		},
		{
			"trigger": "mysqlnd_qc_get_core_stats()",
			"contents": "mysqlnd_qc_get_core_stats()",
			"kind": "function",
			"details": "Statistics collected by the core of the query cache"
		},
		{
			"trigger": "mysqlnd_qc_get_handler()",
			"contents": "mysqlnd_qc_get_handler()",
			"kind": "function"
		},
		{
			"trigger": "mysqlnd_qc_get_query_trace_log()",
			"contents": "mysqlnd_qc_get_query_trace_log()",
			"kind": "function",
			"details": "Returns a backtrace for each query inspected by the query cache"
		},
		{
			"trigger": "mysqlnd_qc_set_user_handlers()",
			"contents": "mysqlnd_qc_set_user_handlers(${1:get_hash}, ${2:find_query_in_cache}, ${3:return_to_cache}, ${4:add_query_to_cache_if_not_exists}, ${5:query_is_select}, ${6:update_query_run_time_stats}, ${7:get_stats}, ${8:clear_cache})",
			"kind": "function",
			"details": "Sets the callback functions for a user-defined procedural storage handler"
		},
		{
			"trigger": "natcasesort()",
			"contents": "natcasesort(${1:array})",
			"kind": "function",
			"details": "Sort an array using a case insensitive \"natural order\" algorithm"
		},
		{
			"trigger": "natsort()",
			"contents": "natsort(${1:array})",
			"kind": "function",
			"details": "Sort an array using a \"natural order\" algorithm"
		},
		{
			"trigger": "ncurses_addch()",
			"contents": "ncurses_addch(${1:ch})",
			"kind": "function",
			"details": "Add character at current position and advance cursor"
		},
		{
			"trigger": "ncurses_addchnstr()",
			"contents": "ncurses_addchnstr(${1:s}, ${2:n})",
			"kind": "function",
			"details": "Add attributed string with specified length at current position"
		},
		{
			"trigger": "ncurses_addchstr()",
			"contents": "ncurses_addchstr(${1:s})",
			"kind": "function",
			"details": "Add attributed string at current position"
		},
		{
			"trigger": "ncurses_addnstr()",
			"contents": "ncurses_addnstr(${1:s}, ${2:n})",
			"kind": "function",
			"details": "Add string with specified length at current position"
		},
		{
			"trigger": "ncurses_addstr()",
			"contents": "ncurses_addstr(${1:text})",
			"kind": "function",
			"details": "Output text at current position"
		},
		{
			"trigger": "ncurses_assume_default_colors()",
			"contents": "ncurses_assume_default_colors(${1:fg}, ${2:bg})",
			"kind": "function",
			"details": "Define default colors for color 0"
		},
		{
			"trigger": "ncurses_attroff()",
			"contents": "ncurses_attroff(${1:attributes})",
			"kind": "function",
			"details": "Turn off the given attributes"
		},
		{
			"trigger": "ncurses_attron()",
			"contents": "ncurses_attron(${1:attributes})",
			"kind": "function",
			"details": "Turn on the given attributes"
		},
		{
			"trigger": "ncurses_attrset()",
			"contents": "ncurses_attrset(${1:attributes})",
			"kind": "function",
			"details": "Set given attributes"
		},
		{
			"trigger": "ncurses_baudrate()",
			"contents": "ncurses_baudrate()",
			"kind": "function",
			"details": "Returns baudrate of terminal"
		},
		{
			"trigger": "ncurses_beep()",
			"contents": "ncurses_beep()",
			"kind": "function",
			"details": "Let the terminal beep"
		},
		{
			"trigger": "ncurses_bkgd()",
			"contents": "ncurses_bkgd(${1:attrchar})",
			"kind": "function",
			"details": "Set background property for terminal screen"
		},
		{
			"trigger": "ncurses_bkgdset()",
			"contents": "ncurses_bkgdset(${1:attrchar})",
			"kind": "function",
			"details": "Control screen background"
		},
		{
			"trigger": "ncurses_border()",
			"contents": "ncurses_border(${1:left}, ${2:right}, ${3:top}, ${4:bottom}, ${5:tl_corner}, ${6:tr_corner}, ${7:bl_corner}, ${8:br_corner})",
			"kind": "function",
			"details": "Draw a border around the screen using attributed characters"
		},
		{
			"trigger": "ncurses_bottom_panel()",
			"contents": "ncurses_bottom_panel(${1:panel})",
			"kind": "function",
			"details": "Moves a visible panel to the bottom of the stack"
		},
		{
			"trigger": "ncurses_can_change_color()",
			"contents": "ncurses_can_change_color()",
			"kind": "function",
			"details": "Checks if terminal color definitions can be changed"
		},
		{
			"trigger": "ncurses_cbreak()",
			"contents": "ncurses_cbreak()",
			"kind": "function",
			"details": "Switch off input buffering"
		},
		{
			"trigger": "ncurses_clear()",
			"contents": "ncurses_clear()",
			"kind": "function",
			"details": "Clear screen"
		},
		{
			"trigger": "ncurses_clrtobot()",
			"contents": "ncurses_clrtobot()",
			"kind": "function",
			"details": "Clear screen from current position to bottom"
		},
		{
			"trigger": "ncurses_clrtoeol()",
			"contents": "ncurses_clrtoeol()",
			"kind": "function",
			"details": "Clear screen from current position to end of line"
		},
		{
			"trigger": "ncurses_color_content()",
			"contents": "ncurses_color_content(${1:color}, ${2:r}, ${3:g}, ${4:b})",
			"kind": "function",
			"details": "Retrieves RGB components of a color"
		},
		{
			"trigger": "ncurses_color_set()",
			"contents": "ncurses_color_set(${1:pair})",
			"kind": "function",
			"details": "Set active foreground and background colors"
		},
		{
			"trigger": "ncurses_curs_set()",
			"contents": "ncurses_curs_set(${1:visibility})",
			"kind": "function",
			"details": "Set cursor state"
		},
		{
			"trigger": "ncurses_def_prog_mode()",
			"contents": "ncurses_def_prog_mode()",
			"kind": "function",
			"details": "Saves terminals (program) mode"
		},
		{
			"trigger": "ncurses_def_shell_mode()",
			"contents": "ncurses_def_shell_mode()",
			"kind": "function",
			"details": "Saves terminals (shell) mode"
		},
		{
			"trigger": "ncurses_define_key()",
			"contents": "ncurses_define_key(${1:definition}, ${2:keycode})",
			"kind": "function",
			"details": "Define a keycode"
		},
		{
			"trigger": "ncurses_del_panel()",
			"contents": "ncurses_del_panel(${1:panel})",
			"kind": "function",
			"details": "Remove panel from the stack and delete it (but not the associated window)"
		},
		{
			"trigger": "ncurses_delay_output()",
			"contents": "ncurses_delay_output(${1:milliseconds})",
			"kind": "function",
			"details": "Delay output on terminal using padding characters"
		},
		{
			"trigger": "ncurses_delch()",
			"contents": "ncurses_delch()",
			"kind": "function",
			"details": "Delete character at current position, move rest of line left"
		},
		{
			"trigger": "ncurses_deleteln()",
			"contents": "ncurses_deleteln()",
			"kind": "function",
			"details": "Delete line at current position, move rest of screen up"
		},
		{
			"trigger": "ncurses_delwin()",
			"contents": "ncurses_delwin(${1:window})",
			"kind": "function",
			"details": "Delete a ncurses window"
		},
		{
			"trigger": "ncurses_doupdate()",
			"contents": "ncurses_doupdate()",
			"kind": "function",
			"details": "Write all prepared refreshes to terminal"
		},
		{
			"trigger": "ncurses_echo()",
			"contents": "ncurses_echo()",
			"kind": "function",
			"details": "Activate keyboard input echo"
		},
		{
			"trigger": "ncurses_echochar()",
			"contents": "ncurses_echochar(${1:character})",
			"kind": "function",
			"details": "Single character output including refresh"
		},
		{
			"trigger": "ncurses_end()",
			"contents": "ncurses_end()",
			"kind": "function",
			"details": "Stop using ncurses, clean up the screen"
		},
		{
			"trigger": "ncurses_erase()",
			"contents": "ncurses_erase()",
			"kind": "function",
			"details": "Erase terminal screen"
		},
		{
			"trigger": "ncurses_erasechar()",
			"contents": "ncurses_erasechar()",
			"kind": "function",
			"details": "Returns current erase character"
		},
		{
			"trigger": "ncurses_filter()",
			"contents": "ncurses_filter()",
			"kind": "function",
			"details": "Set LINES for iniscr() and newterm() to 1"
		},
		{
			"trigger": "ncurses_flash()",
			"contents": "ncurses_flash()",
			"kind": "function",
			"details": "Flash terminal screen (visual bell)"
		},
		{
			"trigger": "ncurses_flushinp()",
			"contents": "ncurses_flushinp()",
			"kind": "function",
			"details": "Flush keyboard input buffer"
		},
		{
			"trigger": "ncurses_getch()",
			"contents": "ncurses_getch()",
			"kind": "function",
			"details": "Read a character from keyboard"
		},
		{
			"trigger": "ncurses_getmaxyx()",
			"contents": "ncurses_getmaxyx(${1:window}, ${2:y}, ${3:x})",
			"kind": "function",
			"details": "Returns the size of a window"
		},
		{
			"trigger": "ncurses_getmouse()",
			"contents": "ncurses_getmouse(${1:mevent})",
			"kind": "function",
			"details": "Reads mouse event"
		},
		{
			"trigger": "ncurses_getyx()",
			"contents": "ncurses_getyx(${1:window}, ${2:y}, ${3:x})",
			"kind": "function",
			"details": "Returns the current cursor position for a window"
		},
		{
			"trigger": "ncurses_halfdelay()",
			"contents": "ncurses_halfdelay(${1:tenth})",
			"kind": "function",
			"details": "Put terminal into halfdelay mode"
		},
		{
			"trigger": "ncurses_has_colors()",
			"contents": "ncurses_has_colors()",
			"kind": "function",
			"details": "Checks if terminal has color capabilities"
		},
		{
			"trigger": "ncurses_has_ic()",
			"contents": "ncurses_has_ic()",
			"kind": "function",
			"details": "Check for insert- and delete-capabilities"
		},
		{
			"trigger": "ncurses_has_il()",
			"contents": "ncurses_has_il()",
			"kind": "function",
			"details": "Check for line insert- and delete-capabilities"
		},
		{
			"trigger": "ncurses_has_key()",
			"contents": "ncurses_has_key(${1:keycode})",
			"kind": "function",
			"details": "Check for presence of a function key on terminal keyboard"
		},
		{
			"trigger": "ncurses_hide_panel()",
			"contents": "ncurses_hide_panel(${1:panel})",
			"kind": "function",
			"details": "Remove panel from the stack, making it invisible"
		},
		{
			"trigger": "ncurses_hline()",
			"contents": "ncurses_hline(${1:charattr}, ${2:n})",
			"kind": "function",
			"details": "Draw a horizontal line at current position using an attributed character and max. n characters long"
		},
		{
			"trigger": "ncurses_inch()",
			"contents": "ncurses_inch()",
			"kind": "function",
			"details": "Get character and attribute at current position"
		},
		{
			"trigger": "ncurses_init()",
			"contents": "ncurses_init()",
			"kind": "function",
			"details": "Initialize ncurses"
		},
		{
			"trigger": "ncurses_init_color()",
			"contents": "ncurses_init_color(${1:color}, ${2:r}, ${3:g}, ${4:b})",
			"kind": "function",
			"details": "Define a terminal color"
		},
		{
			"trigger": "ncurses_init_pair()",
			"contents": "ncurses_init_pair(${1:pair}, ${2:fg}, ${3:bg})",
			"kind": "function",
			"details": "Define a color pair"
		},
		{
			"trigger": "ncurses_insch()",
			"contents": "ncurses_insch(${1:character})",
			"kind": "function",
			"details": "Insert character moving rest of line including character at current position"
		},
		{
			"trigger": "ncurses_insdelln()",
			"contents": "ncurses_insdelln(${1:count})",
			"kind": "function",
			"details": "Insert lines before current line scrolling down (negative numbers delete and scroll up)"
		},
		{
			"trigger": "ncurses_insertln()",
			"contents": "ncurses_insertln()",
			"kind": "function",
			"details": "Insert a line, move rest of screen down"
		},
		{
			"trigger": "ncurses_insstr()",
			"contents": "ncurses_insstr(${1:text})",
			"kind": "function",
			"details": "Insert string at current position, moving rest of line right"
		},
		{
			"trigger": "ncurses_instr()",
			"contents": "ncurses_instr(${1:buffer})",
			"kind": "function",
			"details": "Reads string from terminal screen"
		},
		{
			"trigger": "ncurses_isendwin()",
			"contents": "ncurses_isendwin()",
			"kind": "function",
			"details": "Ncurses is in endwin mode, normal screen output may be performed"
		},
		{
			"trigger": "ncurses_keyok()",
			"contents": "ncurses_keyok(${1:keycode}, ${2:enable})",
			"kind": "function",
			"details": "Enable or disable a keycode"
		},
		{
			"trigger": "ncurses_keypad()",
			"contents": "ncurses_keypad(${1:window}, ${2:bf})",
			"kind": "function",
			"details": "Turns keypad on or off"
		},
		{
			"trigger": "ncurses_killchar()",
			"contents": "ncurses_killchar()",
			"kind": "function",
			"details": "Returns current line kill character"
		},
		{
			"trigger": "ncurses_longname()",
			"contents": "ncurses_longname()",
			"kind": "function",
			"details": "Returns terminals description"
		},
		{
			"trigger": "ncurses_meta()",
			"contents": "ncurses_meta(${1:window}, ${2:8bit})",
			"kind": "function",
			"details": "Enables/Disable 8-bit meta key information"
		},
		{
			"trigger": "ncurses_mouse_trafo()",
			"contents": "ncurses_mouse_trafo(${1:y}, ${2:x}, ${3:toscreen})",
			"kind": "function",
			"details": "Transforms coordinates"
		},
		{
			"trigger": "ncurses_mouseinterval()",
			"contents": "ncurses_mouseinterval(${1:milliseconds})",
			"kind": "function",
			"details": "Set timeout for mouse button clicks"
		},
		{
			"trigger": "ncurses_mousemask()",
			"contents": "ncurses_mousemask(${1:newmask}, ${2:oldmask})",
			"kind": "function",
			"details": "Sets mouse options"
		},
		{
			"trigger": "ncurses_move()",
			"contents": "ncurses_move(${1:y}, ${2:x})",
			"kind": "function",
			"details": "Move output position"
		},
		{
			"trigger": "ncurses_move_panel()",
			"contents": "ncurses_move_panel(${1:panel}, ${2:startx}, ${3:starty})",
			"kind": "function",
			"details": "Moves a panel so that its upper-left corner is at [startx, starty]"
		},
		{
			"trigger": "ncurses_mvaddch()",
			"contents": "ncurses_mvaddch(${1:y}, ${2:x}, ${3:c})",
			"kind": "function",
			"details": "Move current position and add character"
		},
		{
			"trigger": "ncurses_mvaddchnstr()",
			"contents": "ncurses_mvaddchnstr(${1:y}, ${2:x}, ${3:s}, ${4:n})",
			"kind": "function",
			"details": "Move position and add attributed string with specified length"
		},
		{
			"trigger": "ncurses_mvaddchstr()",
			"contents": "ncurses_mvaddchstr(${1:y}, ${2:x}, ${3:s})",
			"kind": "function",
			"details": "Move position and add attributed string"
		},
		{
			"trigger": "ncurses_mvaddnstr()",
			"contents": "ncurses_mvaddnstr(${1:y}, ${2:x}, ${3:s}, ${4:n})",
			"kind": "function",
			"details": "Move position and add string with specified length"
		},
		{
			"trigger": "ncurses_mvaddstr()",
			"contents": "ncurses_mvaddstr(${1:y}, ${2:x}, ${3:s})",
			"kind": "function",
			"details": "Move position and add string"
		},
		{
			"trigger": "ncurses_mvcur()",
			"contents": "ncurses_mvcur(${1:old_y}, ${2:old_x}, ${3:new_y}, ${4:new_x})",
			"kind": "function",
			"details": "Move cursor immediately"
		},
		{
			"trigger": "ncurses_mvdelch()",
			"contents": "ncurses_mvdelch(${1:y}, ${2:x})",
			"kind": "function",
			"details": "Move position and delete character, shift rest of line left"
		},
		{
			"trigger": "ncurses_mvgetch()",
			"contents": "ncurses_mvgetch(${1:y}, ${2:x})",
			"kind": "function",
			"details": "Move position and get character at new position"
		},
		{
			"trigger": "ncurses_mvhline()",
			"contents": "ncurses_mvhline(${1:y}, ${2:x}, ${3:attrchar}, ${4:n})",
			"kind": "function",
			"details": "Set new position and draw a horizontal line using an attributed character and max. n characters long"
		},
		{
			"trigger": "ncurses_mvinch()",
			"contents": "ncurses_mvinch(${1:y}, ${2:x})",
			"kind": "function",
			"details": "Move position and get attributed character at new position"
		},
		{
			"trigger": "ncurses_mvvline()",
			"contents": "ncurses_mvvline(${1:y}, ${2:x}, ${3:attrchar}, ${4:n})",
			"kind": "function",
			"details": "Set new position and draw a vertical line using an attributed character and max. n characters long"
		},
		{
			"trigger": "ncurses_mvwaddstr()",
			"contents": "ncurses_mvwaddstr(${1:window}, ${2:y}, ${3:x}, ${4:text})",
			"kind": "function",
			"details": "Add string at new position in window"
		},
		{
			"trigger": "ncurses_napms()",
			"contents": "ncurses_napms(${1:milliseconds})",
			"kind": "function",
			"details": "Sleep"
		},
		{
			"trigger": "ncurses_new_panel()",
			"contents": "ncurses_new_panel(${1:window})",
			"kind": "function",
			"details": "Create a new panel and associate it with window"
		},
		{
			"trigger": "ncurses_newpad()",
			"contents": "ncurses_newpad(${1:rows}, ${2:cols})",
			"kind": "function",
			"details": "Creates a new pad (window)"
		},
		{
			"trigger": "ncurses_newwin()",
			"contents": "ncurses_newwin(${1:rows}, ${2:cols}, ${3:y}, ${4:x})",
			"kind": "function",
			"details": "Create a new window"
		},
		{
			"trigger": "ncurses_nl()",
			"contents": "ncurses_nl()",
			"kind": "function",
			"details": "Translate newline and carriage return / line feed"
		},
		{
			"trigger": "ncurses_nocbreak()",
			"contents": "ncurses_nocbreak()",
			"kind": "function",
			"details": "Switch terminal to cooked mode"
		},
		{
			"trigger": "ncurses_noecho()",
			"contents": "ncurses_noecho()",
			"kind": "function",
			"details": "Switch off keyboard input echo"
		},
		{
			"trigger": "ncurses_nonl()",
			"contents": "ncurses_nonl()",
			"kind": "function",
			"details": "Do not translate newline and carriage return / line feed"
		},
		{
			"trigger": "ncurses_noqiflush()",
			"contents": "ncurses_noqiflush()",
			"kind": "function",
			"details": "Do not flush on signal characters"
		},
		{
			"trigger": "ncurses_noraw()",
			"contents": "ncurses_noraw()",
			"kind": "function",
			"details": "Switch terminal out of raw mode"
		},
		{
			"trigger": "ncurses_pair_content()",
			"contents": "ncurses_pair_content(${1:pair}, ${2:f}, ${3:b})",
			"kind": "function",
			"details": "Retrieves foreground and background colors of a color pair"
		},
		{
			"trigger": "ncurses_panel_above()",
			"contents": "ncurses_panel_above(${1:panel})",
			"kind": "function",
			"details": "Returns the panel above panel"
		},
		{
			"trigger": "ncurses_panel_below()",
			"contents": "ncurses_panel_below(${1:panel})",
			"kind": "function",
			"details": "Returns the panel below panel"
		},
		{
			"trigger": "ncurses_panel_window()",
			"contents": "ncurses_panel_window(${1:panel})",
			"kind": "function",
			"details": "Returns the window associated with panel"
		},
		{
			"trigger": "ncurses_pnoutrefresh()",
			"contents": "ncurses_pnoutrefresh(${1:pad}, ${2:pminrow}, ${3:pmincol}, ${4:sminrow}, ${5:smincol}, ${6:smaxrow}, ${7:smaxcol})",
			"kind": "function",
			"details": "Copies a region from a pad into the virtual screen"
		},
		{
			"trigger": "ncurses_prefresh()",
			"contents": "ncurses_prefresh(${1:pad}, ${2:pminrow}, ${3:pmincol}, ${4:sminrow}, ${5:smincol}, ${6:smaxrow}, ${7:smaxcol})",
			"kind": "function",
			"details": "Copies a region from a pad into the virtual screen"
		},
		{
			"trigger": "ncurses_putp()",
			"contents": "ncurses_putp(${1:text})",
			"kind": "function",
			"details": "Apply padding information to the string and output it"
		},
		{
			"trigger": "ncurses_qiflush()",
			"contents": "ncurses_qiflush()",
			"kind": "function",
			"details": "Flush on signal characters"
		},
		{
			"trigger": "ncurses_raw()",
			"contents": "ncurses_raw()",
			"kind": "function",
			"details": "Switch terminal into raw mode"
		},
		{
			"trigger": "ncurses_refresh()",
			"contents": "ncurses_refresh(${1:ch})",
			"kind": "function",
			"details": "Refresh screen"
		},
		{
			"trigger": "ncurses_replace_panel()",
			"contents": "ncurses_replace_panel(${1:panel}, ${2:window})",
			"kind": "function",
			"details": "Replaces the window associated with panel"
		},
		{
			"trigger": "ncurses_reset_prog_mode()",
			"contents": "ncurses_reset_prog_mode()",
			"kind": "function",
			"details": "Resets the prog mode saved by def_prog_mode"
		},
		{
			"trigger": "ncurses_reset_shell_mode()",
			"contents": "ncurses_reset_shell_mode()",
			"kind": "function",
			"details": "Resets the shell mode saved by def_shell_mode"
		},
		{
			"trigger": "ncurses_resetty()",
			"contents": "ncurses_resetty()",
			"kind": "function",
			"details": "Restores saved terminal state"
		},
		{
			"trigger": "ncurses_savetty()",
			"contents": "ncurses_savetty()",
			"kind": "function",
			"details": "Saves terminal state"
		},
		{
			"trigger": "ncurses_scr_dump()",
			"contents": "ncurses_scr_dump(${1:filename})",
			"kind": "function",
			"details": "Dump screen content to file"
		},
		{
			"trigger": "ncurses_scr_init()",
			"contents": "ncurses_scr_init(${1:filename})",
			"kind": "function",
			"details": "Initialize screen from file dump"
		},
		{
			"trigger": "ncurses_scr_restore()",
			"contents": "ncurses_scr_restore(${1:filename})",
			"kind": "function",
			"details": "Restore screen from file dump"
		},
		{
			"trigger": "ncurses_scr_set()",
			"contents": "ncurses_scr_set(${1:filename})",
			"kind": "function",
			"details": "Inherit screen from file dump"
		},
		{
			"trigger": "ncurses_scrl()",
			"contents": "ncurses_scrl(${1:count})",
			"kind": "function",
			"details": "Scroll window content up or down without changing current position"
		},
		{
			"trigger": "ncurses_show_panel()",
			"contents": "ncurses_show_panel(${1:panel})",
			"kind": "function",
			"details": "Places an invisible panel on top of the stack, making it visible"
		},
		{
			"trigger": "ncurses_slk_attr()",
			"contents": "ncurses_slk_attr()",
			"kind": "function",
			"details": "Returns current soft label key attribute"
		},
		{
			"trigger": "ncurses_slk_attroff()",
			"contents": "ncurses_slk_attroff(${1:intarg})",
			"kind": "function",
			"details": "Turn off the given attributes for soft function-key labels"
		},
		{
			"trigger": "ncurses_slk_attron()",
			"contents": "ncurses_slk_attron(${1:intarg})",
			"kind": "function",
			"details": "Turn on the given attributes for soft function-key labels"
		},
		{
			"trigger": "ncurses_slk_attrset()",
			"contents": "ncurses_slk_attrset(${1:intarg})",
			"kind": "function",
			"details": "Set given attributes for soft function-key labels"
		},
		{
			"trigger": "ncurses_slk_clear()",
			"contents": "ncurses_slk_clear()",
			"kind": "function",
			"details": "Clears soft labels from screen"
		},
		{
			"trigger": "ncurses_slk_color()",
			"contents": "ncurses_slk_color(${1:intarg})",
			"kind": "function",
			"details": "Sets color for soft label keys"
		},
		{
			"trigger": "ncurses_slk_init()",
			"contents": "ncurses_slk_init(${1:format})",
			"kind": "function",
			"details": "Initializes soft label key functions"
		},
		{
			"trigger": "ncurses_slk_noutrefresh()",
			"contents": "ncurses_slk_noutrefresh()",
			"kind": "function",
			"details": "Copies soft label keys to virtual screen"
		},
		{
			"trigger": "ncurses_slk_refresh()",
			"contents": "ncurses_slk_refresh()",
			"kind": "function",
			"details": "Copies soft label keys to screen"
		},
		{
			"trigger": "ncurses_slk_restore()",
			"contents": "ncurses_slk_restore()",
			"kind": "function",
			"details": "Restores soft label keys"
		},
		{
			"trigger": "ncurses_slk_set()",
			"contents": "ncurses_slk_set(${1:labelnr}, ${2:label}, ${3:format})",
			"kind": "function",
			"details": "Sets function key labels"
		},
		{
			"trigger": "ncurses_slk_touch()",
			"contents": "ncurses_slk_touch()",
			"kind": "function",
			"details": "Forces output when ncurses_slk_noutrefresh is performed"
		},
		{
			"trigger": "ncurses_standend()",
			"contents": "ncurses_standend()",
			"kind": "function",
			"details": "Stop using 'standout' attribute"
		},
		{
			"trigger": "ncurses_standout()",
			"contents": "ncurses_standout()",
			"kind": "function",
			"details": "Start using 'standout' attribute"
		},
		{
			"trigger": "ncurses_start_color()",
			"contents": "ncurses_start_color()",
			"kind": "function",
			"details": "Initializes color functionality"
		},
		{
			"trigger": "ncurses_termattrs()",
			"contents": "ncurses_termattrs()",
			"kind": "function",
			"details": "Returns a logical OR of all attribute flags supported by terminal"
		},
		{
			"trigger": "ncurses_termname()",
			"contents": "ncurses_termname()",
			"kind": "function",
			"details": "Returns terminals (short)-name"
		},
		{
			"trigger": "ncurses_timeout()",
			"contents": "ncurses_timeout(${1:millisec})",
			"kind": "function",
			"details": "Set timeout for special key sequences"
		},
		{
			"trigger": "ncurses_top_panel()",
			"contents": "ncurses_top_panel(${1:panel})",
			"kind": "function",
			"details": "Moves a visible panel to the top of the stack"
		},
		{
			"trigger": "ncurses_typeahead()",
			"contents": "ncurses_typeahead(${1:fd})",
			"kind": "function",
			"details": "Specify different filedescriptor for typeahead checking"
		},
		{
			"trigger": "ncurses_ungetch()",
			"contents": "ncurses_ungetch(${1:keycode})",
			"kind": "function",
			"details": "Put a character back into the input stream"
		},
		{
			"trigger": "ncurses_ungetmouse()",
			"contents": "ncurses_ungetmouse(${1:mevent})",
			"kind": "function",
			"details": "Pushes mouse event to queue"
		},
		{
			"trigger": "ncurses_update_panels()",
			"contents": "ncurses_update_panels()",
			"kind": "function",
			"details": "Refreshes the virtual screen to reflect the relations between panels in the stack"
		},
		{
			"trigger": "ncurses_use_default_colors()",
			"contents": "ncurses_use_default_colors()",
			"kind": "function",
			"details": "Assign terminal default colors to color id -1"
		},
		{
			"trigger": "ncurses_use_env()",
			"contents": "ncurses_use_env(${1:flag})",
			"kind": "function",
			"details": "Control use of environment information about terminal size"
		},
		{
			"trigger": "ncurses_use_extended_names()",
			"contents": "ncurses_use_extended_names(${1:flag})",
			"kind": "function",
			"details": "Control use of extended names in terminfo descriptions"
		},
		{
			"trigger": "ncurses_vidattr()",
			"contents": "ncurses_vidattr(${1:intarg})",
			"kind": "function",
			"details": "Display the string on the terminal in the video attribute mode"
		},
		{
			"trigger": "ncurses_vline()",
			"contents": "ncurses_vline(${1:charattr}, ${2:n})",
			"kind": "function",
			"details": "Draw a vertical line at current position using an attributed character and max. n characters long"
		},
		{
			"trigger": "ncurses_waddch()",
			"contents": "ncurses_waddch(${1:window}, ${2:ch})",
			"kind": "function",
			"details": "Adds character at current position in a window and advance cursor"
		},
		{
			"trigger": "ncurses_waddstr()",
			"contents": "ncurses_waddstr(${1:window}, ${2:str})",
			"kind": "function",
			"details": "Outputs text at current postion in window"
		},
		{
			"trigger": "ncurses_wattroff()",
			"contents": "ncurses_wattroff(${1:window}, ${2:attrs})",
			"kind": "function",
			"details": "Turns off attributes for a window"
		},
		{
			"trigger": "ncurses_wattron()",
			"contents": "ncurses_wattron(${1:window}, ${2:attrs})",
			"kind": "function",
			"details": "Turns on attributes for a window"
		},
		{
			"trigger": "ncurses_wattrset()",
			"contents": "ncurses_wattrset(${1:window}, ${2:attrs})",
			"kind": "function",
			"details": "Set the attributes for a window"
		},
		{
			"trigger": "ncurses_wborder()",
			"contents": "ncurses_wborder(${1:window}, ${2:left}, ${3:right}, ${4:top}, ${5:bottom}, ${6:tl_corner}, ${7:tr_corner}, ${8:bl_corner}, ${9:br_corner})",
			"kind": "function",
			"details": "Draws a border around the window using attributed characters"
		},
		{
			"trigger": "ncurses_wclear()",
			"contents": "ncurses_wclear(${1:window})",
			"kind": "function",
			"details": "Clears window"
		},
		{
			"trigger": "ncurses_wcolor_set()",
			"contents": "ncurses_wcolor_set(${1:window}, ${2:color_pair})",
			"kind": "function",
			"details": "Sets windows color pairings"
		},
		{
			"trigger": "ncurses_werase()",
			"contents": "ncurses_werase(${1:window})",
			"kind": "function",
			"details": "Erase window contents"
		},
		{
			"trigger": "ncurses_wgetch()",
			"contents": "ncurses_wgetch(${1:window})",
			"kind": "function",
			"details": "Reads a character from keyboard (window)"
		},
		{
			"trigger": "ncurses_whline()",
			"contents": "ncurses_whline(${1:window}, ${2:charattr}, ${3:n})",
			"kind": "function",
			"details": "Draws a horizontal line in a window at current position using an attributed character and max. n characters long"
		},
		{
			"trigger": "ncurses_wmouse_trafo()",
			"contents": "ncurses_wmouse_trafo(${1:window}, ${2:y}, ${3:x}, ${4:toscreen})",
			"kind": "function",
			"details": "Transforms window/stdscr coordinates"
		},
		{
			"trigger": "ncurses_wmove()",
			"contents": "ncurses_wmove(${1:window}, ${2:y}, ${3:x})",
			"kind": "function",
			"details": "Moves windows output position"
		},
		{
			"trigger": "ncurses_wnoutrefresh()",
			"contents": "ncurses_wnoutrefresh(${1:window})",
			"kind": "function",
			"details": "Copies window to virtual screen"
		},
		{
			"trigger": "ncurses_wrefresh()",
			"contents": "ncurses_wrefresh(${1:window})",
			"kind": "function",
			"details": "Refresh window on terminal screen"
		},
		{
			"trigger": "ncurses_wstandend()",
			"contents": "ncurses_wstandend(${1:window})",
			"kind": "function",
			"details": "End standout mode for a window"
		},
		{
			"trigger": "ncurses_wstandout()",
			"contents": "ncurses_wstandout(${1:window})",
			"kind": "function",
			"details": "Enter standout mode for a window"
		},
		{
			"trigger": "ncurses_wvline()",
			"contents": "ncurses_wvline(${1:window}, ${2:charattr}, ${3:n})",
			"kind": "function",
			"details": "Draws a vertical line in a window at current position using an attributed character and max. n characters long"
		},
		{
			"trigger": "newt_bell()",
			"contents": "newt_bell()",
			"kind": "function",
			"details": "Send a beep to the terminal"
		},
		{
			"trigger": "newt_button()",
			"contents": "newt_button(${1:left}, ${2:top}, ${3:text})",
			"kind": "function",
			"details": "Create a new button"
		},
		{
			"trigger": "newt_button_bar()",
			"contents": "newt_button_bar(${1:buttons})",
			"kind": "function",
			"details": "This function returns a grid containing the buttons created"
		},
		{
			"trigger": "newt_centered_window()",
			"contents": "newt_centered_window(${1:width}, ${2:height})",
			"kind": "function",
			"details": "Open a centered window of the specified size"
		},
		{
			"trigger": "newt_checkbox()",
			"contents": "newt_checkbox(${1:left}, ${2:top}, ${3:text}, ${4:def_value})",
			"kind": "function"
		},
		{
			"trigger": "newt_checkbox_get_value()",
			"contents": "newt_checkbox_get_value(${1:checkbox})",
			"kind": "function",
			"details": "Retreives value of checkox resource"
		},
		{
			"trigger": "newt_checkbox_set_flags()",
			"contents": "newt_checkbox_set_flags(${1:checkbox}, ${2:flags}, ${3:sense})",
			"kind": "function",
			"details": "Configures checkbox resource"
		},
		{
			"trigger": "newt_checkbox_set_value()",
			"contents": "newt_checkbox_set_value(${1:checkbox}, ${2:value})",
			"kind": "function",
			"details": "Sets the value of the checkbox"
		},
		{
			"trigger": "newt_checkbox_tree()",
			"contents": "newt_checkbox_tree(${1:left}, ${2:top}, ${3:height})",
			"kind": "function"
		},
		{
			"trigger": "newt_checkbox_tree_add_item()",
			"contents": "newt_checkbox_tree_add_item(${1:checkboxtree}, ${2:text}, ${3:data}, ${4:flags}, ${5:index})",
			"kind": "function",
			"details": "Adds new item to the checkbox tree"
		},
		{
			"trigger": "newt_checkbox_tree_find_item()",
			"contents": "newt_checkbox_tree_find_item(${1:checkboxtree}, ${2:data})",
			"kind": "function",
			"details": "Finds an item in the checkbox tree"
		},
		{
			"trigger": "newt_checkbox_tree_get_current()",
			"contents": "newt_checkbox_tree_get_current(${1:checkboxtree})",
			"kind": "function",
			"details": "Returns checkbox tree selected item"
		},
		{
			"trigger": "newt_checkbox_tree_get_entry_value()",
			"contents": "newt_checkbox_tree_get_entry_value(${1:checkboxtree}, ${2:data})",
			"kind": "function"
		},
		{
			"trigger": "newt_checkbox_tree_get_multi_selection()",
			"contents": "newt_checkbox_tree_get_multi_selection(${1:checkboxtree}, ${2:seqnum})",
			"kind": "function"
		},
		{
			"trigger": "newt_checkbox_tree_get_selection()",
			"contents": "newt_checkbox_tree_get_selection(${1:checkboxtree})",
			"kind": "function"
		},
		{
			"trigger": "newt_checkbox_tree_multi()",
			"contents": "newt_checkbox_tree_multi(${1:left}, ${2:top}, ${3:height}, ${4:seq})",
			"kind": "function"
		},
		{
			"trigger": "newt_checkbox_tree_set_current()",
			"contents": "newt_checkbox_tree_set_current(${1:checkboxtree}, ${2:data})",
			"kind": "function"
		},
		{
			"trigger": "newt_checkbox_tree_set_entry()",
			"contents": "newt_checkbox_tree_set_entry(${1:checkboxtree}, ${2:data}, ${3:text})",
			"kind": "function"
		},
		{
			"trigger": "newt_checkbox_tree_set_entry_value()",
			"contents": "newt_checkbox_tree_set_entry_value(${1:checkboxtree}, ${2:data}, ${3:value})",
			"kind": "function"
		},
		{
			"trigger": "newt_checkbox_tree_set_width()",
			"contents": "newt_checkbox_tree_set_width(${1:checkbox_tree}, ${2:width})",
			"kind": "function"
		},
		{
			"trigger": "newt_clear_key_buffer()",
			"contents": "newt_clear_key_buffer()",
			"kind": "function",
			"details": "Discards the contents of the terminal's input buffer without waiting for additional input"
		},
		{
			"trigger": "newt_cls()",
			"contents": "newt_cls()",
			"kind": "function"
		},
		{
			"trigger": "newt_compact_button()",
			"contents": "newt_compact_button(${1:left}, ${2:top}, ${3:text})",
			"kind": "function"
		},
		{
			"trigger": "newt_component_add_callback()",
			"contents": "newt_component_add_callback(${1:component}, ${2:func_name}, ${3:data})",
			"kind": "function"
		},
		{
			"trigger": "newt_component_takes_focus()",
			"contents": "newt_component_takes_focus(${1:component}, ${2:takes_focus})",
			"kind": "function"
		},
		{
			"trigger": "newt_create_grid()",
			"contents": "newt_create_grid(${1:cols}, ${2:rows})",
			"kind": "function"
		},
		{
			"trigger": "newt_cursor_off()",
			"contents": "newt_cursor_off()",
			"kind": "function"
		},
		{
			"trigger": "newt_cursor_on()",
			"contents": "newt_cursor_on()",
			"kind": "function"
		},
		{
			"trigger": "newt_delay()",
			"contents": "newt_delay(${1:microseconds})",
			"kind": "function"
		},
		{
			"trigger": "newt_draw_form()",
			"contents": "newt_draw_form(${1:form})",
			"kind": "function"
		},
		{
			"trigger": "newt_draw_root_text()",
			"contents": "newt_draw_root_text(${1:left}, ${2:top}, ${3:text})",
			"kind": "function",
			"details": "Displays the string text at the position indicated"
		},
		{
			"trigger": "newt_entry()",
			"contents": "newt_entry(${1:left}, ${2:top}, ${3:width})",
			"kind": "function"
		},
		{
			"trigger": "newt_entry_get_value()",
			"contents": "newt_entry_get_value(${1:entry})",
			"kind": "function"
		},
		{
			"trigger": "newt_entry_set()",
			"contents": "newt_entry_set(${1:entry}, ${2:value})",
			"kind": "function"
		},
		{
			"trigger": "newt_entry_set_filter()",
			"contents": "newt_entry_set_filter(${1:entry}, ${2:filter}, ${3:data})",
			"kind": "function"
		},
		{
			"trigger": "newt_entry_set_flags()",
			"contents": "newt_entry_set_flags(${1:entry}, ${2:flags}, ${3:sense})",
			"kind": "function"
		},
		{
			"trigger": "newt_finished()",
			"contents": "newt_finished()",
			"kind": "function",
			"details": "Uninitializes newt interface"
		},
		{
			"trigger": "newt_form()",
			"contents": "newt_form()",
			"kind": "function",
			"details": "Create a form"
		},
		{
			"trigger": "newt_form_add_component()",
			"contents": "newt_form_add_component(${1:form}, ${2:component})",
			"kind": "function",
			"details": "Adds a single component to the form"
		},
		{
			"trigger": "newt_form_add_components()",
			"contents": "newt_form_add_components(${1:form}, ${2:components})",
			"kind": "function",
			"details": "Add several components to the form"
		},
		{
			"trigger": "newt_form_add_hot_key()",
			"contents": "newt_form_add_hot_key(${1:form}, ${2:key})",
			"kind": "function"
		},
		{
			"trigger": "newt_form_destroy()",
			"contents": "newt_form_destroy(${1:form})",
			"kind": "function",
			"details": "Destroys a form"
		},
		{
			"trigger": "newt_form_get_current()",
			"contents": "newt_form_get_current(${1:form})",
			"kind": "function"
		},
		{
			"trigger": "newt_form_run()",
			"contents": "newt_form_run(${1:form}, ${2:exit_struct})",
			"kind": "function",
			"details": "Runs a form"
		},
		{
			"trigger": "newt_form_set_background()",
			"contents": "newt_form_set_background(${1:from}, ${2:background})",
			"kind": "function"
		},
		{
			"trigger": "newt_form_set_height()",
			"contents": "newt_form_set_height(${1:form}, ${2:height})",
			"kind": "function"
		},
		{
			"trigger": "newt_form_set_size()",
			"contents": "newt_form_set_size(${1:form})",
			"kind": "function"
		},
		{
			"trigger": "newt_form_set_timer()",
			"contents": "newt_form_set_timer(${1:form}, ${2:milliseconds})",
			"kind": "function"
		},
		{
			"trigger": "newt_form_set_width()",
			"contents": "newt_form_set_width(${1:form}, ${2:width})",
			"kind": "function"
		},
		{
			"trigger": "newt_form_watch_fd()",
			"contents": "newt_form_watch_fd(${1:form}, ${2:stream})",
			"kind": "function"
		},
		{
			"trigger": "newt_get_screen_size()",
			"contents": "newt_get_screen_size(${1:cols}, ${2:rows})",
			"kind": "function",
			"details": "Fills in the passed references with the current size of the terminal"
		},
		{
			"trigger": "newt_grid_add_components_to_form()",
			"contents": "newt_grid_add_components_to_form(${1:grid}, ${2:form}, ${3:recurse})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_basic_window()",
			"contents": "newt_grid_basic_window(${1:text}, ${2:middle}, ${3:buttons})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_free()",
			"contents": "newt_grid_free(${1:grid}, ${2:recurse})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_get_size()",
			"contents": "newt_grid_get_size(${1:grid}, ${2:width}, ${3:height})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_h_close_stacked()",
			"contents": "newt_grid_h_close_stacked(${1:element1_type}, ${2:element1})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_h_stacked()",
			"contents": "newt_grid_h_stacked(${1:element1_type}, ${2:element1})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_place()",
			"contents": "newt_grid_place(${1:grid}, ${2:left}, ${3:top})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_set_field()",
			"contents": "newt_grid_set_field(${1:grid}, ${2:col}, ${3:row}, ${4:type}, ${5:val}, ${6:pad_left}, ${7:pad_top}, ${8:pad_right}, ${9:pad_bottom}, ${10:anchor})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_simple_window()",
			"contents": "newt_grid_simple_window(${1:text}, ${2:middle}, ${3:buttons})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_v_close_stacked()",
			"contents": "newt_grid_v_close_stacked(${1:element1_type}, ${2:element1})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_v_stacked()",
			"contents": "newt_grid_v_stacked(${1:element1_type}, ${2:element1})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_wrapped_window()",
			"contents": "newt_grid_wrapped_window(${1:grid}, ${2:title})",
			"kind": "function"
		},
		{
			"trigger": "newt_grid_wrapped_window_at()",
			"contents": "newt_grid_wrapped_window_at(${1:grid}, ${2:title}, ${3:left}, ${4:top})",
			"kind": "function"
		},
		{
			"trigger": "newt_init()",
			"contents": "newt_init()",
			"kind": "function",
			"details": "Initialize newt"
		},
		{
			"trigger": "newt_label()",
			"contents": "newt_label(${1:left}, ${2:top}, ${3:text})",
			"kind": "function"
		},
		{
			"trigger": "newt_label_set_text()",
			"contents": "newt_label_set_text(${1:label}, ${2:text})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox()",
			"contents": "newt_listbox(${1:left}, ${2:top}, ${3:height})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_append_entry()",
			"contents": "newt_listbox_append_entry(${1:listbox}, ${2:text}, ${3:data})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_clear()",
			"contents": "newt_listbox_clear(${1:listobx})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_clear_selection()",
			"contents": "newt_listbox_clear_selection(${1:listbox})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_delete_entry()",
			"contents": "newt_listbox_delete_entry(${1:listbox}, ${2:key})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_get_current()",
			"contents": "newt_listbox_get_current(${1:listbox})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_get_selection()",
			"contents": "newt_listbox_get_selection(${1:listbox})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_insert_entry()",
			"contents": "newt_listbox_insert_entry(${1:listbox}, ${2:text}, ${3:data}, ${4:key})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_item_count()",
			"contents": "newt_listbox_item_count(${1:listbox})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_select_item()",
			"contents": "newt_listbox_select_item(${1:listbox}, ${2:key}, ${3:sense})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_set_current()",
			"contents": "newt_listbox_set_current(${1:listbox}, ${2:num})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_set_current_by_key()",
			"contents": "newt_listbox_set_current_by_key(${1:listbox}, ${2:key})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_set_data()",
			"contents": "newt_listbox_set_data(${1:listbox}, ${2:num}, ${3:data})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_set_entry()",
			"contents": "newt_listbox_set_entry(${1:listbox}, ${2:num}, ${3:text})",
			"kind": "function"
		},
		{
			"trigger": "newt_listbox_set_width()",
			"contents": "newt_listbox_set_width(${1:listbox}, ${2:width})",
			"kind": "function"
		},
		{
			"trigger": "newt_listitem()",
			"contents": "newt_listitem(${1:left}, ${2:top}, ${3:text}, ${4:is_default}, ${5:prev_item}, ${6:data})",
			"kind": "function"
		},
		{
			"trigger": "newt_listitem_get_data()",
			"contents": "newt_listitem_get_data(${1:item})",
			"kind": "function"
		},
		{
			"trigger": "newt_listitem_set()",
			"contents": "newt_listitem_set(${1:item}, ${2:text})",
			"kind": "function"
		},
		{
			"trigger": "newt_open_window()",
			"contents": "newt_open_window(${1:left}, ${2:top}, ${3:width}, ${4:height})",
			"kind": "function",
			"details": "Open a window of the specified size and position"
		},
		{
			"trigger": "newt_pop_help_line()",
			"contents": "newt_pop_help_line()",
			"kind": "function",
			"details": "Replaces the current help line with the one from the stack"
		},
		{
			"trigger": "newt_pop_window()",
			"contents": "newt_pop_window()",
			"kind": "function",
			"details": "Removes the top window from the display"
		},
		{
			"trigger": "newt_push_help_line()",
			"contents": "newt_push_help_line()",
			"kind": "function",
			"details": "Saves the current help line on a stack, and displays the new line"
		},
		{
			"trigger": "newt_radio_get_current()",
			"contents": "newt_radio_get_current(${1:set_member})",
			"kind": "function"
		},
		{
			"trigger": "newt_radiobutton()",
			"contents": "newt_radiobutton(${1:left}, ${2:top}, ${3:text}, ${4:is_default})",
			"kind": "function"
		},
		{
			"trigger": "newt_redraw_help_line()",
			"contents": "newt_redraw_help_line()",
			"kind": "function"
		},
		{
			"trigger": "newt_reflow_text()",
			"contents": "newt_reflow_text(${1:text}, ${2:width}, ${3:flex_down}, ${4:flex_up}, ${5:actual_width}, ${6:actual_height})",
			"kind": "function"
		},
		{
			"trigger": "newt_refresh()",
			"contents": "newt_refresh()",
			"kind": "function",
			"details": "Updates modified portions of the screen"
		},
		{
			"trigger": "newt_resize_screen()",
			"contents": "newt_resize_screen()",
			"kind": "function"
		},
		{
			"trigger": "newt_resume()",
			"contents": "newt_resume()",
			"kind": "function",
			"details": "Resume using the newt interface after calling newt_suspend()"
		},
		{
			"trigger": "newt_run_form()",
			"contents": "newt_run_form(${1:form})",
			"kind": "function",
			"details": "Runs a form"
		},
		{
			"trigger": "newt_scale()",
			"contents": "newt_scale(${1:left}, ${2:top}, ${3:width}, ${4:full_value})",
			"kind": "function"
		},
		{
			"trigger": "newt_scale_set()",
			"contents": "newt_scale_set(${1:scale}, ${2:amount})",
			"kind": "function"
		},
		{
			"trigger": "newt_scrollbar_set()",
			"contents": "newt_scrollbar_set(${1:scrollbar}, ${2:where}, ${3:total})",
			"kind": "function"
		},
		{
			"trigger": "newt_set_help_callback()",
			"contents": "newt_set_help_callback(${1:function})",
			"kind": "function"
		},
		{
			"trigger": "newt_set_suspend_callback()",
			"contents": "newt_set_suspend_callback(${1:function}, ${2:data})",
			"kind": "function",
			"details": "Set a callback function which gets invoked when user presses the suspend key"
		},
		{
			"trigger": "newt_suspend()",
			"contents": "newt_suspend()",
			"kind": "function",
			"details": "Tells newt to return the terminal to its initial state"
		},
		{
			"trigger": "newt_textbox()",
			"contents": "newt_textbox(${1:left}, ${2:top}, ${3:width}, ${4:height})",
			"kind": "function"
		},
		{
			"trigger": "newt_textbox_get_num_lines()",
			"contents": "newt_textbox_get_num_lines(${1:textbox})",
			"kind": "function"
		},
		{
			"trigger": "newt_textbox_reflowed()",
			"contents": "newt_textbox_reflowed(${1:left}, ${2:top}, ${3:*text}, ${4:width}, ${5:flex_down}, ${6:flex_up})",
			"kind": "function"
		},
		{
			"trigger": "newt_textbox_set_height()",
			"contents": "newt_textbox_set_height(${1:textbox}, ${2:height})",
			"kind": "function"
		},
		{
			"trigger": "newt_textbox_set_text()",
			"contents": "newt_textbox_set_text(${1:textbox}, ${2:text})",
			"kind": "function"
		},
		{
			"trigger": "newt_vertical_scrollbar()",
			"contents": "newt_vertical_scrollbar(${1:left}, ${2:top}, ${3:height})",
			"kind": "function"
		},
		{
			"trigger": "newt_wait_for_key()",
			"contents": "newt_wait_for_key()",
			"kind": "function",
			"details": "Doesn't return until a key has been pressed"
		},
		{
			"trigger": "newt_win_choice()",
			"contents": "newt_win_choice(${1:title}, ${2:button1_text}, ${3:button2_text}, ${4:format})",
			"kind": "function"
		},
		{
			"trigger": "newt_win_entries()",
			"contents": "newt_win_entries(${1:title}, ${2:text}, ${3:suggested_width}, ${4:flex_down}, ${5:flex_up}, ${6:data_width}, ${7:items}, ${8:button1})",
			"kind": "function"
		},
		{
			"trigger": "newt_win_menu()",
			"contents": "newt_win_menu(${1:title}, ${2:text}, ${3:suggestedWidth}, ${4:flexDown}, ${5:flexUp}, ${6:maxListHeight}, ${7:items}, ${8:listItem})",
			"kind": "function"
		},
		{
			"trigger": "newt_win_message()",
			"contents": "newt_win_message(${1:title}, ${2:button_text}, ${3:format})",
			"kind": "function"
		},
		{
			"trigger": "newt_win_messagev()",
			"contents": "newt_win_messagev(${1:title}, ${2:button_text}, ${3:format}, ${4:args})",
			"kind": "function"
		},
		{
			"trigger": "newt_win_ternary()",
			"contents": "newt_win_ternary(${1:title}, ${2:button1_text}, ${3:button2_text}, ${4:button3_text}, ${5:format})",
			"kind": "function"
		},
		{
			"trigger": "next()",
			"contents": "next(${1:array})",
			"kind": "function",
			"details": "Advance the internal pointer of an array"
		},
		{
			"trigger": "ngettext()",
			"contents": "ngettext(${1:msgid1}, ${2:msgid2}, ${3:n})",
			"kind": "function",
			"details": "Plural version of gettext"
		},
		{
			"trigger": "nl2br()",
			"contents": "nl2br(${1:string})",
			"kind": "function",
			"details": "Inserts HTML line breaks before all newlines in a string"
		},
		{
			"trigger": "nl_langinfo()",
			"contents": "nl_langinfo(${1:item})",
			"kind": "function",
			"details": "Query language and locale information"
		},
		{
			"trigger": "notes_body()",
			"contents": "notes_body(${1:server}, ${2:mailbox}, ${3:msg_number})",
			"kind": "function"
		},
		{
			"trigger": "notes_copy_db()",
			"contents": "notes_copy_db(${1:from_database_name}, ${2:to_database_name})",
			"kind": "function"
		},
		{
			"trigger": "notes_create_db()",
			"contents": "notes_create_db(${1:database_name})",
			"kind": "function"
		},
		{
			"trigger": "notes_create_note()",
			"contents": "notes_create_note(${1:database_name}, ${2:form_name})",
			"kind": "function"
		},
		{
			"trigger": "notes_drop_db()",
			"contents": "notes_drop_db(${1:database_name})",
			"kind": "function"
		},
		{
			"trigger": "notes_find_note()",
			"contents": "notes_find_note(${1:database_name}, ${2:name})",
			"kind": "function"
		},
		{
			"trigger": "notes_header_info()",
			"contents": "notes_header_info(${1:server}, ${2:mailbox}, ${3:msg_number})",
			"kind": "function"
		},
		{
			"trigger": "notes_list_msgs()",
			"contents": "notes_list_msgs(${1:db})",
			"kind": "function"
		},
		{
			"trigger": "notes_mark_read()",
			"contents": "notes_mark_read(${1:database_name}, ${2:user_name}, ${3:note_id})",
			"kind": "function"
		},
		{
			"trigger": "notes_mark_unread()",
			"contents": "notes_mark_unread(${1:database_name}, ${2:user_name}, ${3:note_id})",
			"kind": "function"
		},
		{
			"trigger": "notes_nav_create()",
			"contents": "notes_nav_create(${1:database_name}, ${2:name})",
			"kind": "function"
		},
		{
			"trigger": "notes_search()",
			"contents": "notes_search(${1:database_name}, ${2:keywords})",
			"kind": "function"
		},
		{
			"trigger": "notes_unread()",
			"contents": "notes_unread(${1:database_name}, ${2:user_name})",
			"kind": "function"
		},
		{
			"trigger": "notes_version()",
			"contents": "notes_version(${1:database_name})",
			"kind": "function"
		},
		{
			"trigger": "nsapi_request_headers()",
			"contents": "nsapi_request_headers()",
			"kind": "function",
			"details": "Fetch all HTTP request headers"
		},
		{
			"trigger": "nsapi_response_headers()",
			"contents": "nsapi_response_headers()",
			"kind": "function",
			"details": "Fetch all HTTP response headers"
		},
		{
			"trigger": "nsapi_virtual()",
			"contents": "nsapi_virtual(${1:uri})",
			"kind": "function",
			"details": "Perform an NSAPI sub-request"
		},
		{
			"trigger": "nthmac()",
			"contents": "nthmac(${1:clent}, ${2:data})",
			"kind": "function"
		},
		{
			"trigger": "number_format()",
			"contents": "number_format(${1:number})",
			"kind": "function",
			"details": "Format a number with grouped thousands"
		},
		{
			"trigger": "oauth_get_sbs()",
			"contents": "oauth_get_sbs(${1:http_method}, ${2:uri})",
			"kind": "function",
			"details": "Generate a Signature Base String"
		},
		{
			"trigger": "oauth_urlencode()",
			"contents": "oauth_urlencode(${1:uri})",
			"kind": "function",
			"details": "Encode a URI to RFC 3986"
		},
		{
			"trigger": "ob_clean()",
			"contents": "ob_clean()",
			"kind": "function",
			"details": "Clean (erase) the output buffer"
		},
		{
			"trigger": "ob_deflatehandler()",
			"contents": "ob_deflatehandler(${1:data}, ${2:mode})",
			"kind": "function"
		},
		{
			"trigger": "ob_end_clean()",
			"contents": "ob_end_clean()",
			"kind": "function",
			"details": "Clean (erase) the output buffer and turn off output buffering"
		},
		{
			"trigger": "ob_end_flush()",
			"contents": "ob_end_flush()",
			"kind": "function",
			"details": "Flush (send) the output buffer and turn off output buffering"
		},
		{
			"trigger": "ob_etaghandler()",
			"contents": "ob_etaghandler(${1:data}, ${2:mode})",
			"kind": "function"
		},
		{
			"trigger": "ob_flush()",
			"contents": "ob_flush()",
			"kind": "function",
			"details": "Flush (send) the output buffer"
		},
		{
			"trigger": "ob_get_clean()",
			"contents": "ob_get_clean()",
			"kind": "function",
			"details": "Get current buffer contents and delete current output buffer"
		},
		{
			"trigger": "ob_get_contents()",
			"contents": "ob_get_contents()",
			"kind": "function",
			"details": "Return the contents of the output buffer"
		},
		{
			"trigger": "ob_get_flush()",
			"contents": "ob_get_flush()",
			"kind": "function",
			"details": "Flush the output buffer, return it as a string and turn off output buffering"
		},
		{
			"trigger": "ob_get_length()",
			"contents": "ob_get_length()",
			"kind": "function",
			"details": "Return the length of the output buffer"
		},
		{
			"trigger": "ob_get_level()",
			"contents": "ob_get_level()",
			"kind": "function",
			"details": "Return the nesting level of the output buffering mechanism"
		},
		{
			"trigger": "ob_get_status()",
			"contents": "ob_get_status()",
			"kind": "function",
			"details": "Get status of output buffers"
		},
		{
			"trigger": "ob_gzhandler()",
			"contents": "ob_gzhandler(${1:buffer}, ${2:mode})",
			"kind": "function",
			"details": "ob_start callback function to gzip output buffer"
		},
		{
			"trigger": "ob_iconv_handler()",
			"contents": "ob_iconv_handler(${1:contents}, ${2:status})",
			"kind": "function",
			"details": "Convert character encoding as output buffer handler"
		},
		{
			"trigger": "ob_implicit_flush()",
			"contents": "ob_implicit_flush()",
			"kind": "function",
			"details": "Turn implicit flush on/off"
		},
		{
			"trigger": "ob_inflatehandler()",
			"contents": "ob_inflatehandler(${1:data}, ${2:mode})",
			"kind": "function"
		},
		{
			"trigger": "ob_list_handlers()",
			"contents": "ob_list_handlers()",
			"kind": "function",
			"details": "List all output handlers in use"
		},
		{
			"trigger": "ob_start()",
			"contents": "ob_start()",
			"kind": "function",
			"details": "Turn on output buffering"
		},
		{
			"trigger": "ob_tidyhandler()",
			"contents": "ob_tidyhandler(${1:input})",
			"kind": "function",
			"details": "ob_start callback function to repair the buffer"
		},
		{
			"trigger": "oci_bind_array_by_name()",
			"contents": "oci_bind_array_by_name(${1:statement}, ${2:name}, ${3:var_array}, ${4:max_table_length})",
			"kind": "function",
			"details": "Binds a PHP array to an Oracle PL/SQL array parameter"
		},
		{
			"trigger": "oci_bind_by_name()",
			"contents": "oci_bind_by_name(${1:statement}, ${2:bv_name}, ${3:variable})",
			"kind": "function",
			"details": "Binds a PHP variable to an Oracle placeholder"
		},
		{
			"trigger": "oci_cancel()",
			"contents": "oci_cancel(${1:statement})",
			"kind": "function",
			"details": "Cancels reading from cursor"
		},
		{
			"trigger": "oci_close()",
			"contents": "oci_close(${1:connection})",
			"kind": "function",
			"details": "Closes an Oracle connection"
		},
		{
			"trigger": "oci_commit()",
			"contents": "oci_commit(${1:connection})",
			"kind": "function",
			"details": "Commits the outstanding database transaction"
		},
		{
			"trigger": "oci_connect()",
			"contents": "oci_connect(${1:username}, ${2:password})",
			"kind": "function",
			"details": "Connect to an Oracle database"
		},
		{
			"trigger": "oci_define_by_name()",
			"contents": "oci_define_by_name(${1:statement}, ${2:column_name}, ${3:variable})",
			"kind": "function",
			"details": "Associates a PHP variable with a column for query fetches"
		},
		{
			"trigger": "oci_error()",
			"contents": "oci_error()",
			"kind": "function",
			"details": "Returns the last error found"
		},
		{
			"trigger": "oci_execute()",
			"contents": "oci_execute(${1:statement})",
			"kind": "function",
			"details": "Executes a statement"
		},
		{
			"trigger": "oci_fetch()",
			"contents": "oci_fetch(${1:statement})",
			"kind": "function",
			"details": "Fetches the next row from a query into internal buffers"
		},
		{
			"trigger": "oci_fetch_all()",
			"contents": "oci_fetch_all(${1:statement}, ${2:output})",
			"kind": "function",
			"details": "Fetches multiple rows from a query into a two-dimensional array"
		},
		{
			"trigger": "oci_fetch_array()",
			"contents": "oci_fetch_array(${1:statement})",
			"kind": "function",
			"details": "Returns the next row from a query as an associative or numeric array"
		},
		{
			"trigger": "oci_fetch_assoc()",
			"contents": "oci_fetch_assoc(${1:statement})",
			"kind": "function",
			"details": "Returns the next row from a query as an associative array"
		},
		{
			"trigger": "oci_fetch_object()",
			"contents": "oci_fetch_object(${1:statement})",
			"kind": "function",
			"details": "Returns the next row from a query as an object"
		},
		{
			"trigger": "oci_fetch_row()",
			"contents": "oci_fetch_row(${1:statement})",
			"kind": "function",
			"details": "Returns the next row from a query as a numeric array"
		},
		{
			"trigger": "oci_field_is_null()",
			"contents": "oci_field_is_null(${1:statement}, ${2:field})",
			"kind": "function",
			"details": "Checks if a field in the currently fetched row is NULL"
		},
		{
			"trigger": "oci_field_name()",
			"contents": "oci_field_name(${1:statement}, ${2:field})",
			"kind": "function",
			"details": "Returns the name of a field from the statement"
		},
		{
			"trigger": "oci_field_precision()",
			"contents": "oci_field_precision(${1:statement}, ${2:field})",
			"kind": "function",
			"details": "Tell the precision of a field"
		},
		{
			"trigger": "oci_field_scale()",
			"contents": "oci_field_scale(${1:statement}, ${2:field})",
			"kind": "function",
			"details": "Tell the scale of the field"
		},
		{
			"trigger": "oci_field_size()",
			"contents": "oci_field_size(${1:statement}, ${2:field})",
			"kind": "function",
			"details": "Returns field's size"
		},
		{
			"trigger": "oci_field_type()",
			"contents": "oci_field_type(${1:statement}, ${2:field})",
			"kind": "function",
			"details": "Returns a field's data type name"
		},
		{
			"trigger": "oci_field_type_raw()",
			"contents": "oci_field_type_raw(${1:statement}, ${2:field})",
			"kind": "function",
			"details": "Tell the raw Oracle data type of the field"
		},
		{
			"trigger": "oci_free_statement()",
			"contents": "oci_free_statement(${1:statement})",
			"kind": "function",
			"details": "Frees all resources associated with statement or cursor"
		},
		{
			"trigger": "oci_internal_debug()",
			"contents": "oci_internal_debug(${1:onoff})",
			"kind": "function",
			"details": "Enables or disables internal debug output"
		},
		{
			"trigger": "oci_lob_copy()",
			"contents": "oci_lob_copy(${1:lob_to}, ${2:lob_from})",
			"kind": "function",
			"details": "Copies large object"
		},
		{
			"trigger": "oci_lob_is_equal()",
			"contents": "oci_lob_is_equal(${1:lob1}, ${2:lob2})",
			"kind": "function",
			"details": "Compares two LOB/FILE locators for equality"
		},
		{
			"trigger": "oci_new_collection()",
			"contents": "oci_new_collection(${1:connection}, ${2:tdo})",
			"kind": "function",
			"details": "Allocates new collection object"
		},
		{
			"trigger": "oci_new_connect()",
			"contents": "oci_new_connect(${1:username}, ${2:password})",
			"kind": "function",
			"details": "Connect to the Oracle server using a unique connection"
		},
		{
			"trigger": "oci_new_cursor()",
			"contents": "oci_new_cursor(${1:connection})",
			"kind": "function",
			"details": "Allocates and returns a new cursor (statement handle)"
		},
		{
			"trigger": "oci_new_descriptor()",
			"contents": "oci_new_descriptor(${1:connection})",
			"kind": "function",
			"details": "Initializes a new empty LOB or FILE descriptor"
		},
		{
			"trigger": "oci_num_fields()",
			"contents": "oci_num_fields(${1:statement})",
			"kind": "function",
			"details": "Returns the number of result columns in a statement"
		},
		{
			"trigger": "oci_num_rows()",
			"contents": "oci_num_rows(${1:statement})",
			"kind": "function",
			"details": "Returns number of rows affected during statement execution"
		},
		{
			"trigger": "oci_parse()",
			"contents": "oci_parse(${1:connection}, ${2:sql_text})",
			"kind": "function",
			"details": "Prepares an Oracle statement for execution"
		},
		{
			"trigger": "oci_password_change()",
			"contents": "oci_password_change(${1:connection}, ${2:username}, ${3:old_password}, ${4:new_password})",
			"kind": "function",
			"details": "Changes password of Oracle's user"
		},
		{
			"trigger": "oci_pconnect()",
			"contents": "oci_pconnect(${1:username}, ${2:password})",
			"kind": "function",
			"details": "Connect to an Oracle database using a persistent connection"
		},
		{
			"trigger": "oci_result()",
			"contents": "oci_result(${1:statement}, ${2:field})",
			"kind": "function",
			"details": "Returns field's value from the fetched row"
		},
		{
			"trigger": "oci_rollback()",
			"contents": "oci_rollback(${1:connection})",
			"kind": "function",
			"details": "Rolls back the outstanding database transaction"
		},
		{
			"trigger": "oci_server_version()",
			"contents": "oci_server_version(${1:connection})",
			"kind": "function",
			"details": "Returns the Oracle Database version"
		},
		{
			"trigger": "oci_set_action()",
			"contents": "oci_set_action(${1:connection}, ${2:action_name})",
			"kind": "function",
			"details": "Sets the action name"
		},
		{
			"trigger": "oci_set_client_identifier()",
			"contents": "oci_set_client_identifier(${1:connection}, ${2:client_identifier})",
			"kind": "function",
			"details": "Sets the client identifier"
		},
		{
			"trigger": "oci_set_client_info()",
			"contents": "oci_set_client_info(${1:connection}, ${2:client_info})",
			"kind": "function",
			"details": "Sets the client information"
		},
		{
			"trigger": "oci_set_edition()",
			"contents": "oci_set_edition(${1:edition})",
			"kind": "function",
			"details": "Sets the database edition"
		},
		{
			"trigger": "oci_set_module_name()",
			"contents": "oci_set_module_name(${1:connection}, ${2:module_name})",
			"kind": "function",
			"details": "Sets the module name"
		},
		{
			"trigger": "oci_set_prefetch()",
			"contents": "oci_set_prefetch(${1:statement}, ${2:rows})",
			"kind": "function",
			"details": "Sets number of rows to be prefetched by queries"
		},
		{
			"trigger": "oci_statement_type()",
			"contents": "oci_statement_type(${1:statement})",
			"kind": "function",
			"details": "Returns the type of a statement"
		},
		{
			"trigger": "ocibindbyname()",
			"contents": "ocibindbyname()",
			"kind": "function",
			"details": "Alias of oci_bind_by_name()"
		},
		{
			"trigger": "ocicancel()",
			"contents": "ocicancel()",
			"kind": "function",
			"details": "Alias of oci_cancel()"
		},
		{
			"trigger": "ocicloselob()",
			"contents": "ocicloselob()",
			"kind": "function",
			"details": "Alias of OCI-Lob::close()"
		},
		{
			"trigger": "ocicollappend()",
			"contents": "ocicollappend()",
			"kind": "function",
			"details": "Alias of OCI-Collection::append()"
		},
		{
			"trigger": "ocicollassign()",
			"contents": "ocicollassign()",
			"kind": "function",
			"details": "Alias of OCI-Collection::assign()"
		},
		{
			"trigger": "ocicollassignelem()",
			"contents": "ocicollassignelem()",
			"kind": "function",
			"details": "Alias of OCI-Collection::assignElem()"
		},
		{
			"trigger": "ocicollgetelem()",
			"contents": "ocicollgetelem()",
			"kind": "function",
			"details": "Alias of OCI-Collection::getElem()"
		},
		{
			"trigger": "ocicollmax()",
			"contents": "ocicollmax()",
			"kind": "function",
			"details": "Alias of OCI-Collection::max()"
		},
		{
			"trigger": "ocicollsize()",
			"contents": "ocicollsize()",
			"kind": "function",
			"details": "Alias of OCI-Collection::size()"
		},
		{
			"trigger": "ocicolltrim()",
			"contents": "ocicolltrim()",
			"kind": "function",
			"details": "Alias of OCI-Collection::trim()"
		},
		{
			"trigger": "ocicolumnisnull()",
			"contents": "ocicolumnisnull()",
			"kind": "function",
			"details": "Alias of oci_field_is_null()"
		},
		{
			"trigger": "ocicolumnname()",
			"contents": "ocicolumnname()",
			"kind": "function",
			"details": "Alias of oci_field_name()"
		},
		{
			"trigger": "ocicolumnprecision()",
			"contents": "ocicolumnprecision()",
			"kind": "function",
			"details": "Alias of oci_field_precision()"
		},
		{
			"trigger": "ocicolumnscale()",
			"contents": "ocicolumnscale()",
			"kind": "function",
			"details": "Alias of oci_field_scale()"
		},
		{
			"trigger": "ocicolumnsize()",
			"contents": "ocicolumnsize()",
			"kind": "function",
			"details": "Alias of oci_field_size()"
		},
		{
			"trigger": "ocicolumntype()",
			"contents": "ocicolumntype()",
			"kind": "function",
			"details": "Alias of oci_field_type()"
		},
		{
			"trigger": "ocicolumntyperaw()",
			"contents": "ocicolumntyperaw()",
			"kind": "function",
			"details": "Alias of oci_field_type_raw()"
		},
		{
			"trigger": "ocicommit()",
			"contents": "ocicommit()",
			"kind": "function",
			"details": "Alias of oci_commit()"
		},
		{
			"trigger": "ocidefinebyname()",
			"contents": "ocidefinebyname()",
			"kind": "function",
			"details": "Alias of oci_define_by_name()"
		},
		{
			"trigger": "ocierror()",
			"contents": "ocierror()",
			"kind": "function",
			"details": "Alias of oci_error()"
		},
		{
			"trigger": "ociexecute()",
			"contents": "ociexecute()",
			"kind": "function",
			"details": "Alias of oci_execute()"
		},
		{
			"trigger": "ocifetch()",
			"contents": "ocifetch()",
			"kind": "function",
			"details": "Alias of oci_fetch()"
		},
		{
			"trigger": "ocifetchinto()",
			"contents": "ocifetchinto(${1:statement}, ${2:result})",
			"kind": "function",
			"details": "Obsolete variant of oci_fetch_array(), oci_fetch_object(), oci_fetch_assoc() and oci_fetch_row()"
		},
		{
			"trigger": "ocifetchstatement()",
			"contents": "ocifetchstatement()",
			"kind": "function",
			"details": "Alias of oci_fetch_all()"
		},
		{
			"trigger": "ocifreecollection()",
			"contents": "ocifreecollection()",
			"kind": "function",
			"details": "Alias of OCI-Collection::free()"
		},
		{
			"trigger": "ocifreecursor()",
			"contents": "ocifreecursor()",
			"kind": "function",
			"details": "Alias of oci_free_statement()"
		},
		{
			"trigger": "ocifreedesc()",
			"contents": "ocifreedesc()",
			"kind": "function",
			"details": "Alias of OCI-Lob::free()"
		},
		{
			"trigger": "ocifreestatement()",
			"contents": "ocifreestatement()",
			"kind": "function",
			"details": "Alias of oci_free_statement()"
		},
		{
			"trigger": "ociinternaldebug()",
			"contents": "ociinternaldebug()",
			"kind": "function",
			"details": "Alias of oci_internal_debug()"
		},
		{
			"trigger": "ociloadlob()",
			"contents": "ociloadlob()",
			"kind": "function",
			"details": "Alias of OCI-Lob::load()"
		},
		{
			"trigger": "ocilogoff()",
			"contents": "ocilogoff()",
			"kind": "function",
			"details": "Alias of oci_close()"
		},
		{
			"trigger": "ocilogon()",
			"contents": "ocilogon()",
			"kind": "function",
			"details": "Alias of oci_connect()"
		},
		{
			"trigger": "ocinewcollection()",
			"contents": "ocinewcollection()",
			"kind": "function",
			"details": "Alias of oci_new_collection()"
		},
		{
			"trigger": "ocinewcursor()",
			"contents": "ocinewcursor()",
			"kind": "function",
			"details": "Alias of oci_new_cursor()"
		},
		{
			"trigger": "ocinewdescriptor()",
			"contents": "ocinewdescriptor()",
			"kind": "function",
			"details": "Alias of oci_new_descriptor()"
		},
		{
			"trigger": "ocinlogon()",
			"contents": "ocinlogon()",
			"kind": "function",
			"details": "Alias of oci_new_connect()"
		},
		{
			"trigger": "ocinumcols()",
			"contents": "ocinumcols()",
			"kind": "function",
			"details": "Alias of oci_num_fields()"
		},
		{
			"trigger": "ociparse()",
			"contents": "ociparse()",
			"kind": "function",
			"details": "Alias of oci_parse()"
		},
		{
			"trigger": "ociplogon()",
			"contents": "ociplogon()",
			"kind": "function",
			"details": "Alias of oci_pconnect()"
		},
		{
			"trigger": "ociresult()",
			"contents": "ociresult()",
			"kind": "function",
			"details": "Alias of oci_result()"
		},
		{
			"trigger": "ocirollback()",
			"contents": "ocirollback()",
			"kind": "function",
			"details": "Alias of oci_rollback()"
		},
		{
			"trigger": "ocirowcount()",
			"contents": "ocirowcount()",
			"kind": "function",
			"details": "Alias of oci_num_rows()"
		},
		{
			"trigger": "ocisavelob()",
			"contents": "ocisavelob()",
			"kind": "function",
			"details": "Alias of OCI-Lob::save()"
		},
		{
			"trigger": "ocisavelobfile()",
			"contents": "ocisavelobfile()",
			"kind": "function",
			"details": "Alias of OCI-Lob::import()"
		},
		{
			"trigger": "ociserverversion()",
			"contents": "ociserverversion()",
			"kind": "function",
			"details": "Alias of oci_server_version()"
		},
		{
			"trigger": "ocisetprefetch()",
			"contents": "ocisetprefetch()",
			"kind": "function",
			"details": "Alias of oci_set_prefetch()"
		},
		{
			"trigger": "ocistatementtype()",
			"contents": "ocistatementtype()",
			"kind": "function",
			"details": "Alias of oci_statement_type()"
		},
		{
			"trigger": "ociwritelobtofile()",
			"contents": "ociwritelobtofile()",
			"kind": "function",
			"details": "Alias of OCI-Lob::export()"
		},
		{
			"trigger": "ociwritetemporarylob()",
			"contents": "ociwritetemporarylob()",
			"kind": "function",
			"details": "Alias of OCI-Lob::writeTemporary()"
		},
		{
			"trigger": "octdec()",
			"contents": "octdec(${1:octal_string})",
			"kind": "function",
			"details": "Octal to decimal"
		},
		{
			"trigger": "odbc_autocommit()",
			"contents": "odbc_autocommit(${1:connection_id})",
			"kind": "function",
			"details": "Toggle autocommit behaviour"
		},
		{
			"trigger": "odbc_binmode()",
			"contents": "odbc_binmode(${1:result_id}, ${2:mode})",
			"kind": "function",
			"details": "Handling of binary column data"
		},
		{
			"trigger": "odbc_close()",
			"contents": "odbc_close(${1:connection_id})",
			"kind": "function",
			"details": "Close an ODBC connection"
		},
		{
			"trigger": "odbc_close_all()",
			"contents": "odbc_close_all()",
			"kind": "function",
			"details": "Close all ODBC connections"
		},
		{
			"trigger": "odbc_columnprivileges()",
			"contents": "odbc_columnprivileges(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:table_name}, ${5:column_name})",
			"kind": "function",
			"details": "Lists columns and associated privileges for the given table"
		},
		{
			"trigger": "odbc_columns()",
			"contents": "odbc_columns(${1:connection_id})",
			"kind": "function",
			"details": "Lists the column names in specified tables"
		},
		{
			"trigger": "odbc_commit()",
			"contents": "odbc_commit(${1:connection_id})",
			"kind": "function",
			"details": "Commit an ODBC transaction"
		},
		{
			"trigger": "odbc_connect()",
			"contents": "odbc_connect(${1:dsn}, ${2:user}, ${3:password})",
			"kind": "function",
			"details": "Connect to a datasource"
		},
		{
			"trigger": "odbc_cursor()",
			"contents": "odbc_cursor(${1:result_id})",
			"kind": "function",
			"details": "Get cursorname"
		},
		{
			"trigger": "odbc_data_source()",
			"contents": "odbc_data_source(${1:connection_id}, ${2:fetch_type})",
			"kind": "function",
			"details": "Returns information about a current connection"
		},
		{
			"trigger": "odbc_do()",
			"contents": "odbc_do()",
			"kind": "function",
			"details": "Alias of odbc_exec()"
		},
		{
			"trigger": "odbc_error()",
			"contents": "odbc_error()",
			"kind": "function",
			"details": "Get the last error code"
		},
		{
			"trigger": "odbc_errormsg()",
			"contents": "odbc_errormsg()",
			"kind": "function",
			"details": "Get the last error message"
		},
		{
			"trigger": "odbc_exec()",
			"contents": "odbc_exec(${1:connection_id}, ${2:query_string})",
			"kind": "function",
			"details": "Directly execute an SQL statement"
		},
		{
			"trigger": "odbc_execute()",
			"contents": "odbc_execute(${1:result_id})",
			"kind": "function",
			"details": "Execute a prepared statement"
		},
		{
			"trigger": "odbc_fetch_array()",
			"contents": "odbc_fetch_array(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an associative array"
		},
		{
			"trigger": "odbc_fetch_into()",
			"contents": "odbc_fetch_into(${1:result_id}, ${2:result_array})",
			"kind": "function",
			"details": "Fetch one result row into array"
		},
		{
			"trigger": "odbc_fetch_object()",
			"contents": "odbc_fetch_object(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an object"
		},
		{
			"trigger": "odbc_fetch_row()",
			"contents": "odbc_fetch_row(${1:result_id})",
			"kind": "function",
			"details": "Fetch a row"
		},
		{
			"trigger": "odbc_field_len()",
			"contents": "odbc_field_len(${1:result_id}, ${2:field_number})",
			"kind": "function",
			"details": "Get the length (precision) of a field"
		},
		{
			"trigger": "odbc_field_name()",
			"contents": "odbc_field_name(${1:result_id}, ${2:field_number})",
			"kind": "function",
			"details": "Get the columnname"
		},
		{
			"trigger": "odbc_field_num()",
			"contents": "odbc_field_num(${1:result_id}, ${2:field_name})",
			"kind": "function",
			"details": "Return column number"
		},
		{
			"trigger": "odbc_field_precision()",
			"contents": "odbc_field_precision()",
			"kind": "function",
			"details": "Alias of odbc_field_len()"
		},
		{
			"trigger": "odbc_field_scale()",
			"contents": "odbc_field_scale(${1:result_id}, ${2:field_number})",
			"kind": "function",
			"details": "Get the scale of a field"
		},
		{
			"trigger": "odbc_field_type()",
			"contents": "odbc_field_type(${1:result_id}, ${2:field_number})",
			"kind": "function",
			"details": "Datatype of a field"
		},
		{
			"trigger": "odbc_foreignkeys()",
			"contents": "odbc_foreignkeys(${1:connection_id}, ${2:pk_qualifier}, ${3:pk_owner}, ${4:pk_table}, ${5:fk_qualifier}, ${6:fk_owner}, ${7:fk_table})",
			"kind": "function",
			"details": "Retrieves a list of foreign keys"
		},
		{
			"trigger": "odbc_free_result()",
			"contents": "odbc_free_result(${1:result_id})",
			"kind": "function",
			"details": "Free resources associated with a result"
		},
		{
			"trigger": "odbc_gettypeinfo()",
			"contents": "odbc_gettypeinfo(${1:connection_id})",
			"kind": "function",
			"details": "Retrieves information about data types supported by the data source"
		},
		{
			"trigger": "odbc_longreadlen()",
			"contents": "odbc_longreadlen(${1:result_id}, ${2:length})",
			"kind": "function",
			"details": "Handling of LONG columns"
		},
		{
			"trigger": "odbc_next_result()",
			"contents": "odbc_next_result(${1:result_id})",
			"kind": "function",
			"details": "Checks if multiple results are available"
		},
		{
			"trigger": "odbc_num_fields()",
			"contents": "odbc_num_fields(${1:result_id})",
			"kind": "function",
			"details": "Number of columns in a result"
		},
		{
			"trigger": "odbc_num_rows()",
			"contents": "odbc_num_rows(${1:result_id})",
			"kind": "function",
			"details": "Number of rows in a result"
		},
		{
			"trigger": "odbc_pconnect()",
			"contents": "odbc_pconnect(${1:dsn}, ${2:user}, ${3:password})",
			"kind": "function",
			"details": "Open a persistent database connection"
		},
		{
			"trigger": "odbc_prepare()",
			"contents": "odbc_prepare(${1:connection_id}, ${2:query_string})",
			"kind": "function",
			"details": "Prepares a statement for execution"
		},
		{
			"trigger": "odbc_primarykeys()",
			"contents": "odbc_primarykeys(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:table})",
			"kind": "function",
			"details": "Gets the primary keys for a table"
		},
		{
			"trigger": "odbc_procedurecolumns()",
			"contents": "odbc_procedurecolumns(${1:connection_id})",
			"kind": "function",
			"details": "Retrieve information about parameters to procedures"
		},
		{
			"trigger": "odbc_procedures()",
			"contents": "odbc_procedures(${1:connection_id})",
			"kind": "function",
			"details": "Get the list of procedures stored in a specific data source"
		},
		{
			"trigger": "odbc_result()",
			"contents": "odbc_result(${1:result_id}, ${2:field})",
			"kind": "function",
			"details": "Get result data"
		},
		{
			"trigger": "odbc_result_all()",
			"contents": "odbc_result_all(${1:result_id})",
			"kind": "function",
			"details": "Print result as HTML table"
		},
		{
			"trigger": "odbc_rollback()",
			"contents": "odbc_rollback(${1:connection_id})",
			"kind": "function",
			"details": "Rollback a transaction"
		},
		{
			"trigger": "odbc_setoption()",
			"contents": "odbc_setoption(${1:id}, ${2:function}, ${3:option}, ${4:param})",
			"kind": "function",
			"details": "Adjust ODBC settings"
		},
		{
			"trigger": "odbc_specialcolumns()",
			"contents": "odbc_specialcolumns(${1:connection_id}, ${2:type}, ${3:qualifier}, ${4:owner}, ${5:table}, ${6:scope}, ${7:nullable})",
			"kind": "function",
			"details": "Retrieves special columns"
		},
		{
			"trigger": "odbc_statistics()",
			"contents": "odbc_statistics(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:table_name}, ${5:unique}, ${6:accuracy})",
			"kind": "function",
			"details": "Retrieve statistics about a table"
		},
		{
			"trigger": "odbc_tableprivileges()",
			"contents": "odbc_tableprivileges(${1:connection_id}, ${2:qualifier}, ${3:owner}, ${4:name})",
			"kind": "function",
			"details": "Lists tables and the privileges associated with each table"
		},
		{
			"trigger": "odbc_tables()",
			"contents": "odbc_tables(${1:connection_id})",
			"kind": "function",
			"details": "Get the list of table names stored in a specific data source"
		},
		{
			"trigger": "openal_buffer_create()",
			"contents": "openal_buffer_create()",
			"kind": "function",
			"details": "Generate OpenAL buffer"
		},
		{
			"trigger": "openal_buffer_data()",
			"contents": "openal_buffer_data(${1:buffer}, ${2:format}, ${3:data}, ${4:freq})",
			"kind": "function",
			"details": "Load a buffer with data"
		},
		{
			"trigger": "openal_buffer_destroy()",
			"contents": "openal_buffer_destroy(${1:buffer})",
			"kind": "function",
			"details": "Destroys an OpenAL buffer"
		},
		{
			"trigger": "openal_buffer_get()",
			"contents": "openal_buffer_get(${1:buffer}, ${2:property})",
			"kind": "function",
			"details": "Retrieve an OpenAL buffer property"
		},
		{
			"trigger": "openal_buffer_loadwav()",
			"contents": "openal_buffer_loadwav(${1:buffer}, ${2:wavfile})",
			"kind": "function",
			"details": "Load a .wav file into a buffer"
		},
		{
			"trigger": "openal_context_create()",
			"contents": "openal_context_create(${1:device})",
			"kind": "function",
			"details": "Create an audio processing context"
		},
		{
			"trigger": "openal_context_current()",
			"contents": "openal_context_current(${1:context})",
			"kind": "function",
			"details": "Make the specified context current"
		},
		{
			"trigger": "openal_context_destroy()",
			"contents": "openal_context_destroy(${1:context})",
			"kind": "function",
			"details": "Destroys a context"
		},
		{
			"trigger": "openal_context_process()",
			"contents": "openal_context_process(${1:context})",
			"kind": "function",
			"details": "Process the specified context"
		},
		{
			"trigger": "openal_context_suspend()",
			"contents": "openal_context_suspend(${1:context})",
			"kind": "function",
			"details": "Suspend the specified context"
		},
		{
			"trigger": "openal_device_close()",
			"contents": "openal_device_close(${1:device})",
			"kind": "function",
			"details": "Close an OpenAL device"
		},
		{
			"trigger": "openal_device_open()",
			"contents": "openal_device_open()",
			"kind": "function",
			"details": "Initialize the OpenAL audio layer"
		},
		{
			"trigger": "openal_listener_get()",
			"contents": "openal_listener_get(${1:property})",
			"kind": "function",
			"details": "Retrieve a listener property"
		},
		{
			"trigger": "openal_listener_set()",
			"contents": "openal_listener_set(${1:property}, ${2:setting})",
			"kind": "function",
			"details": "Set a listener property"
		},
		{
			"trigger": "openal_source_create()",
			"contents": "openal_source_create()",
			"kind": "function",
			"details": "Generate a source resource"
		},
		{
			"trigger": "openal_source_destroy()",
			"contents": "openal_source_destroy(${1:source})",
			"kind": "function",
			"details": "Destroy a source resource"
		},
		{
			"trigger": "openal_source_get()",
			"contents": "openal_source_get(${1:source}, ${2:property})",
			"kind": "function",
			"details": "Retrieve an OpenAL source property"
		},
		{
			"trigger": "openal_source_pause()",
			"contents": "openal_source_pause(${1:source})",
			"kind": "function",
			"details": "Pause the source"
		},
		{
			"trigger": "openal_source_play()",
			"contents": "openal_source_play(${1:source})",
			"kind": "function",
			"details": "Start playing the source"
		},
		{
			"trigger": "openal_source_rewind()",
			"contents": "openal_source_rewind(${1:source})",
			"kind": "function",
			"details": "Rewind the source"
		},
		{
			"trigger": "openal_source_set()",
			"contents": "openal_source_set(${1:source}, ${2:property}, ${3:setting})",
			"kind": "function",
			"details": "Set source property"
		},
		{
			"trigger": "openal_source_stop()",
			"contents": "openal_source_stop(${1:source})",
			"kind": "function",
			"details": "Stop playing the source"
		},
		{
			"trigger": "openal_stream()",
			"contents": "openal_stream(${1:source}, ${2:format}, ${3:rate})",
			"kind": "function",
			"details": "Begin streaming on a source"
		},
		{
			"trigger": "opendir()",
			"contents": "opendir(${1:path})",
			"kind": "function",
			"details": "Open directory handle"
		},
		{
			"trigger": "openlog()",
			"contents": "openlog(${1:ident}, ${2:option}, ${3:facility})",
			"kind": "function",
			"details": "Open connection to system logger"
		},
		{
			"trigger": "openssl_csr_export()",
			"contents": "openssl_csr_export(${1:csr}, ${2:out})",
			"kind": "function",
			"details": "Exports a CSR as a string"
		},
		{
			"trigger": "openssl_csr_export_to_file()",
			"contents": "openssl_csr_export_to_file(${1:csr}, ${2:outfilename})",
			"kind": "function",
			"details": "Exports a CSR to a file"
		},
		{
			"trigger": "openssl_csr_get_public_key()",
			"contents": "openssl_csr_get_public_key(${1:csr})",
			"kind": "function",
			"details": "Returns the public key of a CSR"
		},
		{
			"trigger": "openssl_csr_get_subject()",
			"contents": "openssl_csr_get_subject(${1:csr})",
			"kind": "function",
			"details": "Returns the subject of a CSR"
		},
		{
			"trigger": "openssl_csr_new()",
			"contents": "openssl_csr_new(${1:dn}, ${2:privkey})",
			"kind": "function",
			"details": "Generates a CSR"
		},
		{
			"trigger": "openssl_csr_sign()",
			"contents": "openssl_csr_sign(${1:csr}, ${2:cacert}, ${3:priv_key}, ${4:days})",
			"kind": "function",
			"details": "Sign a CSR with another certificate (or itself) and generate a certificate"
		},
		{
			"trigger": "openssl_decrypt()",
			"contents": "openssl_decrypt(${1:data}, ${2:method}, ${3:password})",
			"kind": "function",
			"details": "Decrypts data"
		},
		{
			"trigger": "openssl_dh_compute_key()",
			"contents": "openssl_dh_compute_key(${1:pub_key}, ${2:dh_key})",
			"kind": "function",
			"details": "Computes shared secret for public value of remote DH public key and local DH key"
		},
		{
			"trigger": "openssl_digest()",
			"contents": "openssl_digest(${1:data}, ${2:method})",
			"kind": "function",
			"details": "Computes a digest"
		},
		{
			"trigger": "openssl_encrypt()",
			"contents": "openssl_encrypt(${1:data}, ${2:method}, ${3:password})",
			"kind": "function",
			"details": "Encrypts data"
		},
		{
			"trigger": "openssl_error_string()",
			"contents": "openssl_error_string()",
			"kind": "function",
			"details": "Return openSSL error message"
		},
		{
			"trigger": "openssl_free_key()",
			"contents": "openssl_free_key(${1:key_identifier})",
			"kind": "function",
			"details": "Free key resource"
		},
		{
			"trigger": "openssl_get_cipher_methods()",
			"contents": "openssl_get_cipher_methods()",
			"kind": "function",
			"details": "Gets available cipher methods"
		},
		{
			"trigger": "openssl_get_md_methods()",
			"contents": "openssl_get_md_methods()",
			"kind": "function",
			"details": "Gets available digest methods"
		},
		{
			"trigger": "openssl_get_privatekey()",
			"contents": "openssl_get_privatekey()",
			"kind": "function",
			"details": "Alias of openssl_pkey_get_private()"
		},
		{
			"trigger": "openssl_get_publickey()",
			"contents": "openssl_get_publickey()",
			"kind": "function",
			"details": "Alias of openssl_pkey_get_public()"
		},
		{
			"trigger": "openssl_open()",
			"contents": "openssl_open(${1:sealed_data}, ${2:open_data}, ${3:env_key}, ${4:priv_key_id})",
			"kind": "function",
			"details": "Open sealed data"
		},
		{
			"trigger": "openssl_pkcs12_export()",
			"contents": "openssl_pkcs12_export(${1:x509}, ${2:out}, ${3:priv_key}, ${4:pass})",
			"kind": "function",
			"details": "Exports a PKCS#12 Compatible Certificate Store File to variable"
		},
		{
			"trigger": "openssl_pkcs12_export_to_file()",
			"contents": "openssl_pkcs12_export_to_file(${1:x509}, ${2:filename}, ${3:priv_key}, ${4:pass})",
			"kind": "function",
			"details": "Exports a PKCS#12 Compatible Certificate Store File"
		},
		{
			"trigger": "openssl_pkcs12_read()",
			"contents": "openssl_pkcs12_read(${1:pkcs12}, ${2:certs}, ${3:pass})",
			"kind": "function",
			"details": "Parse a PKCS#12 Certificate Store into an array"
		},
		{
			"trigger": "openssl_pkcs7_decrypt()",
			"contents": "openssl_pkcs7_decrypt(${1:infilename}, ${2:outfilename}, ${3:recipcert})",
			"kind": "function",
			"details": "Decrypts an S/MIME encrypted message"
		},
		{
			"trigger": "openssl_pkcs7_encrypt()",
			"contents": "openssl_pkcs7_encrypt(${1:infile}, ${2:outfile}, ${3:recipcerts}, ${4:headers})",
			"kind": "function",
			"details": "Encrypt an S/MIME message"
		},
		{
			"trigger": "openssl_pkcs7_sign()",
			"contents": "openssl_pkcs7_sign(${1:infilename}, ${2:outfilename}, ${3:signcert}, ${4:privkey}, ${5:headers})",
			"kind": "function",
			"details": "Sign an S/MIME message"
		},
		{
			"trigger": "openssl_pkcs7_verify()",
			"contents": "openssl_pkcs7_verify(${1:filename}, ${2:flags})",
			"kind": "function",
			"details": "Verifies the signature of an S/MIME signed message"
		},
		{
			"trigger": "openssl_pkey_export()",
			"contents": "openssl_pkey_export(${1:key}, ${2:out})",
			"kind": "function",
			"details": "Gets an exportable representation of a key into a string"
		},
		{
			"trigger": "openssl_pkey_export_to_file()",
			"contents": "openssl_pkey_export_to_file(${1:key}, ${2:outfilename})",
			"kind": "function",
			"details": "Gets an exportable representation of a key into a file"
		},
		{
			"trigger": "openssl_pkey_free()",
			"contents": "openssl_pkey_free(${1:key})",
			"kind": "function",
			"details": "Frees a private key"
		},
		{
			"trigger": "openssl_pkey_get_details()",
			"contents": "openssl_pkey_get_details(${1:key})",
			"kind": "function",
			"details": "Returns an array with the key details"
		},
		{
			"trigger": "openssl_pkey_get_private()",
			"contents": "openssl_pkey_get_private(${1:key})",
			"kind": "function",
			"details": "Get a private key"
		},
		{
			"trigger": "openssl_pkey_get_public()",
			"contents": "openssl_pkey_get_public(${1:certificate})",
			"kind": "function",
			"details": "Extract public key from certificate and prepare it for use"
		},
		{
			"trigger": "openssl_pkey_new()",
			"contents": "openssl_pkey_new()",
			"kind": "function",
			"details": "Generates a new private key"
		},
		{
			"trigger": "openssl_private_decrypt()",
			"contents": "openssl_private_decrypt(${1:data}, ${2:decrypted}, ${3:key})",
			"kind": "function",
			"details": "Decrypts data with private key"
		},
		{
			"trigger": "openssl_private_encrypt()",
			"contents": "openssl_private_encrypt(${1:data}, ${2:crypted}, ${3:key})",
			"kind": "function",
			"details": "Encrypts data with private key"
		},
		{
			"trigger": "openssl_public_decrypt()",
			"contents": "openssl_public_decrypt(${1:data}, ${2:decrypted}, ${3:key})",
			"kind": "function",
			"details": "Decrypts data with public key"
		},
		{
			"trigger": "openssl_public_encrypt()",
			"contents": "openssl_public_encrypt(${1:data}, ${2:crypted}, ${3:key})",
			"kind": "function",
			"details": "Encrypts data with public key"
		},
		{
			"trigger": "openssl_random_pseudo_bytes()",
			"contents": "openssl_random_pseudo_bytes(${1:length})",
			"kind": "function",
			"details": "Generate a pseudo-random string of bytes"
		},
		{
			"trigger": "openssl_seal()",
			"contents": "openssl_seal(${1:data}, ${2:sealed_data}, ${3:env_keys}, ${4:pub_key_ids})",
			"kind": "function",
			"details": "Seal (encrypt) data"
		},
		{
			"trigger": "openssl_sign()",
			"contents": "openssl_sign(${1:data}, ${2:signature}, ${3:priv_key_id})",
			"kind": "function",
			"details": "Generate signature"
		},
		{
			"trigger": "openssl_verify()",
			"contents": "openssl_verify(${1:data}, ${2:signature}, ${3:pub_key_id})",
			"kind": "function",
			"details": "Verify signature"
		},
		{
			"trigger": "openssl_x509_check_private_key()",
			"contents": "openssl_x509_check_private_key(${1:cert}, ${2:key})",
			"kind": "function",
			"details": "Checks if a private key corresponds to a certificate"
		},
		{
			"trigger": "openssl_x509_checkpurpose()",
			"contents": "openssl_x509_checkpurpose(${1:x509cert}, ${2:purpose})",
			"kind": "function",
			"details": "Verifies if a certificate can be used for a particular purpose"
		},
		{
			"trigger": "openssl_x509_export()",
			"contents": "openssl_x509_export(${1:x509}, ${2:output})",
			"kind": "function",
			"details": "Exports a certificate as a string"
		},
		{
			"trigger": "openssl_x509_export_to_file()",
			"contents": "openssl_x509_export_to_file(${1:x509}, ${2:outfilename})",
			"kind": "function",
			"details": "Exports a certificate to file"
		},
		{
			"trigger": "openssl_x509_free()",
			"contents": "openssl_x509_free(${1:x509cert})",
			"kind": "function",
			"details": "Free certificate resource"
		},
		{
			"trigger": "openssl_x509_parse()",
			"contents": "openssl_x509_parse(${1:x509cert})",
			"kind": "function",
			"details": "Parse an X509 certificate and return the information as an array"
		},
		{
			"trigger": "openssl_x509_read()",
			"contents": "openssl_x509_read(${1:x509certdata})",
			"kind": "function",
			"details": "Parse an X.509 certificate and return a resource identifier for it"
		},
		{
			"trigger": "ord()",
			"contents": "ord(${1:string})",
			"kind": "function",
			"details": "Convert the first byte of a string to a value between 0 and 255"
		},
		{
			"trigger": "output_add_rewrite_var()",
			"contents": "output_add_rewrite_var(${1:name}, ${2:value})",
			"kind": "function",
			"details": "Add URL rewriter values"
		},
		{
			"trigger": "output_reset_rewrite_vars()",
			"contents": "output_reset_rewrite_vars()",
			"kind": "function",
			"details": "Reset URL rewriter values"
		},
		{
			"trigger": "overload()",
			"contents": "overload(${1:class_name})",
			"kind": "function"
		},
		{
			"trigger": "override_function()",
			"contents": "override_function(${1:function_name}, ${2:function_args}, ${3:function_code})",
			"kind": "function",
			"details": "Overrides built-in functions"
		},
		{
			"trigger": "ovrimos_close()",
			"contents": "ovrimos_close(${1:connection})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_commit()",
			"contents": "ovrimos_commit(${1:connection_id})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_connect()",
			"contents": "ovrimos_connect(${1:host}, ${2:dborport}, ${3:user}, ${4:password})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_cursor()",
			"contents": "ovrimos_cursor(${1:result_id})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_exec()",
			"contents": "ovrimos_exec(${1:connection_id}, ${2:query})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_execute()",
			"contents": "ovrimos_execute(${1:result_id})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_fetch_into()",
			"contents": "ovrimos_fetch_into(${1:result_id}, ${2:result_array})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_fetch_row()",
			"contents": "ovrimos_fetch_row(${1:result_id})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_field_len()",
			"contents": "ovrimos_field_len(${1:result_id}, ${2:field_number})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_field_name()",
			"contents": "ovrimos_field_name(${1:result_id}, ${2:field_number})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_field_num()",
			"contents": "ovrimos_field_num(${1:result_id}, ${2:field_name})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_field_type()",
			"contents": "ovrimos_field_type(${1:result_id}, ${2:field_number})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_free_result()",
			"contents": "ovrimos_free_result(${1:result_id})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_longreadlen()",
			"contents": "ovrimos_longreadlen(${1:result_id}, ${2:length})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_num_fields()",
			"contents": "ovrimos_num_fields(${1:result_id})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_num_rows()",
			"contents": "ovrimos_num_rows(${1:result_id})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_prepare()",
			"contents": "ovrimos_prepare(${1:connection_id}, ${2:query})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_result()",
			"contents": "ovrimos_result(${1:result_id}, ${2:field})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_result_all()",
			"contents": "ovrimos_result_all(${1:result_id})",
			"kind": "function"
		},
		{
			"trigger": "ovrimos_rollback()",
			"contents": "ovrimos_rollback(${1:connection_id})",
			"kind": "function"
		},
		{
			"trigger": "pack()",
			"contents": "pack(${1:format})",
			"kind": "function",
			"details": "Pack data into binary string"
		},
		{
			"trigger": "parse_ini_file()",
			"contents": "parse_ini_file(${1:filename})",
			"kind": "function",
			"details": "Parse a configuration file"
		},
		{
			"trigger": "parse_ini_string()",
			"contents": "parse_ini_string(${1:ini})",
			"kind": "function",
			"details": "Parse a configuration string"
		},
		{
			"trigger": "parse_str()",
			"contents": "parse_str(${1:str})",
			"kind": "function",
			"details": "Parses the string into variables"
		},
		{
			"trigger": "parse_url()",
			"contents": "parse_url(${1:url})",
			"kind": "function",
			"details": "Parse a URL and return its components"
		},
		{
			"trigger": "parsekit_compile_file()",
			"contents": "parsekit_compile_file(${1:filename})",
			"kind": "function",
			"details": "Compile a PHP file and return the resulting op array"
		},
		{
			"trigger": "parsekit_compile_string()",
			"contents": "parsekit_compile_string(${1:phpcode})",
			"kind": "function",
			"details": "Compile a string of PHP code and return the resulting op array"
		},
		{
			"trigger": "parsekit_func_arginfo()",
			"contents": "parsekit_func_arginfo(${1:function})",
			"kind": "function",
			"details": "Return information regarding function argument(s)"
		},
		{
			"trigger": "passthru()",
			"contents": "passthru(${1:command})",
			"kind": "function",
			"details": "Execute an external program and display raw output"
		},
		{
			"trigger": "pathinfo()",
			"contents": "pathinfo(${1:path})",
			"kind": "function",
			"details": "Returns information about a file path"
		},
		{
			"trigger": "pclose()",
			"contents": "pclose(${1:handle})",
			"kind": "function",
			"details": "Closes process file pointer"
		},
		{
			"trigger": "pcntl_alarm()",
			"contents": "pcntl_alarm(${1:seconds})",
			"kind": "function",
			"details": "Set an alarm clock for delivery of a signal"
		},
		{
			"trigger": "pcntl_exec()",
			"contents": "pcntl_exec(${1:path})",
			"kind": "function",
			"details": "Executes specified program in current process space"
		},
		{
			"trigger": "pcntl_fork()",
			"contents": "pcntl_fork()",
			"kind": "function",
			"details": "Forks the currently running process"
		},
		{
			"trigger": "pcntl_getpriority()",
			"contents": "pcntl_getpriority()",
			"kind": "function",
			"details": "Get the priority of any process"
		},
		{
			"trigger": "pcntl_setpriority()",
			"contents": "pcntl_setpriority(${1:priority})",
			"kind": "function",
			"details": "Change the priority of any process"
		},
		{
			"trigger": "pcntl_signal()",
			"contents": "pcntl_signal(${1:signo}, ${2:handler})",
			"kind": "function",
			"details": "Installs a signal handler"
		},
		{
			"trigger": "pcntl_signal_dispatch()",
			"contents": "pcntl_signal_dispatch()",
			"kind": "function",
			"details": "Calls signal handlers for pending signals"
		},
		{
			"trigger": "pcntl_sigprocmask()",
			"contents": "pcntl_sigprocmask(${1:how}, ${2:set})",
			"kind": "function",
			"details": "Sets and retrieves blocked signals"
		},
		{
			"trigger": "pcntl_sigtimedwait()",
			"contents": "pcntl_sigtimedwait(${1:set})",
			"kind": "function",
			"details": "Waits for signals, with a timeout"
		},
		{
			"trigger": "pcntl_sigwaitinfo()",
			"contents": "pcntl_sigwaitinfo(${1:set})",
			"kind": "function",
			"details": "Waits for signals"
		},
		{
			"trigger": "pcntl_wait()",
			"contents": "pcntl_wait(${1:status})",
			"kind": "function",
			"details": "Waits on or returns the status of a forked child"
		},
		{
			"trigger": "pcntl_waitpid()",
			"contents": "pcntl_waitpid(${1:pid}, ${2:status})",
			"kind": "function",
			"details": "Waits on or returns the status of a forked child"
		},
		{
			"trigger": "pcntl_wexitstatus()",
			"contents": "pcntl_wexitstatus(${1:status})",
			"kind": "function",
			"details": "Returns the return code of a terminated child"
		},
		{
			"trigger": "pcntl_wifexited()",
			"contents": "pcntl_wifexited(${1:status})",
			"kind": "function",
			"details": "Checks if status code represents a normal exit"
		},
		{
			"trigger": "pcntl_wifsignaled()",
			"contents": "pcntl_wifsignaled(${1:status})",
			"kind": "function",
			"details": "Checks whether the status code represents a termination due to a signal"
		},
		{
			"trigger": "pcntl_wifstopped()",
			"contents": "pcntl_wifstopped(${1:status})",
			"kind": "function",
			"details": "Checks whether the child process is currently stopped"
		},
		{
			"trigger": "pcntl_wstopsig()",
			"contents": "pcntl_wstopsig(${1:status})",
			"kind": "function",
			"details": "Returns the signal which caused the child to stop"
		},
		{
			"trigger": "pcntl_wtermsig()",
			"contents": "pcntl_wtermsig(${1:status})",
			"kind": "function",
			"details": "Returns the signal which caused the child to terminate"
		},
		{
			"trigger": "PDF_activate_item()",
			"contents": "PDF_activate_item(${1:pdfdoc}, ${2:id})",
			"kind": "function",
			"details": "Activate structure element or other content item"
		},
		{
			"trigger": "PDF_add_annotation()",
			"contents": "PDF_add_annotation()",
			"kind": "function",
			"details": "Add annotation [deprecated]"
		},
		{
			"trigger": "PDF_add_bookmark()",
			"contents": "PDF_add_bookmark()",
			"kind": "function",
			"details": "Add bookmark for current page [deprecated]"
		},
		{
			"trigger": "PDF_add_launchlink()",
			"contents": "PDF_add_launchlink(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename})",
			"kind": "function",
			"details": "Add launch annotation for current page [deprecated]"
		},
		{
			"trigger": "PDF_add_locallink()",
			"contents": "PDF_add_locallink(${1:pdfdoc}, ${2:lowerleftx}, ${3:lowerlefty}, ${4:upperrightx}, ${5:upperrighty}, ${6:page}, ${7:dest})",
			"kind": "function",
			"details": "Add link annotation for current page [deprecated]"
		},
		{
			"trigger": "PDF_add_nameddest()",
			"contents": "PDF_add_nameddest(${1:pdfdoc}, ${2:name}, ${3:optlist})",
			"kind": "function",
			"details": "Create named destination"
		},
		{
			"trigger": "PDF_add_note()",
			"contents": "PDF_add_note(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:contents}, ${7:title}, ${8:icon}, ${9:open})",
			"kind": "function",
			"details": "Set annotation for current page [deprecated]"
		},
		{
			"trigger": "PDF_add_outline()",
			"contents": "PDF_add_outline()",
			"kind": "function",
			"details": "Add bookmark for current page [deprecated]"
		},
		{
			"trigger": "PDF_add_pdflink()",
			"contents": "PDF_add_pdflink(${1:pdfdoc}, ${2:bottom_left_x}, ${3:bottom_left_y}, ${4:up_right_x}, ${5:up_right_y}, ${6:filename}, ${7:page}, ${8:dest})",
			"kind": "function",
			"details": "Add file link annotation for current page [deprecated]"
		},
		{
			"trigger": "PDF_add_table_cell()",
			"contents": "PDF_add_table_cell(${1:pdfdoc}, ${2:table}, ${3:column}, ${4:row}, ${5:text}, ${6:optlist})",
			"kind": "function",
			"details": "Add a cell to a new or existing table"
		},
		{
			"trigger": "PDF_add_textflow()",
			"contents": "PDF_add_textflow(${1:pdfdoc}, ${2:textflow}, ${3:text}, ${4:optlist})",
			"kind": "function",
			"details": "Create Textflow or add text to existing Textflow"
		},
		{
			"trigger": "PDF_add_thumbnail()",
			"contents": "PDF_add_thumbnail(${1:pdfdoc}, ${2:image})",
			"kind": "function",
			"details": "Add thumbnail for current page"
		},
		{
			"trigger": "PDF_add_weblink()",
			"contents": "PDF_add_weblink(${1:pdfdoc}, ${2:lowerleftx}, ${3:lowerlefty}, ${4:upperrightx}, ${5:upperrighty}, ${6:url})",
			"kind": "function",
			"details": "Add weblink for current page [deprecated]"
		},
		{
			"trigger": "PDF_arc()",
			"contents": "PDF_arc(${1:p}, ${2:x}, ${3:y}, ${4:r}, ${5:alpha}, ${6:beta})",
			"kind": "function",
			"details": "Draw a counterclockwise circular arc segment"
		},
		{
			"trigger": "PDF_arcn()",
			"contents": "PDF_arcn(${1:p}, ${2:x}, ${3:y}, ${4:r}, ${5:alpha}, ${6:beta})",
			"kind": "function",
			"details": "Draw a clockwise circular arc segment"
		},
		{
			"trigger": "PDF_attach_file()",
			"contents": "PDF_attach_file(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename}, ${7:description}, ${8:author}, ${9:mimetype}, ${10:icon})",
			"kind": "function",
			"details": "Add file attachment for current page [deprecated]"
		},
		{
			"trigger": "PDF_begin_document()",
			"contents": "PDF_begin_document(${1:pdfdoc}, ${2:filename}, ${3:optlist})",
			"kind": "function",
			"details": "Create new PDF file"
		},
		{
			"trigger": "PDF_begin_font()",
			"contents": "PDF_begin_font(${1:pdfdoc}, ${2:filename}, ${3:a}, ${4:b}, ${5:c}, ${6:d}, ${7:e}, ${8:f}, ${9:optlist})",
			"kind": "function",
			"details": "Start a Type 3 font definition"
		},
		{
			"trigger": "PDF_begin_glyph()",
			"contents": "PDF_begin_glyph(${1:pdfdoc}, ${2:glyphname}, ${3:wx}, ${4:llx}, ${5:lly}, ${6:urx}, ${7:ury})",
			"kind": "function",
			"details": "Start glyph definition for Type 3 font"
		},
		{
			"trigger": "PDF_begin_item()",
			"contents": "PDF_begin_item(${1:pdfdoc}, ${2:tag}, ${3:optlist})",
			"kind": "function",
			"details": "Open structure element or other content item"
		},
		{
			"trigger": "PDF_begin_layer()",
			"contents": "PDF_begin_layer(${1:pdfdoc}, ${2:layer})",
			"kind": "function",
			"details": "Start layer"
		},
		{
			"trigger": "PDF_begin_page()",
			"contents": "PDF_begin_page(${1:pdfdoc}, ${2:width}, ${3:height})",
			"kind": "function",
			"details": "Start new page [deprecated]"
		},
		{
			"trigger": "PDF_begin_page_ext()",
			"contents": "PDF_begin_page_ext(${1:pdfdoc}, ${2:width}, ${3:height}, ${4:optlist})",
			"kind": "function",
			"details": "Start new page"
		},
		{
			"trigger": "PDF_begin_pattern()",
			"contents": "PDF_begin_pattern(${1:pdfdoc}, ${2:width}, ${3:height}, ${4:xstep}, ${5:ystep}, ${6:painttype})",
			"kind": "function",
			"details": "Start pattern definition"
		},
		{
			"trigger": "PDF_begin_template()",
			"contents": "PDF_begin_template(${1:pdfdoc}, ${2:width}, ${3:height})",
			"kind": "function",
			"details": "Start template definition [deprecated]"
		},
		{
			"trigger": "PDF_begin_template_ext()",
			"contents": "PDF_begin_template_ext(${1:pdfdoc}, ${2:width}, ${3:height}, ${4:optlist})",
			"kind": "function",
			"details": "Start template definition"
		},
		{
			"trigger": "PDF_circle()",
			"contents": "PDF_circle(${1:pdfdoc}, ${2:x}, ${3:y}, ${4:r})",
			"kind": "function",
			"details": "Draw a circle"
		},
		{
			"trigger": "PDF_clip()",
			"contents": "PDF_clip(${1:p})",
			"kind": "function",
			"details": "Clip to current path"
		},
		{
			"trigger": "PDF_close()",
			"contents": "PDF_close(${1:p})",
			"kind": "function",
			"details": "Close pdf resource [deprecated]"
		},
		{
			"trigger": "PDF_close_image()",
			"contents": "PDF_close_image(${1:p}, ${2:image})",
			"kind": "function",
			"details": "Close image"
		},
		{
			"trigger": "PDF_close_pdi()",
			"contents": "PDF_close_pdi(${1:p}, ${2:doc})",
			"kind": "function",
			"details": "Close the input PDF document [deprecated]"
		},
		{
			"trigger": "PDF_close_pdi_page()",
			"contents": "PDF_close_pdi_page(${1:p}, ${2:page})",
			"kind": "function",
			"details": "Close the page handle"
		},
		{
			"trigger": "PDF_closepath()",
			"contents": "PDF_closepath(${1:p})",
			"kind": "function",
			"details": "Close current path"
		},
		{
			"trigger": "PDF_closepath_fill_stroke()",
			"contents": "PDF_closepath_fill_stroke(${1:p})",
			"kind": "function",
			"details": "Close, fill and stroke current path"
		},
		{
			"trigger": "PDF_closepath_stroke()",
			"contents": "PDF_closepath_stroke(${1:p})",
			"kind": "function",
			"details": "Close and stroke path"
		},
		{
			"trigger": "PDF_concat()",
			"contents": "PDF_concat(${1:p}, ${2:a}, ${3:b}, ${4:c}, ${5:d}, ${6:e}, ${7:f})",
			"kind": "function",
			"details": "Concatenate a matrix to the CTM"
		},
		{
			"trigger": "PDF_continue_text()",
			"contents": "PDF_continue_text(${1:p}, ${2:text})",
			"kind": "function",
			"details": "Output text in next line"
		},
		{
			"trigger": "PDF_create_3dview()",
			"contents": "PDF_create_3dview(${1:pdfdoc}, ${2:username}, ${3:optlist})",
			"kind": "function",
			"details": "Create 3D view"
		},
		{
			"trigger": "PDF_create_action()",
			"contents": "PDF_create_action(${1:pdfdoc}, ${2:type}, ${3:optlist})",
			"kind": "function",
			"details": "Create action for objects or events"
		},
		{
			"trigger": "PDF_create_annotation()",
			"contents": "PDF_create_annotation(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:type}, ${7:optlist})",
			"kind": "function",
			"details": "Create rectangular annotation"
		},
		{
			"trigger": "PDF_create_bookmark()",
			"contents": "PDF_create_bookmark(${1:pdfdoc}, ${2:text}, ${3:optlist})",
			"kind": "function",
			"details": "Create bookmark"
		},
		{
			"trigger": "PDF_create_field()",
			"contents": "PDF_create_field(${1:pdfdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:name}, ${7:type}, ${8:optlist})",
			"kind": "function",
			"details": "Create form field"
		},
		{
			"trigger": "PDF_create_fieldgroup()",
			"contents": "PDF_create_fieldgroup(${1:pdfdoc}, ${2:name}, ${3:optlist})",
			"kind": "function",
			"details": "Create form field group"
		},
		{
			"trigger": "PDF_create_gstate()",
			"contents": "PDF_create_gstate(${1:pdfdoc}, ${2:optlist})",
			"kind": "function",
			"details": "Create graphics state object"
		},
		{
			"trigger": "PDF_create_pvf()",
			"contents": "PDF_create_pvf(${1:pdfdoc}, ${2:filename}, ${3:data}, ${4:optlist})",
			"kind": "function",
			"details": "Create PDFlib virtual file"
		},
		{
			"trigger": "PDF_create_textflow()",
			"contents": "PDF_create_textflow(${1:pdfdoc}, ${2:text}, ${3:optlist})",
			"kind": "function",
			"details": "Create textflow object"
		},
		{
			"trigger": "PDF_curveto()",
			"contents": "PDF_curveto(${1:p}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:x3}, ${7:y3})",
			"kind": "function",
			"details": "Draw Bezier curve"
		},
		{
			"trigger": "PDF_define_layer()",
			"contents": "PDF_define_layer(${1:pdfdoc}, ${2:name}, ${3:optlist})",
			"kind": "function",
			"details": "Create layer definition"
		},
		{
			"trigger": "PDF_delete()",
			"contents": "PDF_delete(${1:pdfdoc})",
			"kind": "function",
			"details": "Delete PDFlib object"
		},
		{
			"trigger": "PDF_delete_pvf()",
			"contents": "PDF_delete_pvf(${1:pdfdoc}, ${2:filename})",
			"kind": "function",
			"details": "Delete PDFlib virtual file"
		},
		{
			"trigger": "PDF_delete_table()",
			"contents": "PDF_delete_table(${1:pdfdoc}, ${2:table}, ${3:optlist})",
			"kind": "function",
			"details": "Delete table object"
		},
		{
			"trigger": "PDF_delete_textflow()",
			"contents": "PDF_delete_textflow(${1:pdfdoc}, ${2:textflow})",
			"kind": "function",
			"details": "Delete textflow object"
		},
		{
			"trigger": "PDF_encoding_set_char()",
			"contents": "PDF_encoding_set_char(${1:pdfdoc}, ${2:encoding}, ${3:slot}, ${4:glyphname}, ${5:uv})",
			"kind": "function",
			"details": "Add glyph name and/or Unicode value"
		},
		{
			"trigger": "PDF_end_document()",
			"contents": "PDF_end_document(${1:pdfdoc}, ${2:optlist})",
			"kind": "function",
			"details": "Close PDF file"
		},
		{
			"trigger": "PDF_end_font()",
			"contents": "PDF_end_font(${1:pdfdoc})",
			"kind": "function",
			"details": "Terminate Type 3 font definition"
		},
		{
			"trigger": "PDF_end_glyph()",
			"contents": "PDF_end_glyph(${1:pdfdoc})",
			"kind": "function",
			"details": "Terminate glyph definition for Type 3 font"
		},
		{
			"trigger": "PDF_end_item()",
			"contents": "PDF_end_item(${1:pdfdoc}, ${2:id})",
			"kind": "function",
			"details": "Close structure element or other content item"
		},
		{
			"trigger": "PDF_end_layer()",
			"contents": "PDF_end_layer(${1:pdfdoc})",
			"kind": "function",
			"details": "Deactivate all active layers"
		},
		{
			"trigger": "PDF_end_page()",
			"contents": "PDF_end_page(${1:p})",
			"kind": "function",
			"details": "Finish page"
		},
		{
			"trigger": "PDF_end_page_ext()",
			"contents": "PDF_end_page_ext(${1:pdfdoc}, ${2:optlist})",
			"kind": "function",
			"details": "Finish page"
		},
		{
			"trigger": "PDF_end_pattern()",
			"contents": "PDF_end_pattern(${1:p})",
			"kind": "function",
			"details": "Finish pattern"
		},
		{
			"trigger": "PDF_end_template()",
			"contents": "PDF_end_template(${1:p})",
			"kind": "function",
			"details": "Finish template"
		},
		{
			"trigger": "PDF_endpath()",
			"contents": "PDF_endpath(${1:p})",
			"kind": "function",
			"details": "End current path"
		},
		{
			"trigger": "PDF_fill()",
			"contents": "PDF_fill(${1:p})",
			"kind": "function",
			"details": "Fill current path"
		},
		{
			"trigger": "PDF_fill_imageblock()",
			"contents": "PDF_fill_imageblock(${1:pdfdoc}, ${2:page}, ${3:blockname}, ${4:image}, ${5:optlist})",
			"kind": "function",
			"details": "Fill image block with variable data"
		},
		{
			"trigger": "PDF_fill_pdfblock()",
			"contents": "PDF_fill_pdfblock(${1:pdfdoc}, ${2:page}, ${3:blockname}, ${4:contents}, ${5:optlist})",
			"kind": "function",
			"details": "Fill PDF block with variable data"
		},
		{
			"trigger": "PDF_fill_stroke()",
			"contents": "PDF_fill_stroke(${1:p})",
			"kind": "function",
			"details": "Fill and stroke path"
		},
		{
			"trigger": "PDF_fill_textblock()",
			"contents": "PDF_fill_textblock(${1:pdfdoc}, ${2:page}, ${3:blockname}, ${4:text}, ${5:optlist})",
			"kind": "function",
			"details": "Fill text block with variable data"
		},
		{
			"trigger": "PDF_findfont()",
			"contents": "PDF_findfont(${1:p}, ${2:fontname}, ${3:encoding}, ${4:embed})",
			"kind": "function",
			"details": "Prepare font for later use [deprecated]"
		},
		{
			"trigger": "PDF_fit_image()",
			"contents": "PDF_fit_image(${1:pdfdoc}, ${2:image}, ${3:x}, ${4:y}, ${5:optlist})",
			"kind": "function",
			"details": "Place image or template"
		},
		{
			"trigger": "PDF_fit_pdi_page()",
			"contents": "PDF_fit_pdi_page(${1:pdfdoc}, ${2:page}, ${3:x}, ${4:y}, ${5:optlist})",
			"kind": "function",
			"details": "Place imported PDF page"
		},
		{
			"trigger": "PDF_fit_table()",
			"contents": "PDF_fit_table(${1:pdfdoc}, ${2:table}, ${3:llx}, ${4:lly}, ${5:urx}, ${6:ury}, ${7:optlist})",
			"kind": "function",
			"details": "Place table on page"
		},
		{
			"trigger": "PDF_fit_textflow()",
			"contents": "PDF_fit_textflow(${1:pdfdoc}, ${2:textflow}, ${3:llx}, ${4:lly}, ${5:urx}, ${6:ury}, ${7:optlist})",
			"kind": "function",
			"details": "Format textflow in rectangular area"
		},
		{
			"trigger": "PDF_fit_textline()",
			"contents": "PDF_fit_textline(${1:pdfdoc}, ${2:text}, ${3:x}, ${4:y}, ${5:optlist})",
			"kind": "function",
			"details": "Place single line of text"
		},
		{
			"trigger": "PDF_get_apiname()",
			"contents": "PDF_get_apiname(${1:pdfdoc})",
			"kind": "function",
			"details": "Get name of unsuccessfull API function"
		},
		{
			"trigger": "PDF_get_buffer()",
			"contents": "PDF_get_buffer(${1:p})",
			"kind": "function",
			"details": "Get PDF output buffer"
		},
		{
			"trigger": "PDF_get_errmsg()",
			"contents": "PDF_get_errmsg(${1:pdfdoc})",
			"kind": "function",
			"details": "Get error text"
		},
		{
			"trigger": "PDF_get_errnum()",
			"contents": "PDF_get_errnum(${1:pdfdoc})",
			"kind": "function",
			"details": "Get error number"
		},
		{
			"trigger": "PDF_get_font()",
			"contents": "PDF_get_font()",
			"kind": "function",
			"details": "Get font [deprecated]"
		},
		{
			"trigger": "PDF_get_fontname()",
			"contents": "PDF_get_fontname()",
			"kind": "function",
			"details": "Get font name [deprecated]"
		},
		{
			"trigger": "PDF_get_fontsize()",
			"contents": "PDF_get_fontsize()",
			"kind": "function",
			"details": "Font handling [deprecated]"
		},
		{
			"trigger": "PDF_get_image_height()",
			"contents": "PDF_get_image_height()",
			"kind": "function",
			"details": "Get image height [deprecated]"
		},
		{
			"trigger": "PDF_get_image_width()",
			"contents": "PDF_get_image_width()",
			"kind": "function",
			"details": "Get image width [deprecated]"
		},
		{
			"trigger": "PDF_get_majorversion()",
			"contents": "PDF_get_majorversion()",
			"kind": "function",
			"details": "Get major version number [deprecated]"
		},
		{
			"trigger": "PDF_get_minorversion()",
			"contents": "PDF_get_minorversion()",
			"kind": "function",
			"details": "Get minor version number [deprecated]"
		},
		{
			"trigger": "PDF_get_parameter()",
			"contents": "PDF_get_parameter(${1:p}, ${2:key}, ${3:modifier})",
			"kind": "function",
			"details": "Get string parameter"
		},
		{
			"trigger": "PDF_get_pdi_parameter()",
			"contents": "PDF_get_pdi_parameter(${1:p}, ${2:key}, ${3:doc}, ${4:page}, ${5:reserved})",
			"kind": "function",
			"details": "Get PDI string parameter [deprecated]"
		},
		{
			"trigger": "PDF_get_pdi_value()",
			"contents": "PDF_get_pdi_value(${1:p}, ${2:key}, ${3:doc}, ${4:page}, ${5:reserved})",
			"kind": "function",
			"details": "Get PDI numerical parameter [deprecated]"
		},
		{
			"trigger": "PDF_get_value()",
			"contents": "PDF_get_value(${1:p}, ${2:key}, ${3:modifier})",
			"kind": "function",
			"details": "Get numerical parameter"
		},
		{
			"trigger": "PDF_info_font()",
			"contents": "PDF_info_font(${1:pdfdoc}, ${2:font}, ${3:keyword}, ${4:optlist})",
			"kind": "function",
			"details": "Query detailed information about a loaded font"
		},
		{
			"trigger": "PDF_info_matchbox()",
			"contents": "PDF_info_matchbox(${1:pdfdoc}, ${2:boxname}, ${3:num}, ${4:keyword})",
			"kind": "function",
			"details": "Query matchbox information"
		},
		{
			"trigger": "PDF_info_table()",
			"contents": "PDF_info_table(${1:pdfdoc}, ${2:table}, ${3:keyword})",
			"kind": "function",
			"details": "Retrieve table information"
		},
		{
			"trigger": "PDF_info_textflow()",
			"contents": "PDF_info_textflow(${1:pdfdoc}, ${2:textflow}, ${3:keyword})",
			"kind": "function",
			"details": "Query textflow state"
		},
		{
			"trigger": "PDF_info_textline()",
			"contents": "PDF_info_textline(${1:pdfdoc}, ${2:text}, ${3:keyword}, ${4:optlist})",
			"kind": "function",
			"details": "Perform textline formatting and query metrics"
		},
		{
			"trigger": "PDF_initgraphics()",
			"contents": "PDF_initgraphics(${1:p})",
			"kind": "function",
			"details": "Reset graphic state"
		},
		{
			"trigger": "PDF_lineto()",
			"contents": "PDF_lineto(${1:p}, ${2:x}, ${3:y})",
			"kind": "function",
			"details": "Draw a line"
		},
		{
			"trigger": "PDF_load_3ddata()",
			"contents": "PDF_load_3ddata(${1:pdfdoc}, ${2:filename}, ${3:optlist})",
			"kind": "function",
			"details": "Load 3D model"
		},
		{
			"trigger": "PDF_load_font()",
			"contents": "PDF_load_font(${1:pdfdoc}, ${2:fontname}, ${3:encoding}, ${4:optlist})",
			"kind": "function",
			"details": "Search and prepare font"
		},
		{
			"trigger": "PDF_load_iccprofile()",
			"contents": "PDF_load_iccprofile(${1:pdfdoc}, ${2:profilename}, ${3:optlist})",
			"kind": "function",
			"details": "Search and prepare ICC profile"
		},
		{
			"trigger": "PDF_load_image()",
			"contents": "PDF_load_image(${1:pdfdoc}, ${2:imagetype}, ${3:filename}, ${4:optlist})",
			"kind": "function",
			"details": "Open image file"
		},
		{
			"trigger": "PDF_makespotcolor()",
			"contents": "PDF_makespotcolor(${1:p}, ${2:spotname})",
			"kind": "function",
			"details": "Make spot color"
		},
		{
			"trigger": "PDF_moveto()",
			"contents": "PDF_moveto(${1:p}, ${2:x}, ${3:y})",
			"kind": "function",
			"details": "Set current point"
		},
		{
			"trigger": "PDF_new()",
			"contents": "PDF_new()",
			"kind": "function",
			"details": "Create PDFlib object"
		},
		{
			"trigger": "PDF_open_ccitt()",
			"contents": "PDF_open_ccitt(${1:pdfdoc}, ${2:filename}, ${3:width}, ${4:height}, ${5:BitReverse}, ${6:k}, ${7:Blackls1})",
			"kind": "function",
			"details": "Open raw CCITT image [deprecated]"
		},
		{
			"trigger": "PDF_open_file()",
			"contents": "PDF_open_file(${1:p}, ${2:filename})",
			"kind": "function",
			"details": "Create PDF file [deprecated]"
		},
		{
			"trigger": "PDF_open_gif()",
			"contents": "PDF_open_gif()",
			"kind": "function",
			"details": "Open GIF image [deprecated]"
		},
		{
			"trigger": "PDF_open_image()",
			"contents": "PDF_open_image(${1:p}, ${2:imagetype}, ${3:source}, ${4:data}, ${5:length}, ${6:width}, ${7:height}, ${8:components}, ${9:bpc}, ${10:params})",
			"kind": "function",
			"details": "Use image data [deprecated]"
		},
		{
			"trigger": "PDF_open_image_file()",
			"contents": "PDF_open_image_file(${1:p}, ${2:imagetype}, ${3:filename}, ${4:stringparam}, ${5:intparam})",
			"kind": "function",
			"details": "Read image from file [deprecated]"
		},
		{
			"trigger": "PDF_open_jpeg()",
			"contents": "PDF_open_jpeg()",
			"kind": "function",
			"details": "Open JPEG image [deprecated]"
		},
		{
			"trigger": "PDF_open_memory_image()",
			"contents": "PDF_open_memory_image(${1:p}, ${2:image})",
			"kind": "function",
			"details": "Open image created with PHP's image functions [not supported]"
		},
		{
			"trigger": "PDF_open_pdi()",
			"contents": "PDF_open_pdi(${1:pdfdoc}, ${2:filename}, ${3:optlist}, ${4:len})",
			"kind": "function",
			"details": "Open PDF file [deprecated]"
		},
		{
			"trigger": "PDF_open_pdi_document()",
			"contents": "PDF_open_pdi_document(${1:p}, ${2:filename}, ${3:optlist})",
			"kind": "function",
			"details": "Prepare a pdi document"
		},
		{
			"trigger": "PDF_open_pdi_page()",
			"contents": "PDF_open_pdi_page(${1:p}, ${2:doc}, ${3:pagenumber}, ${4:optlist})",
			"kind": "function",
			"details": "Prepare a page"
		},
		{
			"trigger": "PDF_open_tiff()",
			"contents": "PDF_open_tiff()",
			"kind": "function",
			"details": "Open TIFF image [deprecated]"
		},
		{
			"trigger": "PDF_pcos_get_number()",
			"contents": "PDF_pcos_get_number(${1:p}, ${2:doc}, ${3:path})",
			"kind": "function",
			"details": "Get value of pCOS path with type number or boolean"
		},
		{
			"trigger": "PDF_pcos_get_stream()",
			"contents": "PDF_pcos_get_stream(${1:p}, ${2:doc}, ${3:optlist}, ${4:path})",
			"kind": "function",
			"details": "Get contents of pCOS path with type stream, fstream, or string"
		},
		{
			"trigger": "PDF_pcos_get_string()",
			"contents": "PDF_pcos_get_string(${1:p}, ${2:doc}, ${3:path})",
			"kind": "function",
			"details": "Get value of pCOS path with type name, string, or boolean"
		},
		{
			"trigger": "PDF_place_image()",
			"contents": "PDF_place_image(${1:pdfdoc}, ${2:image}, ${3:x}, ${4:y}, ${5:scale})",
			"kind": "function",
			"details": "Place image on the page [deprecated]"
		},
		{
			"trigger": "PDF_place_pdi_page()",
			"contents": "PDF_place_pdi_page(${1:pdfdoc}, ${2:page}, ${3:x}, ${4:y}, ${5:sx}, ${6:sy})",
			"kind": "function",
			"details": "Place PDF page [deprecated]"
		},
		{
			"trigger": "PDF_process_pdi()",
			"contents": "PDF_process_pdi(${1:pdfdoc}, ${2:doc}, ${3:page}, ${4:optlist})",
			"kind": "function",
			"details": "Process imported PDF document"
		},
		{
			"trigger": "PDF_rect()",
			"contents": "PDF_rect(${1:p}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
			"kind": "function",
			"details": "Draw rectangle"
		},
		{
			"trigger": "PDF_restore()",
			"contents": "PDF_restore(${1:p})",
			"kind": "function",
			"details": "Restore graphics state"
		},
		{
			"trigger": "PDF_resume_page()",
			"contents": "PDF_resume_page(${1:pdfdoc}, ${2:optlist})",
			"kind": "function",
			"details": "Resume page"
		},
		{
			"trigger": "PDF_rotate()",
			"contents": "PDF_rotate(${1:p}, ${2:phi})",
			"kind": "function",
			"details": "Rotate coordinate system"
		},
		{
			"trigger": "PDF_save()",
			"contents": "PDF_save(${1:p})",
			"kind": "function",
			"details": "Save graphics state"
		},
		{
			"trigger": "PDF_scale()",
			"contents": "PDF_scale(${1:p}, ${2:sx}, ${3:sy})",
			"kind": "function",
			"details": "Scale coordinate system"
		},
		{
			"trigger": "PDF_set_border_color()",
			"contents": "PDF_set_border_color(${1:p}, ${2:red}, ${3:green}, ${4:blue})",
			"kind": "function",
			"details": "Set border color of annotations [deprecated]"
		},
		{
			"trigger": "PDF_set_border_dash()",
			"contents": "PDF_set_border_dash(${1:pdfdoc}, ${2:black}, ${3:white})",
			"kind": "function",
			"details": "Set border dash style of annotations [deprecated]"
		},
		{
			"trigger": "PDF_set_border_style()",
			"contents": "PDF_set_border_style(${1:pdfdoc}, ${2:style}, ${3:width})",
			"kind": "function",
			"details": "Set border style of annotations [deprecated]"
		},
		{
			"trigger": "PDF_set_char_spacing()",
			"contents": "PDF_set_char_spacing()",
			"kind": "function",
			"details": "Set character spacing [deprecated]"
		},
		{
			"trigger": "PDF_set_duration()",
			"contents": "PDF_set_duration()",
			"kind": "function",
			"details": "Set duration between pages [deprecated]"
		},
		{
			"trigger": "PDF_set_gstate()",
			"contents": "PDF_set_gstate(${1:pdfdoc}, ${2:gstate})",
			"kind": "function",
			"details": "Activate graphics state object"
		},
		{
			"trigger": "PDF_set_horiz_scaling()",
			"contents": "PDF_set_horiz_scaling()",
			"kind": "function",
			"details": "Set horizontal text scaling [deprecated]"
		},
		{
			"trigger": "PDF_set_info()",
			"contents": "PDF_set_info(${1:p}, ${2:key}, ${3:value})",
			"kind": "function",
			"details": "Fill document info field"
		},
		{
			"trigger": "PDF_set_info_author()",
			"contents": "PDF_set_info_author()",
			"kind": "function",
			"details": "Fill the author document info field [deprecated]"
		},
		{
			"trigger": "PDF_set_info_creator()",
			"contents": "PDF_set_info_creator()",
			"kind": "function",
			"details": "Fill the creator document info field [deprecated]"
		},
		{
			"trigger": "PDF_set_info_keywords()",
			"contents": "PDF_set_info_keywords()",
			"kind": "function",
			"details": "Fill the keywords document info field [deprecated]"
		},
		{
			"trigger": "PDF_set_info_subject()",
			"contents": "PDF_set_info_subject()",
			"kind": "function",
			"details": "Fill the subject document info field [deprecated]"
		},
		{
			"trigger": "PDF_set_info_title()",
			"contents": "PDF_set_info_title()",
			"kind": "function",
			"details": "Fill the title document info field [deprecated]"
		},
		{
			"trigger": "PDF_set_layer_dependency()",
			"contents": "PDF_set_layer_dependency(${1:pdfdoc}, ${2:type}, ${3:optlist})",
			"kind": "function",
			"details": "Define relationships among layers"
		},
		{
			"trigger": "PDF_set_leading()",
			"contents": "PDF_set_leading()",
			"kind": "function",
			"details": "Set distance between text lines [deprecated]"
		},
		{
			"trigger": "PDF_set_parameter()",
			"contents": "PDF_set_parameter(${1:p}, ${2:key}, ${3:value})",
			"kind": "function",
			"details": "Set string parameter"
		},
		{
			"trigger": "PDF_set_text_matrix()",
			"contents": "PDF_set_text_matrix()",
			"kind": "function",
			"details": "Set text matrix [deprecated]"
		},
		{
			"trigger": "PDF_set_text_pos()",
			"contents": "PDF_set_text_pos(${1:p}, ${2:x}, ${3:y})",
			"kind": "function",
			"details": "Set text position"
		},
		{
			"trigger": "PDF_set_text_rendering()",
			"contents": "PDF_set_text_rendering()",
			"kind": "function",
			"details": "Determine text rendering [deprecated]"
		},
		{
			"trigger": "PDF_set_text_rise()",
			"contents": "PDF_set_text_rise()",
			"kind": "function",
			"details": "Set text rise [deprecated]"
		},
		{
			"trigger": "PDF_set_value()",
			"contents": "PDF_set_value(${1:p}, ${2:key}, ${3:value})",
			"kind": "function",
			"details": "Set numerical parameter"
		},
		{
			"trigger": "PDF_set_word_spacing()",
			"contents": "PDF_set_word_spacing()",
			"kind": "function",
			"details": "Set spacing between words [deprecated]"
		},
		{
			"trigger": "PDF_setcolor()",
			"contents": "PDF_setcolor(${1:p}, ${2:fstype}, ${3:colorspace}, ${4:c1}, ${5:c2}, ${6:c3}, ${7:c4})",
			"kind": "function",
			"details": "Set fill and stroke color"
		},
		{
			"trigger": "PDF_setdash()",
			"contents": "PDF_setdash(${1:pdfdoc}, ${2:b}, ${3:w})",
			"kind": "function",
			"details": "Set simple dash pattern"
		},
		{
			"trigger": "PDF_setdashpattern()",
			"contents": "PDF_setdashpattern(${1:pdfdoc}, ${2:optlist})",
			"kind": "function",
			"details": "Set dash pattern"
		},
		{
			"trigger": "PDF_setflat()",
			"contents": "PDF_setflat(${1:pdfdoc}, ${2:flatness})",
			"kind": "function",
			"details": "Set flatness"
		},
		{
			"trigger": "PDF_setfont()",
			"contents": "PDF_setfont(${1:pdfdoc}, ${2:font}, ${3:fontsize})",
			"kind": "function",
			"details": "Set font"
		},
		{
			"trigger": "PDF_setgray()",
			"contents": "PDF_setgray(${1:p}, ${2:g})",
			"kind": "function",
			"details": "Set color to gray [deprecated]"
		},
		{
			"trigger": "PDF_setgray_fill()",
			"contents": "PDF_setgray_fill(${1:p}, ${2:g})",
			"kind": "function",
			"details": "Set fill color to gray [deprecated]"
		},
		{
			"trigger": "PDF_setgray_stroke()",
			"contents": "PDF_setgray_stroke(${1:p}, ${2:g})",
			"kind": "function",
			"details": "Set stroke color to gray [deprecated]"
		},
		{
			"trigger": "PDF_setlinecap()",
			"contents": "PDF_setlinecap(${1:p}, ${2:linecap})",
			"kind": "function",
			"details": "Set linecap parameter"
		},
		{
			"trigger": "PDF_setlinejoin()",
			"contents": "PDF_setlinejoin(${1:p}, ${2:value})",
			"kind": "function",
			"details": "Set linejoin parameter"
		},
		{
			"trigger": "PDF_setlinewidth()",
			"contents": "PDF_setlinewidth(${1:p}, ${2:width})",
			"kind": "function",
			"details": "Set line width"
		},
		{
			"trigger": "PDF_setmatrix()",
			"contents": "PDF_setmatrix(${1:p}, ${2:a}, ${3:b}, ${4:c}, ${5:d}, ${6:e}, ${7:f})",
			"kind": "function",
			"details": "Set current transformation matrix"
		},
		{
			"trigger": "PDF_setmiterlimit()",
			"contents": "PDF_setmiterlimit(${1:pdfdoc}, ${2:miter})",
			"kind": "function",
			"details": "Set miter limit"
		},
		{
			"trigger": "PDF_setpolydash()",
			"contents": "PDF_setpolydash()",
			"kind": "function",
			"details": "Set complicated dash pattern [deprecated]"
		},
		{
			"trigger": "PDF_setrgbcolor()",
			"contents": "PDF_setrgbcolor(${1:p}, ${2:red}, ${3:green}, ${4:blue})",
			"kind": "function",
			"details": "Set fill and stroke rgb color values [deprecated]"
		},
		{
			"trigger": "PDF_setrgbcolor_fill()",
			"contents": "PDF_setrgbcolor_fill(${1:p}, ${2:red}, ${3:green}, ${4:blue})",
			"kind": "function",
			"details": "Set fill rgb color values [deprecated]"
		},
		{
			"trigger": "PDF_setrgbcolor_stroke()",
			"contents": "PDF_setrgbcolor_stroke(${1:p}, ${2:red}, ${3:green}, ${4:blue})",
			"kind": "function",
			"details": "Set stroke rgb color values [deprecated]"
		},
		{
			"trigger": "PDF_shading()",
			"contents": "PDF_shading(${1:pdfdoc}, ${2:shtype}, ${3:x0}, ${4:y0}, ${5:x1}, ${6:y1}, ${7:c1}, ${8:c2}, ${9:c3}, ${10:c4}, ${11:optlist})",
			"kind": "function",
			"details": "Define blend"
		},
		{
			"trigger": "PDF_shading_pattern()",
			"contents": "PDF_shading_pattern(${1:pdfdoc}, ${2:shading}, ${3:optlist})",
			"kind": "function",
			"details": "Define shading pattern"
		},
		{
			"trigger": "PDF_shfill()",
			"contents": "PDF_shfill(${1:pdfdoc}, ${2:shading})",
			"kind": "function",
			"details": "Fill area with shading"
		},
		{
			"trigger": "PDF_show()",
			"contents": "PDF_show(${1:pdfdoc}, ${2:text})",
			"kind": "function",
			"details": "Output text at current position"
		},
		{
			"trigger": "PDF_show_boxed()",
			"contents": "PDF_show_boxed(${1:p}, ${2:text}, ${3:left}, ${4:top}, ${5:width}, ${6:height}, ${7:mode}, ${8:feature})",
			"kind": "function",
			"details": "Output text in a box [deprecated]"
		},
		{
			"trigger": "PDF_show_xy()",
			"contents": "PDF_show_xy(${1:p}, ${2:text}, ${3:x}, ${4:y})",
			"kind": "function",
			"details": "Output text at given position"
		},
		{
			"trigger": "PDF_skew()",
			"contents": "PDF_skew(${1:p}, ${2:alpha}, ${3:beta})",
			"kind": "function",
			"details": "Skew the coordinate system"
		},
		{
			"trigger": "PDF_stringwidth()",
			"contents": "PDF_stringwidth(${1:p}, ${2:text}, ${3:font}, ${4:fontsize})",
			"kind": "function",
			"details": "Return width of text"
		},
		{
			"trigger": "PDF_stroke()",
			"contents": "PDF_stroke(${1:p})",
			"kind": "function",
			"details": "Stroke path"
		},
		{
			"trigger": "PDF_suspend_page()",
			"contents": "PDF_suspend_page(${1:pdfdoc}, ${2:optlist})",
			"kind": "function",
			"details": "Suspend page"
		},
		{
			"trigger": "PDF_translate()",
			"contents": "PDF_translate(${1:p}, ${2:tx}, ${3:ty})",
			"kind": "function",
			"details": "Set origin of coordinate system"
		},
		{
			"trigger": "PDF_utf16_to_utf8()",
			"contents": "PDF_utf16_to_utf8(${1:pdfdoc}, ${2:utf16string})",
			"kind": "function",
			"details": "Convert string from UTF-16 to UTF-8"
		},
		{
			"trigger": "PDF_utf32_to_utf16()",
			"contents": "PDF_utf32_to_utf16(${1:pdfdoc}, ${2:utf32string}, ${3:ordering})",
			"kind": "function",
			"details": "Convert string from UTF-32 to UTF-16"
		},
		{
			"trigger": "PDF_utf8_to_utf16()",
			"contents": "PDF_utf8_to_utf16(${1:pdfdoc}, ${2:utf8string}, ${3:ordering})",
			"kind": "function",
			"details": "Convert string from UTF-8 to UTF-16"
		},
		{
			"trigger": "pfsockopen()",
			"contents": "pfsockopen(${1:hostname})",
			"kind": "function",
			"details": "Open persistent Internet or Unix domain socket connection"
		},
		{
			"trigger": "pg_affected_rows()",
			"contents": "pg_affected_rows(${1:result})",
			"kind": "function",
			"details": "Returns number of affected records (tuples)"
		},
		{
			"trigger": "pg_cancel_query()",
			"contents": "pg_cancel_query(${1:connection})",
			"kind": "function",
			"details": "Cancel an asynchronous query"
		},
		{
			"trigger": "pg_client_encoding()",
			"contents": "pg_client_encoding()",
			"kind": "function",
			"details": "Gets the client encoding"
		},
		{
			"trigger": "pg_close()",
			"contents": "pg_close()",
			"kind": "function",
			"details": "Closes a PostgreSQL connection"
		},
		{
			"trigger": "pg_connect()",
			"contents": "pg_connect(${1:connection_string})",
			"kind": "function",
			"details": "Open a PostgreSQL connection"
		},
		{
			"trigger": "pg_connection_busy()",
			"contents": "pg_connection_busy(${1:connection})",
			"kind": "function",
			"details": "Get connection is busy or not"
		},
		{
			"trigger": "pg_connection_reset()",
			"contents": "pg_connection_reset(${1:connection})",
			"kind": "function",
			"details": "Reset connection (reconnect)"
		},
		{
			"trigger": "pg_connection_status()",
			"contents": "pg_connection_status(${1:connection})",
			"kind": "function",
			"details": "Get connection status"
		},
		{
			"trigger": "pg_convert()",
			"contents": "pg_convert(${1:connection}, ${2:table_name}, ${3:assoc_array})",
			"kind": "function",
			"details": "Convert associative array values into forms suitable for SQL statements"
		},
		{
			"trigger": "pg_copy_from()",
			"contents": "pg_copy_from(${1:connection}, ${2:table_name}, ${3:rows})",
			"kind": "function",
			"details": "Insert records into a table from an array"
		},
		{
			"trigger": "pg_copy_to()",
			"contents": "pg_copy_to(${1:connection}, ${2:table_name})",
			"kind": "function",
			"details": "Copy a table to an array"
		},
		{
			"trigger": "pg_dbname()",
			"contents": "pg_dbname()",
			"kind": "function",
			"details": "Get the database name"
		},
		{
			"trigger": "pg_delete()",
			"contents": "pg_delete(${1:connection}, ${2:table_name}, ${3:assoc_array})",
			"kind": "function",
			"details": "Deletes records"
		},
		{
			"trigger": "pg_end_copy()",
			"contents": "pg_end_copy()",
			"kind": "function",
			"details": "Sync with PostgreSQL backend"
		},
		{
			"trigger": "pg_escape_bytea()",
			"contents": "pg_escape_bytea()",
			"kind": "function",
			"details": "Escape a string for insertion into a bytea field"
		},
		{
			"trigger": "pg_escape_string()",
			"contents": "pg_escape_string()",
			"kind": "function",
			"details": "Escape a string for query"
		},
		{
			"trigger": "pg_execute()",
			"contents": "pg_execute()",
			"kind": "function",
			"details": "Sends a request to execute a prepared statement with given parameters, and waits for the result"
		},
		{
			"trigger": "pg_fetch_all()",
			"contents": "pg_fetch_all(${1:result})",
			"kind": "function",
			"details": "Fetches all rows from a result as an array"
		},
		{
			"trigger": "pg_fetch_all_columns()",
			"contents": "pg_fetch_all_columns(${1:result})",
			"kind": "function",
			"details": "Fetches all rows in a particular result column as an array"
		},
		{
			"trigger": "pg_fetch_array()",
			"contents": "pg_fetch_array(${1:result})",
			"kind": "function",
			"details": "Fetch a row as an array"
		},
		{
			"trigger": "pg_fetch_assoc()",
			"contents": "pg_fetch_assoc(${1:result})",
			"kind": "function",
			"details": "Fetch a row as an associative array"
		},
		{
			"trigger": "pg_fetch_object()",
			"contents": "pg_fetch_object(${1:result})",
			"kind": "function",
			"details": "Fetch a row as an object"
		},
		{
			"trigger": "pg_fetch_result()",
			"contents": "pg_fetch_result(${1:result}, ${2:row}, ${3:field})",
			"kind": "function",
			"details": "Returns values from a result resource"
		},
		{
			"trigger": "pg_fetch_row()",
			"contents": "pg_fetch_row(${1:result})",
			"kind": "function",
			"details": "Get a row as an enumerated array"
		},
		{
			"trigger": "pg_field_is_null()",
			"contents": "pg_field_is_null(${1:result}, ${2:row}, ${3:field})",
			"kind": "function",
			"details": "Test if a field is SQL NULL"
		},
		{
			"trigger": "pg_field_name()",
			"contents": "pg_field_name(${1:result}, ${2:field_number})",
			"kind": "function",
			"details": "Returns the name of a field"
		},
		{
			"trigger": "pg_field_num()",
			"contents": "pg_field_num(${1:result}, ${2:field_name})",
			"kind": "function",
			"details": "Returns the field number of the named field"
		},
		{
			"trigger": "pg_field_prtlen()",
			"contents": "pg_field_prtlen(${1:result}, ${2:row_number}, ${3:field_name_or_number})",
			"kind": "function",
			"details": "Returns the printed length"
		},
		{
			"trigger": "pg_field_size()",
			"contents": "pg_field_size(${1:result}, ${2:field_number})",
			"kind": "function",
			"details": "Returns the internal storage size of the named field"
		},
		{
			"trigger": "pg_field_table()",
			"contents": "pg_field_table(${1:result}, ${2:field_number})",
			"kind": "function",
			"details": "Returns the name or oid of the tables field"
		},
		{
			"trigger": "pg_field_type()",
			"contents": "pg_field_type(${1:result}, ${2:field_number})",
			"kind": "function",
			"details": "Returns the type name for the corresponding field number"
		},
		{
			"trigger": "pg_field_type_oid()",
			"contents": "pg_field_type_oid(${1:result}, ${2:field_number})",
			"kind": "function",
			"details": "Returns the type ID (OID) for the corresponding field number"
		},
		{
			"trigger": "pg_free_result()",
			"contents": "pg_free_result(${1:result})",
			"kind": "function",
			"details": "Free result memory"
		},
		{
			"trigger": "pg_get_notify()",
			"contents": "pg_get_notify(${1:connection})",
			"kind": "function",
			"details": "Gets SQL NOTIFY message"
		},
		{
			"trigger": "pg_get_pid()",
			"contents": "pg_get_pid(${1:connection})",
			"kind": "function",
			"details": "Gets the backend's process ID"
		},
		{
			"trigger": "pg_get_result()",
			"contents": "pg_get_result()",
			"kind": "function",
			"details": "Get asynchronous query result"
		},
		{
			"trigger": "pg_host()",
			"contents": "pg_host()",
			"kind": "function",
			"details": "Returns the host name associated with the connection"
		},
		{
			"trigger": "pg_insert()",
			"contents": "pg_insert(${1:connection}, ${2:table_name}, ${3:assoc_array})",
			"kind": "function",
			"details": "Insert array into table"
		},
		{
			"trigger": "pg_last_error()",
			"contents": "pg_last_error()",
			"kind": "function",
			"details": "Get the last error message string of a connection"
		},
		{
			"trigger": "pg_last_notice()",
			"contents": "pg_last_notice(${1:connection})",
			"kind": "function",
			"details": "Returns the last notice message from PostgreSQL server"
		},
		{
			"trigger": "pg_last_oid()",
			"contents": "pg_last_oid(${1:result})",
			"kind": "function",
			"details": "Returns the last row's OID"
		},
		{
			"trigger": "pg_lo_close()",
			"contents": "pg_lo_close(${1:large_object})",
			"kind": "function",
			"details": "Close a large object"
		},
		{
			"trigger": "pg_lo_create()",
			"contents": "pg_lo_create()",
			"kind": "function",
			"details": "Create a large object"
		},
		{
			"trigger": "pg_lo_export()",
			"contents": "pg_lo_export()",
			"kind": "function",
			"details": "Export a large object to file"
		},
		{
			"trigger": "pg_lo_import()",
			"contents": "pg_lo_import()",
			"kind": "function",
			"details": "Import a large object from file"
		},
		{
			"trigger": "pg_lo_open()",
			"contents": "pg_lo_open(${1:connection}, ${2:oid}, ${3:mode})",
			"kind": "function",
			"details": "Open a large object"
		},
		{
			"trigger": "pg_lo_read()",
			"contents": "pg_lo_read(${1:large_object})",
			"kind": "function",
			"details": "Read a large object"
		},
		{
			"trigger": "pg_lo_read_all()",
			"contents": "pg_lo_read_all(${1:large_object})",
			"kind": "function",
			"details": "Reads an entire large object and send straight to browser"
		},
		{
			"trigger": "pg_lo_seek()",
			"contents": "pg_lo_seek(${1:large_object}, ${2:offset})",
			"kind": "function",
			"details": "Seeks position within a large object"
		},
		{
			"trigger": "pg_lo_tell()",
			"contents": "pg_lo_tell(${1:large_object})",
			"kind": "function",
			"details": "Returns current seek position a of large object"
		},
		{
			"trigger": "pg_lo_unlink()",
			"contents": "pg_lo_unlink(${1:connection}, ${2:oid})",
			"kind": "function",
			"details": "Delete a large object"
		},
		{
			"trigger": "pg_lo_write()",
			"contents": "pg_lo_write(${1:large_object}, ${2:data})",
			"kind": "function",
			"details": "Write to a large object"
		},
		{
			"trigger": "pg_meta_data()",
			"contents": "pg_meta_data(${1:connection}, ${2:table_name})",
			"kind": "function",
			"details": "Get meta data for table"
		},
		{
			"trigger": "pg_num_fields()",
			"contents": "pg_num_fields(${1:result})",
			"kind": "function",
			"details": "Returns the number of fields in a result"
		},
		{
			"trigger": "pg_num_rows()",
			"contents": "pg_num_rows(${1:result})",
			"kind": "function",
			"details": "Returns the number of rows in a result"
		},
		{
			"trigger": "pg_options()",
			"contents": "pg_options()",
			"kind": "function",
			"details": "Get the options associated with the connection"
		},
		{
			"trigger": "pg_parameter_status()",
			"contents": "pg_parameter_status()",
			"kind": "function",
			"details": "Looks up a current parameter setting of the server"
		},
		{
			"trigger": "pg_pconnect()",
			"contents": "pg_pconnect(${1:connection_string})",
			"kind": "function",
			"details": "Open a persistent PostgreSQL connection"
		},
		{
			"trigger": "pg_ping()",
			"contents": "pg_ping()",
			"kind": "function",
			"details": "Ping database connection"
		},
		{
			"trigger": "pg_port()",
			"contents": "pg_port()",
			"kind": "function",
			"details": "Return the port number associated with the connection"
		},
		{
			"trigger": "pg_prepare()",
			"contents": "pg_prepare()",
			"kind": "function",
			"details": "Submits a request to create a prepared statement with the given parameters, and waits for completion"
		},
		{
			"trigger": "pg_put_line()",
			"contents": "pg_put_line()",
			"kind": "function",
			"details": "Send a NULL-terminated string to PostgreSQL backend"
		},
		{
			"trigger": "pg_query()",
			"contents": "pg_query()",
			"kind": "function",
			"details": "Execute a query"
		},
		{
			"trigger": "pg_query_params()",
			"contents": "pg_query_params()",
			"kind": "function",
			"details": "Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text"
		},
		{
			"trigger": "pg_result_error()",
			"contents": "pg_result_error(${1:result})",
			"kind": "function",
			"details": "Get error message associated with result"
		},
		{
			"trigger": "pg_result_error_field()",
			"contents": "pg_result_error_field(${1:result}, ${2:fieldcode})",
			"kind": "function",
			"details": "Returns an individual field of an error report"
		},
		{
			"trigger": "pg_result_seek()",
			"contents": "pg_result_seek(${1:result}, ${2:offset})",
			"kind": "function",
			"details": "Set internal row offset in result resource"
		},
		{
			"trigger": "pg_result_status()",
			"contents": "pg_result_status(${1:result})",
			"kind": "function",
			"details": "Get status of query result"
		},
		{
			"trigger": "pg_select()",
			"contents": "pg_select(${1:connection}, ${2:table_name}, ${3:assoc_array})",
			"kind": "function",
			"details": "Select records"
		},
		{
			"trigger": "pg_send_execute()",
			"contents": "pg_send_execute(${1:connection}, ${2:stmtname}, ${3:params})",
			"kind": "function",
			"details": "Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)"
		},
		{
			"trigger": "pg_send_prepare()",
			"contents": "pg_send_prepare(${1:connection}, ${2:stmtname}, ${3:query})",
			"kind": "function",
			"details": "Sends a request to create a prepared statement with the given parameters, without waiting for completion"
		},
		{
			"trigger": "pg_send_query()",
			"contents": "pg_send_query(${1:connection}, ${2:query})",
			"kind": "function",
			"details": "Sends asynchronous query"
		},
		{
			"trigger": "pg_send_query_params()",
			"contents": "pg_send_query_params(${1:connection}, ${2:query}, ${3:params})",
			"kind": "function",
			"details": "Submits a command and separate parameters to the server without waiting for the result(s)"
		},
		{
			"trigger": "pg_set_client_encoding()",
			"contents": "pg_set_client_encoding()",
			"kind": "function",
			"details": "Set the client encoding"
		},
		{
			"trigger": "pg_set_error_verbosity()",
			"contents": "pg_set_error_verbosity()",
			"kind": "function",
			"details": "Determines the verbosity of messages returned by pg_last_error() and pg_result_error()"
		},
		{
			"trigger": "pg_trace()",
			"contents": "pg_trace(${1:pathname})",
			"kind": "function",
			"details": "Enable tracing a PostgreSQL connection"
		},
		{
			"trigger": "pg_transaction_status()",
			"contents": "pg_transaction_status(${1:connection})",
			"kind": "function",
			"details": "Returns the current in-transaction status of the server"
		},
		{
			"trigger": "pg_tty()",
			"contents": "pg_tty()",
			"kind": "function",
			"details": "Return the TTY name associated with the connection"
		},
		{
			"trigger": "pg_unescape_bytea()",
			"contents": "pg_unescape_bytea(${1:data})",
			"kind": "function",
			"details": "Unescape binary for bytea type"
		},
		{
			"trigger": "pg_untrace()",
			"contents": "pg_untrace()",
			"kind": "function",
			"details": "Disable tracing of a PostgreSQL connection"
		},
		{
			"trigger": "pg_update()",
			"contents": "pg_update(${1:connection}, ${2:table_name}, ${3:data}, ${4:condition})",
			"kind": "function",
			"details": "Update table"
		},
		{
			"trigger": "pg_version()",
			"contents": "pg_version()",
			"kind": "function",
			"details": "Returns an array with client, protocol and server version (when available)"
		},
		{
			"trigger": "php_check_syntax()",
			"contents": "php_check_syntax(${1:filename})",
			"kind": "function",
			"details": "Check the PHP syntax of (and execute) the specified file"
		},
		{
			"trigger": "php_ini_loaded_file()",
			"contents": "php_ini_loaded_file()",
			"kind": "function",
			"details": "Retrieve a path to the loaded php.ini file"
		},
		{
			"trigger": "php_ini_scanned_files()",
			"contents": "php_ini_scanned_files()",
			"kind": "function",
			"details": "Return a list of .ini files parsed from the additional ini dir"
		},
		{
			"trigger": "php_logo_guid()",
			"contents": "php_logo_guid()",
			"kind": "function",
			"details": "Gets the logo guid"
		},
		{
			"trigger": "php_sapi_name()",
			"contents": "php_sapi_name()",
			"kind": "function",
			"details": "Returns the type of interface between web server and PHP"
		},
		{
			"trigger": "php_strip_whitespace()",
			"contents": "php_strip_whitespace(${1:filename})",
			"kind": "function",
			"details": "Return source with stripped comments and whitespace"
		},
		{
			"trigger": "php_uname()",
			"contents": "php_uname()",
			"kind": "function",
			"details": "Returns information about the operating system PHP is running on"
		},
		{
			"trigger": "phpcredits()",
			"contents": "phpcredits()",
			"kind": "function",
			"details": "Prints out the credits for PHP"
		},
		{
			"trigger": "phpinfo()",
			"contents": "phpinfo()",
			"kind": "function",
			"details": "Outputs information about PHP's configuration"
		},
		{
			"trigger": "phpversion()",
			"contents": "phpversion()",
			"kind": "function",
			"details": "Gets the current PHP version"
		},
		{
			"trigger": "pi()",
			"contents": "pi()",
			"kind": "function",
			"details": "Get value of pi"
		},
		{
			"trigger": "png2wbmp()",
			"contents": "png2wbmp(${1:pngname}, ${2:wbmpname}, ${3:dest_height}, ${4:dest_width}, ${5:threshold})",
			"kind": "function",
			"details": "Convert PNG image file to WBMP image file"
		},
		{
			"trigger": "popen()",
			"contents": "popen(${1:command}, ${2:mode})",
			"kind": "function",
			"details": "Opens process file pointer"
		},
		{
			"trigger": "pos()",
			"contents": "pos()",
			"kind": "function",
			"details": "Alias of current()"
		},
		{
			"trigger": "posix_access()",
			"contents": "posix_access(${1:file})",
			"kind": "function",
			"details": "Determine accessibility of a file"
		},
		{
			"trigger": "posix_ctermid()",
			"contents": "posix_ctermid()",
			"kind": "function",
			"details": "Get path name of controlling terminal"
		},
		{
			"trigger": "posix_errno()",
			"contents": "posix_errno()",
			"kind": "function",
			"details": "Alias of posix_get_last_error()"
		},
		{
			"trigger": "posix_get_last_error()",
			"contents": "posix_get_last_error()",
			"kind": "function",
			"details": "Retrieve the error number set by the last posix function that failed"
		},
		{
			"trigger": "posix_getcwd()",
			"contents": "posix_getcwd()",
			"kind": "function",
			"details": "Pathname of current directory"
		},
		{
			"trigger": "posix_getegid()",
			"contents": "posix_getegid()",
			"kind": "function",
			"details": "Return the effective group ID of the current process"
		},
		{
			"trigger": "posix_geteuid()",
			"contents": "posix_geteuid()",
			"kind": "function",
			"details": "Return the effective user ID of the current process"
		},
		{
			"trigger": "posix_getgid()",
			"contents": "posix_getgid()",
			"kind": "function",
			"details": "Return the real group ID of the current process"
		},
		{
			"trigger": "posix_getgrgid()",
			"contents": "posix_getgrgid(${1:gid})",
			"kind": "function",
			"details": "Return info about a group by group id"
		},
		{
			"trigger": "posix_getgrnam()",
			"contents": "posix_getgrnam(${1:name})",
			"kind": "function",
			"details": "Return info about a group by name"
		},
		{
			"trigger": "posix_getgroups()",
			"contents": "posix_getgroups()",
			"kind": "function",
			"details": "Return the group set of the current process"
		},
		{
			"trigger": "posix_getlogin()",
			"contents": "posix_getlogin()",
			"kind": "function",
			"details": "Return login name"
		},
		{
			"trigger": "posix_getpgid()",
			"contents": "posix_getpgid(${1:pid})",
			"kind": "function",
			"details": "Get process group id for job control"
		},
		{
			"trigger": "posix_getpgrp()",
			"contents": "posix_getpgrp()",
			"kind": "function",
			"details": "Return the current process group identifier"
		},
		{
			"trigger": "posix_getpid()",
			"contents": "posix_getpid()",
			"kind": "function",
			"details": "Return the current process identifier"
		},
		{
			"trigger": "posix_getppid()",
			"contents": "posix_getppid()",
			"kind": "function",
			"details": "Return the parent process identifier"
		},
		{
			"trigger": "posix_getpwnam()",
			"contents": "posix_getpwnam(${1:username})",
			"kind": "function",
			"details": "Return info about a user by username"
		},
		{
			"trigger": "posix_getpwuid()",
			"contents": "posix_getpwuid(${1:uid})",
			"kind": "function",
			"details": "Return info about a user by user id"
		},
		{
			"trigger": "posix_getrlimit()",
			"contents": "posix_getrlimit()",
			"kind": "function",
			"details": "Return info about system resource limits"
		},
		{
			"trigger": "posix_getsid()",
			"contents": "posix_getsid(${1:pid})",
			"kind": "function",
			"details": "Get the current sid of the process"
		},
		{
			"trigger": "posix_getuid()",
			"contents": "posix_getuid()",
			"kind": "function",
			"details": "Return the real user ID of the current process"
		},
		{
			"trigger": "posix_initgroups()",
			"contents": "posix_initgroups(${1:name}, ${2:base_group_id})",
			"kind": "function",
			"details": "Calculate the group access list"
		},
		{
			"trigger": "posix_isatty()",
			"contents": "posix_isatty(${1:fd})",
			"kind": "function",
			"details": "Determine if a file descriptor is an interactive terminal"
		},
		{
			"trigger": "posix_kill()",
			"contents": "posix_kill(${1:pid}, ${2:sig})",
			"kind": "function",
			"details": "Send a signal to a process"
		},
		{
			"trigger": "posix_mkfifo()",
			"contents": "posix_mkfifo(${1:pathname}, ${2:mode})",
			"kind": "function",
			"details": "Create a fifo special file (a named pipe)"
		},
		{
			"trigger": "posix_mknod()",
			"contents": "posix_mknod(${1:pathname}, ${2:mode})",
			"kind": "function",
			"details": "Create a special or ordinary file (POSIX.1)"
		},
		{
			"trigger": "posix_setegid()",
			"contents": "posix_setegid(${1:gid})",
			"kind": "function",
			"details": "Set the effective GID of the current process"
		},
		{
			"trigger": "posix_seteuid()",
			"contents": "posix_seteuid(${1:uid})",
			"kind": "function",
			"details": "Set the effective UID of the current process"
		},
		{
			"trigger": "posix_setgid()",
			"contents": "posix_setgid(${1:gid})",
			"kind": "function",
			"details": "Set the GID of the current process"
		},
		{
			"trigger": "posix_setpgid()",
			"contents": "posix_setpgid(${1:pid}, ${2:pgid})",
			"kind": "function",
			"details": "Set process group id for job control"
		},
		{
			"trigger": "posix_setsid()",
			"contents": "posix_setsid()",
			"kind": "function",
			"details": "Make the current process a session leader"
		},
		{
			"trigger": "posix_setuid()",
			"contents": "posix_setuid(${1:uid})",
			"kind": "function",
			"details": "Set the UID of the current process"
		},
		{
			"trigger": "posix_strerror()",
			"contents": "posix_strerror(${1:errno})",
			"kind": "function",
			"details": "Retrieve the system error message associated with the given errno"
		},
		{
			"trigger": "posix_times()",
			"contents": "posix_times()",
			"kind": "function",
			"details": "Get process times"
		},
		{
			"trigger": "posix_ttyname()",
			"contents": "posix_ttyname(${1:fd})",
			"kind": "function",
			"details": "Determine terminal device name"
		},
		{
			"trigger": "posix_uname()",
			"contents": "posix_uname()",
			"kind": "function",
			"details": "Get system name"
		},
		{
			"trigger": "pow()",
			"contents": "pow(${1:base}, ${2:exp})",
			"kind": "function",
			"details": "Exponential expression"
		},
		{
			"trigger": "preg_filter()",
			"contents": "preg_filter(${1:pattern}, ${2:replacement}, ${3:subject})",
			"kind": "function",
			"details": "Perform a regular expression search and replace"
		},
		{
			"trigger": "preg_grep()",
			"contents": "preg_grep(${1:pattern}, ${2:input})",
			"kind": "function",
			"details": "Return array entries that match the pattern"
		},
		{
			"trigger": "preg_last_error()",
			"contents": "preg_last_error()",
			"kind": "function",
			"details": "Returns the error code of the last PCRE regex execution"
		},
		{
			"trigger": "preg_match()",
			"contents": "preg_match(${1:pattern}, ${2:subject})",
			"kind": "function",
			"details": "Perform a regular expression match"
		},
		{
			"trigger": "preg_match_all()",
			"contents": "preg_match_all(${1:pattern}, ${2:subject}, ${3:matches})",
			"kind": "function",
			"details": "Perform a global regular expression match"
		},
		{
			"trigger": "preg_quote()",
			"contents": "preg_quote(${1:str})",
			"kind": "function",
			"details": "Quote regular expression characters"
		},
		{
			"trigger": "preg_replace()",
			"contents": "preg_replace(${1:pattern}, ${2:replacement}, ${3:subject})",
			"kind": "function",
			"details": "Perform a regular expression search and replace"
		},
		{
			"trigger": "preg_replace_callback()",
			"contents": "preg_replace_callback(${1:pattern}, ${2:callback}, ${3:subject})",
			"kind": "function",
			"details": "Perform a regular expression search and replace using a callback"
		},
		{
			"trigger": "preg_replace_callback_array()",
			"contents": "preg_replace_callback_array(${1:patterns_and_callbacks}, ${2:subject})",
			"kind": "function",
			"details": "Perform a regular expression search and replace using callbacks"
		},
		{
			"trigger": "preg_split()",
			"contents": "preg_split(${1:pattern}, ${2:subject})",
			"kind": "function",
			"details": "Split string by a regular expression"
		},
		{
			"trigger": "prev()",
			"contents": "prev(${1:array})",
			"kind": "function",
			"details": "Rewind the internal array pointer"
		},
		{
			"trigger": "print()",
			"contents": "print(${1:arg})",
			"kind": "function",
			"details": "Output a string"
		},
		{
			"trigger": "print_r()",
			"contents": "print_r(${1:expression})",
			"kind": "function",
			"details": "Prints human-readable information about a variable"
		},
		{
			"trigger": "printer_abort()",
			"contents": "printer_abort(${1:printer_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_close()",
			"contents": "printer_close(${1:printer_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_create_brush()",
			"contents": "printer_create_brush(${1:style}, ${2:color})",
			"kind": "function"
		},
		{
			"trigger": "printer_create_dc()",
			"contents": "printer_create_dc(${1:printer_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_create_font()",
			"contents": "printer_create_font(${1:face}, ${2:height}, ${3:width}, ${4:font_weight}, ${5:italic}, ${6:underline}, ${7:strikeout}, ${8:orientation})",
			"kind": "function"
		},
		{
			"trigger": "printer_create_pen()",
			"contents": "printer_create_pen(${1:style}, ${2:width}, ${3:color})",
			"kind": "function"
		},
		{
			"trigger": "printer_delete_brush()",
			"contents": "printer_delete_brush(${1:brush_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_delete_dc()",
			"contents": "printer_delete_dc(${1:printer_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_delete_font()",
			"contents": "printer_delete_font(${1:font_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_delete_pen()",
			"contents": "printer_delete_pen(${1:pen_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_draw_bmp()",
			"contents": "printer_draw_bmp(${1:printer_handle}, ${2:filename}, ${3:x}, ${4:y})",
			"kind": "function"
		},
		{
			"trigger": "printer_draw_chord()",
			"contents": "printer_draw_chord(${1:printer_handle}, ${2:rec_x}, ${3:rec_y}, ${4:rec_x1}, ${5:rec_y1}, ${6:rad_x}, ${7:rad_y}, ${8:rad_x1}, ${9:rad_y1})",
			"kind": "function"
		},
		{
			"trigger": "printer_draw_elipse()",
			"contents": "printer_draw_elipse(${1:printer_handle}, ${2:ul_x}, ${3:ul_y}, ${4:lr_x}, ${5:lr_y})",
			"kind": "function"
		},
		{
			"trigger": "printer_draw_line()",
			"contents": "printer_draw_line(${1:printer_handle}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y})",
			"kind": "function"
		},
		{
			"trigger": "printer_draw_pie()",
			"contents": "printer_draw_pie(${1:printer_handle}, ${2:rec_x}, ${3:rec_y}, ${4:rec_x1}, ${5:rec_y1}, ${6:rad1_x}, ${7:rad1_y}, ${8:rad2_x}, ${9:rad2_y})",
			"kind": "function"
		},
		{
			"trigger": "printer_draw_rectangle()",
			"contents": "printer_draw_rectangle(${1:printer_handle}, ${2:ul_x}, ${3:ul_y}, ${4:lr_x}, ${5:lr_y})",
			"kind": "function"
		},
		{
			"trigger": "printer_draw_roundrect()",
			"contents": "printer_draw_roundrect(${1:printer_handle}, ${2:ul_x}, ${3:ul_y}, ${4:lr_x}, ${5:lr_y}, ${6:width}, ${7:height})",
			"kind": "function"
		},
		{
			"trigger": "printer_draw_text()",
			"contents": "printer_draw_text(${1:printer_handle}, ${2:text}, ${3:x}, ${4:y})",
			"kind": "function"
		},
		{
			"trigger": "printer_end_doc()",
			"contents": "printer_end_doc(${1:printer_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_end_page()",
			"contents": "printer_end_page(${1:printer_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_get_option()",
			"contents": "printer_get_option(${1:printer_handle}, ${2:option})",
			"kind": "function"
		},
		{
			"trigger": "printer_list()",
			"contents": "printer_list(${1:enumtype})",
			"kind": "function"
		},
		{
			"trigger": "printer_logical_fontheight()",
			"contents": "printer_logical_fontheight(${1:printer_handle}, ${2:height})",
			"kind": "function"
		},
		{
			"trigger": "printer_open()",
			"contents": "printer_open()",
			"kind": "function"
		},
		{
			"trigger": "printer_select_brush()",
			"contents": "printer_select_brush(${1:printer_handle}, ${2:brush_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_select_font()",
			"contents": "printer_select_font(${1:printer_handle}, ${2:font_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_select_pen()",
			"contents": "printer_select_pen(${1:printer_handle}, ${2:pen_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_set_option()",
			"contents": "printer_set_option(${1:printer_handle}, ${2:option}, ${3:value})",
			"kind": "function"
		},
		{
			"trigger": "printer_start_doc()",
			"contents": "printer_start_doc(${1:printer_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_start_page()",
			"contents": "printer_start_page(${1:printer_handle})",
			"kind": "function"
		},
		{
			"trigger": "printer_write()",
			"contents": "printer_write(${1:printer_handle}, ${2:content})",
			"kind": "function"
		},
		{
			"trigger": "printf()",
			"contents": "printf(${1:format})",
			"kind": "function",
			"details": "Output a formatted string"
		},
		{
			"trigger": "proc_close()",
			"contents": "proc_close(${1:process})",
			"kind": "function",
			"details": "Close a process opened by proc_open() and return the exit code of that process"
		},
		{
			"trigger": "proc_get_status()",
			"contents": "proc_get_status(${1:process})",
			"kind": "function",
			"details": "Get information about a process opened by proc_open()"
		},
		{
			"trigger": "proc_nice()",
			"contents": "proc_nice(${1:increment})",
			"kind": "function",
			"details": "Change the priority of the current process"
		},
		{
			"trigger": "proc_open()",
			"contents": "proc_open(${1:cmd}, ${2:descriptorspec}, ${3:pipes})",
			"kind": "function",
			"details": "Execute a command and open file pointers for input/output"
		},
		{
			"trigger": "proc_terminate()",
			"contents": "proc_terminate(${1:process})",
			"kind": "function",
			"details": "Kills a process opened by proc_open"
		},
		{
			"trigger": "property_exists()",
			"contents": "property_exists(${1:class}, ${2:property})",
			"kind": "function",
			"details": "Checks if the object or class has a property"
		},
		{
			"trigger": "ps_add_bookmark()",
			"contents": "ps_add_bookmark(${1:psdoc}, ${2:text})",
			"kind": "function",
			"details": "Add bookmark to current page"
		},
		{
			"trigger": "ps_add_launchlink()",
			"contents": "ps_add_launchlink(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename})",
			"kind": "function",
			"details": "Adds link which launches file"
		},
		{
			"trigger": "ps_add_locallink()",
			"contents": "ps_add_locallink(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:page}, ${7:dest})",
			"kind": "function",
			"details": "Adds link to a page in the same document"
		},
		{
			"trigger": "ps_add_note()",
			"contents": "ps_add_note(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:contents}, ${7:title}, ${8:icon}, ${9:open})",
			"kind": "function",
			"details": "Adds note to current page"
		},
		{
			"trigger": "ps_add_pdflink()",
			"contents": "ps_add_pdflink(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:filename}, ${7:page}, ${8:dest})",
			"kind": "function",
			"details": "Adds link to a page in a second pdf document"
		},
		{
			"trigger": "ps_add_weblink()",
			"contents": "ps_add_weblink(${1:psdoc}, ${2:llx}, ${3:lly}, ${4:urx}, ${5:ury}, ${6:url})",
			"kind": "function",
			"details": "Adds link to a web location"
		},
		{
			"trigger": "ps_arc()",
			"contents": "ps_arc(${1:psdoc}, ${2:x}, ${3:y}, ${4:radius}, ${5:alpha}, ${6:beta})",
			"kind": "function",
			"details": "Draws an arc counterclockwise"
		},
		{
			"trigger": "ps_arcn()",
			"contents": "ps_arcn(${1:psdoc}, ${2:x}, ${3:y}, ${4:radius}, ${5:alpha}, ${6:beta})",
			"kind": "function",
			"details": "Draws an arc clockwise"
		},
		{
			"trigger": "ps_begin_page()",
			"contents": "ps_begin_page(${1:psdoc}, ${2:width}, ${3:height})",
			"kind": "function",
			"details": "Start a new page"
		},
		{
			"trigger": "ps_begin_pattern()",
			"contents": "ps_begin_pattern(${1:psdoc}, ${2:width}, ${3:height}, ${4:xstep}, ${5:ystep}, ${6:painttype})",
			"kind": "function",
			"details": "Start a new pattern"
		},
		{
			"trigger": "ps_begin_template()",
			"contents": "ps_begin_template(${1:psdoc}, ${2:width}, ${3:height})",
			"kind": "function",
			"details": "Start a new template"
		},
		{
			"trigger": "ps_circle()",
			"contents": "ps_circle(${1:psdoc}, ${2:x}, ${3:y}, ${4:radius})",
			"kind": "function",
			"details": "Draws a circle"
		},
		{
			"trigger": "ps_clip()",
			"contents": "ps_clip(${1:psdoc})",
			"kind": "function",
			"details": "Clips drawing to current path"
		},
		{
			"trigger": "ps_close()",
			"contents": "ps_close(${1:psdoc})",
			"kind": "function",
			"details": "Closes a PostScript document"
		},
		{
			"trigger": "ps_close_image()",
			"contents": "ps_close_image(${1:psdoc}, ${2:imageid})",
			"kind": "function",
			"details": "Closes image and frees memory"
		},
		{
			"trigger": "ps_closepath()",
			"contents": "ps_closepath(${1:psdoc})",
			"kind": "function",
			"details": "Closes path"
		},
		{
			"trigger": "ps_closepath_stroke()",
			"contents": "ps_closepath_stroke(${1:psdoc})",
			"kind": "function",
			"details": "Closes and strokes path"
		},
		{
			"trigger": "ps_continue_text()",
			"contents": "ps_continue_text(${1:psdoc}, ${2:text})",
			"kind": "function",
			"details": "Continue text in next line"
		},
		{
			"trigger": "ps_curveto()",
			"contents": "ps_curveto(${1:psdoc}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:x3}, ${7:y3})",
			"kind": "function",
			"details": "Draws a curve"
		},
		{
			"trigger": "ps_delete()",
			"contents": "ps_delete(${1:psdoc})",
			"kind": "function",
			"details": "Deletes all resources of a PostScript document"
		},
		{
			"trigger": "ps_end_page()",
			"contents": "ps_end_page(${1:psdoc})",
			"kind": "function",
			"details": "End a page"
		},
		{
			"trigger": "ps_end_pattern()",
			"contents": "ps_end_pattern(${1:psdoc})",
			"kind": "function",
			"details": "End a pattern"
		},
		{
			"trigger": "ps_end_template()",
			"contents": "ps_end_template(${1:psdoc})",
			"kind": "function",
			"details": "End a template"
		},
		{
			"trigger": "ps_fill()",
			"contents": "ps_fill(${1:psdoc})",
			"kind": "function",
			"details": "Fills the current path"
		},
		{
			"trigger": "ps_fill_stroke()",
			"contents": "ps_fill_stroke(${1:psdoc})",
			"kind": "function",
			"details": "Fills and strokes the current path"
		},
		{
			"trigger": "ps_findfont()",
			"contents": "ps_findfont(${1:psdoc}, ${2:fontname}, ${3:encoding})",
			"kind": "function",
			"details": "Loads a font"
		},
		{
			"trigger": "ps_get_buffer()",
			"contents": "ps_get_buffer(${1:psdoc})",
			"kind": "function",
			"details": "Fetches the full buffer containig the generated PS data"
		},
		{
			"trigger": "ps_get_parameter()",
			"contents": "ps_get_parameter(${1:psdoc}, ${2:name})",
			"kind": "function",
			"details": "Gets certain parameters"
		},
		{
			"trigger": "ps_get_value()",
			"contents": "ps_get_value(${1:psdoc}, ${2:name})",
			"kind": "function",
			"details": "Gets certain values"
		},
		{
			"trigger": "ps_hyphenate()",
			"contents": "ps_hyphenate(${1:psdoc}, ${2:text})",
			"kind": "function",
			"details": "Hyphenates a word"
		},
		{
			"trigger": "ps_include_file()",
			"contents": "ps_include_file(${1:psdoc}, ${2:file})",
			"kind": "function",
			"details": "Reads an external file with raw PostScript code"
		},
		{
			"trigger": "ps_lineto()",
			"contents": "ps_lineto(${1:psdoc}, ${2:x}, ${3:y})",
			"kind": "function",
			"details": "Draws a line"
		},
		{
			"trigger": "ps_makespotcolor()",
			"contents": "ps_makespotcolor(${1:psdoc}, ${2:name})",
			"kind": "function",
			"details": "Create spot color"
		},
		{
			"trigger": "ps_moveto()",
			"contents": "ps_moveto(${1:psdoc}, ${2:x}, ${3:y})",
			"kind": "function",
			"details": "Sets current point"
		},
		{
			"trigger": "ps_new()",
			"contents": "ps_new()",
			"kind": "function",
			"details": "Creates a new PostScript document object"
		},
		{
			"trigger": "ps_open_file()",
			"contents": "ps_open_file(${1:psdoc})",
			"kind": "function",
			"details": "Opens a file for output"
		},
		{
			"trigger": "ps_open_image()",
			"contents": "ps_open_image(${1:psdoc}, ${2:type}, ${3:source}, ${4:data}, ${5:lenght}, ${6:width}, ${7:height}, ${8:components}, ${9:bpc}, ${10:params})",
			"kind": "function",
			"details": "Reads an image for later placement"
		},
		{
			"trigger": "ps_open_image_file()",
			"contents": "ps_open_image_file(${1:psdoc}, ${2:type}, ${3:filename})",
			"kind": "function",
			"details": "Opens image from file"
		},
		{
			"trigger": "ps_open_memory_image()",
			"contents": "ps_open_memory_image(${1:psdoc}, ${2:gd})",
			"kind": "function",
			"details": "Takes an GD image and returns an image for placement in a PS document"
		},
		{
			"trigger": "ps_place_image()",
			"contents": "ps_place_image(${1:psdoc}, ${2:imageid}, ${3:x}, ${4:y}, ${5:scale})",
			"kind": "function",
			"details": "Places image on the page"
		},
		{
			"trigger": "ps_rect()",
			"contents": "ps_rect(${1:psdoc}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
			"kind": "function",
			"details": "Draws a rectangle"
		},
		{
			"trigger": "ps_restore()",
			"contents": "ps_restore(${1:psdoc})",
			"kind": "function",
			"details": "Restore previously save context"
		},
		{
			"trigger": "ps_rotate()",
			"contents": "ps_rotate(${1:psdoc}, ${2:rot})",
			"kind": "function",
			"details": "Sets rotation factor"
		},
		{
			"trigger": "ps_save()",
			"contents": "ps_save(${1:psdoc})",
			"kind": "function",
			"details": "Save current context"
		},
		{
			"trigger": "ps_scale()",
			"contents": "ps_scale(${1:psdoc}, ${2:x}, ${3:y})",
			"kind": "function",
			"details": "Sets scaling factor"
		},
		{
			"trigger": "ps_set_border_color()",
			"contents": "ps_set_border_color(${1:psdoc}, ${2:red}, ${3:green}, ${4:blue})",
			"kind": "function",
			"details": "Sets color of border for annotations"
		},
		{
			"trigger": "ps_set_border_dash()",
			"contents": "ps_set_border_dash(${1:psdoc}, ${2:black}, ${3:white})",
			"kind": "function",
			"details": "Sets length of dashes for border of annotations"
		},
		{
			"trigger": "ps_set_border_style()",
			"contents": "ps_set_border_style(${1:psdoc}, ${2:style}, ${3:width})",
			"kind": "function",
			"details": "Sets border style of annotations"
		},
		{
			"trigger": "ps_set_info()",
			"contents": "ps_set_info(${1:p}, ${2:key}, ${3:val})",
			"kind": "function",
			"details": "Sets information fields of document"
		},
		{
			"trigger": "ps_set_parameter()",
			"contents": "ps_set_parameter(${1:psdoc}, ${2:name}, ${3:value})",
			"kind": "function",
			"details": "Sets certain parameters"
		},
		{
			"trigger": "ps_set_text_pos()",
			"contents": "ps_set_text_pos(${1:psdoc}, ${2:x}, ${3:y})",
			"kind": "function",
			"details": "Sets position for text output"
		},
		{
			"trigger": "ps_set_value()",
			"contents": "ps_set_value(${1:psdoc}, ${2:name}, ${3:value})",
			"kind": "function",
			"details": "Sets certain values"
		},
		{
			"trigger": "ps_setcolor()",
			"contents": "ps_setcolor(${1:psdoc}, ${2:type}, ${3:colorspace}, ${4:c1}, ${5:c2}, ${6:c3}, ${7:c4})",
			"kind": "function",
			"details": "Sets current color"
		},
		{
			"trigger": "ps_setdash()",
			"contents": "ps_setdash(${1:psdoc}, ${2:on}, ${3:off})",
			"kind": "function",
			"details": "Sets appearance of a dashed line"
		},
		{
			"trigger": "ps_setflat()",
			"contents": "ps_setflat(${1:psdoc}, ${2:value})",
			"kind": "function",
			"details": "Sets flatness"
		},
		{
			"trigger": "ps_setfont()",
			"contents": "ps_setfont(${1:psdoc}, ${2:fontid}, ${3:size})",
			"kind": "function",
			"details": "Sets font to use for following output"
		},
		{
			"trigger": "ps_setgray()",
			"contents": "ps_setgray(${1:psdoc}, ${2:gray})",
			"kind": "function",
			"details": "Sets gray value"
		},
		{
			"trigger": "ps_setlinecap()",
			"contents": "ps_setlinecap(${1:psdoc}, ${2:type})",
			"kind": "function",
			"details": "Sets appearance of line ends"
		},
		{
			"trigger": "ps_setlinejoin()",
			"contents": "ps_setlinejoin(${1:psdoc}, ${2:type})",
			"kind": "function",
			"details": "Sets how contected lines are joined"
		},
		{
			"trigger": "ps_setlinewidth()",
			"contents": "ps_setlinewidth(${1:psdoc}, ${2:width})",
			"kind": "function",
			"details": "Sets width of a line"
		},
		{
			"trigger": "ps_setmiterlimit()",
			"contents": "ps_setmiterlimit(${1:psdoc}, ${2:value})",
			"kind": "function",
			"details": "Sets the miter limit"
		},
		{
			"trigger": "ps_setoverprintmode()",
			"contents": "ps_setoverprintmode(${1:psdoc}, ${2:mode})",
			"kind": "function",
			"details": "Sets overprint mode"
		},
		{
			"trigger": "ps_setpolydash()",
			"contents": "ps_setpolydash(${1:psdoc}, ${2:arr})",
			"kind": "function",
			"details": "Sets appearance of a dashed line"
		},
		{
			"trigger": "ps_shading()",
			"contents": "ps_shading(${1:psdoc}, ${2:type}, ${3:x0}, ${4:y0}, ${5:x1}, ${6:y1}, ${7:c1}, ${8:c2}, ${9:c3}, ${10:c4}, ${11:optlist})",
			"kind": "function",
			"details": "Creates a shading for later use"
		},
		{
			"trigger": "ps_shading_pattern()",
			"contents": "ps_shading_pattern(${1:psdoc}, ${2:shadingid}, ${3:optlist})",
			"kind": "function",
			"details": "Creates a pattern based on a shading"
		},
		{
			"trigger": "ps_shfill()",
			"contents": "ps_shfill(${1:psdoc}, ${2:shadingid})",
			"kind": "function",
			"details": "Fills an area with a shading"
		},
		{
			"trigger": "ps_show()",
			"contents": "ps_show(${1:psdoc}, ${2:text})",
			"kind": "function",
			"details": "Output text"
		},
		{
			"trigger": "ps_show2()",
			"contents": "ps_show2(${1:psdoc}, ${2:text}, ${3:len})",
			"kind": "function",
			"details": "Output a text at current position"
		},
		{
			"trigger": "ps_show_boxed()",
			"contents": "ps_show_boxed(${1:psdoc}, ${2:text}, ${3:left}, ${4:bottom}, ${5:width}, ${6:height}, ${7:hmode})",
			"kind": "function",
			"details": "Output text in a box"
		},
		{
			"trigger": "ps_show_xy()",
			"contents": "ps_show_xy(${1:psdoc}, ${2:text}, ${3:x}, ${4:y})",
			"kind": "function",
			"details": "Output text at given position"
		},
		{
			"trigger": "ps_show_xy2()",
			"contents": "ps_show_xy2(${1:psdoc}, ${2:text}, ${3:len}, ${4:xcoor}, ${5:ycoor})",
			"kind": "function",
			"details": "Output text at position"
		},
		{
			"trigger": "ps_string_geometry()",
			"contents": "ps_string_geometry(${1:psdoc}, ${2:text})",
			"kind": "function",
			"details": "Gets geometry of a string"
		},
		{
			"trigger": "ps_stringwidth()",
			"contents": "ps_stringwidth(${1:psdoc}, ${2:text})",
			"kind": "function",
			"details": "Gets width of a string"
		},
		{
			"trigger": "ps_stroke()",
			"contents": "ps_stroke(${1:psdoc})",
			"kind": "function",
			"details": "Draws the current path"
		},
		{
			"trigger": "ps_symbol()",
			"contents": "ps_symbol(${1:psdoc}, ${2:ord})",
			"kind": "function",
			"details": "Output a glyph"
		},
		{
			"trigger": "ps_symbol_name()",
			"contents": "ps_symbol_name(${1:psdoc}, ${2:ord})",
			"kind": "function",
			"details": "Gets name of a glyph"
		},
		{
			"trigger": "ps_symbol_width()",
			"contents": "ps_symbol_width(${1:psdoc}, ${2:ord})",
			"kind": "function",
			"details": "Gets width of a glyph"
		},
		{
			"trigger": "ps_translate()",
			"contents": "ps_translate(${1:psdoc}, ${2:x}, ${3:y})",
			"kind": "function",
			"details": "Sets translation"
		},
		{
			"trigger": "pspell_add_to_personal()",
			"contents": "pspell_add_to_personal(${1:dictionary_link}, ${2:word})",
			"kind": "function",
			"details": "Add the word to a personal wordlist"
		},
		{
			"trigger": "pspell_add_to_session()",
			"contents": "pspell_add_to_session(${1:dictionary_link}, ${2:word})",
			"kind": "function",
			"details": "Add the word to the wordlist in the current session"
		},
		{
			"trigger": "pspell_check()",
			"contents": "pspell_check(${1:dictionary_link}, ${2:word})",
			"kind": "function",
			"details": "Check a word"
		},
		{
			"trigger": "pspell_clear_session()",
			"contents": "pspell_clear_session(${1:dictionary_link})",
			"kind": "function",
			"details": "Clear the current session"
		},
		{
			"trigger": "pspell_config_create()",
			"contents": "pspell_config_create(${1:language})",
			"kind": "function",
			"details": "Create a config used to open a dictionary"
		},
		{
			"trigger": "pspell_config_data_dir()",
			"contents": "pspell_config_data_dir(${1:conf}, ${2:directory})",
			"kind": "function",
			"details": "Location of language data files"
		},
		{
			"trigger": "pspell_config_dict_dir()",
			"contents": "pspell_config_dict_dir(${1:conf}, ${2:directory})",
			"kind": "function",
			"details": "Location of the main word list"
		},
		{
			"trigger": "pspell_config_ignore()",
			"contents": "pspell_config_ignore(${1:dictionary_link}, ${2:n})",
			"kind": "function",
			"details": "Ignore words less than N characters long"
		},
		{
			"trigger": "pspell_config_mode()",
			"contents": "pspell_config_mode(${1:dictionary_link}, ${2:mode})",
			"kind": "function",
			"details": "Change the mode number of suggestions returned"
		},
		{
			"trigger": "pspell_config_personal()",
			"contents": "pspell_config_personal(${1:dictionary_link}, ${2:file})",
			"kind": "function",
			"details": "Set a file that contains personal wordlist"
		},
		{
			"trigger": "pspell_config_repl()",
			"contents": "pspell_config_repl(${1:dictionary_link}, ${2:file})",
			"kind": "function",
			"details": "Set a file that contains replacement pairs"
		},
		{
			"trigger": "pspell_config_runtogether()",
			"contents": "pspell_config_runtogether(${1:dictionary_link}, ${2:flag})",
			"kind": "function",
			"details": "Consider run-together words as valid compounds"
		},
		{
			"trigger": "pspell_config_save_repl()",
			"contents": "pspell_config_save_repl(${1:dictionary_link}, ${2:flag})",
			"kind": "function",
			"details": "Determine whether to save a replacement pairs list along with the wordlist"
		},
		{
			"trigger": "pspell_new()",
			"contents": "pspell_new(${1:language})",
			"kind": "function",
			"details": "Load a new dictionary"
		},
		{
			"trigger": "pspell_new_config()",
			"contents": "pspell_new_config(${1:config})",
			"kind": "function",
			"details": "Load a new dictionary with settings based on a given config"
		},
		{
			"trigger": "pspell_new_personal()",
			"contents": "pspell_new_personal(${1:personal}, ${2:language})",
			"kind": "function",
			"details": "Load a new dictionary with personal wordlist"
		},
		{
			"trigger": "pspell_save_wordlist()",
			"contents": "pspell_save_wordlist(${1:dictionary_link})",
			"kind": "function",
			"details": "Save the personal wordlist to a file"
		},
		{
			"trigger": "pspell_store_replacement()",
			"contents": "pspell_store_replacement(${1:dictionary_link}, ${2:misspelled}, ${3:correct})",
			"kind": "function",
			"details": "Store a replacement pair for a word"
		},
		{
			"trigger": "pspell_suggest()",
			"contents": "pspell_suggest(${1:dictionary_link}, ${2:word})",
			"kind": "function",
			"details": "Suggest spellings of a word"
		},
		{
			"trigger": "putenv()",
			"contents": "putenv(${1:setting})",
			"kind": "function",
			"details": "Sets the value of an environment variable"
		},
		{
			"trigger": "px_close()",
			"contents": "px_close(${1:pxdoc})",
			"kind": "function",
			"details": "Closes a paradox database"
		},
		{
			"trigger": "px_create_fp()",
			"contents": "px_create_fp(${1:pxdoc}, ${2:file}, ${3:fielddesc})",
			"kind": "function",
			"details": "Create a new paradox database"
		},
		{
			"trigger": "px_date2string()",
			"contents": "px_date2string(${1:pxdoc}, ${2:value}, ${3:format})",
			"kind": "function",
			"details": "Converts a date into a string"
		},
		{
			"trigger": "px_delete()",
			"contents": "px_delete(${1:pxdoc})",
			"kind": "function",
			"details": "Deletes resource of paradox database"
		},
		{
			"trigger": "px_delete_record()",
			"contents": "px_delete_record(${1:pxdoc}, ${2:num})",
			"kind": "function",
			"details": "Deletes record from paradox database"
		},
		{
			"trigger": "px_get_field()",
			"contents": "px_get_field(${1:pxdoc}, ${2:fieldno})",
			"kind": "function",
			"details": "Returns the specification of a single field"
		},
		{
			"trigger": "px_get_info()",
			"contents": "px_get_info(${1:pxdoc})",
			"kind": "function",
			"details": "Return lots of information about a paradox file"
		},
		{
			"trigger": "px_get_parameter()",
			"contents": "px_get_parameter(${1:pxdoc}, ${2:name})",
			"kind": "function",
			"details": "Gets a parameter"
		},
		{
			"trigger": "px_get_record()",
			"contents": "px_get_record(${1:pxdoc}, ${2:num})",
			"kind": "function",
			"details": "Returns record of paradox database"
		},
		{
			"trigger": "px_get_schema()",
			"contents": "px_get_schema(${1:pxdoc})",
			"kind": "function",
			"details": "Returns the database schema"
		},
		{
			"trigger": "px_get_value()",
			"contents": "px_get_value(${1:pxdoc}, ${2:name})",
			"kind": "function",
			"details": "Gets a value"
		},
		{
			"trigger": "px_insert_record()",
			"contents": "px_insert_record(${1:pxdoc}, ${2:data})",
			"kind": "function",
			"details": "Inserts record into paradox database"
		},
		{
			"trigger": "px_new()",
			"contents": "px_new()",
			"kind": "function",
			"details": "Create a new paradox object"
		},
		{
			"trigger": "px_numfields()",
			"contents": "px_numfields(${1:pxdoc})",
			"kind": "function",
			"details": "Returns number of fields in a database"
		},
		{
			"trigger": "px_numrecords()",
			"contents": "px_numrecords(${1:pxdoc})",
			"kind": "function",
			"details": "Returns number of records in a database"
		},
		{
			"trigger": "px_open_fp()",
			"contents": "px_open_fp(${1:pxdoc}, ${2:file})",
			"kind": "function",
			"details": "Open paradox database"
		},
		{
			"trigger": "px_put_record()",
			"contents": "px_put_record(${1:pxdoc}, ${2:record})",
			"kind": "function",
			"details": "Stores record into paradox database"
		},
		{
			"trigger": "px_retrieve_record()",
			"contents": "px_retrieve_record(${1:pxdoc}, ${2:num})",
			"kind": "function",
			"details": "Returns record of paradox database"
		},
		{
			"trigger": "px_set_blob_file()",
			"contents": "px_set_blob_file(${1:pxdoc}, ${2:filename})",
			"kind": "function",
			"details": "Sets the file where blobs are read from"
		},
		{
			"trigger": "px_set_parameter()",
			"contents": "px_set_parameter(${1:pxdoc}, ${2:name}, ${3:value})",
			"kind": "function",
			"details": "Sets a parameter"
		},
		{
			"trigger": "px_set_tablename()",
			"contents": "px_set_tablename(${1:pxdoc}, ${2:name})",
			"kind": "function",
			"details": "Sets the name of a table (deprecated)"
		},
		{
			"trigger": "px_set_targetencoding()",
			"contents": "px_set_targetencoding(${1:pxdoc}, ${2:encoding})",
			"kind": "function",
			"details": "Sets the encoding for character fields (deprecated)"
		},
		{
			"trigger": "px_set_value()",
			"contents": "px_set_value(${1:pxdoc}, ${2:name}, ${3:value})",
			"kind": "function",
			"details": "Sets a value"
		},
		{
			"trigger": "px_timestamp2string()",
			"contents": "px_timestamp2string(${1:pxdoc}, ${2:value}, ${3:format})",
			"kind": "function",
			"details": "Converts the timestamp into a string"
		},
		{
			"trigger": "px_update_record()",
			"contents": "px_update_record(${1:pxdoc}, ${2:data}, ${3:num})",
			"kind": "function",
			"details": "Updates record in paradox database"
		},
		{
			"trigger": "qdom_error()",
			"contents": "qdom_error()",
			"kind": "function"
		},
		{
			"trigger": "qdom_tree()",
			"contents": "qdom_tree(${1:doc})",
			"kind": "function"
		},
		{
			"trigger": "quoted_printable_decode()",
			"contents": "quoted_printable_decode(${1:str})",
			"kind": "function",
			"details": "Convert a quoted-printable string to an 8 bit string"
		},
		{
			"trigger": "quoted_printable_encode()",
			"contents": "quoted_printable_encode(${1:str})",
			"kind": "function",
			"details": "Convert a 8 bit string to a quoted-printable string"
		},
		{
			"trigger": "quotemeta()",
			"contents": "quotemeta(${1:str})",
			"kind": "function",
			"details": "Quote meta characters"
		},
		{
			"trigger": "rad2deg()",
			"contents": "rad2deg(${1:number})",
			"kind": "function",
			"details": "Converts the radian number to the equivalent number in degrees"
		},
		{
			"trigger": "radius_acct_open()",
			"contents": "radius_acct_open()",
			"kind": "function",
			"details": "Creates a Radius handle for accounting"
		},
		{
			"trigger": "radius_add_server()",
			"contents": "radius_add_server(${1:radius_handle}, ${2:hostname}, ${3:port}, ${4:secret}, ${5:timeout}, ${6:max_tries})",
			"kind": "function",
			"details": "Adds a server"
		},
		{
			"trigger": "radius_auth_open()",
			"contents": "radius_auth_open()",
			"kind": "function",
			"details": "Creates a Radius handle for authentication"
		},
		{
			"trigger": "radius_close()",
			"contents": "radius_close(${1:radius_handle})",
			"kind": "function",
			"details": "Frees all ressources"
		},
		{
			"trigger": "radius_config()",
			"contents": "radius_config(${1:radius_handle}, ${2:file})",
			"kind": "function",
			"details": "Causes the library to read the given configuration file"
		},
		{
			"trigger": "radius_create_request()",
			"contents": "radius_create_request(${1:radius_handle}, ${2:type})",
			"kind": "function",
			"details": "Create accounting or authentication request"
		},
		{
			"trigger": "radius_cvt_addr()",
			"contents": "radius_cvt_addr(${1:data})",
			"kind": "function",
			"details": "Converts raw data to IP-Address"
		},
		{
			"trigger": "radius_cvt_int()",
			"contents": "radius_cvt_int(${1:data})",
			"kind": "function",
			"details": "Converts raw data to integer"
		},
		{
			"trigger": "radius_cvt_string()",
			"contents": "radius_cvt_string(${1:data})",
			"kind": "function",
			"details": "Converts raw data to string"
		},
		{
			"trigger": "radius_demangle()",
			"contents": "radius_demangle(${1:radius_handle}, ${2:mangled})",
			"kind": "function",
			"details": "Demangles data"
		},
		{
			"trigger": "radius_demangle_mppe_key()",
			"contents": "radius_demangle_mppe_key(${1:radius_handle}, ${2:mangled})",
			"kind": "function",
			"details": "Derives mppe-keys from mangled data"
		},
		{
			"trigger": "radius_get_attr()",
			"contents": "radius_get_attr(${1:radius_handle})",
			"kind": "function",
			"details": "Extracts an attribute"
		},
		{
			"trigger": "radius_get_vendor_attr()",
			"contents": "radius_get_vendor_attr(${1:data})",
			"kind": "function",
			"details": "Extracts a vendor specific attribute"
		},
		{
			"trigger": "radius_put_addr()",
			"contents": "radius_put_addr(${1:radius_handle}, ${2:type}, ${3:addr})",
			"kind": "function",
			"details": "Attaches an IP address attribute"
		},
		{
			"trigger": "radius_put_attr()",
			"contents": "radius_put_attr(${1:radius_handle}, ${2:type}, ${3:value})",
			"kind": "function",
			"details": "Attaches a binary attribute"
		},
		{
			"trigger": "radius_put_int()",
			"contents": "radius_put_int(${1:radius_handle}, ${2:type}, ${3:value})",
			"kind": "function",
			"details": "Attaches an integer attribute"
		},
		{
			"trigger": "radius_put_string()",
			"contents": "radius_put_string(${1:radius_handle}, ${2:type}, ${3:value})",
			"kind": "function",
			"details": "Attaches a string attribute"
		},
		{
			"trigger": "radius_put_vendor_addr()",
			"contents": "radius_put_vendor_addr(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:addr})",
			"kind": "function",
			"details": "Attaches a vendor specific IP address attribute"
		},
		{
			"trigger": "radius_put_vendor_attr()",
			"contents": "radius_put_vendor_attr(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:value})",
			"kind": "function",
			"details": "Attaches a vendor specific binary attribute"
		},
		{
			"trigger": "radius_put_vendor_int()",
			"contents": "radius_put_vendor_int(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:value})",
			"kind": "function",
			"details": "Attaches a vendor specific integer attribute"
		},
		{
			"trigger": "radius_put_vendor_string()",
			"contents": "radius_put_vendor_string(${1:radius_handle}, ${2:vendor}, ${3:type}, ${4:value})",
			"kind": "function",
			"details": "Attaches a vendor specific string attribute"
		},
		{
			"trigger": "radius_request_authenticator()",
			"contents": "radius_request_authenticator(${1:radius_handle})",
			"kind": "function",
			"details": "Returns the request authenticator"
		},
		{
			"trigger": "radius_send_request()",
			"contents": "radius_send_request(${1:radius_handle})",
			"kind": "function",
			"details": "Sends the request and waits for a reply"
		},
		{
			"trigger": "radius_server_secret()",
			"contents": "radius_server_secret(${1:radius_handle})",
			"kind": "function",
			"details": "Returns the shared secret"
		},
		{
			"trigger": "radius_strerror()",
			"contents": "radius_strerror(${1:radius_handle})",
			"kind": "function",
			"details": "Returns an error message"
		},
		{
			"trigger": "rand()",
			"contents": "rand()",
			"kind": "function",
			"details": "Generate a random integer"
		},
		{
			"trigger": "random_bytes()",
			"contents": "random_bytes(${1:length})",
			"kind": "function",
			"details": "Generates cryptographically secure pseudo-random bytes"
		},
		{
			"trigger": "random_int()",
			"contents": "random_int(${1:min}, ${2:max})",
			"kind": "function",
			"details": "Generates cryptographically secure pseudo-random integers"
		},
		{
			"trigger": "range()",
			"contents": "range(${1:low}, ${2:high})",
			"kind": "function",
			"details": "Create an array containing a range of elements"
		},
		{
			"trigger": "rar_wrapper_cache_stats()",
			"contents": "rar_wrapper_cache_stats()",
			"kind": "function",
			"details": "Cache hits and misses for the URL wrapper"
		},
		{
			"trigger": "rawurldecode()",
			"contents": "rawurldecode(${1:str})",
			"kind": "function",
			"details": "Decode URL-encoded strings"
		},
		{
			"trigger": "rawurlencode()",
			"contents": "rawurlencode(${1:str})",
			"kind": "function",
			"details": "URL-encode according to RFC 3986"
		},
		{
			"trigger": "read_exif_data()",
			"contents": "read_exif_data()",
			"kind": "function",
			"details": "Alias of exif_read_data()"
		},
		{
			"trigger": "readdir()",
			"contents": "readdir()",
			"kind": "function",
			"details": "Read entry from directory handle"
		},
		{
			"trigger": "readfile()",
			"contents": "readfile(${1:filename})",
			"kind": "function",
			"details": "Outputs a file"
		},
		{
			"trigger": "readgzfile()",
			"contents": "readgzfile(${1:filename})",
			"kind": "function",
			"details": "Output a gz-file"
		},
		{
			"trigger": "readline()",
			"contents": "readline()",
			"kind": "function",
			"details": "Reads a line"
		},
		{
			"trigger": "readline_add_history()",
			"contents": "readline_add_history(${1:line})",
			"kind": "function",
			"details": "Adds a line to the history"
		},
		{
			"trigger": "readline_callback_handler_install()",
			"contents": "readline_callback_handler_install(${1:prompt}, ${2:callback})",
			"kind": "function",
			"details": "Initializes the readline callback interface and terminal, prints the prompt and returns immediately"
		},
		{
			"trigger": "readline_callback_handler_remove()",
			"contents": "readline_callback_handler_remove()",
			"kind": "function",
			"details": "Removes a previously installed callback handler and restores terminal settings"
		},
		{
			"trigger": "readline_callback_read_char()",
			"contents": "readline_callback_read_char()",
			"kind": "function",
			"details": "Reads a character and informs the readline callback interface when a line is received"
		},
		{
			"trigger": "readline_clear_history()",
			"contents": "readline_clear_history()",
			"kind": "function",
			"details": "Clears the history"
		},
		{
			"trigger": "readline_completion_function()",
			"contents": "readline_completion_function(${1:function})",
			"kind": "function",
			"details": "Registers a completion function"
		},
		{
			"trigger": "readline_info()",
			"contents": "readline_info()",
			"kind": "function",
			"details": "Gets/sets various internal readline variables"
		},
		{
			"trigger": "readline_list_history()",
			"contents": "readline_list_history()",
			"kind": "function",
			"details": "Lists the history"
		},
		{
			"trigger": "readline_on_new_line()",
			"contents": "readline_on_new_line()",
			"kind": "function",
			"details": "Inform readline that the cursor has moved to a new line"
		},
		{
			"trigger": "readline_read_history()",
			"contents": "readline_read_history()",
			"kind": "function",
			"details": "Reads the history"
		},
		{
			"trigger": "readline_redisplay()",
			"contents": "readline_redisplay()",
			"kind": "function",
			"details": "Redraws the display"
		},
		{
			"trigger": "readline_write_history()",
			"contents": "readline_write_history()",
			"kind": "function",
			"details": "Writes the history"
		},
		{
			"trigger": "readlink()",
			"contents": "readlink(${1:path})",
			"kind": "function",
			"details": "Returns the target of a symbolic link"
		},
		{
			"trigger": "realpath()",
			"contents": "realpath(${1:path})",
			"kind": "function",
			"details": "Returns canonicalized absolute pathname"
		},
		{
			"trigger": "realpath_cache_get()",
			"contents": "realpath_cache_get()",
			"kind": "function",
			"details": "Get realpath cache entries"
		},
		{
			"trigger": "realpath_cache_size()",
			"contents": "realpath_cache_size()",
			"kind": "function",
			"details": "Get realpath cache size"
		},
		{
			"trigger": "recode()",
			"contents": "recode()",
			"kind": "function",
			"details": "Alias of recode_string()"
		},
		{
			"trigger": "recode_file()",
			"contents": "recode_file(${1:request}, ${2:input}, ${3:output})",
			"kind": "function",
			"details": "Recode from file to file according to recode request"
		},
		{
			"trigger": "recode_string()",
			"contents": "recode_string(${1:request}, ${2:string})",
			"kind": "function",
			"details": "Recode a string according to a recode request"
		},
		{
			"trigger": "()",
			"contents": "(${1:name})"
		},
		{
			"trigger": "register_shutdown_function()",
			"contents": "register_shutdown_function(${1:function})",
			"kind": "function",
			"details": "Register a function for execution on shutdown"
		},
		{
			"trigger": "register_tick_function()",
			"contents": "register_tick_function(${1:function})",
			"kind": "function",
			"details": "Register a function for execution on each tick"
		},
		{
			"trigger": "rename()",
			"contents": "rename(${1:oldname}, ${2:newname})",
			"kind": "function",
			"details": "Renames a file or directory"
		},
		{
			"trigger": "rename_function()",
			"contents": "rename_function(${1:original_name}, ${2:new_name})",
			"kind": "function",
			"details": "Renames orig_name to new_name in the global function table"
		},
		{
			"trigger": "reset()",
			"contents": "reset(${1:array})",
			"kind": "function",
			"details": "Set the internal pointer of an array to its first element"
		},
		{
			"trigger": "restore_error_handler()",
			"contents": "restore_error_handler()",
			"kind": "function",
			"details": "Restores the previous error handler function"
		},
		{
			"trigger": "restore_exception_handler()",
			"contents": "restore_exception_handler()",
			"kind": "function",
			"details": "Restores the previously defined exception handler function"
		},
		{
			"trigger": "restore_include_path()",
			"contents": "restore_include_path()",
			"kind": "function",
			"details": "Restores the value of the include_path configuration option"
		},
		{
			"trigger": "rewind()",
			"contents": "rewind(${1:handle})",
			"kind": "function",
			"details": "Rewind the position of a file pointer"
		},
		{
			"trigger": "rewinddir()",
			"contents": "rewinddir()",
			"kind": "function",
			"details": "Rewind directory handle"
		},
		{
			"trigger": "rmdir()",
			"contents": "rmdir(${1:dirname})",
			"kind": "function",
			"details": "Removes directory"
		},
		{
			"trigger": "round()",
			"contents": "round(${1:val})",
			"kind": "function",
			"details": "Rounds a float"
		},
		{
			"trigger": "rpm_close()",
			"contents": "rpm_close(${1:rpmr})",
			"kind": "function",
			"details": "Closes an RPM file"
		},
		{
			"trigger": "rpm_get_tag()",
			"contents": "rpm_get_tag(${1:rpmr}, ${2:tagnum})",
			"kind": "function",
			"details": "Retrieves a header tag from an RPM file"
		},
		{
			"trigger": "rpm_is_valid()",
			"contents": "rpm_is_valid(${1:filename})",
			"kind": "function",
			"details": "Tests a filename for validity as an RPM file"
		},
		{
			"trigger": "rpm_open()",
			"contents": "rpm_open(${1:filename})",
			"kind": "function",
			"details": "Opens an RPM file"
		},
		{
			"trigger": "rpm_version()",
			"contents": "rpm_version()",
			"kind": "function",
			"details": "Returns a string representing the current version of the rpmreader extension"
		},
		{
			"trigger": "rsort()",
			"contents": "rsort(${1:array})",
			"kind": "function",
			"details": "Sort an array in reverse order"
		},
		{
			"trigger": "rtrim()",
			"contents": "rtrim(${1:str})",
			"kind": "function",
			"details": "Strip whitespace (or other characters) from the end of a string"
		},
		{
			"trigger": "runkit_class_adopt()",
			"contents": "runkit_class_adopt(${1:classname}, ${2:parentname})",
			"kind": "function",
			"details": "Convert a base class to an inherited class, add ancestral methods when appropriate"
		},
		{
			"trigger": "runkit_class_emancipate()",
			"contents": "runkit_class_emancipate(${1:classname})",
			"kind": "function",
			"details": "Convert an inherited class to a base class, removes any method whose scope is ancestral"
		},
		{
			"trigger": "runkit_constant_add()",
			"contents": "runkit_constant_add(${1:constname}, ${2:value})",
			"kind": "function",
			"details": "Similar to define(), but allows defining in class definitions as well"
		},
		{
			"trigger": "runkit_constant_redefine()",
			"contents": "runkit_constant_redefine(${1:constname}, ${2:newvalue})",
			"kind": "function",
			"details": "Redefine an already defined constant"
		},
		{
			"trigger": "runkit_constant_remove()",
			"contents": "runkit_constant_remove(${1:constname})",
			"kind": "function",
			"details": "Remove/Delete an already defined constant"
		},
		{
			"trigger": "runkit_function_add()",
			"contents": "runkit_function_add(${1:funcname}, ${2:arglist}, ${3:code})",
			"kind": "function",
			"details": "Add a new function, similar to create_function()"
		},
		{
			"trigger": "runkit_function_copy()",
			"contents": "runkit_function_copy(${1:funcname}, ${2:targetname})",
			"kind": "function",
			"details": "Copy a function to a new function name"
		},
		{
			"trigger": "runkit_function_redefine()",
			"contents": "runkit_function_redefine(${1:funcname}, ${2:arglist}, ${3:code})",
			"kind": "function",
			"details": "Replace a function definition with a new implementation"
		},
		{
			"trigger": "runkit_function_remove()",
			"contents": "runkit_function_remove(${1:funcname})",
			"kind": "function",
			"details": "Remove a function definition"
		},
		{
			"trigger": "runkit_function_rename()",
			"contents": "runkit_function_rename(${1:funcname}, ${2:newname})",
			"kind": "function",
			"details": "Change a function's name"
		},
		{
			"trigger": "runkit_import()",
			"contents": "runkit_import(${1:filename})",
			"kind": "function",
			"details": "Process a PHP file importing function and class definitions, overwriting where appropriate"
		},
		{
			"trigger": "runkit_lint()",
			"contents": "runkit_lint(${1:code})",
			"kind": "function",
			"details": "Check the PHP syntax of the specified php code"
		},
		{
			"trigger": "runkit_lint_file()",
			"contents": "runkit_lint_file(${1:filename})",
			"kind": "function",
			"details": "Check the PHP syntax of the specified file"
		},
		{
			"trigger": "runkit_method_add()",
			"contents": "runkit_method_add(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})",
			"kind": "function",
			"details": "Dynamically adds a new method to a given class"
		},
		{
			"trigger": "runkit_method_copy()",
			"contents": "runkit_method_copy(${1:dClass}, ${2:dMethod}, ${3:sClass})",
			"kind": "function",
			"details": "Copies a method from class to another"
		},
		{
			"trigger": "runkit_method_redefine()",
			"contents": "runkit_method_redefine(${1:classname}, ${2:methodname}, ${3:args}, ${4:code})",
			"kind": "function",
			"details": "Dynamically changes the code of the given method"
		},
		{
			"trigger": "runkit_method_remove()",
			"contents": "runkit_method_remove(${1:classname}, ${2:methodname})",
			"kind": "function",
			"details": "Dynamically removes the given method"
		},
		{
			"trigger": "runkit_method_rename()",
			"contents": "runkit_method_rename(${1:classname}, ${2:methodname}, ${3:newname})",
			"kind": "function",
			"details": "Dynamically changes the name of the given method"
		},
		{
			"trigger": "runkit_return_value_used()",
			"contents": "runkit_return_value_used()",
			"kind": "function",
			"details": "Determines if the current functions return value will be used"
		},
		{
			"trigger": "runkit_sandbox_output_handler()",
			"contents": "runkit_sandbox_output_handler(${1:sandbox})",
			"kind": "function",
			"details": "Specify a function to capture and/or process output from a runkit sandbox"
		},
		{
			"trigger": "runkit_superglobals()",
			"contents": "runkit_superglobals()",
			"kind": "function",
			"details": "Return numerically indexed array of registered superglobals"
		},
		{
			"trigger": "scandir()",
			"contents": "scandir(${1:directory})",
			"kind": "function",
			"details": "List files and directories inside the specified path"
		},
		{
			"trigger": "sem_acquire()",
			"contents": "sem_acquire(${1:sem_identifier})",
			"kind": "function",
			"details": "Acquire a semaphore"
		},
		{
			"trigger": "sem_get()",
			"contents": "sem_get(${1:key})",
			"kind": "function",
			"details": "Get a semaphore id"
		},
		{
			"trigger": "sem_release()",
			"contents": "sem_release(${1:sem_identifier})",
			"kind": "function",
			"details": "Release a semaphore"
		},
		{
			"trigger": "sem_remove()",
			"contents": "sem_remove(${1:sem_identifier})",
			"kind": "function",
			"details": "Remove a semaphore"
		},
		{
			"trigger": "serialize()",
			"contents": "serialize(${1:value})",
			"kind": "function",
			"details": "Generates a storable representation of a value"
		},
		{
			"trigger": "session_cache_expire()",
			"contents": "session_cache_expire()",
			"kind": "function",
			"details": "Return current cache expire"
		},
		{
			"trigger": "session_cache_limiter()",
			"contents": "session_cache_limiter()",
			"kind": "function",
			"details": "Get and/or set the current cache limiter"
		},
		{
			"trigger": "session_commit()",
			"contents": "session_commit()",
			"kind": "function",
			"details": "Alias of session_write_close()"
		},
		{
			"trigger": "session_decode()",
			"contents": "session_decode(${1:data})",
			"kind": "function",
			"details": "Decodes session data from a session encoded string"
		},
		{
			"trigger": "session_destroy()",
			"contents": "session_destroy()",
			"kind": "function",
			"details": "Destroys all data registered to a session"
		},
		{
			"trigger": "session_encode()",
			"contents": "session_encode()",
			"kind": "function",
			"details": "Encodes the current session data as a session encoded string"
		},
		{
			"trigger": "session_get_cookie_params()",
			"contents": "session_get_cookie_params()",
			"kind": "function",
			"details": "Get the session cookie parameters"
		},
		{
			"trigger": "session_id()",
			"contents": "session_id()",
			"kind": "function",
			"details": "Get and/or set the current session id"
		},
		{
			"trigger": "session_is_registered()",
			"contents": "session_is_registered(${1:name})",
			"kind": "function",
			"details": "Find out whether a global variable is registered in a session"
		},
		{
			"trigger": "session_module_name()",
			"contents": "session_module_name()",
			"kind": "function",
			"details": "Get and/or set the current session module"
		},
		{
			"trigger": "session_name()",
			"contents": "session_name()",
			"kind": "function",
			"details": "Get and/or set the current session name"
		},
		{
			"trigger": "session_pgsql_add_error()",
			"contents": "session_pgsql_add_error(${1:error_level})",
			"kind": "function",
			"details": "Increments error counts and sets last error message"
		},
		{
			"trigger": "session_pgsql_get_error()",
			"contents": "session_pgsql_get_error()",
			"kind": "function",
			"details": "Returns number of errors and last error message"
		},
		{
			"trigger": "session_pgsql_get_field()",
			"contents": "session_pgsql_get_field()",
			"kind": "function",
			"details": "Get custom field value"
		},
		{
			"trigger": "session_pgsql_reset()",
			"contents": "session_pgsql_reset()",
			"kind": "function",
			"details": "Reset connection to session database servers"
		},
		{
			"trigger": "session_pgsql_set_field()",
			"contents": "session_pgsql_set_field(${1:value})",
			"kind": "function",
			"details": "Set custom field value"
		},
		{
			"trigger": "session_pgsql_status()",
			"contents": "session_pgsql_status()",
			"kind": "function",
			"details": "Get current save handler status"
		},
		{
			"trigger": "session_regenerate_id()",
			"contents": "session_regenerate_id()",
			"kind": "function",
			"details": "Update the current session id with a newly generated one"
		},
		{
			"trigger": "session_register()",
			"contents": "session_register(${1:name})",
			"kind": "function",
			"details": "Register one or more global variables with the current session"
		},
		{
			"trigger": "session_save_path()",
			"contents": "session_save_path()",
			"kind": "function",
			"details": "Get and/or set the current session save path"
		},
		{
			"trigger": "session_set_cookie_params()",
			"contents": "session_set_cookie_params(${1:lifetime})",
			"kind": "function",
			"details": "Set the session cookie parameters"
		},
		{
			"trigger": "session_set_save_handler()",
			"contents": "session_set_save_handler(${1:open}, ${2:close}, ${3:read}, ${4:write}, ${5:destroy}, ${6:gc})",
			"kind": "function",
			"details": "Sets user-level session storage functions"
		},
		{
			"trigger": "session_start()",
			"contents": "session_start()",
			"kind": "function",
			"details": "Start new or resume existing session"
		},
		{
			"trigger": "session_unregister()",
			"contents": "session_unregister(${1:name})",
			"kind": "function",
			"details": "Unregister a global variable from the current session"
		},
		{
			"trigger": "session_unset()",
			"contents": "session_unset()",
			"kind": "function",
			"details": "Free all session variables"
		},
		{
			"trigger": "session_write_close()",
			"contents": "session_write_close()",
			"kind": "function",
			"details": "Write session data and end session"
		},
		{
			"trigger": "set_error_handler()",
			"contents": "set_error_handler(${1:error_handler})",
			"kind": "function",
			"details": "Sets a user-defined error handler function"
		},
		{
			"trigger": "set_exception_handler()",
			"contents": "set_exception_handler(${1:exception_handler})",
			"kind": "function",
			"details": "Sets a user-defined exception handler function"
		},
		{
			"trigger": "set_file_buffer()",
			"contents": "set_file_buffer()",
			"kind": "function",
			"details": "Alias of stream_set_write_buffer()"
		},
		{
			"trigger": "set_include_path()",
			"contents": "set_include_path(${1:new_include_path})",
			"kind": "function",
			"details": "Sets the include_path configuration option"
		},
		{
			"trigger": "set_magic_quotes_runtime()",
			"contents": "set_magic_quotes_runtime(${1:new_setting})",
			"kind": "function",
			"details": "Sets the current active configuration setting of magic_quotes_runtime"
		},
		{
			"trigger": "set_socket_blocking()",
			"contents": "set_socket_blocking()",
			"kind": "function",
			"details": "Alias of stream_set_blocking()"
		},
		{
			"trigger": "set_time_limit()",
			"contents": "set_time_limit(${1:seconds})",
			"kind": "function",
			"details": "Limits the maximum execution time"
		},
		{
			"trigger": "setcookie()",
			"contents": "setcookie(${1:name})",
			"kind": "function",
			"details": "Send a cookie"
		},
		{
			"trigger": "setlocale()",
			"contents": "setlocale(${1:category}, ${2:locale})",
			"kind": "function",
			"details": "Set locale information"
		},
		{
			"trigger": "setrawcookie()",
			"contents": "setrawcookie(${1:name})",
			"kind": "function",
			"details": "Send a cookie without urlencoding the cookie value"
		},
		{
			"trigger": "settype()",
			"contents": "settype(${1:var}, ${2:type})",
			"kind": "function",
			"details": "Set the type of a variable"
		},
		{
			"trigger": "sha1()",
			"contents": "sha1(${1:str})",
			"kind": "function",
			"details": "Calculate the sha1 hash of a string"
		},
		{
			"trigger": "sha1_file()",
			"contents": "sha1_file(${1:filename})",
			"kind": "function",
			"details": "Calculate the sha1 hash of a file"
		},
		{
			"trigger": "shell_exec()",
			"contents": "shell_exec(${1:cmd})",
			"kind": "function",
			"details": "Execute command via shell and return the complete output as a string"
		},
		{
			"trigger": "shm_attach()",
			"contents": "shm_attach(${1:key})",
			"kind": "function",
			"details": "Creates or open a shared memory segment"
		},
		{
			"trigger": "shm_detach()",
			"contents": "shm_detach(${1:shm_identifier})",
			"kind": "function",
			"details": "Disconnects from shared memory segment"
		},
		{
			"trigger": "shm_get_var()",
			"contents": "shm_get_var(${1:shm_identifier}, ${2:variable_key})",
			"kind": "function",
			"details": "Returns a variable from shared memory"
		},
		{
			"trigger": "shm_has_var()",
			"contents": "shm_has_var(${1:shm_identifier}, ${2:variable_key})",
			"kind": "function",
			"details": "Check whether a specific entry exists"
		},
		{
			"trigger": "shm_put_var()",
			"contents": "shm_put_var(${1:shm_identifier}, ${2:variable_key}, ${3:variable})",
			"kind": "function",
			"details": "Inserts or updates a variable in shared memory"
		},
		{
			"trigger": "shm_remove()",
			"contents": "shm_remove(${1:shm_identifier})",
			"kind": "function",
			"details": "Removes shared memory from Unix systems"
		},
		{
			"trigger": "shm_remove_var()",
			"contents": "shm_remove_var(${1:shm_identifier}, ${2:variable_key})",
			"kind": "function",
			"details": "Removes a variable from shared memory"
		},
		{
			"trigger": "shmop_close()",
			"contents": "shmop_close(${1:shmid})",
			"kind": "function",
			"details": "Close shared memory block"
		},
		{
			"trigger": "shmop_delete()",
			"contents": "shmop_delete(${1:shmid})",
			"kind": "function",
			"details": "Delete shared memory block"
		},
		{
			"trigger": "shmop_open()",
			"contents": "shmop_open(${1:key}, ${2:flags}, ${3:mode}, ${4:size})",
			"kind": "function",
			"details": "Create or open shared memory block"
		},
		{
			"trigger": "shmop_read()",
			"contents": "shmop_read(${1:shmid}, ${2:start}, ${3:count})",
			"kind": "function",
			"details": "Read data from shared memory block"
		},
		{
			"trigger": "shmop_size()",
			"contents": "shmop_size(${1:shmid})",
			"kind": "function",
			"details": "Get size of shared memory block"
		},
		{
			"trigger": "shmop_write()",
			"contents": "shmop_write(${1:shmid}, ${2:data}, ${3:offset})",
			"kind": "function",
			"details": "Write data into shared memory block"
		},
		{
			"trigger": "show_source()",
			"contents": "show_source()",
			"kind": "function",
			"details": "Alias of highlight_file()"
		},
		{
			"trigger": "shuffle()",
			"contents": "shuffle(${1:array})",
			"kind": "function",
			"details": "Shuffle an array"
		},
		{
			"trigger": "signeurlpaiement()",
			"contents": "signeurlpaiement(${1:clent}, ${2:data})",
			"kind": "function"
		},
		{
			"trigger": "similar_text()",
			"contents": "similar_text(${1:first}, ${2:second})",
			"kind": "function",
			"details": "Calculate the similarity between two strings"
		},
		{
			"trigger": "simplexml_import_dom()",
			"contents": "simplexml_import_dom(${1:node})",
			"kind": "function",
			"details": "Get a SimpleXMLElement object from a DOM node"
		},
		{
			"trigger": "simplexml_load_file()",
			"contents": "simplexml_load_file(${1:filename})",
			"kind": "function",
			"details": "Interprets an XML file into an object"
		},
		{
			"trigger": "simplexml_load_string()",
			"contents": "simplexml_load_string(${1:data})",
			"kind": "function",
			"details": "Interprets a string of XML into an object"
		},
		{
			"trigger": "sin()",
			"contents": "sin(${1:arg})",
			"kind": "function",
			"details": "Sine"
		},
		{
			"trigger": "sinh()",
			"contents": "sinh(${1:arg})",
			"kind": "function",
			"details": "Hyperbolic sine"
		},
		{
			"trigger": "sizeof()",
			"contents": "sizeof()",
			"kind": "function",
			"details": "Alias of count()"
		},
		{
			"trigger": "sleep()",
			"contents": "sleep(${1:seconds})",
			"kind": "function",
			"details": "Delay execution"
		},
		{
			"trigger": "snmp2_get()",
			"contents": "snmp2_get(${1:host}, ${2:community}, ${3:object_id})",
			"kind": "function",
			"details": "Fetch an SNMP object"
		},
		{
			"trigger": "snmp2_getnext()",
			"contents": "snmp2_getnext(${1:host}, ${2:community}, ${3:object_id})",
			"kind": "function",
			"details": "Fetch the SNMP object which follows the given object id"
		},
		{
			"trigger": "snmp2_real_walk()",
			"contents": "snmp2_real_walk(${1:host}, ${2:community}, ${3:object_id})",
			"kind": "function",
			"details": "Return all objects including their respective object ID within the specified one"
		},
		{
			"trigger": "snmp2_set()",
			"contents": "snmp2_set(${1:host}, ${2:community}, ${3:object_id}, ${4:type}, ${5:value})",
			"kind": "function",
			"details": "Set the value of an SNMP object"
		},
		{
			"trigger": "snmp2_walk()",
			"contents": "snmp2_walk(${1:host}, ${2:community}, ${3:object_id})",
			"kind": "function",
			"details": "Fetch all the SNMP objects from an agent"
		},
		{
			"trigger": "snmp3_get()",
			"contents": "snmp3_get(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})",
			"kind": "function",
			"details": "Fetch an SNMP object"
		},
		{
			"trigger": "snmp3_getnext()",
			"contents": "snmp3_getnext(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})",
			"kind": "function",
			"details": "Fetch the SNMP object which follows the given object id"
		},
		{
			"trigger": "snmp3_real_walk()",
			"contents": "snmp3_real_walk(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})",
			"kind": "function",
			"details": "Return all objects including their respective object ID within the specified one"
		},
		{
			"trigger": "snmp3_set()",
			"contents": "snmp3_set(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id}, ${9:type}, ${10:value})",
			"kind": "function",
			"details": "Set the value of an SNMP object"
		},
		{
			"trigger": "snmp3_walk()",
			"contents": "snmp3_walk(${1:host}, ${2:sec_name}, ${3:sec_level}, ${4:auth_protocol}, ${5:auth_passphrase}, ${6:priv_protocol}, ${7:priv_passphrase}, ${8:object_id})",
			"kind": "function",
			"details": "Fetch all the SNMP objects from an agent"
		},
		{
			"trigger": "snmp_get_quick_print()",
			"contents": "snmp_get_quick_print()",
			"kind": "function",
			"details": "Fetches the current value of the UCD library's quick_print setting"
		},
		{
			"trigger": "snmp_get_valueretrieval()",
			"contents": "snmp_get_valueretrieval()",
			"kind": "function",
			"details": "Return the method how the SNMP values will be returned"
		},
		{
			"trigger": "snmp_read_mib()",
			"contents": "snmp_read_mib(${1:filename})",
			"kind": "function",
			"details": "Reads and parses a MIB file into the active MIB tree"
		},
		{
			"trigger": "snmp_set_enum_print()",
			"contents": "snmp_set_enum_print(${1:enum_print})",
			"kind": "function",
			"details": "Return all values that are enums with their enum value instead of the raw integer"
		},
		{
			"trigger": "snmp_set_oid_numeric_print()",
			"contents": "snmp_set_oid_numeric_print(${1:oid_numeric_print})",
			"kind": "function",
			"details": "Set the OID output format"
		},
		{
			"trigger": "snmp_set_oid_output_format()",
			"contents": "snmp_set_oid_output_format(${1:oid_format = SNMP_OID_OUTPUT_MODULE})",
			"kind": "function",
			"details": "Set the OID output format"
		},
		{
			"trigger": "snmp_set_quick_print()",
			"contents": "snmp_set_quick_print(${1:quick_print})",
			"kind": "function",
			"details": "Set the value of quick_print within the UCD SNMP library"
		},
		{
			"trigger": "snmp_set_valueretrieval()",
			"contents": "snmp_set_valueretrieval(${1:method})",
			"kind": "function",
			"details": "Specify the method how the SNMP values will be returned"
		},
		{
			"trigger": "snmpget()",
			"contents": "snmpget(${1:hostname}, ${2:community}, ${3:object_id})",
			"kind": "function",
			"details": "Fetch an SNMP object"
		},
		{
			"trigger": "snmpgetnext()",
			"contents": "snmpgetnext(${1:host}, ${2:community}, ${3:object_id})",
			"kind": "function",
			"details": "Fetch the SNMP object which follows the given object id"
		},
		{
			"trigger": "snmprealwalk()",
			"contents": "snmprealwalk(${1:host}, ${2:community}, ${3:object_id})",
			"kind": "function",
			"details": "Return all objects including their respective object ID within the specified one"
		},
		{
			"trigger": "snmpset()",
			"contents": "snmpset(${1:host}, ${2:community}, ${3:object_id}, ${4:type}, ${5:value})",
			"kind": "function",
			"details": "Set the value of an SNMP object"
		},
		{
			"trigger": "snmpwalk()",
			"contents": "snmpwalk(${1:hostname}, ${2:community}, ${3:object_id})",
			"kind": "function",
			"details": "Fetch all the SNMP objects from an agent"
		},
		{
			"trigger": "snmpwalkoid()",
			"contents": "snmpwalkoid(${1:hostname}, ${2:community}, ${3:object_id})",
			"kind": "function",
			"details": "Query for a tree of information about a network entity"
		},
		{
			"trigger": "socket_accept()",
			"contents": "socket_accept(${1:socket})",
			"kind": "function",
			"details": "Accepts a connection on a socket"
		},
		{
			"trigger": "socket_bind()",
			"contents": "socket_bind(${1:socket}, ${2:address})",
			"kind": "function",
			"details": "Binds a name to a socket"
		},
		{
			"trigger": "socket_clear_error()",
			"contents": "socket_clear_error()",
			"kind": "function",
			"details": "Clears the error on the socket or the last error code"
		},
		{
			"trigger": "socket_close()",
			"contents": "socket_close(${1:socket})",
			"kind": "function",
			"details": "Closes a socket resource"
		},
		{
			"trigger": "socket_connect()",
			"contents": "socket_connect(${1:socket}, ${2:address})",
			"kind": "function",
			"details": "Initiates a connection on a socket"
		},
		{
			"trigger": "socket_create()",
			"contents": "socket_create(${1:domain}, ${2:type}, ${3:protocol})",
			"kind": "function",
			"details": "Create a socket (endpoint for communication)"
		},
		{
			"trigger": "socket_create_listen()",
			"contents": "socket_create_listen(${1:port})",
			"kind": "function",
			"details": "Opens a socket on port to accept connections"
		},
		{
			"trigger": "socket_create_pair()",
			"contents": "socket_create_pair(${1:domain}, ${2:type}, ${3:protocol}, ${4:fd})",
			"kind": "function",
			"details": "Creates a pair of indistinguishable sockets and stores them in an array"
		},
		{
			"trigger": "socket_get_option()",
			"contents": "socket_get_option(${1:socket}, ${2:level}, ${3:optname})",
			"kind": "function",
			"details": "Gets socket options for the socket"
		},
		{
			"trigger": "socket_get_status()",
			"contents": "socket_get_status()",
			"kind": "function",
			"details": "Alias of stream_get_meta_data()"
		},
		{
			"trigger": "socket_getpeername()",
			"contents": "socket_getpeername(${1:socket}, ${2:address})",
			"kind": "function",
			"details": "Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type"
		},
		{
			"trigger": "socket_getsockname()",
			"contents": "socket_getsockname(${1:socket}, ${2:addr})",
			"kind": "function",
			"details": "Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type"
		},
		{
			"trigger": "socket_last_error()",
			"contents": "socket_last_error()",
			"kind": "function",
			"details": "Returns the last error on the socket"
		},
		{
			"trigger": "socket_listen()",
			"contents": "socket_listen(${1:socket})",
			"kind": "function",
			"details": "Listens for a connection on a socket"
		},
		{
			"trigger": "socket_read()",
			"contents": "socket_read(${1:socket}, ${2:length})",
			"kind": "function",
			"details": "Reads a maximum of length bytes from a socket"
		},
		{
			"trigger": "socket_recv()",
			"contents": "socket_recv(${1:socket}, ${2:buf}, ${3:len}, ${4:flags})",
			"kind": "function",
			"details": "Receives data from a connected socket"
		},
		{
			"trigger": "socket_recvfrom()",
			"contents": "socket_recvfrom(${1:socket}, ${2:buf}, ${3:len}, ${4:flags}, ${5:name})",
			"kind": "function",
			"details": "Receives data from a socket whether or not it is connection-oriented"
		},
		{
			"trigger": "socket_select()",
			"contents": "socket_select(${1:read}, ${2:write}, ${3:except}, ${4:tv_sec})",
			"kind": "function",
			"details": "Runs the select() system call on the given arrays of sockets with a specified timeout"
		},
		{
			"trigger": "socket_send()",
			"contents": "socket_send(${1:socket}, ${2:buf}, ${3:len}, ${4:flags})",
			"kind": "function",
			"details": "Sends data to a connected socket"
		},
		{
			"trigger": "socket_sendto()",
			"contents": "socket_sendto(${1:socket}, ${2:buf}, ${3:len}, ${4:flags}, ${5:addr})",
			"kind": "function",
			"details": "Sends a message to a socket, whether it is connected or not"
		},
		{
			"trigger": "socket_set_block()",
			"contents": "socket_set_block(${1:socket})",
			"kind": "function",
			"details": "Sets blocking mode on a socket resource"
		},
		{
			"trigger": "socket_set_blocking()",
			"contents": "socket_set_blocking()",
			"kind": "function",
			"details": "Alias of stream_set_blocking()"
		},
		{
			"trigger": "socket_set_nonblock()",
			"contents": "socket_set_nonblock(${1:socket})",
			"kind": "function",
			"details": "Sets nonblocking mode for file descriptor fd"
		},
		{
			"trigger": "socket_set_option()",
			"contents": "socket_set_option(${1:socket}, ${2:level}, ${3:optname}, ${4:optval})",
			"kind": "function",
			"details": "Sets socket options for the socket"
		},
		{
			"trigger": "socket_set_timeout()",
			"contents": "socket_set_timeout()",
			"kind": "function",
			"details": "Alias of stream_set_timeout()"
		},
		{
			"trigger": "socket_shutdown()",
			"contents": "socket_shutdown(${1:socket})",
			"kind": "function",
			"details": "Shuts down a socket for receiving, sending, or both"
		},
		{
			"trigger": "socket_strerror()",
			"contents": "socket_strerror(${1:errno})",
			"kind": "function",
			"details": "Return a string describing a socket error"
		},
		{
			"trigger": "socket_write()",
			"contents": "socket_write(${1:socket}, ${2:buffer})",
			"kind": "function",
			"details": "Write to a socket"
		},
		{
			"trigger": "solr_get_version()",
			"contents": "solr_get_version()",
			"kind": "function",
			"details": "Returns the current version of the Apache Solr extension"
		},
		{
			"trigger": "sort()",
			"contents": "sort(${1:array})",
			"kind": "function",
			"details": "Sort an array"
		},
		{
			"trigger": "soundex()",
			"contents": "soundex(${1:str})",
			"kind": "function",
			"details": "Calculate the soundex key of a string"
		},
		{
			"trigger": "spl_autoload()",
			"contents": "spl_autoload(${1:class_name})",
			"kind": "function",
			"details": "Default implementation for __autoload()"
		},
		{
			"trigger": "spl_autoload_call()",
			"contents": "spl_autoload_call(${1:class_name})",
			"kind": "function",
			"details": "Try all registered __autoload() functions to load the requested class"
		},
		{
			"trigger": "spl_autoload_extensions()",
			"contents": "spl_autoload_extensions()",
			"kind": "function",
			"details": "Register and return default file extensions for spl_autoload"
		},
		{
			"trigger": "spl_autoload_functions()",
			"contents": "spl_autoload_functions()",
			"kind": "function",
			"details": "Return all registered __autoload() functions"
		},
		{
			"trigger": "spl_autoload_register()",
			"contents": "spl_autoload_register()",
			"kind": "function",
			"details": "Register given function as __autoload() implementation"
		},
		{
			"trigger": "spl_autoload_unregister()",
			"contents": "spl_autoload_unregister(${1:autoload_function})",
			"kind": "function",
			"details": "Unregister given function as __autoload() implementation"
		},
		{
			"trigger": "spl_classes()",
			"contents": "spl_classes()",
			"kind": "function",
			"details": "Return available SPL classes"
		},
		{
			"trigger": "spl_object_hash()",
			"contents": "spl_object_hash(${1:obj})",
			"kind": "function",
			"details": "Return hash id for given object"
		},
		{
			"trigger": "split()",
			"contents": "split(${1:pattern}, ${2:string})",
			"kind": "function",
			"details": "Split string into array by regular expression"
		},
		{
			"trigger": "spliti()",
			"contents": "spliti(${1:pattern}, ${2:string})",
			"kind": "function",
			"details": "Split string into array by regular expression case insensitive"
		},
		{
			"trigger": "sprintf()",
			"contents": "sprintf(${1:format})",
			"kind": "function",
			"details": "Return a formatted string"
		},
		{
			"trigger": "sql_regcase()",
			"contents": "sql_regcase(${1:string})",
			"kind": "function",
			"details": "Make regular expression for case insensitive match"
		},
		{
			"trigger": "sqlite_close()",
			"contents": "sqlite_close(${1:dbhandle})",
			"kind": "function",
			"details": "Closes an open SQLite database"
		},
		{
			"trigger": "sqlite_error_string()",
			"contents": "sqlite_error_string(${1:error_code})",
			"kind": "function",
			"details": "Returns the textual description of an error code"
		},
		{
			"trigger": "sqlite_escape_string()",
			"contents": "sqlite_escape_string(${1:item})",
			"kind": "function",
			"details": "Escapes a string for use as a query parameter"
		},
		{
			"trigger": "sqlite_factory()",
			"contents": "sqlite_factory(${1:filename})",
			"kind": "function",
			"details": "Opens an SQLite database and returns an SQLiteDatabase object"
		},
		{
			"trigger": "sqlite_fetch_string()",
			"contents": "sqlite_fetch_string()",
			"kind": "function",
			"details": "Alias of sqlite_fetch_single()"
		},
		{
			"trigger": "sqlite_has_more()",
			"contents": "sqlite_has_more(${1:result})",
			"kind": "function",
			"details": "Finds whether or not more rows are available"
		},
		{
			"trigger": "sqlite_libencoding()",
			"contents": "sqlite_libencoding()",
			"kind": "function",
			"details": "Returns the encoding of the linked SQLite library"
		},
		{
			"trigger": "sqlite_libversion()",
			"contents": "sqlite_libversion()",
			"kind": "function",
			"details": "Returns the version of the linked SQLite library"
		},
		{
			"trigger": "sqlite_open()",
			"contents": "sqlite_open(${1:filename})",
			"kind": "function",
			"details": "Opens an SQLite database and create the database if it does not exist"
		},
		{
			"trigger": "sqlite_popen()",
			"contents": "sqlite_popen(${1:filename})",
			"kind": "function",
			"details": "Opens a persistent handle to an SQLite database and create the database if it does not exist"
		},
		{
			"trigger": "sqlite_udf_decode_binary()",
			"contents": "sqlite_udf_decode_binary(${1:data})",
			"kind": "function",
			"details": "Decode binary data passed as parameters to an UDF"
		},
		{
			"trigger": "sqlite_udf_encode_binary()",
			"contents": "sqlite_udf_encode_binary(${1:data})",
			"kind": "function",
			"details": "Encode binary data before returning it from an UDF"
		},
		{
			"trigger": "sqrt()",
			"contents": "sqrt(${1:arg})",
			"kind": "function",
			"details": "Square root"
		},
		{
			"trigger": "srand()",
			"contents": "srand()",
			"kind": "function",
			"details": "Seed the random number generator"
		},
		{
			"trigger": "sscanf()",
			"contents": "sscanf(${1:str}, ${2:format})",
			"kind": "function",
			"details": "Parses input from a string according to a format"
		},
		{
			"trigger": "ssdeep_fuzzy_compare()",
			"contents": "ssdeep_fuzzy_compare(${1:signature1}, ${2:signature2})",
			"kind": "function",
			"details": "Calculates the match score between two fuzzy hash signatures"
		},
		{
			"trigger": "ssdeep_fuzzy_hash()",
			"contents": "ssdeep_fuzzy_hash(${1:to_hash})",
			"kind": "function",
			"details": "Create a fuzzy hash from a string"
		},
		{
			"trigger": "ssdeep_fuzzy_hash_filename()",
			"contents": "ssdeep_fuzzy_hash_filename(${1:file_name})",
			"kind": "function",
			"details": "Create a fuzzy hash from a file"
		},
		{
			"trigger": "ssh2_auth_hostbased_file()",
			"contents": "ssh2_auth_hostbased_file(${1:session}, ${2:username}, ${3:hostname}, ${4:pubkeyfile}, ${5:privkeyfile})",
			"kind": "function",
			"details": "Authenticate using a public hostkey"
		},
		{
			"trigger": "ssh2_auth_none()",
			"contents": "ssh2_auth_none(${1:session}, ${2:username})",
			"kind": "function",
			"details": "Authenticate as \"none\""
		},
		{
			"trigger": "ssh2_auth_password()",
			"contents": "ssh2_auth_password(${1:session}, ${2:username}, ${3:password})",
			"kind": "function",
			"details": "Authenticate over SSH using a plain password"
		},
		{
			"trigger": "ssh2_auth_pubkey_file()",
			"contents": "ssh2_auth_pubkey_file(${1:session}, ${2:username}, ${3:pubkeyfile}, ${4:privkeyfile})",
			"kind": "function",
			"details": "Authenticate using a public key"
		},
		{
			"trigger": "ssh2_connect()",
			"contents": "ssh2_connect(${1:host})",
			"kind": "function",
			"details": "Connect to an SSH server"
		},
		{
			"trigger": "ssh2_exec()",
			"contents": "ssh2_exec(${1:session}, ${2:command})",
			"kind": "function",
			"details": "Execute a command on a remote server"
		},
		{
			"trigger": "ssh2_fetch_stream()",
			"contents": "ssh2_fetch_stream(${1:channel}, ${2:streamid})",
			"kind": "function",
			"details": "Fetch an extended data stream"
		},
		{
			"trigger": "ssh2_fingerprint()",
			"contents": "ssh2_fingerprint(${1:session})",
			"kind": "function",
			"details": "Retrieve fingerprint of remote server"
		},
		{
			"trigger": "ssh2_methods_negotiated()",
			"contents": "ssh2_methods_negotiated(${1:session})",
			"kind": "function",
			"details": "Return list of negotiated methods"
		},
		{
			"trigger": "ssh2_publickey_add()",
			"contents": "ssh2_publickey_add(${1:pkey}, ${2:algoname}, ${3:blob})",
			"kind": "function",
			"details": "Add an authorized publickey"
		},
		{
			"trigger": "ssh2_publickey_init()",
			"contents": "ssh2_publickey_init(${1:session})",
			"kind": "function",
			"details": "Initialize Publickey subsystem"
		},
		{
			"trigger": "ssh2_publickey_list()",
			"contents": "ssh2_publickey_list(${1:pkey})",
			"kind": "function",
			"details": "List currently authorized publickeys"
		},
		{
			"trigger": "ssh2_publickey_remove()",
			"contents": "ssh2_publickey_remove(${1:pkey}, ${2:algoname}, ${3:blob})",
			"kind": "function",
			"details": "Remove an authorized publickey"
		},
		{
			"trigger": "ssh2_scp_recv()",
			"contents": "ssh2_scp_recv(${1:session}, ${2:remote_file}, ${3:local_file})",
			"kind": "function",
			"details": "Request a file via SCP"
		},
		{
			"trigger": "ssh2_scp_send()",
			"contents": "ssh2_scp_send(${1:session}, ${2:local_file}, ${3:remote_file})",
			"kind": "function",
			"details": "Send a file via SCP"
		},
		{
			"trigger": "ssh2_sftp()",
			"contents": "ssh2_sftp(${1:session})",
			"kind": "function",
			"details": "Initialize SFTP subsystem"
		},
		{
			"trigger": "ssh2_sftp_lstat()",
			"contents": "ssh2_sftp_lstat(${1:sftp}, ${2:path})",
			"kind": "function",
			"details": "Stat a symbolic link"
		},
		{
			"trigger": "ssh2_sftp_mkdir()",
			"contents": "ssh2_sftp_mkdir(${1:sftp}, ${2:dirname})",
			"kind": "function",
			"details": "Create a directory"
		},
		{
			"trigger": "ssh2_sftp_readlink()",
			"contents": "ssh2_sftp_readlink(${1:sftp}, ${2:link})",
			"kind": "function",
			"details": "Return the target of a symbolic link"
		},
		{
			"trigger": "ssh2_sftp_realpath()",
			"contents": "ssh2_sftp_realpath(${1:sftp}, ${2:filename})",
			"kind": "function",
			"details": "Resolve the realpath of a provided path string"
		},
		{
			"trigger": "ssh2_sftp_rename()",
			"contents": "ssh2_sftp_rename(${1:sftp}, ${2:from}, ${3:to})",
			"kind": "function",
			"details": "Rename a remote file"
		},
		{
			"trigger": "ssh2_sftp_rmdir()",
			"contents": "ssh2_sftp_rmdir(${1:sftp}, ${2:dirname})",
			"kind": "function",
			"details": "Remove a directory"
		},
		{
			"trigger": "ssh2_sftp_stat()",
			"contents": "ssh2_sftp_stat(${1:sftp}, ${2:path})",
			"kind": "function",
			"details": "Stat a file on a remote filesystem"
		},
		{
			"trigger": "ssh2_sftp_symlink()",
			"contents": "ssh2_sftp_symlink(${1:sftp}, ${2:target}, ${3:link})",
			"kind": "function",
			"details": "Create a symlink"
		},
		{
			"trigger": "ssh2_sftp_unlink()",
			"contents": "ssh2_sftp_unlink(${1:sftp}, ${2:filename})",
			"kind": "function",
			"details": "Delete a file"
		},
		{
			"trigger": "ssh2_shell()",
			"contents": "ssh2_shell(${1:session})",
			"kind": "function",
			"details": "Request an interactive shell"
		},
		{
			"trigger": "ssh2_tunnel()",
			"contents": "ssh2_tunnel(${1:session}, ${2:host}, ${3:port})",
			"kind": "function",
			"details": "Open a tunnel through a remote server"
		},
		{
			"trigger": "stat()",
			"contents": "stat(${1:filename})",
			"kind": "function",
			"details": "Gives information about a file"
		},
		{
			"trigger": "stats_absolute_deviation()",
			"contents": "stats_absolute_deviation(${1:a})",
			"kind": "function",
			"details": "Returns the absolute deviation of an array of values"
		},
		{
			"trigger": "stats_cdf_beta()",
			"contents": "stats_cdf_beta(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the beta distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_binomial()",
			"contents": "stats_cdf_binomial(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the binomial distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_cauchy()",
			"contents": "stats_cdf_cauchy(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the Cauchy distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_chisquare()",
			"contents": "stats_cdf_chisquare(${1:par1}, ${2:par2}, ${3:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the chi-square distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_exponential()",
			"contents": "stats_cdf_exponential(${1:par1}, ${2:par2}, ${3:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the exponential distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_f()",
			"contents": "stats_cdf_f(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the F distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_gamma()",
			"contents": "stats_cdf_gamma(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the gamma distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_laplace()",
			"contents": "stats_cdf_laplace(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the Laplace distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_logistic()",
			"contents": "stats_cdf_logistic(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the logistic distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_negative_binomial()",
			"contents": "stats_cdf_negative_binomial(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the negative binomial distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_noncentral_chisquare()",
			"contents": "stats_cdf_noncentral_chisquare(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the non-central chi-square distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_noncentral_f()",
			"contents": "stats_cdf_noncentral_f(${1:par1}, ${2:par2}, ${3:par3}, ${4:par4}, ${5:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the non-central F distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_poisson()",
			"contents": "stats_cdf_poisson(${1:par1}, ${2:par2}, ${3:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the Poisson distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_t()",
			"contents": "stats_cdf_t(${1:par1}, ${2:par2}, ${3:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the t-distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_uniform()",
			"contents": "stats_cdf_uniform(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the uniform distribution given values for the others"
		},
		{
			"trigger": "stats_cdf_weibull()",
			"contents": "stats_cdf_weibull(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function",
			"details": "Calculates any one parameter of the Weibull distribution given values for the others"
		},
		{
			"trigger": "stats_covariance()",
			"contents": "stats_covariance(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Computes the covariance of two data sets"
		},
		{
			"trigger": "stats_den_uniform()",
			"contents": "stats_den_uniform(${1:x}, ${2:a}, ${3:b})",
			"kind": "function"
		},
		{
			"trigger": "stats_dens_beta()",
			"contents": "stats_dens_beta(${1:x}, ${2:a}, ${3:b})",
			"kind": "function",
			"details": "Probability density function of the beta distribution"
		},
		{
			"trigger": "stats_dens_cauchy()",
			"contents": "stats_dens_cauchy(${1:x}, ${2:ave}, ${3:stdev})",
			"kind": "function",
			"details": "Probability density function of the Cauchy distribution"
		},
		{
			"trigger": "stats_dens_chisquare()",
			"contents": "stats_dens_chisquare(${1:x}, ${2:dfr})",
			"kind": "function",
			"details": "Probability density function of the chi-square distribution"
		},
		{
			"trigger": "stats_dens_exponential()",
			"contents": "stats_dens_exponential(${1:x}, ${2:scale})",
			"kind": "function",
			"details": "Probability density function of the exponential distribution"
		},
		{
			"trigger": "stats_dens_f()",
			"contents": "stats_dens_f(${1:x}, ${2:dfr1}, ${3:dfr2})",
			"kind": "function",
			"details": "Probability density function of the F distribution"
		},
		{
			"trigger": "stats_dens_gamma()",
			"contents": "stats_dens_gamma(${1:x}, ${2:shape}, ${3:scale})",
			"kind": "function",
			"details": "Probability density function of the gamma distribution"
		},
		{
			"trigger": "stats_dens_laplace()",
			"contents": "stats_dens_laplace(${1:x}, ${2:ave}, ${3:stdev})",
			"kind": "function",
			"details": "Probability density function of the Laplace distribution"
		},
		{
			"trigger": "stats_dens_logistic()",
			"contents": "stats_dens_logistic(${1:x}, ${2:ave}, ${3:stdev})",
			"kind": "function",
			"details": "Probability density function of the logistic distribution"
		},
		{
			"trigger": "stats_dens_negative_binomial()",
			"contents": "stats_dens_negative_binomial(${1:x}, ${2:n}, ${3:pi})",
			"kind": "function"
		},
		{
			"trigger": "stats_dens_normal()",
			"contents": "stats_dens_normal(${1:x}, ${2:ave}, ${3:stdev})",
			"kind": "function",
			"details": "Probability density function of the normal distribution"
		},
		{
			"trigger": "stats_dens_pmf_binomial()",
			"contents": "stats_dens_pmf_binomial(${1:x}, ${2:n}, ${3:pi})",
			"kind": "function",
			"details": "Probability mass function of the binomial distribution"
		},
		{
			"trigger": "stats_dens_pmf_hypergeometric()",
			"contents": "stats_dens_pmf_hypergeometric(${1:n1}, ${2:n2}, ${3:N1}, ${4:N2})",
			"kind": "function",
			"details": "Probability mass function of the hypergeometric distribution"
		},
		{
			"trigger": "stats_dens_pmf_poisson()",
			"contents": "stats_dens_pmf_poisson(${1:x}, ${2:lb})",
			"kind": "function",
			"details": "Probability mass function of the Poisson distribution"
		},
		{
			"trigger": "stats_dens_t()",
			"contents": "stats_dens_t(${1:x}, ${2:dfr})",
			"kind": "function",
			"details": "Probability density function of the t-distribution"
		},
		{
			"trigger": "stats_dens_weibull()",
			"contents": "stats_dens_weibull(${1:x}, ${2:a}, ${3:b})",
			"kind": "function",
			"details": "Probability density function of the Weibull distribution"
		},
		{
			"trigger": "stats_harmonic_mean()",
			"contents": "stats_harmonic_mean(${1:a})",
			"kind": "function",
			"details": "Returns the harmonic mean of an array of values"
		},
		{
			"trigger": "stats_kurtosis()",
			"contents": "stats_kurtosis(${1:a})",
			"kind": "function",
			"details": "Computes the kurtosis of the data in the array"
		},
		{
			"trigger": "stats_rand_gen_beta()",
			"contents": "stats_rand_gen_beta(${1:a}, ${2:b})",
			"kind": "function",
			"details": "Generates a random deviate from the beta distribution"
		},
		{
			"trigger": "stats_rand_gen_chisquare()",
			"contents": "stats_rand_gen_chisquare(${1:df})",
			"kind": "function",
			"details": "Generates a random deviate from the chi-square distribution"
		},
		{
			"trigger": "stats_rand_gen_exponential()",
			"contents": "stats_rand_gen_exponential(${1:av})",
			"kind": "function",
			"details": "Generates a random deviate from the exponential distribution"
		},
		{
			"trigger": "stats_rand_gen_f()",
			"contents": "stats_rand_gen_f(${1:dfn}, ${2:dfd})",
			"kind": "function",
			"details": "Generates a random deviate from the F distribution"
		},
		{
			"trigger": "stats_rand_gen_funiform()",
			"contents": "stats_rand_gen_funiform(${1:low}, ${2:high})",
			"kind": "function",
			"details": "Generates uniform float between low (exclusive) and high (exclusive)"
		},
		{
			"trigger": "stats_rand_gen_gamma()",
			"contents": "stats_rand_gen_gamma(${1:a}, ${2:r})",
			"kind": "function",
			"details": "Generates a random deviate from the gamma distribution"
		},
		{
			"trigger": "stats_rand_gen_ibinomial()",
			"contents": "stats_rand_gen_ibinomial(${1:n}, ${2:pp})",
			"kind": "function",
			"details": "Generates a random deviate from the binomial distribution"
		},
		{
			"trigger": "stats_rand_gen_ibinomial_negative()",
			"contents": "stats_rand_gen_ibinomial_negative(${1:n}, ${2:p})",
			"kind": "function",
			"details": "Generates a random deviate from the negative binomial distribution"
		},
		{
			"trigger": "stats_rand_gen_int()",
			"contents": "stats_rand_gen_int()",
			"kind": "function",
			"details": "Generates random integer between 1 and 2147483562"
		},
		{
			"trigger": "stats_rand_gen_ipoisson()",
			"contents": "stats_rand_gen_ipoisson(${1:mu})",
			"kind": "function",
			"details": "Generates a single random deviate from a Poisson distribution"
		},
		{
			"trigger": "stats_rand_gen_iuniform()",
			"contents": "stats_rand_gen_iuniform(${1:low}, ${2:high})",
			"kind": "function",
			"details": "Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive)"
		},
		{
			"trigger": "stats_rand_gen_noncenral_chisquare()",
			"contents": "stats_rand_gen_noncenral_chisquare(${1:df}, ${2:xnonc})",
			"kind": "function",
			"details": "Returns a random deviate from the non-central chi-square distribution with degrees of freedom, df, and non-centrality parameter, xnonc."
		},
		{
			"trigger": "stats_rand_gen_noncentral_f()",
			"contents": "stats_rand_gen_noncentral_f(${1:dfn}, ${2:dfd}, ${3:xnonc})",
			"kind": "function",
			"details": "Generates a random deviate from the noncentral F distribution"
		},
		{
			"trigger": "stats_rand_gen_noncentral_t()",
			"contents": "stats_rand_gen_noncentral_t(${1:df}, ${2:xnonc})",
			"kind": "function",
			"details": "Generates a single random deviate from a non-central t-distribution"
		},
		{
			"trigger": "stats_rand_gen_normal()",
			"contents": "stats_rand_gen_normal(${1:av}, ${2:sd})",
			"kind": "function",
			"details": "Generates a single random deviate from a normal distribution"
		},
		{
			"trigger": "stats_rand_gen_t()",
			"contents": "stats_rand_gen_t(${1:df})",
			"kind": "function",
			"details": "Generates a single random deviate from a t-distribution"
		},
		{
			"trigger": "stats_rand_get_seeds()",
			"contents": "stats_rand_get_seeds()",
			"kind": "function",
			"details": "Get the seed values of the random number generator"
		},
		{
			"trigger": "stats_rand_phrase_to_seeds()",
			"contents": "stats_rand_phrase_to_seeds(${1:phrase})",
			"kind": "function",
			"details": "Generate two seeds for the RGN random number generator"
		},
		{
			"trigger": "stats_rand_ranf()",
			"contents": "stats_rand_ranf()",
			"kind": "function",
			"details": "Generates a random floating point number between 0 and 1"
		},
		{
			"trigger": "stats_rand_setall()",
			"contents": "stats_rand_setall(${1:iseed1}, ${2:iseed2})",
			"kind": "function",
			"details": "Set seed values to the random generator"
		},
		{
			"trigger": "stats_skew()",
			"contents": "stats_skew(${1:a})",
			"kind": "function",
			"details": "Computes the skewness of the data in the array"
		},
		{
			"trigger": "stats_standard_deviation()",
			"contents": "stats_standard_deviation(${1:a})",
			"kind": "function",
			"details": "Returns the standard deviation"
		},
		{
			"trigger": "stats_stat_binomial_coef()",
			"contents": "stats_stat_binomial_coef(${1:x}, ${2:n})",
			"kind": "function",
			"details": "Returns a binomial coefficient"
		},
		{
			"trigger": "stats_stat_correlation()",
			"contents": "stats_stat_correlation(${1:arr1}, ${2:arr2})",
			"kind": "function",
			"details": "Returns the Pearson correlation coefficient of two data sets"
		},
		{
			"trigger": "stats_stat_gennch()",
			"contents": "stats_stat_gennch(${1:n})",
			"kind": "function"
		},
		{
			"trigger": "stats_stat_independent_t()",
			"contents": "stats_stat_independent_t(${1:arr1}, ${2:arr2})",
			"kind": "function",
			"details": "Returns the t-value from the independent two-sample t-test"
		},
		{
			"trigger": "stats_stat_innerproduct()",
			"contents": "stats_stat_innerproduct(${1:arr1}, ${2:arr2})",
			"kind": "function",
			"details": "Returns the inner product of two vectors"
		},
		{
			"trigger": "stats_stat_noncentral_t()",
			"contents": "stats_stat_noncentral_t(${1:par1}, ${2:par2}, ${3:par3}, ${4:which})",
			"kind": "function"
		},
		{
			"trigger": "stats_stat_paired_t()",
			"contents": "stats_stat_paired_t(${1:arr1}, ${2:arr2})",
			"kind": "function",
			"details": "Returns the t-value of the dependent t-test for paired samples"
		},
		{
			"trigger": "stats_stat_percentile()",
			"contents": "stats_stat_percentile(${1:df}, ${2:xnonc})",
			"kind": "function",
			"details": "Returns the percentile value"
		},
		{
			"trigger": "stats_stat_powersum()",
			"contents": "stats_stat_powersum(${1:arr}, ${2:power})",
			"kind": "function",
			"details": "Returns the power sum of a vector"
		},
		{
			"trigger": "stats_variance()",
			"contents": "stats_variance(${1:a})",
			"kind": "function",
			"details": "Returns the variance"
		},
		{
			"trigger": "stomp_connect_error()",
			"contents": "stomp_connect_error()",
			"kind": "function",
			"details": "Returns a string description of the last connect error"
		},
		{
			"trigger": "stomp_version()",
			"contents": "stomp_version()",
			"kind": "function",
			"details": "Gets the current stomp extension version"
		},
		{
			"trigger": "str_contains()",
			"contents": "str_contains(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Checks if a string is contained in another string."
		},
		{
			"trigger": "str_ends_with()",
			"contents": "str_ends_with(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Checks if a string is ended with another string."
		},
		{
			"trigger": "str_getcsv()",
			"contents": "str_getcsv(${1:input})",
			"kind": "function",
			"details": "Parse a CSV string into an array"
		},
		{
			"trigger": "str_ireplace()",
			"contents": "str_ireplace(${1:search}, ${2:replace}, ${3:subject})",
			"kind": "function",
			"details": "Case-insensitive version of str_replace()"
		},
		{
			"trigger": "str_pad()",
			"contents": "str_pad(${1:input}, ${2:pad_length})",
			"kind": "function",
			"details": "Pad a string to a certain length with another string"
		},
		{
			"trigger": "str_repeat()",
			"contents": "str_repeat(${1:input}, ${2:multiplier})",
			"kind": "function",
			"details": "Repeat a string"
		},
		{
			"trigger": "str_replace()",
			"contents": "str_replace(${1:search}, ${2:replace}, ${3:subject})",
			"kind": "function",
			"details": "Replace all occurrences of the search string with the replacement string"
		},
		{
			"trigger": "str_rot13()",
			"contents": "str_rot13(${1:str})",
			"kind": "function",
			"details": "Perform the rot13 transform on a string"
		},
		{
			"trigger": "str_shuffle()",
			"contents": "str_shuffle(${1:str})",
			"kind": "function",
			"details": "Randomly shuffles a string"
		},
		{
			"trigger": "str_split()",
			"contents": "str_split(${1:string})",
			"kind": "function",
			"details": "Convert a string to an array"
		},
		{
			"trigger": "str_starts_with()",
			"contents": "str_starts_with(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Checks if a string is started with another string."
		},
		{
			"trigger": "str_word_count()",
			"contents": "str_word_count(${1:string})",
			"kind": "function",
			"details": "Return information about words used in a string"
		},
		{
			"trigger": "strcasecmp()",
			"contents": "strcasecmp(${1:str1}, ${2:str2})",
			"kind": "function",
			"details": "Binary safe case-insensitive string comparison"
		},
		{
			"trigger": "strchr()",
			"contents": "strchr()",
			"kind": "function",
			"details": "Alias of strstr()"
		},
		{
			"trigger": "strcmp()",
			"contents": "strcmp(${1:str1}, ${2:str2})",
			"kind": "function",
			"details": "Binary safe string comparison"
		},
		{
			"trigger": "strcoll()",
			"contents": "strcoll(${1:str1}, ${2:str2})",
			"kind": "function",
			"details": "Locale based string comparison"
		},
		{
			"trigger": "strcspn()",
			"contents": "strcspn(${1:str1}, ${2:str2})",
			"kind": "function",
			"details": "Find length of initial segment not matching mask"
		},
		{
			"trigger": "stream_bucket_append()",
			"contents": "stream_bucket_append(${1:brigade}, ${2:bucket})",
			"kind": "function",
			"details": "Append bucket to brigade"
		},
		{
			"trigger": "stream_bucket_make_writeable()",
			"contents": "stream_bucket_make_writeable(${1:brigade})",
			"kind": "function",
			"details": "Return a bucket object from the brigade for operating on"
		},
		{
			"trigger": "stream_bucket_new()",
			"contents": "stream_bucket_new(${1:stream}, ${2:buffer})",
			"kind": "function",
			"details": "Create a new bucket for use on the current stream"
		},
		{
			"trigger": "stream_bucket_prepend()",
			"contents": "stream_bucket_prepend(${1:brigade}, ${2:bucket})",
			"kind": "function",
			"details": "Prepend bucket to brigade"
		},
		{
			"trigger": "stream_context_create()",
			"contents": "stream_context_create()",
			"kind": "function",
			"details": "Creates a stream context"
		},
		{
			"trigger": "stream_context_get_default()",
			"contents": "stream_context_get_default()",
			"kind": "function",
			"details": "Retrieve the default stream context"
		},
		{
			"trigger": "stream_context_get_options()",
			"contents": "stream_context_get_options(${1:stream_or_context})",
			"kind": "function",
			"details": "Retrieve options for a stream/wrapper/context"
		},
		{
			"trigger": "stream_context_get_params()",
			"contents": "stream_context_get_params(${1:stream_or_context})",
			"kind": "function",
			"details": "Retrieves parameters from a context"
		},
		{
			"trigger": "stream_context_set_default()",
			"contents": "stream_context_set_default(${1:options})",
			"kind": "function",
			"details": "Set the default stream context"
		},
		{
			"trigger": "stream_context_set_option()",
			"contents": "stream_context_set_option(${1:stream_or_context}, ${2:wrapper}, ${3:option}, ${4:value})",
			"kind": "function",
			"details": "Sets an option for a stream/wrapper/context"
		},
		{
			"trigger": "stream_context_set_params()",
			"contents": "stream_context_set_params(${1:stream_or_context}, ${2:params})",
			"kind": "function",
			"details": "Set parameters for a stream/wrapper/context"
		},
		{
			"trigger": "stream_copy_to_stream()",
			"contents": "stream_copy_to_stream(${1:source}, ${2:dest})",
			"kind": "function",
			"details": "Copies data from one stream to another"
		},
		{
			"trigger": "stream_encoding()",
			"contents": "stream_encoding(${1:stream})",
			"kind": "function"
		},
		{
			"trigger": "stream_filter_append()",
			"contents": "stream_filter_append(${1:stream}, ${2:filtername})",
			"kind": "function",
			"details": "Attach a filter to a stream"
		},
		{
			"trigger": "stream_filter_prepend()",
			"contents": "stream_filter_prepend(${1:stream}, ${2:filtername})",
			"kind": "function",
			"details": "Attach a filter to a stream"
		},
		{
			"trigger": "stream_filter_register()",
			"contents": "stream_filter_register(${1:filtername}, ${2:classname})",
			"kind": "function",
			"details": "Register a user defined stream filter"
		},
		{
			"trigger": "stream_filter_remove()",
			"contents": "stream_filter_remove(${1:stream_filter})",
			"kind": "function",
			"details": "Remove a filter from a stream"
		},
		{
			"trigger": "stream_get_contents()",
			"contents": "stream_get_contents(${1:handle})",
			"kind": "function",
			"details": "Reads remainder of a stream into a string"
		},
		{
			"trigger": "stream_get_filters()",
			"contents": "stream_get_filters()",
			"kind": "function",
			"details": "Retrieve list of registered filters"
		},
		{
			"trigger": "stream_get_line()",
			"contents": "stream_get_line(${1:handle}, ${2:length})",
			"kind": "function",
			"details": "Gets line from stream resource up to a given delimiter"
		},
		{
			"trigger": "stream_get_meta_data()",
			"contents": "stream_get_meta_data(${1:stream})",
			"kind": "function",
			"details": "Retrieves header/meta data from streams/file pointers"
		},
		{
			"trigger": "stream_get_transports()",
			"contents": "stream_get_transports()",
			"kind": "function",
			"details": "Retrieve list of registered socket transports"
		},
		{
			"trigger": "stream_get_wrappers()",
			"contents": "stream_get_wrappers()",
			"kind": "function",
			"details": "Retrieve list of registered streams"
		},
		{
			"trigger": "stream_is_local()",
			"contents": "stream_is_local(${1:stream_or_url})",
			"kind": "function",
			"details": "Checks if a stream is a local stream"
		},
		{
			"trigger": "stream_notification_callback()",
			"contents": "stream_notification_callback(${1:notification_code}, ${2:severity}, ${3:message}, ${4:message_code}, ${5:bytes_transferred}, ${6:bytes_max})",
			"kind": "function",
			"details": "A callback function for the notification context parameter"
		},
		{
			"trigger": "stream_register_wrapper()",
			"contents": "stream_register_wrapper()",
			"kind": "function",
			"details": "Alias of stream_wrapper_register()"
		},
		{
			"trigger": "stream_resolve_include_path()",
			"contents": "stream_resolve_include_path(${1:filename})",
			"kind": "function",
			"details": "Resolve filename against the include path"
		},
		{
			"trigger": "stream_select()",
			"contents": "stream_select(${1:read}, ${2:write}, ${3:except}, ${4:tv_sec})",
			"kind": "function",
			"details": "Runs the equivalent of the select() system call on the given arrays of streams with a timeout specified by tv_sec and tv_usec"
		},
		{
			"trigger": "stream_set_blocking()",
			"contents": "stream_set_blocking(${1:stream}, ${2:mode})",
			"kind": "function",
			"details": "Set blocking/non-blocking mode on a stream"
		},
		{
			"trigger": "stream_set_read_buffer()",
			"contents": "stream_set_read_buffer(${1:stream}, ${2:buffer})",
			"kind": "function",
			"details": "Set read file buffering on the given stream"
		},
		{
			"trigger": "stream_set_timeout()",
			"contents": "stream_set_timeout(${1:stream}, ${2:seconds})",
			"kind": "function",
			"details": "Set timeout period on a stream"
		},
		{
			"trigger": "stream_set_write_buffer()",
			"contents": "stream_set_write_buffer(${1:stream}, ${2:buffer})",
			"kind": "function",
			"details": "Sets write file buffering on the given stream"
		},
		{
			"trigger": "stream_socket_accept()",
			"contents": "stream_socket_accept(${1:server_socket})",
			"kind": "function",
			"details": "Accept a connection on a socket created by stream_socket_server()"
		},
		{
			"trigger": "stream_socket_client()",
			"contents": "stream_socket_client(${1:remote_socket})",
			"kind": "function",
			"details": "Open Internet or Unix domain socket connection"
		},
		{
			"trigger": "stream_socket_enable_crypto()",
			"contents": "stream_socket_enable_crypto(${1:stream}, ${2:enable})",
			"kind": "function",
			"details": "Turns encryption on/off on an already connected socket"
		},
		{
			"trigger": "stream_socket_get_name()",
			"contents": "stream_socket_get_name(${1:handle}, ${2:want_peer})",
			"kind": "function",
			"details": "Retrieve the name of the local or remote sockets"
		},
		{
			"trigger": "stream_socket_pair()",
			"contents": "stream_socket_pair(${1:domain}, ${2:type}, ${3:protocol})",
			"kind": "function",
			"details": "Creates a pair of connected, indistinguishable socket streams"
		},
		{
			"trigger": "stream_socket_recvfrom()",
			"contents": "stream_socket_recvfrom(${1:socket}, ${2:length})",
			"kind": "function",
			"details": "Receives data from a socket, connected or not"
		},
		{
			"trigger": "stream_socket_sendto()",
			"contents": "stream_socket_sendto(${1:socket}, ${2:data})",
			"kind": "function",
			"details": "Sends a message to a socket, whether it is connected or not"
		},
		{
			"trigger": "stream_socket_server()",
			"contents": "stream_socket_server(${1:local_socket})",
			"kind": "function",
			"details": "Create an Internet or Unix domain server socket"
		},
		{
			"trigger": "stream_socket_shutdown()",
			"contents": "stream_socket_shutdown(${1:stream}, ${2:how})",
			"kind": "function",
			"details": "Shutdown a full-duplex connection"
		},
		{
			"trigger": "stream_supports_lock()",
			"contents": "stream_supports_lock(${1:stream})",
			"kind": "function",
			"details": "Tells whether the stream supports locking"
		},
		{
			"trigger": "stream_wrapper_register()",
			"contents": "stream_wrapper_register(${1:protocol}, ${2:classname})",
			"kind": "function",
			"details": "Register a URL wrapper implemented as a PHP class"
		},
		{
			"trigger": "stream_wrapper_restore()",
			"contents": "stream_wrapper_restore(${1:protocol})",
			"kind": "function",
			"details": "Restores a previously unregistered built-in wrapper"
		},
		{
			"trigger": "stream_wrapper_unregister()",
			"contents": "stream_wrapper_unregister(${1:protocol})",
			"kind": "function",
			"details": "Unregister a URL wrapper"
		},
		{
			"trigger": "strftime()",
			"contents": "strftime(${1:format})",
			"kind": "function",
			"details": "Format a local time/date according to locale settings"
		},
		{
			"trigger": "strip_tags()",
			"contents": "strip_tags(${1:str})",
			"kind": "function",
			"details": "Strip HTML and PHP tags from a string"
		},
		{
			"trigger": "stripcslashes()",
			"contents": "stripcslashes(${1:str})",
			"kind": "function",
			"details": "Un-quote string quoted with addcslashes()"
		},
		{
			"trigger": "stripos()",
			"contents": "stripos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find the position of the first occurrence of a case-insensitive substring in a string"
		},
		{
			"trigger": "stripslashes()",
			"contents": "stripslashes(${1:str})",
			"kind": "function",
			"details": "Un-quotes a quoted string"
		},
		{
			"trigger": "stristr()",
			"contents": "stristr(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Case-insensitive strstr()"
		},
		{
			"trigger": "strlen()",
			"contents": "strlen(${1:string})",
			"kind": "function",
			"details": "Get string length"
		},
		{
			"trigger": "strnatcasecmp()",
			"contents": "strnatcasecmp(${1:str1}, ${2:str2})",
			"kind": "function",
			"details": "Case insensitive string comparisons using a \"natural order\" algorithm"
		},
		{
			"trigger": "strnatcmp()",
			"contents": "strnatcmp(${1:str1}, ${2:str2})",
			"kind": "function",
			"details": "String comparisons using a \"natural order\" algorithm"
		},
		{
			"trigger": "strncasecmp()",
			"contents": "strncasecmp(${1:str1}, ${2:str2}, ${3:len})",
			"kind": "function",
			"details": "Binary safe case-insensitive string comparison of the first n characters"
		},
		{
			"trigger": "strncmp()",
			"contents": "strncmp(${1:str1}, ${2:str2}, ${3:len})",
			"kind": "function",
			"details": "Binary safe string comparison of the first n characters"
		},
		{
			"trigger": "strpbrk()",
			"contents": "strpbrk(${1:haystack}, ${2:char_list})",
			"kind": "function",
			"details": "Search a string for any of a set of characters"
		},
		{
			"trigger": "strpos()",
			"contents": "strpos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find the position of the first occurrence of a substring in a string"
		},
		{
			"trigger": "strptime()",
			"contents": "strptime(${1:date}, ${2:format})",
			"kind": "function",
			"details": "Parse a time/date generated with strftime()"
		},
		{
			"trigger": "strrchr()",
			"contents": "strrchr(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find the last occurrence of a character in a string"
		},
		{
			"trigger": "strrev()",
			"contents": "strrev(${1:string})",
			"kind": "function",
			"details": "Reverse a string"
		},
		{
			"trigger": "strripos()",
			"contents": "strripos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find the position of the last occurrence of a case-insensitive substring in a string"
		},
		{
			"trigger": "strrpos()",
			"contents": "strrpos(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find the position of the last occurrence of a substring in a string"
		},
		{
			"trigger": "strspn()",
			"contents": "strspn(${1:subject}, ${2:mask})",
			"kind": "function",
			"details": "Finds the length of the initial segment of a string consisting entirely of characters contained within a given mask"
		},
		{
			"trigger": "strstr()",
			"contents": "strstr(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Find the first occurrence of a string"
		},
		{
			"trigger": "strtok()",
			"contents": "strtok(${1:str}, ${2:token})",
			"kind": "function",
			"details": "Tokenize string"
		},
		{
			"trigger": "strtolower()",
			"contents": "strtolower(${1:str})",
			"kind": "function",
			"details": "Make a string lowercase"
		},
		{
			"trigger": "strtotime()",
			"contents": "strtotime(${1:time})",
			"kind": "function",
			"details": "Parse about any English textual datetime description into a Unix timestamp"
		},
		{
			"trigger": "strtoupper()",
			"contents": "strtoupper(${1:string})",
			"kind": "function",
			"details": "Make a string uppercase"
		},
		{
			"trigger": "strtr()",
			"contents": "strtr(${1:str}, ${2:from}, ${3:to})",
			"kind": "function",
			"details": "Translate characters or replace substrings"
		},
		{
			"trigger": "strval()",
			"contents": "strval(${1:var})",
			"kind": "function",
			"details": "Get string value of a variable"
		},
		{
			"trigger": "substr()",
			"contents": "substr(${1:string}, ${2:start})",
			"kind": "function",
			"details": "Return part of a string"
		},
		{
			"trigger": "substr_compare()",
			"contents": "substr_compare(${1:main_str}, ${2:str}, ${3:offset})",
			"kind": "function",
			"details": "Binary safe comparison of two strings from an offset, up to length characters"
		},
		{
			"trigger": "substr_count()",
			"contents": "substr_count(${1:haystack}, ${2:needle})",
			"kind": "function",
			"details": "Count the number of substring occurrences"
		},
		{
			"trigger": "substr_replace()",
			"contents": "substr_replace(${1:string}, ${2:replacement}, ${3:start})",
			"kind": "function",
			"details": "Replace text within a portion of a string"
		},
		{
			"trigger": "svn_add()",
			"contents": "svn_add(${1:path})",
			"kind": "function",
			"details": "Schedules the addition of an item in a working directory"
		},
		{
			"trigger": "svn_auth_get_parameter()",
			"contents": "svn_auth_get_parameter(${1:key})",
			"kind": "function",
			"details": "Retrieves authentication parameter"
		},
		{
			"trigger": "svn_auth_set_parameter()",
			"contents": "svn_auth_set_parameter(${1:key}, ${2:value})",
			"kind": "function",
			"details": "Sets an authentication parameter"
		},
		{
			"trigger": "svn_blame()",
			"contents": "svn_blame(${1:repository_url})",
			"kind": "function",
			"details": "Get the SVN blame for a file"
		},
		{
			"trigger": "svn_cat()",
			"contents": "svn_cat(${1:repos_url})",
			"kind": "function",
			"details": "Returns the contents of a file in a repository"
		},
		{
			"trigger": "svn_checkout()",
			"contents": "svn_checkout(${1:repos}, ${2:targetpath})",
			"kind": "function",
			"details": "Checks out a working copy from the repository"
		},
		{
			"trigger": "svn_cleanup()",
			"contents": "svn_cleanup(${1:workingdir})",
			"kind": "function",
			"details": "Recursively cleanup a working copy directory, finishing incomplete operations and removing locks"
		},
		{
			"trigger": "svn_client_version()",
			"contents": "svn_client_version()",
			"kind": "function",
			"details": "Returns the version of the SVN client libraries"
		},
		{
			"trigger": "svn_commit()",
			"contents": "svn_commit(${1:log}, ${2:targets})",
			"kind": "function",
			"details": "Sends changes from the local working copy to the repository"
		},
		{
			"trigger": "svn_delete()",
			"contents": "svn_delete(${1:path})",
			"kind": "function",
			"details": "Delete items from a working copy or repository"
		},
		{
			"trigger": "svn_diff()",
			"contents": "svn_diff(${1:path1}, ${2:rev1}, ${3:path2}, ${4:rev2})",
			"kind": "function",
			"details": "Recursively diffs two paths"
		},
		{
			"trigger": "svn_export()",
			"contents": "svn_export(${1:frompath}, ${2:topath})",
			"kind": "function",
			"details": "Export the contents of a SVN directory"
		},
		{
			"trigger": "svn_fs_abort_txn()",
			"contents": "svn_fs_abort_txn(${1:txn})",
			"kind": "function",
			"details": "Abort a transaction, returns true if everything is okay, false otherwise"
		},
		{
			"trigger": "svn_fs_apply_text()",
			"contents": "svn_fs_apply_text(${1:root}, ${2:path})",
			"kind": "function",
			"details": "Creates and returns a stream that will be used to replace"
		},
		{
			"trigger": "svn_fs_begin_txn2()",
			"contents": "svn_fs_begin_txn2(${1:repos}, ${2:rev})",
			"kind": "function",
			"details": "Create a new transaction"
		},
		{
			"trigger": "svn_fs_change_node_prop()",
			"contents": "svn_fs_change_node_prop(${1:root}, ${2:path}, ${3:name}, ${4:value})",
			"kind": "function",
			"details": "Return true if everything is ok, false otherwise"
		},
		{
			"trigger": "svn_fs_check_path()",
			"contents": "svn_fs_check_path(${1:fsroot}, ${2:path})",
			"kind": "function",
			"details": "Determines what kind of item lives at path in a given repository fsroot"
		},
		{
			"trigger": "svn_fs_contents_changed()",
			"contents": "svn_fs_contents_changed(${1:root1}, ${2:path1}, ${3:root2}, ${4:path2})",
			"kind": "function",
			"details": "Return true if content is different, false otherwise"
		},
		{
			"trigger": "svn_fs_copy()",
			"contents": "svn_fs_copy(${1:from_root}, ${2:from_path}, ${3:to_root}, ${4:to_path})",
			"kind": "function",
			"details": "Copies a file or a directory, returns true if all is ok, false otherwise"
		},
		{
			"trigger": "svn_fs_delete()",
			"contents": "svn_fs_delete(${1:root}, ${2:path})",
			"kind": "function",
			"details": "Deletes a file or a directory, return true if all is ok, false otherwise"
		},
		{
			"trigger": "svn_fs_dir_entries()",
			"contents": "svn_fs_dir_entries(${1:fsroot}, ${2:path})",
			"kind": "function",
			"details": "Enumerates the directory entries under path; returns a hash of dir names to file type"
		},
		{
			"trigger": "svn_fs_file_contents()",
			"contents": "svn_fs_file_contents(${1:fsroot}, ${2:path})",
			"kind": "function",
			"details": "Returns a stream to access the contents of a file from a given version of the fs"
		},
		{
			"trigger": "svn_fs_file_length()",
			"contents": "svn_fs_file_length(${1:fsroot}, ${2:path})",
			"kind": "function",
			"details": "Returns the length of a file from a given version of the fs"
		},
		{
			"trigger": "svn_fs_is_dir()",
			"contents": "svn_fs_is_dir(${1:root}, ${2:path})",
			"kind": "function",
			"details": "Return true if the path points to a directory, false otherwise"
		},
		{
			"trigger": "svn_fs_is_file()",
			"contents": "svn_fs_is_file(${1:root}, ${2:path})",
			"kind": "function",
			"details": "Return true if the path points to a file, false otherwise"
		},
		{
			"trigger": "svn_fs_make_dir()",
			"contents": "svn_fs_make_dir(${1:root}, ${2:path})",
			"kind": "function",
			"details": "Creates a new empty directory, returns true if all is ok, false otherwise"
		},
		{
			"trigger": "svn_fs_make_file()",
			"contents": "svn_fs_make_file(${1:root}, ${2:path})",
			"kind": "function",
			"details": "Creates a new empty file, returns true if all is ok, false otherwise"
		},
		{
			"trigger": "svn_fs_node_created_rev()",
			"contents": "svn_fs_node_created_rev(${1:fsroot}, ${2:path})",
			"kind": "function",
			"details": "Returns the revision in which path under fsroot was created"
		},
		{
			"trigger": "svn_fs_node_prop()",
			"contents": "svn_fs_node_prop(${1:fsroot}, ${2:path}, ${3:propname})",
			"kind": "function",
			"details": "Returns the value of a property for a node"
		},
		{
			"trigger": "svn_fs_props_changed()",
			"contents": "svn_fs_props_changed(${1:root1}, ${2:path1}, ${3:root2}, ${4:path2})",
			"kind": "function",
			"details": "Return true if props are different, false otherwise"
		},
		{
			"trigger": "svn_fs_revision_prop()",
			"contents": "svn_fs_revision_prop(${1:fs}, ${2:revnum}, ${3:propname})",
			"kind": "function",
			"details": "Fetches the value of a named property"
		},
		{
			"trigger": "svn_fs_revision_root()",
			"contents": "svn_fs_revision_root(${1:fs}, ${2:revnum})",
			"kind": "function",
			"details": "Get a handle on a specific version of the repository root"
		},
		{
			"trigger": "svn_fs_txn_root()",
			"contents": "svn_fs_txn_root(${1:txn})",
			"kind": "function",
			"details": "Creates and returns a transaction root"
		},
		{
			"trigger": "svn_fs_youngest_rev()",
			"contents": "svn_fs_youngest_rev(${1:fs})",
			"kind": "function",
			"details": "Returns the number of the youngest revision in the filesystem"
		},
		{
			"trigger": "svn_import()",
			"contents": "svn_import(${1:path}, ${2:url}, ${3:nonrecursive})",
			"kind": "function",
			"details": "Imports an unversioned path into a repository"
		},
		{
			"trigger": "svn_log()",
			"contents": "svn_log(${1:repos_url})",
			"kind": "function",
			"details": "Returns the commit log messages of a repository URL"
		},
		{
			"trigger": "svn_ls()",
			"contents": "svn_ls(${1:repos_url})",
			"kind": "function",
			"details": "Returns list of directory contents in repository URL, optionally at revision number"
		},
		{
			"trigger": "svn_mkdir()",
			"contents": "svn_mkdir(${1:path})",
			"kind": "function",
			"details": "Creates a directory in a working copy or repository"
		},
		{
			"trigger": "svn_repos_create()",
			"contents": "svn_repos_create(${1:path})",
			"kind": "function",
			"details": "Create a new subversion repository at path"
		},
		{
			"trigger": "svn_repos_fs()",
			"contents": "svn_repos_fs(${1:repos})",
			"kind": "function",
			"details": "Gets a handle on the filesystem for a repository"
		},
		{
			"trigger": "svn_repos_fs_begin_txn_for_commit()",
			"contents": "svn_repos_fs_begin_txn_for_commit(${1:repos}, ${2:rev}, ${3:author}, ${4:log_msg})",
			"kind": "function",
			"details": "Create a new transaction"
		},
		{
			"trigger": "svn_repos_fs_commit_txn()",
			"contents": "svn_repos_fs_commit_txn(${1:txn})",
			"kind": "function",
			"details": "Commits a transaction and returns the new revision"
		},
		{
			"trigger": "svn_repos_hotcopy()",
			"contents": "svn_repos_hotcopy(${1:repospath}, ${2:destpath}, ${3:cleanlogs})",
			"kind": "function",
			"details": "Make a hot-copy of the repos at repospath; copy it to destpath"
		},
		{
			"trigger": "svn_repos_open()",
			"contents": "svn_repos_open(${1:path})",
			"kind": "function",
			"details": "Open a shared lock on a repository"
		},
		{
			"trigger": "svn_repos_recover()",
			"contents": "svn_repos_recover(${1:path})",
			"kind": "function",
			"details": "Run recovery procedures on the repository located at path"
		},
		{
			"trigger": "svn_revert()",
			"contents": "svn_revert(${1:path})",
			"kind": "function",
			"details": "Revert changes to the working copy"
		},
		{
			"trigger": "svn_status()",
			"contents": "svn_status(${1:path})",
			"kind": "function",
			"details": "Returns the status of working copy files and directories"
		},
		{
			"trigger": "svn_update()",
			"contents": "svn_update(${1:path})",
			"kind": "function",
			"details": "Update working copy"
		},
		{
			"trigger": "swf_actiongeturl()",
			"contents": "swf_actiongeturl(${1:url}, ${2:target})",
			"kind": "function"
		},
		{
			"trigger": "swf_actiongotoframe()",
			"contents": "swf_actiongotoframe(${1:framenumber})",
			"kind": "function"
		},
		{
			"trigger": "swf_actiongotolabel()",
			"contents": "swf_actiongotolabel(${1:label})",
			"kind": "function"
		},
		{
			"trigger": "swf_actionnextframe()",
			"contents": "swf_actionnextframe()",
			"kind": "function"
		},
		{
			"trigger": "swf_actionplay()",
			"contents": "swf_actionplay()",
			"kind": "function"
		},
		{
			"trigger": "swf_actionprevframe()",
			"contents": "swf_actionprevframe()",
			"kind": "function"
		},
		{
			"trigger": "swf_actionsettarget()",
			"contents": "swf_actionsettarget(${1:target})",
			"kind": "function"
		},
		{
			"trigger": "swf_actionstop()",
			"contents": "swf_actionstop()",
			"kind": "function"
		},
		{
			"trigger": "swf_actiontogglequality()",
			"contents": "swf_actiontogglequality()",
			"kind": "function"
		},
		{
			"trigger": "swf_actionwaitforframe()",
			"contents": "swf_actionwaitforframe(${1:framenumber}, ${2:skipcount})",
			"kind": "function"
		},
		{
			"trigger": "swf_addbuttonrecord()",
			"contents": "swf_addbuttonrecord(${1:states}, ${2:shapeid}, ${3:depth})",
			"kind": "function"
		},
		{
			"trigger": "swf_addcolor()",
			"contents": "swf_addcolor(${1:r}, ${2:g}, ${3:b}, ${4:a})",
			"kind": "function"
		},
		{
			"trigger": "swf_closefile()",
			"contents": "swf_closefile()",
			"kind": "function"
		},
		{
			"trigger": "swf_definebitmap()",
			"contents": "swf_definebitmap(${1:objid}, ${2:image_name})",
			"kind": "function"
		},
		{
			"trigger": "swf_definefont()",
			"contents": "swf_definefont(${1:fontid}, ${2:fontname})",
			"kind": "function"
		},
		{
			"trigger": "swf_defineline()",
			"contents": "swf_defineline(${1:objid}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:width})",
			"kind": "function"
		},
		{
			"trigger": "swf_definepoly()",
			"contents": "swf_definepoly(${1:objid}, ${2:coords}, ${3:npoints}, ${4:width})",
			"kind": "function"
		},
		{
			"trigger": "swf_definerect()",
			"contents": "swf_definerect(${1:objid}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:width})",
			"kind": "function"
		},
		{
			"trigger": "swf_definetext()",
			"contents": "swf_definetext(${1:objid}, ${2:str}, ${3:docenter})",
			"kind": "function"
		},
		{
			"trigger": "swf_endbutton()",
			"contents": "swf_endbutton()",
			"kind": "function"
		},
		{
			"trigger": "swf_enddoaction()",
			"contents": "swf_enddoaction()",
			"kind": "function"
		},
		{
			"trigger": "swf_endshape()",
			"contents": "swf_endshape()",
			"kind": "function"
		},
		{
			"trigger": "swf_endsymbol()",
			"contents": "swf_endsymbol()",
			"kind": "function"
		},
		{
			"trigger": "swf_fontsize()",
			"contents": "swf_fontsize(${1:size})",
			"kind": "function"
		},
		{
			"trigger": "swf_fontslant()",
			"contents": "swf_fontslant(${1:slant})",
			"kind": "function"
		},
		{
			"trigger": "swf_fonttracking()",
			"contents": "swf_fonttracking(${1:tracking})",
			"kind": "function"
		},
		{
			"trigger": "swf_getbitmapinfo()",
			"contents": "swf_getbitmapinfo(${1:bitmapid})",
			"kind": "function"
		},
		{
			"trigger": "swf_getfontinfo()",
			"contents": "swf_getfontinfo()",
			"kind": "function"
		},
		{
			"trigger": "swf_getframe()",
			"contents": "swf_getframe()",
			"kind": "function"
		},
		{
			"trigger": "swf_labelframe()",
			"contents": "swf_labelframe(${1:name})",
			"kind": "function"
		},
		{
			"trigger": "swf_lookat()",
			"contents": "swf_lookat(${1:view_x}, ${2:view_y}, ${3:view_z}, ${4:reference_x}, ${5:reference_y}, ${6:reference_z}, ${7:twist})",
			"kind": "function"
		},
		{
			"trigger": "swf_modifyobject()",
			"contents": "swf_modifyobject(${1:depth}, ${2:how})",
			"kind": "function"
		},
		{
			"trigger": "swf_mulcolor()",
			"contents": "swf_mulcolor(${1:r}, ${2:g}, ${3:b}, ${4:a})",
			"kind": "function"
		},
		{
			"trigger": "swf_nextid()",
			"contents": "swf_nextid()",
			"kind": "function"
		},
		{
			"trigger": "swf_oncondition()",
			"contents": "swf_oncondition(${1:transition})",
			"kind": "function"
		},
		{
			"trigger": "swf_openfile()",
			"contents": "swf_openfile(${1:filename}, ${2:width}, ${3:height}, ${4:framerate}, ${5:r}, ${6:g}, ${7:b})",
			"kind": "function"
		},
		{
			"trigger": "swf_ortho()",
			"contents": "swf_ortho(${1:xmin}, ${2:xmax}, ${3:ymin}, ${4:ymax}, ${5:zmin}, ${6:zmax})",
			"kind": "function"
		},
		{
			"trigger": "swf_ortho2()",
			"contents": "swf_ortho2(${1:xmin}, ${2:xmax}, ${3:ymin}, ${4:ymax})",
			"kind": "function"
		},
		{
			"trigger": "swf_perspective()",
			"contents": "swf_perspective(${1:fovy}, ${2:aspect}, ${3:near}, ${4:far})",
			"kind": "function"
		},
		{
			"trigger": "swf_placeobject()",
			"contents": "swf_placeobject(${1:objid}, ${2:depth})",
			"kind": "function"
		},
		{
			"trigger": "swf_polarview()",
			"contents": "swf_polarview(${1:dist}, ${2:azimuth}, ${3:incidence}, ${4:twist})",
			"kind": "function"
		},
		{
			"trigger": "swf_popmatrix()",
			"contents": "swf_popmatrix()",
			"kind": "function"
		},
		{
			"trigger": "swf_posround()",
			"contents": "swf_posround(${1:round})",
			"kind": "function"
		},
		{
			"trigger": "swf_pushmatrix()",
			"contents": "swf_pushmatrix()",
			"kind": "function"
		},
		{
			"trigger": "swf_removeobject()",
			"contents": "swf_removeobject(${1:depth})",
			"kind": "function"
		},
		{
			"trigger": "swf_rotate()",
			"contents": "swf_rotate(${1:angle}, ${2:axis})",
			"kind": "function"
		},
		{
			"trigger": "swf_scale()",
			"contents": "swf_scale(${1:x}, ${2:y}, ${3:z})",
			"kind": "function"
		},
		{
			"trigger": "swf_setfont()",
			"contents": "swf_setfont(${1:fontid})",
			"kind": "function"
		},
		{
			"trigger": "swf_setframe()",
			"contents": "swf_setframe(${1:framenumber})",
			"kind": "function"
		},
		{
			"trigger": "swf_shapearc()",
			"contents": "swf_shapearc(${1:x}, ${2:y}, ${3:r}, ${4:ang1}, ${5:ang2})",
			"kind": "function"
		},
		{
			"trigger": "swf_shapecurveto()",
			"contents": "swf_shapecurveto(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})",
			"kind": "function"
		},
		{
			"trigger": "swf_shapecurveto3()",
			"contents": "swf_shapecurveto3(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3})",
			"kind": "function"
		},
		{
			"trigger": "swf_shapefillbitmapclip()",
			"contents": "swf_shapefillbitmapclip(${1:bitmapid})",
			"kind": "function"
		},
		{
			"trigger": "swf_shapefillbitmaptile()",
			"contents": "swf_shapefillbitmaptile(${1:bitmapid})",
			"kind": "function"
		},
		{
			"trigger": "swf_shapefilloff()",
			"contents": "swf_shapefilloff()",
			"kind": "function"
		},
		{
			"trigger": "swf_shapefillsolid()",
			"contents": "swf_shapefillsolid(${1:r}, ${2:g}, ${3:b}, ${4:a})",
			"kind": "function"
		},
		{
			"trigger": "swf_shapelinesolid()",
			"contents": "swf_shapelinesolid(${1:r}, ${2:g}, ${3:b}, ${4:a}, ${5:width})",
			"kind": "function"
		},
		{
			"trigger": "swf_shapelineto()",
			"contents": "swf_shapelineto(${1:x}, ${2:y})",
			"kind": "function"
		},
		{
			"trigger": "swf_shapemoveto()",
			"contents": "swf_shapemoveto(${1:x}, ${2:y})",
			"kind": "function"
		},
		{
			"trigger": "swf_showframe()",
			"contents": "swf_showframe()",
			"kind": "function"
		},
		{
			"trigger": "swf_startbutton()",
			"contents": "swf_startbutton(${1:objid}, ${2:type})",
			"kind": "function"
		},
		{
			"trigger": "swf_startdoaction()",
			"contents": "swf_startdoaction()",
			"kind": "function"
		},
		{
			"trigger": "swf_startshape()",
			"contents": "swf_startshape(${1:objid})",
			"kind": "function"
		},
		{
			"trigger": "swf_startsymbol()",
			"contents": "swf_startsymbol(${1:objid})",
			"kind": "function"
		},
		{
			"trigger": "swf_textwidth()",
			"contents": "swf_textwidth(${1:str})",
			"kind": "function"
		},
		{
			"trigger": "swf_translate()",
			"contents": "swf_translate(${1:x}, ${2:y}, ${3:z})",
			"kind": "function"
		},
		{
			"trigger": "swf_viewport()",
			"contents": "swf_viewport(${1:xmin}, ${2:xmax}, ${3:ymin}, ${4:ymax})",
			"kind": "function"
		},
		{
			"trigger": "SWFSound()",
			"contents": "SWFSound(${1:filename})",
			"kind": "function"
		},
		{
			"trigger": "sybase_affected_rows()",
			"contents": "sybase_affected_rows()",
			"kind": "function",
			"details": "Gets number of affected rows in last query"
		},
		{
			"trigger": "sybase_close()",
			"contents": "sybase_close()",
			"kind": "function",
			"details": "Closes a Sybase connection"
		},
		{
			"trigger": "sybase_connect()",
			"contents": "sybase_connect()",
			"kind": "function",
			"details": "Opens a Sybase server connection"
		},
		{
			"trigger": "sybase_data_seek()",
			"contents": "sybase_data_seek(${1:result_identifier}, ${2:row_number})",
			"kind": "function",
			"details": "Moves internal row pointer"
		},
		{
			"trigger": "sybase_deadlock_retry_count()",
			"contents": "sybase_deadlock_retry_count(${1:retry_count})",
			"kind": "function",
			"details": "Sets the deadlock retry count"
		},
		{
			"trigger": "sybase_fetch_array()",
			"contents": "sybase_fetch_array(${1:result})",
			"kind": "function",
			"details": "Fetch row as array"
		},
		{
			"trigger": "sybase_fetch_assoc()",
			"contents": "sybase_fetch_assoc(${1:result})",
			"kind": "function",
			"details": "Fetch a result row as an associative array"
		},
		{
			"trigger": "sybase_fetch_field()",
			"contents": "sybase_fetch_field(${1:result})",
			"kind": "function",
			"details": "Get field information from a result"
		},
		{
			"trigger": "sybase_fetch_object()",
			"contents": "sybase_fetch_object(${1:result})",
			"kind": "function",
			"details": "Fetch a row as an object"
		},
		{
			"trigger": "sybase_fetch_row()",
			"contents": "sybase_fetch_row(${1:result})",
			"kind": "function",
			"details": "Get a result row as an enumerated array"
		},
		{
			"trigger": "sybase_field_seek()",
			"contents": "sybase_field_seek(${1:result}, ${2:field_offset})",
			"kind": "function",
			"details": "Sets field offset"
		},
		{
			"trigger": "sybase_free_result()",
			"contents": "sybase_free_result(${1:result})",
			"kind": "function",
			"details": "Frees result memory"
		},
		{
			"trigger": "sybase_get_last_message()",
			"contents": "sybase_get_last_message()",
			"kind": "function",
			"details": "Returns the last message from the server"
		},
		{
			"trigger": "sybase_min_client_severity()",
			"contents": "sybase_min_client_severity(${1:severity})",
			"kind": "function",
			"details": "Sets minimum client severity"
		},
		{
			"trigger": "sybase_min_error_severity()",
			"contents": "sybase_min_error_severity(${1:severity})",
			"kind": "function",
			"details": "Sets minimum error severity"
		},
		{
			"trigger": "sybase_min_message_severity()",
			"contents": "sybase_min_message_severity(${1:severity})",
			"kind": "function",
			"details": "Sets minimum message severity"
		},
		{
			"trigger": "sybase_min_server_severity()",
			"contents": "sybase_min_server_severity(${1:severity})",
			"kind": "function",
			"details": "Sets minimum server severity"
		},
		{
			"trigger": "sybase_num_fields()",
			"contents": "sybase_num_fields(${1:result})",
			"kind": "function",
			"details": "Gets the number of fields in a result set"
		},
		{
			"trigger": "sybase_num_rows()",
			"contents": "sybase_num_rows(${1:result})",
			"kind": "function",
			"details": "Get number of rows in a result set"
		},
		{
			"trigger": "sybase_pconnect()",
			"contents": "sybase_pconnect()",
			"kind": "function",
			"details": "Open persistent Sybase connection"
		},
		{
			"trigger": "sybase_query()",
			"contents": "sybase_query(${1:query})",
			"kind": "function",
			"details": "Sends a Sybase query"
		},
		{
			"trigger": "sybase_result()",
			"contents": "sybase_result(${1:result}, ${2:row}, ${3:field})",
			"kind": "function",
			"details": "Get result data"
		},
		{
			"trigger": "sybase_select_db()",
			"contents": "sybase_select_db(${1:database_name})",
			"kind": "function",
			"details": "Selects a Sybase database"
		},
		{
			"trigger": "sybase_set_message_handler()",
			"contents": "sybase_set_message_handler(${1:handler})",
			"kind": "function",
			"details": "Sets the handler called when a server message is raised"
		},
		{
			"trigger": "sybase_unbuffered_query()",
			"contents": "sybase_unbuffered_query(${1:query}, ${2:link_identifier})",
			"kind": "function",
			"details": "Send a Sybase query and do not block"
		},
		{
			"trigger": "symlink()",
			"contents": "symlink(${1:target}, ${2:link})",
			"kind": "function",
			"details": "Creates a symbolic link"
		},
		{
			"trigger": "sys_get_temp_dir()",
			"contents": "sys_get_temp_dir()",
			"kind": "function",
			"details": "Returns directory path used for temporary files"
		},
		{
			"trigger": "sys_getloadavg()",
			"contents": "sys_getloadavg()",
			"kind": "function",
			"details": "Gets system load average"
		},
		{
			"trigger": "syslog()",
			"contents": "syslog(${1:priority}, ${2:message})",
			"kind": "function",
			"details": "Generate a system log message"
		},
		{
			"trigger": "system()",
			"contents": "system(${1:command})",
			"kind": "function",
			"details": "Execute an external program and display the output"
		},
		{
			"trigger": "tan()",
			"contents": "tan(${1:arg})",
			"kind": "function",
			"details": "Tangent"
		},
		{
			"trigger": "tanh()",
			"contents": "tanh(${1:arg})",
			"kind": "function",
			"details": "Hyperbolic tangent"
		},
		{
			"trigger": "tcpwrap_check()",
			"contents": "tcpwrap_check(${1:daemon}, ${2:address})",
			"kind": "function",
			"details": "Performs a tcpwrap check"
		},
		{
			"trigger": "tempnam()",
			"contents": "tempnam(${1:dir}, ${2:prefix})",
			"kind": "function",
			"details": "Create file with unique file name"
		},
		{
			"trigger": "textdomain()",
			"contents": "textdomain(${1:text_domain})",
			"kind": "function",
			"details": "Sets the default domain"
		},
		{
			"trigger": "tidy_access_count()",
			"contents": "tidy_access_count(${1:object})",
			"kind": "function",
			"details": "Returns the Number of Tidy accessibility warnings encountered for specified document"
		},
		{
			"trigger": "tidy_config_count()",
			"contents": "tidy_config_count(${1:object})",
			"kind": "function",
			"details": "Returns the Number of Tidy configuration errors encountered for specified document"
		},
		{
			"trigger": "tidy_error_count()",
			"contents": "tidy_error_count(${1:object})",
			"kind": "function",
			"details": "Returns the Number of Tidy errors encountered for specified document"
		},
		{
			"trigger": "tidy_get_error_buffer()",
			"contents": "tidy_get_error_buffer(${1:object})",
			"kind": "function"
		},
		{
			"trigger": "tidy_get_output()",
			"contents": "tidy_get_output(${1:object})",
			"kind": "function",
			"details": "Return a string representing the parsed tidy markup"
		},
		{
			"trigger": "tidy_load_config()",
			"contents": "tidy_load_config(${1:filename}, ${2:encoding})",
			"kind": "function",
			"details": "Loads a Tidy configuration file, with the specified encoding."
		},
		{
			"trigger": "tidy_reset_config()",
			"contents": "tidy_reset_config()",
			"kind": "function",
			"details": "Restores the Tidy configuration to the default values."
		},
		{
			"trigger": "tidy_save_config()",
			"contents": "tidy_save_config(${1:filename})",
			"kind": "function",
			"details": "Saves current settings to the specified file."
		},
		{
			"trigger": "tidy_set_encoding()",
			"contents": "tidy_set_encoding(${1:encoding})",
			"kind": "function",
			"details": "Sets the encoding for input/output documents."
		},
		{
			"trigger": "tidy_setopt()",
			"contents": "tidy_setopt(${1:option}, ${2:value})",
			"kind": "function",
			"details": "Updates the specified option with a new value."
		},
		{
			"trigger": "tidy_warning_count()",
			"contents": "tidy_warning_count(${1:object})",
			"kind": "function",
			"details": "Returns the Number of Tidy warnings encountered for specified document"
		},
		{
			"trigger": "time()",
			"contents": "time()",
			"kind": "function",
			"details": "Return current Unix timestamp"
		},
		{
			"trigger": "time_nanosleep()",
			"contents": "time_nanosleep(${1:seconds}, ${2:nanoseconds})",
			"kind": "function",
			"details": "Delay for a number of seconds and nanoseconds"
		},
		{
			"trigger": "time_sleep_until()",
			"contents": "time_sleep_until(${1:timestamp})",
			"kind": "function",
			"details": "Make the script sleep until the specified time"
		},
		{
			"trigger": "timezone_abbreviations_list()",
			"contents": "timezone_abbreviations_list()",
			"kind": "function",
			"details": "Alias of DateTimeZone::listAbbreviations()"
		},
		{
			"trigger": "timezone_identifiers_list()",
			"contents": "timezone_identifiers_list()",
			"kind": "function",
			"details": "Alias of DateTimeZone::listIdentifiers()"
		},
		{
			"trigger": "timezone_location_get()",
			"contents": "timezone_location_get()",
			"kind": "function",
			"details": "Alias of DateTimeZone::getLocation()"
		},
		{
			"trigger": "timezone_name_from_abbr()",
			"contents": "timezone_name_from_abbr(${1:abbr})",
			"kind": "function",
			"details": "Returns the timezone name from abbreviation"
		},
		{
			"trigger": "timezone_name_get()",
			"contents": "timezone_name_get()",
			"kind": "function",
			"details": "Alias of DateTimeZone::getName()"
		},
		{
			"trigger": "timezone_offset_get()",
			"contents": "timezone_offset_get()",
			"kind": "function",
			"details": "Alias of DateTimeZone::getOffset()"
		},
		{
			"trigger": "timezone_open()",
			"contents": "timezone_open()",
			"kind": "function",
			"details": "Alias of DateTimeZone::__construct()"
		},
		{
			"trigger": "timezone_transitions_get()",
			"contents": "timezone_transitions_get()",
			"kind": "function",
			"details": "Alias of DateTimeZone::getTransitions()"
		},
		{
			"trigger": "timezone_version_get()",
			"contents": "timezone_version_get()",
			"kind": "function",
			"details": "Gets the version of the timezonedb"
		},
		{
			"trigger": "tmpfile()",
			"contents": "tmpfile()",
			"kind": "function",
			"details": "Creates a temporary file"
		},
		{
			"trigger": "token_get_all()",
			"contents": "token_get_all(${1:source})",
			"kind": "function",
			"details": "Split given source into PHP tokens"
		},
		{
			"trigger": "token_name()",
			"contents": "token_name(${1:token})",
			"kind": "function",
			"details": "Get the symbolic name of a given PHP token"
		},
		{
			"trigger": "touch()",
			"contents": "touch(${1:filename})",
			"kind": "function",
			"details": "Sets access and modification time of file"
		},
		{
			"trigger": "trigger_error()",
			"contents": "trigger_error(${1:error_msg})",
			"kind": "function",
			"details": "Generates a user-level error/warning/notice message"
		},
		{
			"trigger": "trim()",
			"contents": "trim(${1:str})",
			"kind": "function",
			"details": "Strip whitespace (or other characters) from the beginning and end of a string"
		},
		{
			"trigger": "uasort()",
			"contents": "uasort(${1:array}, ${2:cmp_function})",
			"kind": "function",
			"details": "Sort an array with a user-defined comparison function and maintain index association"
		},
		{
			"trigger": "ucfirst()",
			"contents": "ucfirst(${1:str})",
			"kind": "function",
			"details": "Make a string's first character uppercase"
		},
		{
			"trigger": "ucwords()",
			"contents": "ucwords(${1:str})",
			"kind": "function",
			"details": "Uppercase the first character of each word in a string"
		},
		{
			"trigger": "udm_add_search_limit()",
			"contents": "udm_add_search_limit(${1:agent}, ${2:var}, ${3:val})",
			"kind": "function",
			"details": "Add various search limits"
		},
		{
			"trigger": "udm_alloc_agent()",
			"contents": "udm_alloc_agent(${1:dbaddr})",
			"kind": "function",
			"details": "Allocate mnoGoSearch session"
		},
		{
			"trigger": "udm_alloc_agent_array()",
			"contents": "udm_alloc_agent_array(${1:databases})",
			"kind": "function",
			"details": "Allocate mnoGoSearch session"
		},
		{
			"trigger": "udm_api_version()",
			"contents": "udm_api_version()",
			"kind": "function",
			"details": "Get mnoGoSearch API version"
		},
		{
			"trigger": "udm_cat_list()",
			"contents": "udm_cat_list(${1:agent}, ${2:category})",
			"kind": "function",
			"details": "Get all the categories on the same level with the current one"
		},
		{
			"trigger": "udm_cat_path()",
			"contents": "udm_cat_path(${1:agent}, ${2:category})",
			"kind": "function",
			"details": "Get the path to the current category"
		},
		{
			"trigger": "udm_check_charset()",
			"contents": "udm_check_charset(${1:agent}, ${2:charset})",
			"kind": "function",
			"details": "Check if the given charset is known to mnogosearch"
		},
		{
			"trigger": "udm_check_stored()",
			"contents": "udm_check_stored(${1:agent}, ${2:link}, ${3:doc_id})",
			"kind": "function"
		},
		{
			"trigger": "udm_clear_search_limits()",
			"contents": "udm_clear_search_limits(${1:agent})",
			"kind": "function",
			"details": "Clear all mnoGoSearch search restrictions"
		},
		{
			"trigger": "udm_close_stored()",
			"contents": "udm_close_stored(${1:agent}, ${2:link})",
			"kind": "function"
		},
		{
			"trigger": "udm_crc32()",
			"contents": "udm_crc32(${1:agent}, ${2:str})",
			"kind": "function",
			"details": "Return CRC32 checksum of given string"
		},
		{
			"trigger": "udm_errno()",
			"contents": "udm_errno(${1:agent})",
			"kind": "function",
			"details": "Get mnoGoSearch error number"
		},
		{
			"trigger": "udm_error()",
			"contents": "udm_error(${1:agent})",
			"kind": "function",
			"details": "Get mnoGoSearch error message"
		},
		{
			"trigger": "udm_find()",
			"contents": "udm_find(${1:agent}, ${2:query})",
			"kind": "function",
			"details": "Perform search"
		},
		{
			"trigger": "udm_free_agent()",
			"contents": "udm_free_agent(${1:agent})",
			"kind": "function",
			"details": "Free mnoGoSearch session"
		},
		{
			"trigger": "udm_free_ispell_data()",
			"contents": "udm_free_ispell_data(${1:agent})",
			"kind": "function",
			"details": "Free memory allocated for ispell data"
		},
		{
			"trigger": "udm_free_res()",
			"contents": "udm_free_res(${1:res})",
			"kind": "function",
			"details": "Free mnoGoSearch result"
		},
		{
			"trigger": "udm_get_doc_count()",
			"contents": "udm_get_doc_count(${1:agent})",
			"kind": "function",
			"details": "Get total number of documents in database"
		},
		{
			"trigger": "udm_get_res_field()",
			"contents": "udm_get_res_field(${1:res}, ${2:row}, ${3:field})",
			"kind": "function",
			"details": "Fetch a result field"
		},
		{
			"trigger": "udm_get_res_param()",
			"contents": "udm_get_res_param(${1:res}, ${2:param})",
			"kind": "function",
			"details": "Get mnoGoSearch result parameters"
		},
		{
			"trigger": "udm_hash32()",
			"contents": "udm_hash32(${1:agent}, ${2:str})",
			"kind": "function",
			"details": "Return Hash32 checksum of given string"
		},
		{
			"trigger": "udm_load_ispell_data()",
			"contents": "udm_load_ispell_data(${1:agent}, ${2:var}, ${3:val1}, ${4:val2}, ${5:flag})",
			"kind": "function",
			"details": "Load ispell data"
		},
		{
			"trigger": "udm_open_stored()",
			"contents": "udm_open_stored(${1:agent}, ${2:storedaddr})",
			"kind": "function"
		},
		{
			"trigger": "udm_set_agent_param()",
			"contents": "udm_set_agent_param(${1:agent}, ${2:var}, ${3:val})",
			"kind": "function",
			"details": "Set mnoGoSearch agent session parameters"
		},
		{
			"trigger": "uksort()",
			"contents": "uksort(${1:array}, ${2:cmp_function})",
			"kind": "function",
			"details": "Sort an array by keys using a user-defined comparison function"
		},
		{
			"trigger": "umask()",
			"contents": "umask()",
			"kind": "function",
			"details": "Changes the current umask"
		},
		{
			"trigger": "uniqid()",
			"contents": "uniqid()",
			"kind": "function",
			"details": "Generate a unique ID"
		},
		{
			"trigger": "unixtojd()",
			"contents": "unixtojd()",
			"kind": "function",
			"details": "Convert Unix timestamp to Julian Day"
		},
		{
			"trigger": "unlink()",
			"contents": "unlink(${1:filename})",
			"kind": "function",
			"details": "Deletes a file"
		},
		{
			"trigger": "unpack()",
			"contents": "unpack(${1:format}, ${2:data})",
			"kind": "function",
			"details": "Unpack data from binary string"
		},
		{
			"trigger": "unregister_tick_function()",
			"contents": "unregister_tick_function(${1:function_name})",
			"kind": "function",
			"details": "De-register a function for execution on each tick"
		},
		{
			"trigger": "unserialize()",
			"contents": "unserialize(${1:str})",
			"kind": "function",
			"details": "Creates a PHP value from a stored representation"
		},
		{
			"trigger": "unset()",
			"contents": "unset(${1:var})",
			"kind": "function",
			"details": "Unset a given variable"
		},
		{
			"trigger": "urldecode()",
			"contents": "urldecode(${1:str})",
			"kind": "function",
			"details": "Decodes URL-encoded string"
		},
		{
			"trigger": "urlencode()",
			"contents": "urlencode(${1:str})",
			"kind": "function",
			"details": "URL-encodes string"
		},
		{
			"trigger": "use_soap_error_handler()",
			"contents": "use_soap_error_handler()",
			"kind": "function",
			"details": "Set whether to use the SOAP error handler"
		},
		{
			"trigger": "user_error()",
			"contents": "user_error()",
			"kind": "function",
			"details": "Alias of trigger_error()"
		},
		{
			"trigger": "usleep()",
			"contents": "usleep(${1:micro_seconds})",
			"kind": "function",
			"details": "Delay execution in microseconds"
		},
		{
			"trigger": "usort()",
			"contents": "usort(${1:array}, ${2:cmp_function})",
			"kind": "function",
			"details": "Sort an array by values using a user-defined comparison function"
		},
		{
			"trigger": "utf8_decode()",
			"contents": "utf8_decode(${1:data})",
			"kind": "function",
			"details": "Converts a string with ISO-8859-1 characters encoded with UTF-8 to single-byte ISO-8859-1"
		},
		{
			"trigger": "utf8_encode()",
			"contents": "utf8_encode(${1:data})",
			"kind": "function",
			"details": "Encodes an ISO-8859-1 string to UTF-8"
		},
		{
			"trigger": "var_dump()",
			"contents": "var_dump(${1:expression})",
			"kind": "function",
			"details": "Dumps information about a variable"
		},
		{
			"trigger": "var_export()",
			"contents": "var_export(${1:expression})",
			"kind": "function",
			"details": "Outputs or returns a parsable string representation of a variable"
		},
		{
			"trigger": "variant_abs()",
			"contents": "variant_abs(${1:val})",
			"kind": "function",
			"details": "Returns the absolute value of a variant"
		},
		{
			"trigger": "variant_add()",
			"contents": "variant_add(${1:left}, ${2:right})",
			"kind": "function",
			"details": "\"Adds\" two variant values together and returns the result"
		},
		{
			"trigger": "variant_and()",
			"contents": "variant_and(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Performs a bitwise AND operation between two variants"
		},
		{
			"trigger": "variant_cast()",
			"contents": "variant_cast(${1:variant}, ${2:type})",
			"kind": "function",
			"details": "Convert a variant into a new variant object of another type"
		},
		{
			"trigger": "variant_cat()",
			"contents": "variant_cat(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Concatenates two variant values together and returns the result"
		},
		{
			"trigger": "variant_cmp()",
			"contents": "variant_cmp(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Compares two variants"
		},
		{
			"trigger": "variant_date_from_timestamp()",
			"contents": "variant_date_from_timestamp(${1:timestamp})",
			"kind": "function",
			"details": "Returns a variant date representation of a Unix timestamp"
		},
		{
			"trigger": "variant_date_to_timestamp()",
			"contents": "variant_date_to_timestamp(${1:variant})",
			"kind": "function",
			"details": "Converts a variant date/time value to Unix timestamp"
		},
		{
			"trigger": "variant_div()",
			"contents": "variant_div(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Returns the result from dividing two variants"
		},
		{
			"trigger": "variant_eqv()",
			"contents": "variant_eqv(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Performs a bitwise equivalence on two variants"
		},
		{
			"trigger": "variant_fix()",
			"contents": "variant_fix(${1:variant})",
			"kind": "function",
			"details": "Returns the integer portion of a variant"
		},
		{
			"trigger": "variant_get_type()",
			"contents": "variant_get_type(${1:variant})",
			"kind": "function",
			"details": "Returns the type of a variant object"
		},
		{
			"trigger": "variant_idiv()",
			"contents": "variant_idiv(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Converts variants to integers and then returns the result from dividing them"
		},
		{
			"trigger": "variant_imp()",
			"contents": "variant_imp(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Performs a bitwise implication on two variants"
		},
		{
			"trigger": "variant_int()",
			"contents": "variant_int(${1:variant})",
			"kind": "function",
			"details": "Returns the integer portion of a variant"
		},
		{
			"trigger": "variant_mod()",
			"contents": "variant_mod(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Divides two variants and returns only the remainder"
		},
		{
			"trigger": "variant_mul()",
			"contents": "variant_mul(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Multiplies the values of the two variants"
		},
		{
			"trigger": "variant_neg()",
			"contents": "variant_neg(${1:variant})",
			"kind": "function",
			"details": "Performs logical negation on a variant"
		},
		{
			"trigger": "variant_not()",
			"contents": "variant_not(${1:variant})",
			"kind": "function",
			"details": "Performs bitwise not negation on a variant"
		},
		{
			"trigger": "variant_or()",
			"contents": "variant_or(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Performs a logical disjunction on two variants"
		},
		{
			"trigger": "variant_pow()",
			"contents": "variant_pow(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Returns the result of performing the power function with two variants"
		},
		{
			"trigger": "variant_round()",
			"contents": "variant_round(${1:variant}, ${2:decimals})",
			"kind": "function",
			"details": "Rounds a variant to the specified number of decimal places"
		},
		{
			"trigger": "variant_set()",
			"contents": "variant_set(${1:variant}, ${2:value})",
			"kind": "function",
			"details": "Assigns a new value for a variant object"
		},
		{
			"trigger": "variant_set_type()",
			"contents": "variant_set_type(${1:variant}, ${2:type})",
			"kind": "function",
			"details": "Convert a variant into another type \"in-place\""
		},
		{
			"trigger": "variant_sub()",
			"contents": "variant_sub(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Subtracts the value of the right variant from the left variant value"
		},
		{
			"trigger": "variant_xor()",
			"contents": "variant_xor(${1:left}, ${2:right})",
			"kind": "function",
			"details": "Performs a logical exclusion on two variants"
		},
		{
			"trigger": "version_compare()",
			"contents": "version_compare(${1:version1}, ${2:version2})",
			"kind": "function",
			"details": "Compares two \"PHP-standardized\" version number strings"
		},
		{
			"trigger": "vfprintf()",
			"contents": "vfprintf(${1:handle}, ${2:format}, ${3:args})",
			"kind": "function",
			"details": "Write a formatted string to a stream"
		},
		{
			"trigger": "virtual()",
			"contents": "virtual(${1:filename})",
			"kind": "function",
			"details": "Perform an Apache sub-request"
		},
		{
			"trigger": "vpopmail_add_alias_domain()",
			"contents": "vpopmail_add_alias_domain(${1:domain}, ${2:aliasdomain})",
			"kind": "function",
			"details": "Add an alias for a virtual domain"
		},
		{
			"trigger": "vpopmail_add_alias_domain_ex()",
			"contents": "vpopmail_add_alias_domain_ex(${1:olddomain}, ${2:newdomain})",
			"kind": "function",
			"details": "Add alias to an existing virtual domain"
		},
		{
			"trigger": "vpopmail_add_domain()",
			"contents": "vpopmail_add_domain(${1:domain}, ${2:dir}, ${3:uid}, ${4:gid})",
			"kind": "function",
			"details": "Add a new virtual domain"
		},
		{
			"trigger": "vpopmail_add_domain_ex()",
			"contents": "vpopmail_add_domain_ex(${1:domain}, ${2:passwd})",
			"kind": "function",
			"details": "Add a new virtual domain"
		},
		{
			"trigger": "vpopmail_add_user()",
			"contents": "vpopmail_add_user(${1:user}, ${2:domain}, ${3:password})",
			"kind": "function",
			"details": "Add a new user to the specified virtual domain"
		},
		{
			"trigger": "vpopmail_alias_add()",
			"contents": "vpopmail_alias_add(${1:user}, ${2:domain}, ${3:alias})",
			"kind": "function",
			"details": "Insert a virtual alias"
		},
		{
			"trigger": "vpopmail_alias_del()",
			"contents": "vpopmail_alias_del(${1:user}, ${2:domain})",
			"kind": "function",
			"details": "Deletes all virtual aliases of a user"
		},
		{
			"trigger": "vpopmail_alias_del_domain()",
			"contents": "vpopmail_alias_del_domain(${1:domain})",
			"kind": "function",
			"details": "Deletes all virtual aliases of a domain"
		},
		{
			"trigger": "vpopmail_alias_get()",
			"contents": "vpopmail_alias_get(${1:alias}, ${2:domain})",
			"kind": "function",
			"details": "Get all lines of an alias for a domain"
		},
		{
			"trigger": "vpopmail_alias_get_all()",
			"contents": "vpopmail_alias_get_all(${1:domain})",
			"kind": "function",
			"details": "Get all lines of an alias for a domain"
		},
		{
			"trigger": "vpopmail_auth_user()",
			"contents": "vpopmail_auth_user(${1:user}, ${2:domain}, ${3:password})",
			"kind": "function",
			"details": "Attempt to validate a username/domain/password"
		},
		{
			"trigger": "vpopmail_del_domain()",
			"contents": "vpopmail_del_domain(${1:domain})",
			"kind": "function",
			"details": "Delete a virtual domain"
		},
		{
			"trigger": "vpopmail_del_domain_ex()",
			"contents": "vpopmail_del_domain_ex(${1:domain})",
			"kind": "function",
			"details": "Delete a virtual domain"
		},
		{
			"trigger": "vpopmail_del_user()",
			"contents": "vpopmail_del_user(${1:user}, ${2:domain})",
			"kind": "function",
			"details": "Delete a user from a virtual domain"
		},
		{
			"trigger": "vpopmail_error()",
			"contents": "vpopmail_error()",
			"kind": "function",
			"details": "Get text message for last vpopmail error"
		},
		{
			"trigger": "vpopmail_passwd()",
			"contents": "vpopmail_passwd(${1:user}, ${2:domain}, ${3:password})",
			"kind": "function",
			"details": "Change a virtual user's password"
		},
		{
			"trigger": "vpopmail_set_user_quota()",
			"contents": "vpopmail_set_user_quota(${1:user}, ${2:domain}, ${3:quota})",
			"kind": "function",
			"details": "Sets a virtual user's quota"
		},
		{
			"trigger": "vprintf()",
			"contents": "vprintf(${1:format}, ${2:args})",
			"kind": "function",
			"details": "Output a formatted string"
		},
		{
			"trigger": "vsprintf()",
			"contents": "vsprintf(${1:format}, ${2:args})",
			"kind": "function",
			"details": "Return a formatted string"
		},
		{
			"trigger": "w32api_deftype()",
			"contents": "w32api_deftype(${1:typename}, ${2:member1_type}, ${3:member1_name})",
			"kind": "function"
		},
		{
			"trigger": "w32api_init_dtype()",
			"contents": "w32api_init_dtype(${1:typename}, ${2:value})",
			"kind": "function"
		},
		{
			"trigger": "w32api_invoke_function()",
			"contents": "w32api_invoke_function(${1:funcname}, ${2:argument})",
			"kind": "function"
		},
		{
			"trigger": "w32api_register_function()",
			"contents": "w32api_register_function(${1:library}, ${2:function_name}, ${3:return_type})",
			"kind": "function"
		},
		{
			"trigger": "w32api_set_call_method()",
			"contents": "w32api_set_call_method(${1:method})",
			"kind": "function"
		},
		{
			"trigger": "wddx_add_vars()",
			"contents": "wddx_add_vars(${1:packet_id}, ${2:var_name})",
			"kind": "function",
			"details": "Add variables to a WDDX packet with the specified ID"
		},
		{
			"trigger": "wddx_deserialize()",
			"contents": "wddx_deserialize()",
			"kind": "function",
			"details": "Unserializes a WDDX packet"
		},
		{
			"trigger": "wddx_packet_end()",
			"contents": "wddx_packet_end(${1:packet_id})",
			"kind": "function",
			"details": "Ends a WDDX packet with the specified ID"
		},
		{
			"trigger": "wddx_packet_start()",
			"contents": "wddx_packet_start()",
			"kind": "function",
			"details": "Starts a new WDDX packet with structure inside it"
		},
		{
			"trigger": "wddx_serialize_value()",
			"contents": "wddx_serialize_value(${1:var})",
			"kind": "function",
			"details": "Serialize a single value into a WDDX packet"
		},
		{
			"trigger": "wddx_serialize_vars()",
			"contents": "wddx_serialize_vars(${1:var_name})",
			"kind": "function",
			"details": "Serialize variables into a WDDX packet"
		},
		{
			"trigger": "wddx_unserialize()",
			"contents": "wddx_unserialize(${1:packet})",
			"kind": "function"
		},
		{
			"trigger": "win32_continue_service()",
			"contents": "win32_continue_service(${1:servicename})",
			"kind": "function",
			"details": "Resumes a paused service"
		},
		{
			"trigger": "win32_create_service()",
			"contents": "win32_create_service(${1:details})",
			"kind": "function",
			"details": "Creates a new service entry in the SCM database"
		},
		{
			"trigger": "win32_delete_service()",
			"contents": "win32_delete_service(${1:servicename})",
			"kind": "function",
			"details": "Deletes a service entry from the SCM database"
		},
		{
			"trigger": "win32_get_last_control_message()",
			"contents": "win32_get_last_control_message()",
			"kind": "function",
			"details": "Returns the last control message that was sent to this service"
		},
		{
			"trigger": "win32_pause_service()",
			"contents": "win32_pause_service(${1:servicename})",
			"kind": "function",
			"details": "Pauses a service"
		},
		{
			"trigger": "win32_ps_list_procs()",
			"contents": "win32_ps_list_procs()",
			"kind": "function",
			"details": "List running processes"
		},
		{
			"trigger": "win32_ps_stat_mem()",
			"contents": "win32_ps_stat_mem()",
			"kind": "function",
			"details": "Stat memory utilization"
		},
		{
			"trigger": "win32_ps_stat_proc()",
			"contents": "win32_ps_stat_proc()",
			"kind": "function",
			"details": "Stat process"
		},
		{
			"trigger": "win32_query_service_status()",
			"contents": "win32_query_service_status(${1:servicename})",
			"kind": "function",
			"details": "Queries the status of a service"
		},
		{
			"trigger": "win32_set_service_status()",
			"contents": "win32_set_service_status(${1:status})",
			"kind": "function",
			"details": "Update the service status"
		},
		{
			"trigger": "win32_start_service()",
			"contents": "win32_start_service(${1:servicename})",
			"kind": "function",
			"details": "Starts a service"
		},
		{
			"trigger": "win32_start_service_ctrl_dispatcher()",
			"contents": "win32_start_service_ctrl_dispatcher(${1:name})",
			"kind": "function",
			"details": "Registers the script with the SCM, so that it can act as the service with the given name"
		},
		{
			"trigger": "win32_stop_service()",
			"contents": "win32_stop_service(${1:servicename})",
			"kind": "function",
			"details": "Stops a service"
		},
		{
			"trigger": "wincache_fcache_fileinfo()",
			"contents": "wincache_fcache_fileinfo()",
			"kind": "function",
			"details": "Retrieves information about files cached in the file cache"
		},
		{
			"trigger": "wincache_fcache_meminfo()",
			"contents": "wincache_fcache_meminfo()",
			"kind": "function",
			"details": "Retrieves information about file cache memory usage"
		},
		{
			"trigger": "wincache_lock()",
			"contents": "wincache_lock(${1:key})",
			"kind": "function",
			"details": "Acquires an exclusive lock on a given key"
		},
		{
			"trigger": "wincache_ocache_fileinfo()",
			"contents": "wincache_ocache_fileinfo()",
			"kind": "function",
			"details": "Retrieves information about files cached in the opcode cache"
		},
		{
			"trigger": "wincache_ocache_meminfo()",
			"contents": "wincache_ocache_meminfo()",
			"kind": "function",
			"details": "Retrieves information about opcode cache memory usage"
		},
		{
			"trigger": "wincache_refresh_if_changed()",
			"contents": "wincache_refresh_if_changed()",
			"kind": "function",
			"details": "Refreshes the cache entries for the cached files"
		},
		{
			"trigger": "wincache_rplist_fileinfo()",
			"contents": "wincache_rplist_fileinfo()",
			"kind": "function",
			"details": "Retrieves information about resolve file path cache"
		},
		{
			"trigger": "wincache_rplist_meminfo()",
			"contents": "wincache_rplist_meminfo()",
			"kind": "function",
			"details": "Retrieves information about memory usage by the resolve file path cache"
		},
		{
			"trigger": "wincache_scache_info()",
			"contents": "wincache_scache_info()",
			"kind": "function",
			"details": "Retrieves information about files cached in the session cache"
		},
		{
			"trigger": "wincache_scache_meminfo()",
			"contents": "wincache_scache_meminfo()",
			"kind": "function",
			"details": "Retrieves information about session cache memory usage"
		},
		{
			"trigger": "wincache_ucache_add()",
			"contents": "wincache_ucache_add(${1:key}, ${2:value})",
			"kind": "function",
			"details": "Adds a variable in user cache only if variable does not already exist in the cache"
		},
		{
			"trigger": "wincache_ucache_cas()",
			"contents": "wincache_ucache_cas(${1:key}, ${2:old_value}, ${3:new_value})",
			"kind": "function",
			"details": "Compares the variable with old value and assigns new value to it"
		},
		{
			"trigger": "wincache_ucache_clear()",
			"contents": "wincache_ucache_clear()",
			"kind": "function",
			"details": "Deletes entire content of the user cache"
		},
		{
			"trigger": "wincache_ucache_dec()",
			"contents": "wincache_ucache_dec(${1:key})",
			"kind": "function",
			"details": "Decrements the value associated with the key"
		},
		{
			"trigger": "wincache_ucache_delete()",
			"contents": "wincache_ucache_delete(${1:key})",
			"kind": "function",
			"details": "Deletes variables from the user cache"
		},
		{
			"trigger": "wincache_ucache_exists()",
			"contents": "wincache_ucache_exists(${1:key})",
			"kind": "function",
			"details": "Checks if a variable exists in the user cache"
		},
		{
			"trigger": "wincache_ucache_get()",
			"contents": "wincache_ucache_get(${1:key})",
			"kind": "function",
			"details": "Gets a variable stored in the user cache"
		},
		{
			"trigger": "wincache_ucache_inc()",
			"contents": "wincache_ucache_inc(${1:key})",
			"kind": "function",
			"details": "Increments the value associated with the key"
		},
		{
			"trigger": "wincache_ucache_info()",
			"contents": "wincache_ucache_info()",
			"kind": "function",
			"details": "Retrieves information about data stored in the user cache"
		},
		{
			"trigger": "wincache_ucache_meminfo()",
			"contents": "wincache_ucache_meminfo()",
			"kind": "function",
			"details": "Retrieves information about user cache memory usage"
		},
		{
			"trigger": "wincache_ucache_set()",
			"contents": "wincache_ucache_set(${1:key}, ${2:value})",
			"kind": "function",
			"details": "Adds a variable in user cache and overwrites a variable if it already exists in the cache"
		},
		{
			"trigger": "wincache_unlock()",
			"contents": "wincache_unlock(${1:key})",
			"kind": "function",
			"details": "Releases an exclusive lock on a given key"
		},
		{
			"trigger": "wordwrap()",
			"contents": "wordwrap(${1:str})",
			"kind": "function",
			"details": "Wraps a string to a given number of characters"
		},
		{
			"trigger": "xattr_get()",
			"contents": "xattr_get(${1:filename}, ${2:name})",
			"kind": "function",
			"details": "Get an extended attribute"
		},
		{
			"trigger": "xattr_list()",
			"contents": "xattr_list(${1:filename})",
			"kind": "function",
			"details": "Get a list of extended attributes"
		},
		{
			"trigger": "xattr_remove()",
			"contents": "xattr_remove(${1:filename}, ${2:name})",
			"kind": "function",
			"details": "Remove an extended attribute"
		},
		{
			"trigger": "xattr_set()",
			"contents": "xattr_set(${1:filename}, ${2:name}, ${3:value})",
			"kind": "function",
			"details": "Set an extended attribute"
		},
		{
			"trigger": "xattr_supported()",
			"contents": "xattr_supported(${1:filename})",
			"kind": "function",
			"details": "Check if filesystem supports extended attributes"
		},
		{
			"trigger": "xdiff_file_bdiff()",
			"contents": "xdiff_file_bdiff(${1:old_file}, ${2:new_file}, ${3:dest})",
			"kind": "function",
			"details": "Make binary diff of two files"
		},
		{
			"trigger": "xdiff_file_bdiff_size()",
			"contents": "xdiff_file_bdiff_size(${1:file})",
			"kind": "function",
			"details": "Read a size of file created by applying a binary diff"
		},
		{
			"trigger": "xdiff_file_bpatch()",
			"contents": "xdiff_file_bpatch(${1:file}, ${2:patch}, ${3:dest})",
			"kind": "function",
			"details": "Patch a file with a binary diff"
		},
		{
			"trigger": "xdiff_file_diff()",
			"contents": "xdiff_file_diff(${1:old_file}, ${2:new_file}, ${3:dest})",
			"kind": "function",
			"details": "Make unified diff of two files"
		},
		{
			"trigger": "xdiff_file_diff_binary()",
			"contents": "xdiff_file_diff_binary(${1:old_file}, ${2:new_file}, ${3:dest})",
			"kind": "function",
			"details": "Alias of xdiff_file_bdiff"
		},
		{
			"trigger": "xdiff_file_merge3()",
			"contents": "xdiff_file_merge3(${1:old_file}, ${2:new_file1}, ${3:new_file2}, ${4:dest})",
			"kind": "function",
			"details": "Merge 3 files into one"
		},
		{
			"trigger": "xdiff_file_patch()",
			"contents": "xdiff_file_patch(${1:file}, ${2:patch}, ${3:dest})",
			"kind": "function",
			"details": "Patch a file with an unified diff"
		},
		{
			"trigger": "xdiff_file_patch_binary()",
			"contents": "xdiff_file_patch_binary(${1:file}, ${2:patch}, ${3:dest})",
			"kind": "function",
			"details": "Alias of xdiff_file_bpatch"
		},
		{
			"trigger": "xdiff_file_rabdiff()",
			"contents": "xdiff_file_rabdiff(${1:old_file}, ${2:new_file}, ${3:dest})",
			"kind": "function",
			"details": "Make binary diff of two files using the Rabin's polynomial fingerprinting algorithm"
		},
		{
			"trigger": "xdiff_string_bdiff()",
			"contents": "xdiff_string_bdiff(${1:old_data}, ${2:new_data})",
			"kind": "function",
			"details": "Make binary diff of two strings"
		},
		{
			"trigger": "xdiff_string_bdiff_size()",
			"contents": "xdiff_string_bdiff_size(${1:patch})",
			"kind": "function",
			"details": "Read a size of file created by applying a binary diff"
		},
		{
			"trigger": "xdiff_string_bpatch()",
			"contents": "xdiff_string_bpatch(${1:str}, ${2:patch})",
			"kind": "function",
			"details": "Patch a string with a binary diff"
		},
		{
			"trigger": "xdiff_string_diff()",
			"contents": "xdiff_string_diff(${1:old_data}, ${2:new_data})",
			"kind": "function",
			"details": "Make unified diff of two strings"
		},
		{
			"trigger": "xdiff_string_diff_binary()",
			"contents": "xdiff_string_diff_binary(${1:old_data}, ${2:new_data})",
			"kind": "function",
			"details": "Alias of xdiff_string_bdiff"
		},
		{
			"trigger": "xdiff_string_merge3()",
			"contents": "xdiff_string_merge3(${1:old_data}, ${2:new_data1}, ${3:new_data2})",
			"kind": "function",
			"details": "Merge 3 strings into one"
		},
		{
			"trigger": "xdiff_string_patch()",
			"contents": "xdiff_string_patch(${1:str}, ${2:patch})",
			"kind": "function",
			"details": "Patch a string with an unified diff"
		},
		{
			"trigger": "xdiff_string_patch_binary()",
			"contents": "xdiff_string_patch_binary(${1:str}, ${2:patch})",
			"kind": "function",
			"details": "Alias of xdiff_string_bpatch"
		},
		{
			"trigger": "xdiff_string_rabdiff()",
			"contents": "xdiff_string_rabdiff(${1:old_data}, ${2:new_data})",
			"kind": "function",
			"details": "Make binary diff of two strings using the Rabin's polynomial fingerprinting algorithm"
		},
		{
			"trigger": "xml_error_string()",
			"contents": "xml_error_string(${1:code})",
			"kind": "function",
			"details": "Get XML parser error string"
		},
		{
			"trigger": "xml_get_current_byte_index()",
			"contents": "xml_get_current_byte_index(${1:parser})",
			"kind": "function",
			"details": "Get current byte index for an XML parser"
		},
		{
			"trigger": "xml_get_current_column_number()",
			"contents": "xml_get_current_column_number(${1:parser})",
			"kind": "function",
			"details": "Get current column number for an XML parser"
		},
		{
			"trigger": "xml_get_current_line_number()",
			"contents": "xml_get_current_line_number(${1:parser})",
			"kind": "function",
			"details": "Get current line number for an XML parser"
		},
		{
			"trigger": "xml_get_error_code()",
			"contents": "xml_get_error_code(${1:parser})",
			"kind": "function",
			"details": "Get XML parser error code"
		},
		{
			"trigger": "xml_parse()",
			"contents": "xml_parse(${1:parser}, ${2:data})",
			"kind": "function",
			"details": "Start parsing an XML document"
		},
		{
			"trigger": "xml_parse_into_struct()",
			"contents": "xml_parse_into_struct(${1:parser}, ${2:data}, ${3:values})",
			"kind": "function",
			"details": "Parse XML data into an array structure"
		},
		{
			"trigger": "xml_parser_create()",
			"contents": "xml_parser_create()",
			"kind": "function",
			"details": "Create an XML parser"
		},
		{
			"trigger": "xml_parser_create_ns()",
			"contents": "xml_parser_create_ns()",
			"kind": "function",
			"details": "Create an XML parser with namespace support"
		},
		{
			"trigger": "xml_parser_free()",
			"contents": "xml_parser_free(${1:parser})",
			"kind": "function",
			"details": "Free an XML parser"
		},
		{
			"trigger": "xml_parser_get_option()",
			"contents": "xml_parser_get_option(${1:parser}, ${2:option})",
			"kind": "function",
			"details": "Get options from an XML parser"
		},
		{
			"trigger": "xml_parser_set_option()",
			"contents": "xml_parser_set_option(${1:parser}, ${2:option}, ${3:value})",
			"kind": "function",
			"details": "Set options in an XML parser"
		},
		{
			"trigger": "xml_set_character_data_handler()",
			"contents": "xml_set_character_data_handler(${1:parser}, ${2:handler})",
			"kind": "function",
			"details": "Set up character data handler"
		},
		{
			"trigger": "xml_set_default_handler()",
			"contents": "xml_set_default_handler(${1:parser}, ${2:handler})",
			"kind": "function",
			"details": "Set up default handler"
		},
		{
			"trigger": "xml_set_element_handler()",
			"contents": "xml_set_element_handler(${1:parser}, ${2:start_element_handler}, ${3:end_element_handler})",
			"kind": "function",
			"details": "Set up start and end element handlers"
		},
		{
			"trigger": "xml_set_end_namespace_decl_handler()",
			"contents": "xml_set_end_namespace_decl_handler(${1:parser}, ${2:handler})",
			"kind": "function",
			"details": "Set up end namespace declaration handler"
		},
		{
			"trigger": "xml_set_external_entity_ref_handler()",
			"contents": "xml_set_external_entity_ref_handler(${1:parser}, ${2:handler})",
			"kind": "function",
			"details": "Set up external entity reference handler"
		},
		{
			"trigger": "xml_set_notation_decl_handler()",
			"contents": "xml_set_notation_decl_handler(${1:parser}, ${2:handler})",
			"kind": "function",
			"details": "Set up notation declaration handler"
		},
		{
			"trigger": "xml_set_object()",
			"contents": "xml_set_object(${1:parser}, ${2:object})",
			"kind": "function",
			"details": "Use XML Parser within an object"
		},
		{
			"trigger": "xml_set_processing_instruction_handler()",
			"contents": "xml_set_processing_instruction_handler(${1:parser}, ${2:handler})",
			"kind": "function",
			"details": "Set up processing instruction (PI) handler"
		},
		{
			"trigger": "xml_set_start_namespace_decl_handler()",
			"contents": "xml_set_start_namespace_decl_handler(${1:parser}, ${2:handler})",
			"kind": "function",
			"details": "Set up start namespace declaration handler"
		},
		{
			"trigger": "xml_set_unparsed_entity_decl_handler()",
			"contents": "xml_set_unparsed_entity_decl_handler(${1:parser}, ${2:handler})",
			"kind": "function",
			"details": "Set up unparsed entity declaration handler"
		},
		{
			"trigger": "xmlrpc_decode()",
			"contents": "xmlrpc_decode(${1:xml})",
			"kind": "function",
			"details": "Decodes XML into native PHP types"
		},
		{
			"trigger": "xmlrpc_decode_request()",
			"contents": "xmlrpc_decode_request(${1:xml}, ${2:method})",
			"kind": "function",
			"details": "Decodes XML into native PHP types"
		},
		{
			"trigger": "xmlrpc_encode()",
			"contents": "xmlrpc_encode(${1:value})",
			"kind": "function",
			"details": "Generates XML for a PHP value"
		},
		{
			"trigger": "xmlrpc_encode_request()",
			"contents": "xmlrpc_encode_request(${1:method}, ${2:params})",
			"kind": "function",
			"details": "Generates XML for a method request"
		},
		{
			"trigger": "xmlrpc_get_type()",
			"contents": "xmlrpc_get_type(${1:value})",
			"kind": "function",
			"details": "Gets xmlrpc type for a PHP value"
		},
		{
			"trigger": "xmlrpc_is_fault()",
			"contents": "xmlrpc_is_fault(${1:arg})",
			"kind": "function",
			"details": "Determines if an array value represents an XMLRPC fault"
		},
		{
			"trigger": "xmlrpc_parse_method_descriptions()",
			"contents": "xmlrpc_parse_method_descriptions(${1:xml})",
			"kind": "function",
			"details": "Decodes XML into a list of method descriptions"
		},
		{
			"trigger": "xmlrpc_server_add_introspection_data()",
			"contents": "xmlrpc_server_add_introspection_data(${1:server}, ${2:desc})",
			"kind": "function",
			"details": "Adds introspection documentation"
		},
		{
			"trigger": "xmlrpc_server_call_method()",
			"contents": "xmlrpc_server_call_method(${1:server}, ${2:xml}, ${3:user_data})",
			"kind": "function",
			"details": "Parses XML requests and call methods"
		},
		{
			"trigger": "xmlrpc_server_create()",
			"contents": "xmlrpc_server_create()",
			"kind": "function",
			"details": "Creates an xmlrpc server"
		},
		{
			"trigger": "xmlrpc_server_destroy()",
			"contents": "xmlrpc_server_destroy(${1:server})",
			"kind": "function",
			"details": "Destroys server resources"
		},
		{
			"trigger": "xmlrpc_server_register_introspection_callback()",
			"contents": "xmlrpc_server_register_introspection_callback(${1:server}, ${2:function})",
			"kind": "function",
			"details": "Register a PHP function to generate documentation"
		},
		{
			"trigger": "xmlrpc_server_register_method()",
			"contents": "xmlrpc_server_register_method(${1:server}, ${2:method_name}, ${3:function})",
			"kind": "function",
			"details": "Register a PHP function to resource method matching method_name"
		},
		{
			"trigger": "xmlrpc_set_type()",
			"contents": "xmlrpc_set_type(${1:value}, ${2:type})",
			"kind": "function",
			"details": "Sets xmlrpc type, base64 or datetime, for a PHP string value"
		},
		{
			"trigger": "xpath_eval()",
			"contents": "xpath_eval(${1:xpath_expression})",
			"kind": "function"
		},
		{
			"trigger": "xpath_eval_expression()",
			"contents": "xpath_eval_expression(${1:expression})",
			"kind": "function"
		},
		{
			"trigger": "xpath_new_context()",
			"contents": "xpath_new_context(${1:dom_document})",
			"kind": "function"
		},
		{
			"trigger": "xpath_register_ns()",
			"contents": "xpath_register_ns(${1:xpath_context}, ${2:prefix}, ${3:uri})",
			"kind": "function"
		},
		{
			"trigger": "xpath_register_ns_auto()",
			"contents": "xpath_register_ns_auto(${1:xpath_context})",
			"kind": "function"
		},
		{
			"trigger": "xptr_eval()",
			"contents": "xptr_eval(${1:eval_str})",
			"kind": "function"
		},
		{
			"trigger": "xptr_new_context()",
			"contents": "xptr_new_context()",
			"kind": "function"
		},
		{
			"trigger": "xslt_backend_info()",
			"contents": "xslt_backend_info()",
			"kind": "function"
		},
		{
			"trigger": "xslt_backend_name()",
			"contents": "xslt_backend_name()",
			"kind": "function"
		},
		{
			"trigger": "xslt_backend_version()",
			"contents": "xslt_backend_version()",
			"kind": "function"
		},
		{
			"trigger": "xslt_create()",
			"contents": "xslt_create()",
			"kind": "function"
		},
		{
			"trigger": "xslt_errno()",
			"contents": "xslt_errno(${1:xh})",
			"kind": "function"
		},
		{
			"trigger": "xslt_error()",
			"contents": "xslt_error(${1:xh})",
			"kind": "function"
		},
		{
			"trigger": "xslt_free()",
			"contents": "xslt_free(${1:xh})",
			"kind": "function"
		},
		{
			"trigger": "xslt_getopt()",
			"contents": "xslt_getopt(${1:processor})",
			"kind": "function"
		},
		{
			"trigger": "xslt_process()",
			"contents": "xslt_process(${1:xh}, ${2:xmlcontainer}, ${3:xslcontainer})",
			"kind": "function"
		},
		{
			"trigger": "xslt_set_base()",
			"contents": "xslt_set_base(${1:xh}, ${2:uri})",
			"kind": "function"
		},
		{
			"trigger": "xslt_set_encoding()",
			"contents": "xslt_set_encoding(${1:xh}, ${2:encoding})",
			"kind": "function"
		},
		{
			"trigger": "xslt_set_error_handler()",
			"contents": "xslt_set_error_handler(${1:xh}, ${2:handler})",
			"kind": "function"
		},
		{
			"trigger": "xslt_set_log()",
			"contents": "xslt_set_log(${1:xh})",
			"kind": "function"
		},
		{
			"trigger": "xslt_set_object()",
			"contents": "xslt_set_object(${1:processor}, ${2:obj})",
			"kind": "function"
		},
		{
			"trigger": "xslt_set_sax_handler()",
			"contents": "xslt_set_sax_handler(${1:xh}, ${2:handlers})",
			"kind": "function"
		},
		{
			"trigger": "xslt_set_sax_handlers()",
			"contents": "xslt_set_sax_handlers(${1:processor}, ${2:handlers})",
			"kind": "function"
		},
		{
			"trigger": "xslt_set_scheme_handler()",
			"contents": "xslt_set_scheme_handler(${1:xh}, ${2:handlers})",
			"kind": "function"
		},
		{
			"trigger": "xslt_set_scheme_handlers()",
			"contents": "xslt_set_scheme_handlers(${1:xh}, ${2:handlers})",
			"kind": "function"
		},
		{
			"trigger": "xslt_setopt()",
			"contents": "xslt_setopt(${1:processor}, ${2:newmask})",
			"kind": "function"
		},
		{
			"trigger": "yaml_emit()",
			"contents": "yaml_emit(${1:data})",
			"kind": "function",
			"details": "Returns the YAML representation of a value"
		},
		{
			"trigger": "yaml_emit_file()",
			"contents": "yaml_emit_file(${1:filename}, ${2:data})",
			"kind": "function",
			"details": "Send the YAML representation of a value to a file"
		},
		{
			"trigger": "yaml_parse()",
			"contents": "yaml_parse(${1:input})",
			"kind": "function",
			"details": "Parse a YAML stream"
		},
		{
			"trigger": "yaml_parse_file()",
			"contents": "yaml_parse_file(${1:filename})",
			"kind": "function",
			"details": "Parse a YAML stream from a file"
		},
		{
			"trigger": "yaml_parse_url()",
			"contents": "yaml_parse_url(${1:url})",
			"kind": "function",
			"details": "Parse a Yaml stream from a URL"
		},
		{
			"trigger": "yaz_addinfo()",
			"contents": "yaz_addinfo(${1:id})",
			"kind": "function",
			"details": "Returns additional error information"
		},
		{
			"trigger": "yaz_ccl_conf()",
			"contents": "yaz_ccl_conf(${1:id}, ${2:config})",
			"kind": "function",
			"details": "Configure CCL parser"
		},
		{
			"trigger": "yaz_ccl_parse()",
			"contents": "yaz_ccl_parse(${1:id}, ${2:query}, ${3:result})",
			"kind": "function",
			"details": "Invoke CCL Parser"
		},
		{
			"trigger": "yaz_close()",
			"contents": "yaz_close(${1:id})",
			"kind": "function",
			"details": "Close YAZ connection"
		},
		{
			"trigger": "yaz_connect()",
			"contents": "yaz_connect(${1:zurl})",
			"kind": "function",
			"details": "Prepares for a connection to a Z39.50 server"
		},
		{
			"trigger": "yaz_database()",
			"contents": "yaz_database(${1:id}, ${2:databases})",
			"kind": "function",
			"details": "Specifies the databases within a session"
		},
		{
			"trigger": "yaz_element()",
			"contents": "yaz_element(${1:id}, ${2:elementset})",
			"kind": "function",
			"details": "Specifies Element-Set Name for retrieval"
		},
		{
			"trigger": "yaz_errno()",
			"contents": "yaz_errno(${1:id})",
			"kind": "function",
			"details": "Returns error number"
		},
		{
			"trigger": "yaz_error()",
			"contents": "yaz_error(${1:id})",
			"kind": "function",
			"details": "Returns error description"
		},
		{
			"trigger": "yaz_es()",
			"contents": "yaz_es(${1:id}, ${2:type}, ${3:args})",
			"kind": "function",
			"details": "Prepares for an Extended Service Request"
		},
		{
			"trigger": "yaz_es_result()",
			"contents": "yaz_es_result(${1:id})",
			"kind": "function",
			"details": "Inspects Extended Services Result"
		},
		{
			"trigger": "yaz_get_option()",
			"contents": "yaz_get_option(${1:id}, ${2:name})",
			"kind": "function",
			"details": "Returns value of option for connection"
		},
		{
			"trigger": "yaz_hits()",
			"contents": "yaz_hits(${1:id})",
			"kind": "function",
			"details": "Returns number of hits for last search"
		},
		{
			"trigger": "yaz_itemorder()",
			"contents": "yaz_itemorder(${1:id}, ${2:args})",
			"kind": "function",
			"details": "Prepares for Z39.50 Item Order with an ILL-Request package"
		},
		{
			"trigger": "yaz_present()",
			"contents": "yaz_present(${1:id})",
			"kind": "function",
			"details": "Prepares for retrieval (Z39.50 present)"
		},
		{
			"trigger": "yaz_range()",
			"contents": "yaz_range(${1:id}, ${2:start}, ${3:number})",
			"kind": "function",
			"details": "Specifies a range of records to retrieve"
		},
		{
			"trigger": "yaz_record()",
			"contents": "yaz_record(${1:id}, ${2:pos}, ${3:type})",
			"kind": "function",
			"details": "Returns a record"
		},
		{
			"trigger": "yaz_scan()",
			"contents": "yaz_scan(${1:id}, ${2:type}, ${3:startterm})",
			"kind": "function",
			"details": "Prepares for a scan"
		},
		{
			"trigger": "yaz_scan_result()",
			"contents": "yaz_scan_result(${1:id})",
			"kind": "function",
			"details": "Returns Scan Response result"
		},
		{
			"trigger": "yaz_schema()",
			"contents": "yaz_schema(${1:id}, ${2:schema})",
			"kind": "function",
			"details": "Specifies schema for retrieval"
		},
		{
			"trigger": "yaz_search()",
			"contents": "yaz_search(${1:id}, ${2:type}, ${3:query})",
			"kind": "function",
			"details": "Prepares for a search"
		},
		{
			"trigger": "yaz_set_option()",
			"contents": "yaz_set_option(${1:id}, ${2:name}, ${3:value})",
			"kind": "function",
			"details": "Sets one or more options for connection"
		},
		{
			"trigger": "yaz_sort()",
			"contents": "yaz_sort(${1:id}, ${2:criteria})",
			"kind": "function",
			"details": "Sets sorting criteria"
		},
		{
			"trigger": "yaz_syntax()",
			"contents": "yaz_syntax(${1:id}, ${2:syntax})",
			"kind": "function",
			"details": "Specifies the preferred record syntax for retrieval"
		},
		{
			"trigger": "yaz_wait()",
			"contents": "yaz_wait()",
			"kind": "function",
			"details": "Wait for Z39.50 requests to complete"
		},
		{
			"trigger": "yp_all()",
			"contents": "yp_all(${1:domain}, ${2:map}, ${3:callback})",
			"kind": "function",
			"details": "Traverse the map and call a function on each entry"
		},
		{
			"trigger": "yp_cat()",
			"contents": "yp_cat(${1:domain}, ${2:map})",
			"kind": "function",
			"details": "Return an array containing the entire map"
		},
		{
			"trigger": "yp_err_string()",
			"contents": "yp_err_string(${1:errorcode})",
			"kind": "function",
			"details": "Returns the error string associated with the given error code"
		},
		{
			"trigger": "yp_errno()",
			"contents": "yp_errno()",
			"kind": "function",
			"details": "Returns the error code of the previous operation"
		},
		{
			"trigger": "yp_first()",
			"contents": "yp_first(${1:domain}, ${2:map})",
			"kind": "function",
			"details": "Returns the first key-value pair from the named map"
		},
		{
			"trigger": "yp_get_default_domain()",
			"contents": "yp_get_default_domain()",
			"kind": "function",
			"details": "Fetches the machine's default NIS domain"
		},
		{
			"trigger": "yp_master()",
			"contents": "yp_master(${1:domain}, ${2:map})",
			"kind": "function",
			"details": "Returns the machine name of the master NIS server for a map"
		},
		{
			"trigger": "yp_match()",
			"contents": "yp_match(${1:domain}, ${2:map}, ${3:key})",
			"kind": "function",
			"details": "Returns the matched line"
		},
		{
			"trigger": "yp_next()",
			"contents": "yp_next(${1:domain}, ${2:map}, ${3:key})",
			"kind": "function",
			"details": "Returns the next key-value pair in the named map"
		},
		{
			"trigger": "yp_order()",
			"contents": "yp_order(${1:domain}, ${2:map})",
			"kind": "function",
			"details": "Returns the order number for a map"
		},
		{
			"trigger": "zend_logo_guid()",
			"contents": "zend_logo_guid()",
			"kind": "function",
			"details": "Gets the Zend guid"
		},
		{
			"trigger": "zend_thread_id()",
			"contents": "zend_thread_id()",
			"kind": "function",
			"details": "Returns a unique identifier for the current thread"
		},
		{
			"trigger": "zend_version()",
			"contents": "zend_version()",
			"kind": "function",
			"details": "Gets the version of the current Zend engine"
		},
		{
			"trigger": "zip_close()",
			"contents": "zip_close(${1:zip})",
			"kind": "function",
			"details": "Close a ZIP file archive"
		},
		{
			"trigger": "zip_entry_close()",
			"contents": "zip_entry_close(${1:zip_entry})",
			"kind": "function",
			"details": "Close a directory entry"
		},
		{
			"trigger": "zip_entry_compressedsize()",
			"contents": "zip_entry_compressedsize(${1:zip_entry})",
			"kind": "function",
			"details": "Retrieve the compressed size of a directory entry"
		},
		{
			"trigger": "zip_entry_compressionmethod()",
			"contents": "zip_entry_compressionmethod(${1:zip_entry})",
			"kind": "function",
			"details": "Retrieve the compression method of a directory entry"
		},
		{
			"trigger": "zip_entry_filesize()",
			"contents": "zip_entry_filesize(${1:zip_entry})",
			"kind": "function",
			"details": "Retrieve the actual file size of a directory entry"
		},
		{
			"trigger": "zip_entry_name()",
			"contents": "zip_entry_name(${1:zip_entry})",
			"kind": "function",
			"details": "Retrieve the name of a directory entry"
		},
		{
			"trigger": "zip_entry_open()",
			"contents": "zip_entry_open(${1:zip}, ${2:zip_entry})",
			"kind": "function",
			"details": "Open a directory entry for reading"
		},
		{
			"trigger": "zip_entry_read()",
			"contents": "zip_entry_read(${1:zip_entry})",
			"kind": "function",
			"details": "Read from an open directory entry"
		},
		{
			"trigger": "zip_open()",
			"contents": "zip_open(${1:filename})",
			"kind": "function",
			"details": "Open a ZIP file archive"
		},
		{
			"trigger": "zip_read()",
			"contents": "zip_read(${1:zip})",
			"kind": "function",
			"details": "Read next entry in a ZIP file archive"
		},
		{
			"trigger": "zlib_get_coding_type()",
			"contents": "zlib_get_coding_type()",
			"kind": "function",
			"details": "Returns the coding type used for output compression"
		},
		{
			"trigger": "password_hash()",
			"contents": "password_hash(${1:string}, ${2:PASSWORD_DEFAULT})",
			"kind": "function",
			"details": "Creates a password hash"
		},
		{
			"trigger": "password_verify()",
			"contents": "password_verify(${1:password}, ${2:hash})",
			"kind": "function",
			"details": "Verifies that a password matches a hash"
		},
		{
			"trigger": "password_get_info()",
			"contents": "password_get_info(${1:hash})",
			"kind": "function",
			"details": "Returns information about the given hash"
		},
		{
			"trigger": "password_needs_rehash()",
			"contents": "password_needs_rehash(${1:hash}, ${2:PASSWORD_DEFAULT})",
			"kind": "function",
			"details": "Checks if the given hash matches the given options"
		}
	]
}
