%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Objective-C
file_extensions:
  - m
  - h
scope: source.objc

variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while'
  before_tag: 'struct|union|enum'
  common_protocols: '\bNS(GlyphStorage|M(utableCopying|enuItem)|C(hangeSpelling|o(ding|pying|lorPicking(Custom|Default)))|T(oolbarItemValidations|ext(Input|AttachmentCell))|I(nputServ(iceProvider|erMouseTracker)|gnoreMisspelledWords)|Obj(CTypeSerializationCallBack|ect)|D(ecimalNumberBehaviors|raggingInfo)|U(serInterfaceValidations|RL(HandleClient|DownloadDelegate|ProtocolClient|AuthenticationChallengeSender))|Validated(ToobarItem|UserInterfaceItem)|Locking)\b'
  non_func_keywords: 'if|for|switch|while|decltype|sizeof|__declspec|__attribute__'

contexts:
  main:
    - include: preprocessor-global
    - include: global

  #############################################################################
  # Reusable contexts
  #
  # The follow contexts are currently constructed to be reused in the
  # Objetive-C++ syntax. They are specifically constructed to not push into
  # sub-contexts, which ensures that Objective-C++ code isn't accidentally
  # lexed as plain Objective-C.
  #
  # The "unique-*" contexts are additions that Objective-C makes over C, and
  # thus can be directly reused in Objective-C++ along with contexts from C++
  # and C.
  #############################################################################

  properties:
    - match: ((@)property)\s*(\()
      captures:
        1: keyword.other.property.objc
        2: punctuation.definition.keyword.objc
        3: punctuation.section.scope.begin.objc
      push:
        - meta_scope: meta.property-with-attributes.objc
        - match: '\)'
          scope: punctuation.section.scope.end.objc
          pop: true
        - match: \b(getter|setter|readonly|readwrite|assign|retain|copy|nonatomic|strong|weak|class|nonnull|nullable|null_unspecified|null_resettable)\b
          scope: keyword.other.property.attribute.objc
        - match: ','
          scope: punctuation.separator.objc
    - match: ((@)property)\b
      scope: meta.property.objc
      captures:
        1: keyword.other.property.objc
        2: punctuation.definition.keyword.objc

  protocol_list:
    - match: '<'
      scope: punctuation.section.scope.begin.objc
      push:
        - meta_scope: meta.protocol-list.objc
        - match: '>'
          scope: punctuation.section.scope.end.objc
          pop: true
        - match: '{{common_protocols}}'
          scope: support.other.protocol.objc

  protocol_type_qualifier:
    - match: \b(in|out|inout|oneway|bycopy|byref)\b
      scope: storage.modifier.protocol.objc

  ns-predicate:
    - match: '(?=\])'
      pop: true
    - match: \bargument(?:Array|s)(:)
      scope: support.function.any-method.name-of-parameter.objc
      captures:
        1: punctuation.separator.arguments.objc
    - match: \b\w+(:)
      scope: invalid.illegal.unknown-method.objc
      captures:
        1: punctuation.separator.arguments.objc
    - match: '@"'
      scope: punctuation.definition.string.begin.objc
      push:
        - meta_scope: string.quoted.double.objc
        - match: '"'
          scope: punctuation.definition.string.end.objc
          pop: true
        - match: \b(?i:AND|OR|NOT|IN)\b
          scope: keyword.operator.logical.predicate.cocoa.objc
        - match: \b(?i:ALL|ANY|SOME|NONE)\b
          scope: constant.language.predicate.cocoa.objc
        - match: \b(?i:NULL|NIL|SELF|TRUE|YES|FALSE|NO|FIRST|LAST|SIZE)\b
          scope: constant.language.predicate.cocoa.objc
        - match: \b(?i:MATCHES|CONTAINS|BEGINSWITH|ENDSWITH|BETWEEN|LIKE)\b
          scope: keyword.operator.comparison.predicate.cocoa.objc
        - match: \b(?i:C(ASEINSENSITIVE|I))\b
          scope: keyword.other.modifier.predicate.cocoa.objc
        - match: \b(?i:ANYKEY|SUBQUERY|CAST|TRUEPREDICATE|FALSEPREDICATE)\b
          scope: keyword.other.predicate.cocoa.objc
        - match: '\\(\\|[abefnrtv''"?]|[0-3]\d{,2}|[4-7]\d?|x[a-zA-Z0-9]+)'
          scope: constant.character.escape.objc
        - match: \\.
          scope: invalid.illegal.unknown-escape.objc

  unique-strings:
    - match: '@"'
      scope: punctuation.definition.string.begin.objc
      push:
        - meta_scope: string.quoted.double.objc
        - match: '"'
          scope: punctuation.definition.string.end.objc
          pop: true
        - include: scope:source.c#string_escaped_char
        - match: '%@'
          scope: constant.other.placeholder.objc
        - include: scope:source.c#string_placeholder

  unique-keywords:
    - match: (@)(dynamic|synthesize)\b
      scope: keyword.other.property.directive.objc
      captures:
        1: punctuation.definition.keyword.objc
    - match: \b(NS_DURING|NS_HANDLER|NS_ENDHANDLER)\b
      scope: keyword.control.macro.objc
    - match: (@)(try|catch|finally|throw)\b
      scope: keyword.control.exception.objc
      captures:
        1: punctuation.definition.keyword.objc
    - match: (@)(synchronized)\b
      scope: keyword.control.synchronize.objc
      captures:
        1: punctuation.definition.keyword.objc
    - match: (@)(defs|encode)\b
      scope: keyword.other.objc
      captures:
        1: punctuation.definition.keyword.objc

  unique-variables:
    - match: \b_cmd\b
      scope: variable.other.selector.objc
    - match: \b(self|super)\b
      scope: variable.language.objc
    - match: \bNSApp\b
      scope: support.variable.foundation

  unique-constants:
    - match: \b(YES|NO|Nil|nil)\b
      scope: constant.language.objc

  unique-modifiers:
    - match: (@)(synchronized|public|private|protected)\b
      scope: storage.modifier.objc
      captures:
        1: punctuation.definition.storage.modifier.objc

  unique-types:
    - match: ((@)selector)\s*(\()
      captures:
        1: storage.type.objc
        2: punctuation.definition.storage.type.objc
        3: punctuation.definition.storage.type.objc
      push:
        - meta_scope: meta.selector.objc
        - meta_content_scope: meta.selector.method-name.objc
        - match: '\)'
          scope: punctuation.definition.storage.type.objc
          pop: true
        - match: '\b(?:[[:alpha:]_:][[:alnum:]_]*)+'
          scope: support.function.any-method.name-of-parameter.objc
          captures:
            1: punctuation.separator.arguments.objc
    - match: \b(id)\s*(?=<)
      captures:
        1: storage.type.objc
      push:
        - meta_scope: meta.id-with-protocol.objc
        - match: '>'
          scope: punctuation.section.scope.end.objc
          pop: true
        - match: '<'
          scope: punctuation.section.scope.begin.objc
          push:
            - meta_scope: meta.protocol-list.objc
            - match: '(?=>)'
              pop: true
            - match: '{{common_protocols}}'
              scope: support.other.protocol.objc
    - match: \bid\b(\s|\n)?
      scope: storage.type.id.objc
    - match: \b(IBOutlet|IBAction|BOOL|SEL|id|unichar|IMP|Class)\b
      scope: storage.type.objc
    - match: (@)(class|protocol)\b
      scope: storage.type.objc
      captures:
        1: punctuation.definition.storage.type.objc
    - match: \bC(I(Sampler|Co(ntext|lor)|Image(Accumulator)?|PlugIn(Registration)?|Vector|Kernel|Filter(Generator|Shape)?)|A(Renderer|MediaTiming(Function)?|BasicAnimation|ScrollLayer|Constraint(LayoutManager)?|T(iledLayer|extLayer|rans(ition|action))|OpenGLLayer|PropertyAnimation|KeyframeAnimation|Layer|A(nimation(Group)?|ction)))\b
      scope: support.class.quartz.objc
    - match: \bC(G(Float|Point|Size|Rect)|IFormat|AConstraintAttribute)\b
      scope: support.type.quartz.objc

  # This context is separate since the regexes are huge and they affect
  # compilation speed and caching performance
  ns-identifiers:
    - match: (\s*)\b(NS(Rect(ToCGRect|FromCGRect)|MakeCollectable|S(tringFromProtocol|ize(ToCGSize|FromCGSize))|Draw(NinePartImage|ThreePartImage)|P(oint(ToCGPoint|FromCGPoint)|rotocolFromString)|EventMaskFromType|Value))\b
      captures:
        1: punctuation.whitespace.support.function.cocoa.leopard.objc
        2: support.function.cocoa.leopard.objc
    - match: (\s*)\b(NS(R(ound(DownToMultipleOfPageSize|UpToMultipleOfPageSize)|un(CriticalAlertPanel(RelativeToWindow)?|InformationalAlertPanel(RelativeToWindow)?|AlertPanel(RelativeToWindow)?)|e(set(MapTable|HashTable)|c(ycleZone|t(Clip(List)?|F(ill(UsingOperation|List(UsingOperation|With(Grays|Colors(UsingOperation)?))?)?|romString))|ordAllocationEvent)|turnAddress|leaseAlertPanel|a(dPixel|l(MemoryAvailable|locateCollectable))|gisterServicesProvider)|angeFromString)|Get(SizeAndAlignment|CriticalAlertPanel|InformationalAlertPanel|UncaughtExceptionHandler|FileType(s)?|WindowServerMemory|AlertPanel)|M(i(n(X|Y)|d(X|Y))|ouseInRect|a(p(Remove|Get|Member|Insert(IfAbsent|KnownAbsent)?)|ke(R(ect|ange)|Size|Point)|x(Range|X|Y)))|B(itsPer(SampleFromDepth|PixelFromDepth)|e(stDepth|ep|gin(CriticalAlertSheet|InformationalAlertSheet|AlertSheet)))|S(ho(uldRetainWithZone|w(sServicesMenuItem|AnimationEffect))|tringFrom(R(ect|ange)|MapTable|S(ize|elector)|HashTable|Class|Point)|izeFromString|e(t(ShowsServicesMenuItem|ZoneName|UncaughtExceptionHandler|FocusRingStyle)|lectorFromString|archPathForDirectoriesInDomains)|wap(Big(ShortToHost|IntToHost|DoubleToHost|FloatToHost|Long(ToHost|LongToHost))|Short|Host(ShortTo(Big|Little)|IntTo(Big|Little)|DoubleTo(Big|Little)|FloatTo(Big|Little)|Long(To(Big|Little)|LongTo(Big|Little)))|Int|Double|Float|L(ittle(ShortToHost|IntToHost|DoubleToHost|FloatToHost|Long(ToHost|LongToHost))|ong(Long)?)))|H(ighlightRect|o(stByteOrder|meDirectory(ForUser)?)|eight|ash(Remove|Get|Insert(IfAbsent|KnownAbsent)?)|FSType(CodeFromFileType|OfFile))|N(umberOfColorComponents|ext(MapEnumeratorPair|HashEnumeratorItem))|C(o(n(tainsRect|vert(GlyphsToPackedGlyphs|Swapped(DoubleToHost|FloatToHost)|Host(DoubleToSwapped|FloatToSwapped)))|unt(MapTable|HashTable|Frames|Windows(ForContext)?)|py(M(emoryPages|apTableWithZone)|Bits|HashTableWithZone|Object)|lorSpaceFromDepth|mpare(MapTables|HashTables))|lassFromString|reate(MapTable(WithZone)?|HashTable(WithZone)?|Zone|File(namePboardType|ContentsPboardType)))|TemporaryDirectory|I(s(ControllerMarker|EmptyRect|FreedObject)|n(setRect|crementExtraRefCount|te(r(sect(sRect|ionR(ect|ange))|faceStyleForKey)|gralRect)))|Zone(Realloc|Malloc|Name|Calloc|Fr(omPointer|ee))|O(penStepRootDirectory|ffsetRect)|D(i(sableScreenUpdates|videRect)|ottedFrameRect|e(c(imal(Round|Multiply|S(tring|ubtract)|Normalize|Co(py|mpa(ct|re))|IsNotANumber|Divide|Power|Add)|rementExtraRefCountWasZero)|faultMallocZone|allocate(MemoryPages|Object))|raw(Gr(oove|ayBezel)|B(itmap|utton)|ColorTiledRects|TiledRects|DarkBezel|W(hiteBezel|indowBackground)|LightBezel))|U(serName|n(ionR(ect|ange)|registerServicesProvider)|pdateDynamicServices)|Java(Bundle(Setup|Cleanup)|Setup(VirtualMachine)?|Needs(ToLoadClasses|VirtualMachine)|ClassesF(orBundle|romPath)|ObjectNamedInPath|ProvidesClasses)|P(oint(InRect|FromString)|erformService|lanarFromDepth|ageSize)|E(n(d(MapTableEnumeration|HashTableEnumeration)|umerate(MapTable|HashTable)|ableScreenUpdates)|qual(R(ects|anges)|Sizes|Points)|raseRect|xtraRefCount)|F(ileTypeForHFSTypeCode|ullUserName|r(ee(MapTable|HashTable)|ame(Rect(WithWidth(UsingOperation)?)?|Address)))|Wi(ndowList(ForContext)?|dth)|Lo(cationInRange|g(v|PageSize)?)|A(ccessibility(R(oleDescription(ForUIElement)?|aiseBadArgumentException)|Unignored(Children(ForOnlyChild)?|Descendant|Ancestor)|PostNotification|ActionDescription)|pplication(Main|Load)|vailableWindowDepths|ll(MapTable(Values|Keys)|HashTableObjects|ocate(MemoryPages|Collectable|Object)))))\b
      captures:
        1: punctuation.whitespace.support.function.leading.cocoa.objc
        2: support.function.cocoa.objc
    - match: \bNS(NotFound|Ordered(Ascending|Descending|Same))\b
      scope: support.constant.cocoa.objc
    - match: \bNS(MenuDidBeginTracking|ViewDidUpdateTrackingAreas)?Notification\b
      scope: support.constant.notification.cocoa.leopard.objc
    - match: \bNS(Menu(Did(RemoveItem|SendAction|ChangeItem|EndTracking|AddItem)|WillSendAction)|S(ystemColorsDidChange|plitView(DidResizeSubviews|WillResizeSubviews))|C(o(nt(extHelpModeDid(Deactivate|Activate)|rolT(intDidChange|extDid(BeginEditing|Change|EndEditing)))|lor(PanelColorDidChange|ListDidChange)|mboBox(Selection(IsChanging|DidChange)|Will(Dismiss|PopUp)))|lassDescriptionNeededForClass)|T(oolbar(DidRemoveItem|WillAddItem)|ext(Storage(DidProcessEditing|WillProcessEditing)|Did(BeginEditing|Change|EndEditing)|View(DidChange(Selection|TypingAttributes)|WillChangeNotifyingTextView))|ableView(Selection(IsChanging|DidChange)|ColumnDid(Resize|Move)))|ImageRepRegistryDidChange|OutlineView(Selection(IsChanging|DidChange)|ColumnDid(Resize|Move)|Item(Did(Collapse|Expand)|Will(Collapse|Expand)))|Drawer(Did(Close|Open)|Will(Close|Open))|PopUpButton(CellWillPopUp|WillPopUp)|View(GlobalFrameDidChange|BoundsDidChange|F(ocusDidChange|rameDidChange))|FontSetChanged|W(indow(Did(Resi(ze|gn(Main|Key))|M(iniaturize|ove)|Become(Main|Key)|ChangeScreen(|Profile)|Deminiaturize|Update|E(ndSheet|xpose))|Will(M(iniaturize|ove)|BeginSheet|Close))|orkspace(SessionDid(ResignActive|BecomeActive)|Did(Mount|TerminateApplication|Unmount|PerformFileOperation|Wake|LaunchApplication)|Will(Sleep|Unmount|PowerOff|LaunchApplication)))|A(ntialiasThresholdChanged|ppl(ication(Did(ResignActive|BecomeActive|Hide|ChangeScreenParameters|U(nhide|pdate)|FinishLaunching)|Will(ResignActive|BecomeActive|Hide|Terminate|U(nhide|pdate)|FinishLaunching))|eEventManagerWillProcessFirstEvent)))Notification\b
      scope: support.constant.notification.cocoa.objc
    - match: \bNS(RuleEditor(RowType(Simple|Compound)|NestingMode(Si(ngle|mple)|Compound|List))|GradientDraws(BeforeStartingLocation|AfterEndingLocation)|M(inusSetExpressionType|a(chPortDeallocate(ReceiveRight|SendRight|None)|pTable(StrongMemory|CopyIn|ZeroingWeakMemory|ObjectPointerPersonality)))|B(oxCustom|undleExecutableArchitecture(X86|I386|PPC(64)?)|etweenPredicateOperatorType|ackgroundStyle(Raised|Dark|L(ight|owered)))|S(tring(DrawingTruncatesLastVisibleLine|EncodingConversion(ExternalRepresentation|AllowLossy))|ubqueryExpressionType|p(e(ech(SentenceBoundary|ImmediateBoundary|WordBoundary)|llingState(GrammarFlag|SpellingFlag))|litViewDividerStyleThi(n|ck))|e(rvice(RequestTimedOutError|M(iscellaneousError|alformedServiceDictionaryError)|InvalidPasteboardDataError|ErrorM(inimum|aximum)|Application(NotFoundError|LaunchFailedError))|gmentStyle(Round(Rect|ed)|SmallSquare|Capsule|Textured(Rounded|Square)|Automatic)))|H(UDWindowMask|ashTable(StrongMemory|CopyIn|ZeroingWeakMemory|ObjectPointerPersonality))|N(oModeColorPanel|etServiceNoAutoRename)|C(hangeRedone|o(ntainsPredicateOperatorType|l(orRenderingIntent(RelativeColorimetric|Saturation|Default|Perceptual|AbsoluteColorimetric)|lectorDisabledOption))|ellHit(None|ContentArea|TrackableArea|EditableTextArea))|T(imeZoneNameStyle(S(hort(Standard|DaylightSaving)|tandard)|DaylightSaving)|extFieldDatePickerStyle|ableViewSelectionHighlightStyle(Regular|SourceList)|racking(Mouse(Moved|EnteredAndExited)|CursorUpdate|InVisibleRect|EnabledDuringMouseDrag|A(ssumeInside|ctive(In(KeyWindow|ActiveApp)|WhenFirstResponder|Always))))|I(n(tersectSetExpressionType|dexedColorSpaceModel)|mageScale(None|Proportionally(Down|UpOrDown)|AxesIndependently))|Ope(nGLPFAAllowOfflineRenderers|rationQueue(DefaultMaxConcurrentOperationCount|Priority(High|Normal|Very(High|Low)|Low)))|D(iacriticInsensitiveSearch|ownloadsDirectory)|U(nionSetExpressionType|TF(16(BigEndianStringEncoding|StringEncoding|LittleEndianStringEncoding)|32(BigEndianStringEncoding|StringEncoding|LittleEndianStringEncoding)))|P(ointerFunctions(Ma(chVirtualMemory|llocMemory)|Str(ongMemory|uctPersonality)|C(StringPersonality|opyIn)|IntegerPersonality|ZeroingWeakMemory|O(paque(Memory|Personality)|bjectP(ointerPersonality|ersonality)))|at(hStyle(Standard|NavigationBar|PopUp)|ternColorSpaceModel)|rintPanelShows(Scaling|Copies|Orientation|P(a(perSize|ge(Range|SetupAccessory))|review)))|Executable(RuntimeMismatchError|NotLoadableError|ErrorM(inimum|aximum)|L(inkError|oadError)|ArchitectureMismatchError)|KeyValueObservingOption(Initial|Prior)|F(i(ndPanelSubstringMatchType(StartsWith|Contains|EndsWith|FullWord)|leRead(TooLargeError|UnknownStringEncodingError))|orcedOrderingSearch)|Wi(ndow(BackingLocation(MainMemory|Default|VideoMemory)|Sharing(Read(Only|Write)|None)|CollectionBehavior(MoveToActiveSpace|CanJoinAllSpaces|Default))|dthInsensitiveSearch)|AggregateExpressionType)\b
      scope: support.constant.cocoa.leopard.objc
    - match: \bNS(R(GB(ModeColorPanel|ColorSpaceModel)|ight(Mouse(D(own(Mask)?|ragged(Mask)?)|Up(Mask)?)|T(ext(Movement|Alignment)|ab(sBezelBorder|StopType))|ArrowFunctionKey)|ound(RectBezelStyle|Bankers|ed(BezelStyle|TokenStyle|DisclosureBezelStyle)|Down|Up|Plain|Line(CapStyle|JoinStyle))|un(StoppedResponse|ContinuesResponse|AbortedResponse)|e(s(izableWindowMask|et(CursorRectsRunLoopOrdering|FunctionKey))|ce(ssedBezelStyle|iver(sCantHandleCommandScriptError|EvaluationScriptError))|turnTextMovement|doFunctionKey|quiredArgumentsMissingScriptError|l(evancyLevelIndicatorStyle|ative(Before|After))|gular(SquareBezelStyle|ControlSize)|moveTraitFontAction)|a(n(domSubelement|geDateMode)|tingLevelIndicatorStyle|dio(ModeMatrix|Button)))|G(IFFileType|lyph(Below|Inscribe(B(elow|ase)|Over(strike|Below)|Above)|Layout(WithPrevious|A(tAPoint|gainstAPoint))|A(ttribute(BidiLevel|Soft|Inscribe|Elastic)|bove))|r(ooveBorder|eaterThan(Comparison|OrEqualTo(Comparison|PredicateOperatorType)|PredicateOperatorType)|a(y(ModeColorPanel|ColorSpaceModel)|dient(None|Con(cave(Strong|Weak)|vex(Strong|Weak)))|phiteControlTint)))|XML(N(o(tationDeclarationKind|de(CompactEmptyElement|IsCDATA|OptionsNone|Use(SingleQuotes|DoubleQuotes)|Pre(serve(NamespaceOrder|C(haracterReferences|DATA)|DTD|Prefixes|E(ntities|mptyElements)|Quotes|Whitespace|A(ttributeOrder|ll))|ttyPrint)|ExpandEmptyElement))|amespaceKind)|CommentKind|TextKind|InvalidKind|D(ocument(X(MLKind|HTMLKind|Include)|HTMLKind|T(idy(XML|HTML)|extKind)|IncludeContentTypeDeclaration|Validate|Kind)|TDKind)|P(arser(GTRequiredError|XMLDeclNot(StartedError|FinishedError)|Mi(splaced(XMLDeclarationError|CDATAEndStringError)|xedContentDeclNot(StartedError|FinishedError))|S(t(andaloneValueError|ringNot(StartedError|ClosedError))|paceRequiredError|eparatorRequiredError)|N(MTOKENRequiredError|o(t(ationNot(StartedError|FinishedError)|WellBalancedError)|DTDError)|amespaceDeclarationError|AMERequiredError)|C(haracterRef(In(DTDError|PrologError|EpilogError)|AtEOFError)|o(nditionalSectionNot(StartedError|FinishedError)|mment(NotFinishedError|ContainsDoubleHyphenError))|DATANotFinishedError)|TagNameMismatchError|In(ternalError|valid(HexCharacterRefError|C(haracter(RefError|InEntityError|Error)|onditionalSectionError)|DecimalCharacterRefError|URIError|Encoding(NameError|Error)))|OutOfMemoryError|D(ocumentStartError|elegateAbortedParseError|OCTYPEDeclNotFinishedError)|U(RI(RequiredError|FragmentError)|n(declaredEntityError|parsedEntityError|knownEncodingError|finishedTagError))|P(CDATARequiredError|ublicIdentifierRequiredError|arsedEntityRef(MissingSemiError|NoNameError|In(Internal(SubsetError|Error)|PrologError|EpilogError)|AtEOFError)|r(ocessingInstructionNot(StartedError|FinishedError)|ematureDocumentEndError))|E(n(codingNotSupportedError|tity(Ref(In(DTDError|PrologError|EpilogError)|erence(MissingSemiError|WithoutNameError)|LoopError|AtEOFError)|BoundaryError|Not(StartedError|FinishedError)|Is(ParameterError|ExternalError)|ValueRequiredError))|qualExpectedError|lementContentDeclNot(StartedError|FinishedError)|xt(ernalS(tandaloneEntityError|ubsetNotFinishedError)|raContentError)|mptyDocumentError)|L(iteralNot(StartedError|FinishedError)|T(RequiredError|SlashRequiredError)|essThanSymbolInAttributeError)|Attribute(RedefinedError|HasNoValueError|Not(StartedError|FinishedError)|ListNot(StartedError|FinishedError)))|rocessingInstructionKind)|E(ntity(GeneralKind|DeclarationKind|UnparsedKind|P(ar(sedKind|ameterKind)|redefined))|lement(Declaration(MixedKind|UndefinedKind|E(lementKind|mptyKind)|Kind|AnyKind)|Kind))|Attribute(N(MToken(sKind|Kind)|otationKind)|CDATAKind|ID(Ref(sKind|Kind)|Kind)|DeclarationKind|En(tit(yKind|iesKind)|umerationKind)|Kind))|M(i(n(XEdge|iaturizableWindowMask|YEdge|uteCalendarUnit)|terLineJoinStyle|ddleSubelement|xedState)|o(nthCalendarUnit|deSwitchFunctionKey|use(Moved(Mask)?|E(ntered(Mask)?|ventSubtype|xited(Mask)?))|veToBezierPathElement|mentary(ChangeButton|Push(Button|InButton)|Light(Button)?))|enuFunctionKey|a(c(intoshInterfaceStyle|OSRomanStringEncoding)|tchesPredicateOperatorType|ppedRead|x(XEdge|YEdge))|ACHOperatingSystem)|B(MPFileType|o(ttomTabsBezelBorder|ldFontMask|rderlessWindowMask|x(Se(condary|parator)|OldStyle|Primary))|uttLineCapStyle|e(zelBorder|velLineJoinStyle|low(Bottom|Top)|gin(sWith(Comparison|PredicateOperatorType)|FunctionKey))|lueControlTint|ack(spaceCharacter|tabTextMovement|ingStore(Retained|Buffered|Nonretained)|TabCharacter|wardsSearch|groundTab)|r(owser(NoColumnResizing|UserColumnResizing|AutoColumnResizing)|eakFunctionKey))|S(h(ift(JISStringEncoding|KeyMask)|ow(ControlGlyphs|InvisibleGlyphs)|adowlessSquareBezelStyle)|y(s(ReqFunctionKey|tem(D(omainMask|efined(Mask)?)|FunctionKey))|mbolStringEncoding)|c(a(nnedOption|le(None|ToFit|Proportionally))|r(oll(er(NoPart|Increment(Page|Line|Arrow)|Decrement(Page|Line|Arrow)|Knob(Slot)?|Arrows(M(inEnd|axEnd)|None|DefaultSetting))|Wheel(Mask)?|LockFunctionKey)|eenChangedEventType))|t(opFunctionKey|r(ingDrawing(OneShot|DisableScreenFontSubstitution|Uses(DeviceMetrics|FontLeading|LineFragmentOrigin))|eam(Status(Reading|NotOpen|Closed|Open(ing)?|Error|Writing|AtEnd)|Event(Has(BytesAvailable|SpaceAvailable)|None|OpenCompleted|E(ndEncountered|rrorOccurred)))))|i(ngle(DateMode|UnderlineStyle)|ze(DownFontAction|UpFontAction))|olarisOperatingSystem|unOSOperatingSystem|pecialPageOrder|e(condCalendarUnit|lect(By(Character|Paragraph|Word)|i(ng(Next|Previous)|onAffinity(Downstream|Upstream))|edTab|FunctionKey)|gmentSwitchTracking(Momentary|Select(One|Any)))|quareLineCapStyle|witchButton|ave(ToOperation|Op(tions(Yes|No|Ask)|eration)|AsOperation)|mall(SquareBezelStyle|C(ontrolSize|apsFontMask)|IconButtonBezelStyle))|H(ighlightModeMatrix|SBModeColorPanel|o(ur(Minute(SecondDatePickerElementFlag|DatePickerElementFlag)|CalendarUnit)|rizontalRuler|meFunctionKey)|TTPCookieAcceptPolicy(Never|OnlyFromMainDocumentDomain|Always)|e(lp(ButtonBezelStyle|KeyMask|FunctionKey)|avierFontAction)|PUXOperatingSystem)|Year(MonthDa(yDatePickerElementFlag|tePickerElementFlag)|CalendarUnit)|N(o(n(StandardCharacterSetFontMask|ZeroWindingRule|activatingPanelMask|LossyASCIIStringEncoding)|Border|t(ification(SuspensionBehavior(Hold|Coalesce|D(eliverImmediately|rop))|NoCoalescing|CoalescingOn(Sender|Name)|DeliverImmediately|PostToAllSessions)|PredicateType|EqualToPredicateOperatorType)|S(cr(iptError|ollerParts)|ubelement|pecifierError)|CellMask|T(itle|opLevelContainersSpecifierError|abs(BezelBorder|NoBorder|LineBorder))|I(nterfaceStyle|mage)|UnderlineStyle|FontChangeAction)|u(ll(Glyph|CellType)|m(eric(Search|PadKeyMask)|berFormatter(Round(Half(Down|Up|Even)|Ceiling|Down|Up|Floor)|Behavior(10|Default)|S(cientificStyle|pellOutStyle)|NoStyle|CurrencyStyle|DecimalStyle|P(ercentStyle|ad(Before(Suffix|Prefix)|After(Suffix|Prefix))))))|e(t(Services(BadArgumentError|NotFoundError|C(ollisionError|ancelledError)|TimeoutError|InvalidError|UnknownError|ActivityInProgress)|workDomainMask)|wlineCharacter|xt(StepInterfaceStyle|FunctionKey))|EXTSTEPStringEncoding|a(t(iveShortGlyphPacking|uralTextAlignment)|rrowFontMask))|C(hange(ReadOtherContents|GrayCell(Mask)?|BackgroundCell(Mask)?|Cleared|Done|Undone|Autosaved)|MYK(ModeColorPanel|ColorSpaceModel)|ircular(BezelStyle|Slider)|o(n(stantValueExpressionType|t(inuousCapacityLevelIndicatorStyle|entsCellMask|ain(sComparison|erSpecifierError)|rol(Glyph|KeyMask))|densedFontMask)|lor(Panel(RGBModeMask|GrayModeMask|HSBModeMask|C(MYKModeMask|olorListModeMask|ustomPaletteModeMask|rayonModeMask)|WheelModeMask|AllModesMask)|ListModeColorPanel)|reServiceDirectory|m(p(osite(XOR|Source(In|O(ut|ver)|Atop)|Highlight|C(opy|lear)|Destination(In|O(ut|ver)|Atop)|Plus(Darker|Lighter))|ressedFontMask)|mandKeyMask))|u(stom(SelectorPredicateOperatorType|PaletteModeColorPanel)|r(sor(Update(Mask)?|PointingDevice)|veToBezierPathElement))|e(nterT(extAlignment|abStopType)|ll(State|H(ighlighted|as(Image(Horizontal|OnLeftOrBottom)|OverlappingImage))|ChangesContents|Is(Bordered|InsetButton)|Disabled|Editable|LightsBy(Gray|Background|Contents)|AllowsMixedState))|l(ipPagination|o(s(ePathBezierPathElement|ableWindowMask)|ckAndCalendarDatePickerStyle)|ear(ControlTint|DisplayFunctionKey|LineFunctionKey))|a(seInsensitive(Search|PredicateOption)|n(notCreateScriptCommandError|cel(Button|TextMovement))|chesDirectory|lculation(NoError|Overflow|DivideByZero|Underflow|LossOfPrecision)|rriageReturnCharacter)|r(itical(Request|AlertStyle)|ayonModeColorPanel))|T(hick(SquareBezelStyle|erSquareBezelStyle)|ypesetter(Behavior|HorizontalTabAction|ContainerBreakAction|ZeroAdvancementAction|OriginalBehavior|ParagraphBreakAction|WhitespaceAction|L(ineBreakAction|atestBehavior))|i(ckMark(Right|Below|Left|Above)|tledWindowMask|meZoneDatePickerElementFlag)|o(olbarItemVisibilityPriority(Standard|High|User|Low)|pTabsBezelBorder|ggleButton)|IFF(Compression(N(one|EXT)|CCITTFAX(3|4)|OldJPEG|JPEG|PackBits|LZW)|FileType)|e(rminate(Now|Cancel|Later)|xt(Read(InapplicableDocumentTypeError|WriteErrorM(inimum|aximum))|Block(M(i(nimum(Height|Width)|ddleAlignment)|a(rgin|ximum(Height|Width)))|B(o(ttomAlignment|rder)|aselineAlignment)|Height|TopAlignment|P(ercentageValueType|adding)|Width|AbsoluteValueType)|StorageEdited(Characters|Attributes)|CellType|ured(RoundedBezelStyle|BackgroundWindowMask|SquareBezelStyle)|Table(FixedLayoutAlgorithm|AutomaticLayoutAlgorithm)|Field(RoundedBezel|SquareBezel|AndStepperDatePickerStyle)|WriteInapplicableDocumentTypeError|ListPrependEnclosingMarker))|woByteGlyphPacking|ab(Character|TextMovement|le(tP(oint(Mask|EventSubtype)?|roximity(Mask|EventSubtype)?)|Column(NoResizing|UserResizingMask|AutoresizingMask)|View(ReverseSequentialColumnAutoresizingStyle|GridNone|S(olid(HorizontalGridLineMask|VerticalGridLineMask)|equentialColumnAutoresizingStyle)|NoColumnAutoresizing|UniformColumnAutoresizingStyle|FirstColumnOnlyAutoresizingStyle|LastColumnOnlyAutoresizingStyle)))|rackModeMatrix)|I(n(sert(CharFunctionKey|FunctionKey|LineFunctionKey)|t(Type|ernalS(criptError|pecifierError))|dexSubelement|validIndexSpecifierError|formational(Request|AlertStyle)|PredicateOperatorType)|talicFontMask|SO(2022JPStringEncoding|Latin(1StringEncoding|2StringEncoding))|dentityMappingCharacterCollection|llegalTextMovement|mage(R(ight|ep(MatchesDevice|LoadStatus(ReadingHeader|Completed|InvalidData|Un(expectedEOF|knownType)|WillNeedAllData)))|Below|C(ellType|ache(BySize|Never|Default|Always))|Interpolation(High|None|Default|Low)|O(nly|verlaps)|Frame(Gr(oove|ayBezel)|Button|None|Photo)|L(oadStatus(ReadError|C(ompleted|ancelled)|InvalidData|UnexpectedEOF)|eft)|A(lign(Right|Bottom(Right|Left)?|Center|Top(Right|Left)?|Left)|bove)))|O(n(State|eByteGlyphPacking|OffButton|lyScrollerArrows)|ther(Mouse(D(own(Mask)?|ragged(Mask)?)|Up(Mask)?)|TextMovement)|SF1OperatingSystem|pe(n(GL(GO(Re(setLibrary|tainRenderers)|ClearFormatCache|FormatCacheSize)|PFA(R(obust|endererID)|M(inimumPolicy|ulti(sample|Screen)|PSafe|aximumPolicy)|BackingStore|S(creenMask|te(ncilSize|reo)|ingleRenderer|upersample|ample(s|Buffers|Alpha))|NoRecovery|C(o(lor(Size|Float)|mpliant)|losestPolicy)|OffScreen|D(oubleBuffer|epthSize)|PixelBuffer|VirtualScreenCount|FullScreen|Window|A(cc(umSize|elerated)|ux(Buffers|DepthStencil)|l(phaSize|lRenderers))))|StepUnicodeReservedBase)|rationNotSupportedForKeyS(criptError|pecifierError))|ffState|KButton|rPredicateType|bjC(B(itfield|oolType)|S(hortType|tr(ingType|uctType)|electorType)|NoType|CharType|ObjectType|DoubleType|UnionType|PointerType|VoidType|FloatType|Long(Type|longType)|ArrayType))|D(i(s(c(losureBezelStyle|reteCapacityLevelIndicatorStyle)|playWindowRunLoopOrdering)|acriticInsensitivePredicateOption|rect(Selection|PredicateModifier))|o(c(ModalWindowMask|ument(Directory|ationDirectory))|ubleType|wn(TextMovement|ArrowFunctionKey))|e(s(cendingPageOrder|ktopDirectory)|cimalTabStopType|v(ice(NColorSpaceModel|IndependentModifierFlagsMask)|eloper(Directory|ApplicationDirectory))|fault(ControlTint|TokenStyle)|lete(Char(acter|FunctionKey)|FunctionKey|LineFunctionKey)|moApplicationDirectory)|a(yCalendarUnit|teFormatter(MediumStyle|Behavior(10|Default)|ShortStyle|NoStyle|FullStyle|LongStyle))|ra(wer(Clos(ingState|edState)|Open(ingState|State))|gOperation(Generic|Move|None|Copy|Delete|Private|Every|Link|All)))|U(ser(CancelledError|D(irectory|omainMask)|FunctionKey)|RL(Handle(NotLoaded|Load(Succeeded|InProgress|Failed))|CredentialPersistence(None|Permanent|ForSession))|n(scaledWindowMask|cachedRead|i(codeStringEncoding|talicFontMask|fiedTitleAndToolbarWindowMask)|d(o(CloseGroupingRunLoopOrdering|FunctionKey)|e(finedDateComponent|rline(Style(Single|None|Thick|Double)|Pattern(Solid|D(ot|ash(Dot(Dot)?)?)))))|known(ColorSpaceModel|P(ointingDevice|ageOrder)|KeyS(criptError|pecifierError))|boldFontMask)|tilityWindowMask|TF8StringEncoding|p(dateWindowsRunLoopOrdering|TextMovement|ArrowFunctionKey))|J(ustifiedTextAlignment|PEG(2000FileType|FileType)|apaneseEUC(GlyphPacking|StringEncoding))|P(o(s(t(Now|erFontMask|WhenIdle|ASAP)|iti(on(Replace|Be(fore|ginning)|End|After)|ve(IntType|DoubleType|FloatType)))|pUp(NoArrow|ArrowAt(Bottom|Center))|werOffEventType|rtraitOrientation)|NGFileType|ush(InCell(Mask)?|OnPushOffButton)|e(n(TipMask|UpperSideMask|PointingDevice|LowerSideMask)|riodic(Mask)?)|P(S(caleField|tatus(Title|Field)|aveButton)|N(ote(Title|Field)|ame(Title|Field))|CopiesField|TitleField|ImageButton|OptionsButton|P(a(perFeedButton|ge(Range(To|From)|ChoiceMatrix))|reviewButton)|LayoutButton)|lainTextTokenStyle|a(useFunctionKey|ragraphSeparatorCharacter|ge(DownFunctionKey|UpFunctionKey))|r(int(ing(ReplyLater|Success|Cancelled|Failure)|ScreenFunctionKey|erTable(NotFound|OK|Error)|FunctionKey)|o(p(ertyList(XMLFormat|MutableContainers(AndLeaves)?|BinaryFormat|Immutable|OpenStepFormat)|rietaryStringEncoding)|gressIndicator(BarStyle|SpinningStyle|Preferred(SmallThickness|Thickness|LargeThickness|AquaThickness)))|e(ssedTab|vFunctionKey))|L(HeightForm|CancelButton|TitleField|ImageButton|O(KButton|rientationMatrix)|UnitsButton|PaperNameButton|WidthForm))|E(n(terCharacter|d(sWith(Comparison|PredicateOperatorType)|FunctionKey))|v(e(nOddWindingRule|rySubelement)|aluatedObjectExpressionType)|qualTo(Comparison|PredicateOperatorType)|ra(serPointingDevice|CalendarUnit|DatePickerElementFlag)|x(clude(10|QuickDrawElementsIconCreationOption)|pandedFontMask|ecuteFunctionKey))|V(i(ew(M(in(XMargin|YMargin)|ax(XMargin|YMargin))|HeightSizable|NotSizable|WidthSizable)|aPanelFontAction)|erticalRuler|a(lidationErrorM(inimum|aximum)|riableExpressionType))|Key(SpecifierEvaluationScriptError|Down(Mask)?|Up(Mask)?|PathExpressionType|Value(MinusSetMutation|SetSetMutation|Change(Re(placement|moval)|Setting|Insertion)|IntersectSetMutation|ObservingOption(New|Old)|UnionSetMutation|ValidationError))|QTMovie(NormalPlayback|Looping(BackAndForthPlayback|Playback))|F(1(1FunctionKey|7FunctionKey|2FunctionKey|8FunctionKey|3FunctionKey|9FunctionKey|4FunctionKey|5FunctionKey|FunctionKey|0FunctionKey|6FunctionKey)|7FunctionKey|i(nd(PanelAction(Replace(A(ndFind|ll(InSelection)?))?|S(howFindPanel|e(tFindString|lectAll(InSelection)?))|Next|Previous)|FunctionKey)|tPagination|le(Read(No(SuchFileError|PermissionError)|CorruptFileError|In(validFileNameError|applicableStringEncodingError)|Un(supportedSchemeError|knownError))|HandlingPanel(CancelButton|OKButton)|NoSuchFileError|ErrorM(inimum|aximum)|Write(NoPermissionError|In(validFileNameError|applicableStringEncodingError)|OutOfSpaceError|Un(supportedSchemeError|knownError))|LockingError)|xedPitchFontMask)|2(1FunctionKey|7FunctionKey|2FunctionKey|8FunctionKey|3FunctionKey|9FunctionKey|4FunctionKey|5FunctionKey|FunctionKey|0FunctionKey|6FunctionKey)|o(nt(Mo(noSpaceTrait|dernSerifsClass)|BoldTrait|S(ymbolicClass|criptsClass|labSerifsClass|ansSerifClass)|C(o(ndensedTrait|llectionApplicationOnlyMask)|larendonSerifsClass)|TransitionalSerifsClass|I(ntegerAdvancementsRenderingMode|talicTrait)|O(ldStyleSerifsClass|rnamentalsClass)|DefaultRenderingMode|U(nknownClass|IOptimizedTrait)|Panel(S(hadowEffectModeMask|t(andardModesMask|rikethroughEffectModeMask)|izeModeMask)|CollectionModeMask|TextColorEffectModeMask|DocumentColorEffectModeMask|UnderlineEffectModeMask|FaceModeMask|All(ModesMask|EffectsModeMask))|ExpandedTrait|VerticalTrait|F(amilyClassMask|reeformSerifsClass)|Antialiased(RenderingMode|IntegerAdvancementsRenderingMode))|cusRing(Below|Type(None|Default|Exterior)|Only|Above)|urByteGlyphPacking|rm(attingError(M(inimum|aximum))?|FeedCharacter))|8FunctionKey|unction(ExpressionType|KeyMask)|3(1FunctionKey|2FunctionKey|3FunctionKey|4FunctionKey|5FunctionKey|FunctionKey|0FunctionKey)|9FunctionKey|4FunctionKey|P(RevertButton|S(ize(Title|Field)|etButton)|CurrentField|Preview(Button|Field))|l(oat(ingPointSamplesBitmapFormat|Type)|agsChanged(Mask)?)|axButton|5FunctionKey|6FunctionKey)|W(heelModeColorPanel|indow(s(NTOperatingSystem|CP125(1StringEncoding|2StringEncoding|3StringEncoding|4StringEncoding|0StringEncoding)|95(InterfaceStyle|OperatingSystem))|M(iniaturizeButton|ovedEventType)|Below|CloseButton|ToolbarButton|ZoomButton|Out|DocumentIconButton|ExposedEventType|Above)|orkspaceLaunch(NewInstance|InhibitingBackgroundOnly|Default|PreferringClassic|WithoutA(ctivation|ddingToRecents)|A(sync|nd(Hide(Others)?|Print)|llowingClassicStartup))|eek(day(CalendarUnit|OrdinalCalendarUnit)|CalendarUnit)|a(ntsBidiLevels|rningAlertStyle)|r(itingDirection(RightToLeft|Natural|LeftToRight)|apCalendarComponents))|L(i(stModeMatrix|ne(Moves(Right|Down|Up|Left)|B(order|reakBy(C(harWrapping|lipping)|Truncating(Middle|Head|Tail)|WordWrapping))|S(eparatorCharacter|weep(Right|Down|Up|Left))|ToBezierPathElement|DoesntMove|arSlider)|teralSearch|kePredicateOperatorType|ghterFontAction|braryDirectory)|ocalDomainMask|e(ssThan(Comparison|OrEqualTo(Comparison|PredicateOperatorType)|PredicateOperatorType)|ft(Mouse(D(own(Mask)?|ragged(Mask)?)|Up(Mask)?)|T(ext(Movement|Alignment)|ab(sBezelBorder|StopType))|ArrowFunctionKey))|a(yout(RightToLeft|NotDone|CantFit|OutOfGlyphs|Done|LeftToRight)|ndscapeOrientation)|ABColorSpaceModel)|A(sc(iiWithDoubleByteEUCGlyphPacking|endingPageOrder)|n(y(Type|PredicateModifier|EventMask)|choredSearch|imation(Blocking|Nonblocking(Threaded)?|E(ffect(DisappearingItemDefault|Poof)|ase(In(Out)?|Out))|Linear)|dPredicateType)|t(Bottom|tachmentCharacter|omicWrite|Top)|SCIIStringEncoding|d(obe(GB1CharacterCollection|CNS1CharacterCollection|Japan(1CharacterCollection|2CharacterCollection)|Korea1CharacterCollection)|dTraitFontAction|minApplicationDirectory)|uto(saveOperation|Pagination)|pp(lication(SupportDirectory|D(irectory|e(fined(Mask)?|legateReply(Success|Cancel|Failure)|activatedEventType))|ActivatedEventType)|KitDefined(Mask)?)|l(ternateKeyMask|pha(ShiftKeyMask|NonpremultipliedBitmapFormat|FirstBitmapFormat)|ert(SecondButtonReturn|ThirdButtonReturn|OtherReturn|DefaultReturn|ErrorReturn|FirstButtonReturn|AlternateReturn)|l(ScrollerParts|DomainsMask|PredicateModifier|LibrariesDirectory|ApplicationsDirectory))|rgument(sWrongScriptError|EvaluationScriptError)|bove(Bottom|Top)|WTEventType))\b
      scope: support.constant.cocoa.objc
    - match: \bNS(RuleEditor|G(arbageCollector|radient)|MapTable|HashTable|Co(ndition|llectionView(Item)?)|T(oolbarItemGroup|extInputClient|r(eeNode|ackingArea))|InvocationOperation|Operation(Queue)?|D(ictionaryController|ockTile)|P(ointer(Functions|Array)|athC(o(ntrol(Delegate)?|mponentCell)|ell(Delegate)?)|r(intPanelAccessorizing|edicateEditor(RowTemplate)?))|ViewController|FastEnumeration|Animat(ionContext|ablePropertyContainer))\b
      scope: support.class.cocoa.leopard.objc
    - match: \bNS(R(u(nLoop|ler(Marker|View))|e(sponder|cursiveLock|lativeSpecifier)|an(domSpecifier|geSpecifier))|G(etCommand|lyph(Generator|Storage|Info)|raphicsContext)|XML(Node|D(ocument|TD(Node)?)|Parser|Element)|M(iddleSpecifier|ov(ie(View)?|eCommand)|utable(S(tring|et)|C(haracterSet|opying)|IndexSet|D(ictionary|ata)|URLRequest|ParagraphStyle|A(ttributedString|rray))|e(ssagePort(NameServer)?|nu(Item(Cell)?|View)?|t(hodSignature|adata(Item|Query(ResultGroup|AttributeValueTuple)?)))|a(ch(BootstrapServer|Port)|trix))|B(itmapImageRep|ox|u(ndle|tton(Cell)?)|ezierPath|rowser(Cell)?)|S(hadow|c(anner|r(ipt(SuiteRegistry|C(o(ercionHandler|mmand(Description)?)|lassDescription)|ObjectSpecifier|ExecutionContext|WhoseTest)|oll(er|View)|een))|t(epper(Cell)?|atus(Bar|Item)|r(ing|eam))|imple(HorizontalTypesetter|CString)|o(cketPort(NameServer)?|und|rtDescriptor)|p(e(cifierTest|ech(Recognizer|Synthesizer)|ll(Server|Checker))|litView)|e(cureTextField(Cell)?|t(Command)?|archField(Cell)?|rializer|gmentedC(ontrol|ell))|lider(Cell)?|avePanel)|H(ost|TTP(Cookie(Storage)?|URLResponse)|elpManager)|N(ib(Con(nector|trolConnector)|OutletConnector)?|otification(Center|Queue)?|u(ll|mber(Formatter)?)|etService(Browser)?|ameSpecifier)|C(ha(ngeSpelling|racterSet)|o(n(stantString|nection|trol(ler)?|ditionLock)|d(ing|er)|unt(Command|edSet)|pying|lor(Space|P(ick(ing(Custom|Default)|er)|anel)|Well|List)?|m(p(oundPredicate|arisonPredicate)|boBox(Cell)?))|u(stomImageRep|rsor)|IImageRep|ell|l(ipView|o(seCommand|neCommand)|assDescription)|a(ched(ImageRep|URLResponse)|lendar(Date)?)|reateCommand)|T(hread|ypesetter|ime(Zone|r)|o(olbar(Item(Validations)?)?|kenField(Cell)?)|ext(Block|Storage|Container|Tab(le(Block)?)?|Input|View|Field(Cell)?|List|Attachment(Cell)?)?|a(sk|b(le(Header(Cell|View)|Column|View)|View(Item)?))|reeController)|I(n(dex(S(pecifier|et)|Path)|put(Manager|S(tream|erv(iceProvider|er(MouseTracker)?)))|vocation)|gnoreMisspelledWords|mage(Rep|Cell|View)?)|O(ut(putStream|lineView)|pen(GL(Context|Pixel(Buffer|Format)|View)|Panel)|bj(CTypeSerializationCallBack|ect(Controller)?))|D(i(st(antObject(Request)?|ributed(NotificationCenter|Lock))|ctionary|rectoryEnumerator)|ocument(Controller)?|e(serializer|cimalNumber(Behaviors|Handler)?|leteCommand)|at(e(Components|Picker(Cell)?|Formatter)?|a)|ra(wer|ggingInfo))|U(ser(InterfaceValidations|Defaults(Controller)?)|RL(Re(sponse|quest)|Handle(Client)?|C(onnection|ache|redential(Storage)?)|Download(Delegate)?|Prot(ocol(Client)?|ectionSpace)|AuthenticationChallenge(Sender)?)?|n(iqueIDSpecifier|doManager|archiver))|P(ipe|o(sitionalSpecifier|pUpButton(Cell)?|rt(Message|NameServer|Coder)?)|ICTImageRep|ersistentDocument|DFImageRep|a(steboard|nel|ragraphStyle|geLayout)|r(int(Info|er|Operation|Panel)|o(cessInfo|tocolChecker|perty(Specifier|ListSerialization)|gressIndicator|xy)|edicate))|E(numerator|vent|PSImageRep|rror|x(ception|istsCommand|pression))|V(iew(Animation)?|al(idated(ToobarItem|UserInterfaceItem)|ue(Transformer)?))|Keyed(Unarchiver|Archiver)|Qui(ckDrawView|tCommand)|F(ile(Manager|Handle|Wrapper)|o(nt(Manager|Descriptor|Panel)?|rm(Cell|atter)))|W(hoseSpecifier|indow(Controller)?|orkspace)|L(o(c(k(ing)?|ale)|gicalTest)|evelIndicator(Cell)?|ayoutManager)|A(ssertionHandler|nimation|ctionCell|ttributedString|utoreleasePool|TSTypesetter|ppl(ication|e(Script|Event(Manager|Descriptor)))|ffineTransform|lert|r(chiver|ray(Controller)?)))\b
      scope: support.class.cocoa.objc
    - match: \bNS(R(oundingMode|ule(Editor(RowType|NestingMode)|rOrientation)|e(questUserAttentionType|lativePosition))|G(lyphInscription|radientDrawingOptions)|XML(NodeKind|D(ocumentContentKind|TDNodeKind)|ParserError)|M(ultibyteGlyphPacking|apTableOptions)|B(itmapFormat|oxType|ezierPathElement|ackgroundStyle|rowserDropOperation)|S(tr(ing(CompareOptions|DrawingOptions|EncodingConversionOptions)|eam(Status|Event))|p(eechBoundary|litViewDividerStyle)|e(archPathD(irectory|omainMask)|gmentS(tyle|witchTracking))|liderType|aveOptions)|H(TTPCookieAcceptPolicy|ashTableOptions)|N(otification(SuspensionBehavior|Coalescing)|umberFormatter(RoundingMode|Behavior|Style|PadPosition)|etService(sError|Options))|C(haracterCollection|o(lor(RenderingIntent|SpaceModel|PanelMode)|mp(oundPredicateType|arisonPredicateModifier))|ellStateValue|al(culationError|endarUnit))|T(ypesetterControlCharacterAction|imeZoneNameStyle|e(stComparisonOperation|xt(Block(Dimension|V(erticalAlignment|alueType)|Layer)|TableLayoutAlgorithm|FieldBezelStyle))|ableView(SelectionHighlightStyle|ColumnAutoresizingStyle)|rackingAreaOptions)|I(n(sertionPosition|te(rfaceStyle|ger))|mage(RepLoadStatus|Scaling|CacheMode|FrameStyle|LoadStatus|Alignment))|Ope(nGLPixelFormatAttribute|rationQueuePriority)|Date(Picker(Mode|Style)|Formatter(Behavior|Style))|U(RL(RequestCachePolicy|HandleStatus|C(acheStoragePolicy|redentialPersistence))|Integer)|P(o(stingStyle|int(ingDeviceType|erFunctionsOptions)|pUpArrowPosition)|athStyle|r(int(ing(Orientation|PaginationMode)|erTableStatus|PanelOptions)|opertyList(MutabilityOptions|Format)|edicateOperatorType))|ExpressionType|KeyValue(SetMutationKind|Change)|QTMovieLoopMode|F(indPanel(SubstringMatchType|Action)|o(nt(RenderingMode|FamilyClass)|cusRingPlacement))|W(hoseSubelementIdentifier|ind(ingRule|ow(B(utton|ackingLocation)|SharingType|CollectionBehavior)))|L(ine(MovementDirection|SweepDirection|CapStyle|JoinStyle)|evelIndicatorStyle)|Animation(BlockingMode|Curve))\b
      scope: support.type.cocoa.leopard.objc
    - match: \bNS(R(ect(Edge)?|ange)|G(lyph(Relation|LayoutMode)?|radientType)|M(odalSession|a(trixMode|p(Table|Enumerator)))|B(itmapImageFileType|orderType|uttonType|ezelStyle|ackingStoreType|rowserColumnResizingType)|S(cr(oll(er(Part|Arrow)|ArrowPosition)|eenAuxiliaryOpaque)|tringEncoding|ize|ocketNativeHandle|election(Granularity|Direction|Affinity)|wapped(Double|Float)|aveOperationType)|Ha(sh(Table|Enumerator)|ndler(2)?)|C(o(ntrol(Size|Tint)|mp(ositingOperation|arisonResult))|ell(State|Type|ImagePosition|Attribute))|T(hreadPrivate|ypesetterGlyphInfo|i(ckMarkPosition|tlePosition|meInterval)|o(ol(TipTag|bar(SizeMode|DisplayMode))|kenStyle)|IFFCompression|ext(TabType|Alignment)|ab(State|leViewDropOperation|ViewType)|rackingRectTag)|ImageInterpolation|Zone|OpenGL(ContextAuxiliary|PixelFormatAuxiliary)|D(ocumentChangeType|atePickerElementFlags|ra(werState|gOperation))|UsableScrollerParts|P(oint|r(intingPageOrder|ogressIndicator(Style|Th(ickness|readInfo))))|EventType|KeyValueObservingOptions|Fo(nt(SymbolicTraits|TraitMask|Action)|cusRingType)|W(indow(OrderingMode|Depth)|orkspace(IconCreationOptions|LaunchOptions)|ritingDirection)|L(ineBreakMode|ayout(Status|Direction))|A(nimation(Progress|Effect)|ppl(ication(TerminateReply|DelegateReply|PrintReply)|eEventManagerSuspensionID)|ffineTransformStruct|lertStyle))\b
      scope: support.type.cocoa.objc
    # Catch-all
    - match: \bNS\w+\b
    - match: ''
      pop: true


  #############################################################################
  # The following are Objective-C-specific contexts that should not be reused.
  # This is because they push into subcontexts and use variables that are
  # Objective-C-specific.
  #############################################################################

  ## Common context layout

  global:
    - include: objc-structures
    - include: early-expressions
    - match: '^\s*(?=\w+)'
      push: global-modifier
    - include: late-expressions

  statements:
    - include: preprocessor-statements
    - include: scope:source.c#label
    - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: case-default
    - include: typedef
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: operators
    - include: strings
    - include: parens
    - include: block
    - include: variables
    - include: constants
    - include: access
    - match: ','
      scope: punctuation.separator.objc
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.objc
    - include: bracketed-content
    - include: brackets

  late-expressions:
    - include: modifiers-parens
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.objc

  comments:
    - include: scope:source.c#comments

  access:
    - include: scope:source.c#access

  keywords:
    - include: unique-keywords
    - include: scope:source.c#keywords

  numbers:
    - include: scope:source.c#numbers

  operators:
    - include: scope:source.c#operators

  strings:
    - include: unique-strings
    - include: scope:source.c#strings

  variables:
    - include: unique-variables
    - include: scope:source.c#variables

  constants:
    - include: unique-constants
    - match: '(?=\bNS\w+\b)'
      push: ns-identifiers
    - include: scope:source.c#constants

  modifiers:
    - include: unique-modifiers
    - include: scope:source.c#modifiers

  types:
    - include: unique-types
    - match: '(?=\bNS\w+\b)'
      push: ns-identifiers
    - include: scope:source.c#types

  ## Objective-C-specific contexts

  bracketed-content:
    - match: '(\[)\s*(?={{identifier}}\s+[^\s,])'
      captures:
        1: punctuation.section.scope.begin.objc
      push:
        - meta_scope: meta.bracketed.objc
        - match: '\]'
          scope: punctuation.section.scope.end.objc
          pop: true
        - match: \s*(NSPredicate)\s+(predicateWithFormat(:))
          captures:
            1: support.class.cocoa
            2: support.function.any-method.objc
            3: punctuation.separator.arguments.objc
          push:
            - meta_scope: meta.function-call.predicate.objc
            - include: ns-predicate
            - include: expressions
        - match: '\s+(\w+)(?=\s*\])'
          captures:
            1: support.function.any-method.objc
        - match: '\s+(\w+(:))'
          captures:
            1: support.function.any-method.objc
            2: punctuation.separator.arguments.objc
          push:
            - meta_scope: meta.function-call.objc
            - match: '(?=\])'
              pop: true
            - match: \b\w+(:)
              scope: support.function.any-method.name-of-parameter.objc
              captures:
                1: punctuation.separator.arguments.objc
            - include: expressions
        - include: expressions

  objc-structures:
    - match: '((@)(interface|protocol))(?!.+;)\s+([[:alpha:]_][[:alnum:]_]*)\s*((:)(?:\s*)([[:alpha:]][[:alnum:]]*))?(\s|\n)?'
      captures:
        1: storage.type.objc
        2: punctuation.definition.storage.type.objc
        4: entity.name.type.objc
        6: punctuation.definition.entity.other.inherited-class.objc
        7: entity.other.inherited-class.objc
        8: meta.divider.objc
        9: meta.inherited-class.objc
      push:
        - meta_scope: meta.interface-or-protocol.objc
        - meta_content_scope: meta.scope.interface.objc
        - match: ((@)end)\b
          captures:
            1: storage.type.objc
            2: punctuation.definition.storage.type.objc
          pop: true
        - include: preprocessor-objc-structures
        - include: objc-structure-body
    - match: '((@)(implementation))\s+([[:alpha:]_][[:alnum:]_]*)\s*(?::\s*([[:alpha:]][[:alnum:]]*))?'
      captures:
        1: storage.type.objc
        2: punctuation.definition.storage.type.objc
        4: entity.name.type.objc
        5: entity.other.inherited-class.objc
      push:
        - meta_scope: meta.implementation.objc
        - meta_content_scope: meta.scope.implementation.objc
        - match: ((@)end)\b
          captures:
            1: storage.type.objc
            2: punctuation.definition.storage.type.objc
          pop: true
        - include: preprocessor-objc-structures
        - include: objc-structure-body

  objc-structure-body:
    - include: properties
    - include: protocol_list
    - include: method
    - include: expressions

  method:
    - match: ^(-|\+)\s*
      push:
        - meta_scope: meta.function.objc
        - match: '\{'
          scope: punctuation.section.block.begin.objc
          set:
            - meta_scope: meta.block.objc
            - match: (?=^\s*#\s*(elif|else|endif)\b)
              pop: true
            - match: (?=@end\b)
              pop: true
            - match: '\}'
              scope: punctuation.section.block.end.objc
              pop: true
            - include: statements
        - match: '(?=#|@end|;)'
          pop: true
        - match: '\('
          scope: meta.return-type.objc punctuation.definition.type.objc
          push:
            - meta_scope: meta.return-type.objc
            - match: (\))\s*(\w+\b)
              captures:
                1: punctuation.definition.type.objc
                2: entity.name.function.objc
              pop: true
            - include: protocol_list
            - include: protocol_type_qualifier
            - include: expressions
        - match: \b\w+(?=:)
          scope: entity.name.function.name-of-parameter.objc
        - match: ((:))\s*(\()
          captures:
            1: entity.name.function.name-of-parameter.objc
            2: punctuation.separator.arguments.objc
            3: punctuation.definition.type.objc
          push:
            - meta_scope: meta.argument-type.objc
            - match: (\))\s*(\w+\b)?
              captures:
                1: punctuation.definition.type.objc
                2: variable.parameter.function.objc
              pop: true
            - include: protocol_list
            - include: protocol_type_qualifier
            - include: expressions
        - include: comments
        - match: '(,)\s+(\.\.\.)\s*'
          captures:
            1: punctuation.separator.objc
            2: keyword.operator.variadic.objc
          push:
            - include: scope:source.c#function-call
            - match: '(?=\S)'
              pop: true

  ## Preprocessor for objc-structures

  preprocessor-objc-structures:
    - include: preprocessor-rule-enabled-objc-structures
    - include: preprocessor-rule-disabled-objc-structures

  preprocessor-rule-disabled-objc-structures:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.objc
        2: keyword.control.import.objc
        3: constant.numeric.integer.decimal.objc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.objc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.else.objc
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: objc-structure-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.objc
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: scope:source.c#preprocessor-disabled

  preprocessor-rule-enabled-objc-structures:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.objc
        2: keyword.control.import.objc
        3: constant.numeric.integer.decimal.objc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.objc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.else.objc
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.objc
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: scope:source.c#preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: objc-structure-body

  ################################
  # Directly from C.sublime-syntax
  ################################

  global-modifier:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    - match: '(?=\S)'
      set: global-type

  global-type:
    - include: comments
    - match: \*
      scope: keyword.operator.objc
    - match: |-
        (?x:
          ({{before_tag}})
          \s+
          (?=
            {{identifier}}
            (\s+{{identifier}}(?!\s*[{=;])|\s*\*+)
          )
        )
      captures:
        1: storage.type.objc
      set: global-maybe-function
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/union
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{control_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: global-maybe-function
    # Allow a macro call
    - match: '({{identifier}})\s*(\()(?=[^\)]+\))'
      captures:
        1: variable.function.objc
        2: meta.group.objc punctuation.section.group.begin.objc
      push:
        - meta_scope: meta.function-call.objc
        - meta_content_scope: meta.group.objc
        - match: '\)'
          scope: meta.group.objc punctuation.section.group.end.objc
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set:
        - include: function-call
        - match: ''
          pop: true
    - include: types
    - match: '{{identifier}}'
    - match: (?=\W)
      pop: true

  global-maybe-function:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - match: \*
      scope: keyword.operator.objc
    - include: types
    - include: modifiers-parens
    - include: modifiers
    # All uppercase identifier just before a newline is most likely a macro
    - match: '[[:upper:][:digit:]_]+\s*$'
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|$))'
    # Real function definition
    - match: '{{identifier}}(?=\s*(\(|$))'
      scope: meta.function.objc entity.name.function.objc
      set: function-definition-params
    - match: '(?=\S)'
      pop: true

  function-definition-params:
    - meta_content_scope: meta.function.objc
    - include: comments
    - match: '(?=\()'
      set:
        - match: \(
          scope: meta.function.parameters.objc meta.group.objc punctuation.section.group.begin.objc
          set:
            - meta_content_scope: meta.function.parameters.objc meta.group.objc
            - match : \)
              scope: punctuation.section.group.end.objc
              set: function-definition-continue
            - match: '\bvoid\b'
              scope: storage.type.objc
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.objc
            - include: expressions
            - include: scope:source.c#preprocessor-line-continuation
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.objc
    - include: comments
    - match: '(?=;)'
      pop: true
    - match: \b(const|final|noexcept|override)\b
      scope: storage.modifier.objc
    - match: '(?=\{)'
      set: function-definition-body
    - match: '(?=\S)'
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.objc
    - match: '\{'
      scope: meta.block.objc punctuation.section.block.begin.objc
      set:
        - meta_content_scope: meta.function.objc meta.block.objc
        - match: '\}'
          scope: meta.function.objc meta.block.objc punctuation.section.block.end.objc
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '(?=({{before_tag}})([^(;]+$|.*\{))'
          push: data-structures
        - include: statements

  data-structures:
    # Detect variable type definitions using struct/enum/union followed by a tag
    - match: '\b({{before_tag}})(?=\s+{{identifier}}\s+{{identifier}}\s*[=;\[])'
      scope: storage.type.objc
    - match: '\bstruct\b'
      scope: storage.type.objc
      set: data-structures-struct-definition
    - match: '\benum\b'
      scope: storage.type.objc
      set: data-structures-enum-definition
    - match: '\bunion\b'
      scope: storage.type.objc
      set: data-structures-union-definition
    - match: '(?=\S)'
      pop: true

  data-structures-struct-definition:
    - meta_scope: meta.struct.objc
    - include: data-structures-definition-common-begin
    - include: data-structures-definition-common-macro
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.struct.forward-decl.objc
    - match: '{{identifier}}'
      scope: entity.name.struct.objc
      set: data-structures-struct-definition-after-name
    - include: data-structures-struct-definition-block-start
    - match: '(?=;)'
      pop: true

  data-structures-struct-definition-after-name:
    - meta_scope: meta.struct.objc
    - include: data-structures-definition-common-begin
    - match: '(?=;)'
      pop: true
    - include: data-structures-struct-definition-block-start

  data-structures-struct-definition-block-start:
    - match: '\{'
      scope: meta.block.objc punctuation.section.block.begin.objc
      set:
        - meta_content_scope: meta.struct.objc meta.block.objc
        - match: '\}'
          scope: meta.struct.objc meta.block.objc punctuation.section.block.end.objc
          pop: true
        - include: data-structures-body

  data-structures-enum-definition:
    - meta_scope: meta.enum.objc
    - include: data-structures-definition-common-begin
    - include: data-structures-definition-common-macro
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.enum.forward-decl.objc
    - match: '{{identifier}}'
      scope: entity.name.enum.objc
      set: data-structures-enum-definition-after-name
    - include: data-structures-enum-definition-block-start
    - match: '(?=;)'
      pop: true

  data-structures-enum-definition-after-name:
    - meta_scope: meta.enum.objc
    - include: data-structures-definition-common-begin
    - match: '(?=;)'
      pop: true
    - include: data-structures-enum-definition-block-start

  data-structures-enum-definition-block-start:
    - match: '\{'
      scope: meta.block.objc punctuation.section.block.begin.objc
      set:
        - meta_content_scope: meta.enum.objc meta.block.objc
        # Enums don't support methods so we have a simplified body
        - match: '\}'
          scope: meta.enum.objc meta.block.objc punctuation.section.block.end.objc
          pop: true
        - include: data-structures-body

  data-structures-union-definition:
    - meta_scope: meta.union.objc
    - include: data-structures-definition-common-begin
    - include: data-structures-definition-common-macro
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.union.forward-decl.objc
    - match: '{{identifier}}'
      scope: entity.name.union.objc
      set: data-structures-union-definition-after-name
    - include: data-structures-union-definition-block-start
    - match: '(?=;)'
      pop: true

  data-structures-union-definition-after-name:
    - meta_scope: meta.union.objc
    - include: data-structures-definition-common-begin
    - match: '(?=;)'
      pop: true
    - include: data-structures-union-definition-block-start

  data-structures-union-definition-block-start:
    - match: '\{'
      scope: meta.block.objc punctuation.section.block.begin.objc
      set:
        - meta_content_scope: meta.union.objc meta.block.objc
        - match: '\}'
          scope: meta.union.objc meta.block.objc punctuation.section.block.end.objc
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - match: '(?=\b(?:{{before_tag}}|{{control_keywords}})\b)'
      pop: true
    - include: modifiers-parens
    - include: modifiers

  data-structures-definition-common-macro:
    # Handle macros so they aren't matched as the class name
    - match: '\b[[:upper:][:digit:]_]+\b(?!\s*($|\{))'

  data-structures-definition-common-end:
    - match: '(?=;)'
      pop: true

  data-structures-body:
    - include: preprocessor-data-structures
    - match: '(?={{before_tag}})'
      push: data-structures
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.objc
      push:
        - meta_scope: meta.block.objc
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.objc
          pop: true
        - include: statements

  parens:
    - match: \(
      scope: punctuation.section.group.begin.objc
      push:
        - meta_scope: meta.group.objc
        - match: \)
          scope: punctuation.section.group.end.objc
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.objc
      push:
        - meta_scope: meta.brackets.objc
        - match: \]
          scope: punctuation.section.brackets.end.objc
          pop: true
        - include: expressions

  case-default:
    - match: '\b(default|case)\b'
      scope: keyword.control.objc
      push:
        - match: ':'
          scope: punctuation.separator.objc
          pop: true
        - include: expressions

  modifiers-parens:
    - match: \b(__attribute__)\s*(\(\()
      captures:
        1: storage.modifier.objc
        2: meta.group.objc punctuation.section.group.begin.objc
      push :
        - meta_scope: meta.attribute.objc
        - meta_content_scope: meta.group.objc
        - include: parens
        - include: strings
        - match: \)\)
          scope: meta.group.objc punctuation.section.group.end.objc
          pop: true
    - match: \b(__declspec)(\()
      captures:
        1: storage.modifier.objc
        2: meta.group.objc punctuation.section.group.begin.objc
      push:
        - meta_content_scope: meta.group.objc
        - match: '\)'
          scope: meta.group.objc punctuation.section.group.end.objc
          pop: true
        - match: '\b(align|allocate|code_seg|deprecated|property|uuid)\b\s*(\()'
          captures:
            1: storage.modifier.objc
            2: meta.group.objc punctuation.section.group.begin.objc
          push:
            - meta_content_scope: meta.group.objc
            - match: '\)'
              scope: meta.group.objc punctuation.section.group.end.objc
              pop: true
            - include: numbers
            - include: strings
            - match: \b(get|put)\b
              scope: variable.parameter.objc
            - match: ','
              scope: punctuation.separator.objc
            - match: '='
              scope: keyword.operator.assignment.objc
        - match: '\b(appdomain|deprecated|dllimport|dllexport|jintrinsic|naked|noalias|noinline|noreturn|nothrow|novtable|process|restrict|safebuffers|selectany|thread)\b'
          scope: constant.other.objc

  keywords-parens:
    - match: '\b(sizeof)\b\s*(\()'
      captures:
        1: keyword.operator.word.objc
        2: meta.group.objc punctuation.section.group.begin.objc
      push:
        - meta_content_scope: meta.group.objc
        - match: '\)'
          scope: meta.group.objc punctuation.section.group.end.objc
          pop: true
        - include: expressions

  typedef:
    - match: \btypedef\b
      scope: storage.type.objc
      push:
        - match: ({{identifier}})?\s*(?=;)
          captures:
            1: entity.name.type.typedef.objc
          pop: true
        - match: \b(struct)\s+({{identifier}})
          captures:
            1: storage.type.objc
        - include: expressions

  function-call:
  - match: (?={{identifier}}\s*\()
    push:
      - meta_content_scope: meta.function-call.objc
      - include: scope:source.c#c99
      - match: '{{identifier}}'
        scope: variable.function.objc
      - match: '\('
        scope: meta.group.objc punctuation.section.group.begin.objc
        set:
          - meta_content_scope: meta.function-call.objc meta.group.objc
          - match : \)
            scope: meta.function-call.objc meta.group.objc punctuation.section.group.end.objc
            pop: true
          - include: expressions

  ## Preprocessor for data-structures

  preprocessor-data-structures:
    - include: preprocessor-rule-enabled-data-structures
    - include: preprocessor-rule-disabled-data-structures

  preprocessor-rule-disabled-data-structures:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.objc
        2: keyword.control.import.objc
        3: constant.numeric.integer.decimal.objc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.objc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.else.objc
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: data-structures-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.objc
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: scope:source.c#preprocessor-disabled

  preprocessor-rule-enabled-data-structures:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.objc
        2: keyword.control.import.objc
        3: constant.numeric.integer.decimal.objc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.objc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.else.objc
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.objc
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: scope:source.c#preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: data-structures-body

  ## Preprocessor for global

  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-expressions:
    - include: scope:source.c#incomplete-inc
    - include: preprocessor-macro-define
    - include: scope:source.c#pragma-mark
    - include: preprocessor-other

  preprocessor-rule-disabled-global:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.objc
        2: keyword.control.import.objc
        3: constant.numeric.integer.decimal.objc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.objc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.else.objc
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.objc
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: scope:source.c#preprocessor-disabled

  preprocessor-rule-enabled-global:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.objc
        2: keyword.control.import.objc
        3: constant.numeric.integer.decimal.objc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.objc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.else.objc
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.objc
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: scope:source.c#preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global

  preprocessor-rule-other-global:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.objc
      push:
        - meta_scope: meta.preprocessor.objc
        - include: scope:source.c#preprocessor-line-continuation
        - include: scope:source.c#preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.objc
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.objc keyword.control.import.objc
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \{
      scope: punctuation.section.block.begin.objc
      set: preprocessor-block-if-branch-global
    - include: preprocessor-global
    - include: negated-block
    - include: global

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.objc
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.objc keyword.control.import.objc
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \}
      scope: punctuation.section.block.end.objc
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.objc
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.objc keyword.control.import.objc
      set: preprocessor-block-finish-if-branch-global
    - match: \}
      scope: punctuation.section.block.end.objc
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.objc keyword.control.import.objc
      pop: true
    - match: \}
      scope: punctuation.section.block.end.objc
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: preprocessor-global
    - include: negated-block
    - include: global

  ## Preprocessor for statements

  preprocessor-rule-disabled-statements:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.objc
        2: keyword.control.import.objc
        3: constant.numeric.integer.decimal.objc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.objc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.else.objc
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.objc
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: scope:source.c#preprocessor-disabled

  preprocessor-rule-enabled-statements:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.objc
        2: keyword.control.import.objc
        3: constant.numeric.integer.decimal.objc
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.objc
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.objc keyword.control.import.else.objc
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.objc
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: scope:source.c#preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-other-statements:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.objc
      push:
        - meta_scope: meta.preprocessor.objc
        - include: scope:source.c#preprocessor-line-continuation
        - include: scope:source.c#preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.objc
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.objc keyword.control.import.objc
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \{
      scope: punctuation.section.block.begin.objc
      set: preprocessor-block-if-branch-statements
    - match: (?=(?!{{non_func_keywords}}){{identifier}}\s*\()
      set: preprocessor-if-branch-function-call
    - include: negated-block
    - include: statements

  preprocessor-if-branch-function-call:
    - meta_content_scope: meta.function-call.objc
    - include: scope:source.c#c99
    - match: '{{identifier}}'
      scope: variable.function.objc
    - match: '\('
      scope: meta.group.objc punctuation.section.group.begin.objc
      set: preprocessor-if-branch-function-call-arguments

  preprocessor-if-branch-function-call-arguments:
    - meta_content_scope: meta.function-call.objc meta.group.objc
    - match : \)
      scope: meta.function-call.objc meta.group.objc punctuation.section.group.end.objc
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*(?:elif|else))\b
      captures:
        1: meta.preprocessor.objc keyword.control.import.objc
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.objc keyword.control.import.objc
      set: preprocessor-if-branch-function-call-arguments-finish
    - include: expressions

  preprocessor-if-branch-function-call-arguments-finish:
    - meta_content_scope: meta.function-call.objc meta.group.objc
    - match: \)
      scope: meta.function-call.objc meta.group.objc punctuation.section.group.end.objc
      pop: true
    - include: expressions

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.objc
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.objc keyword.control.import.objc
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \}
      scope: punctuation.section.block.end.objc
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.objc
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.objc keyword.control.import.objc
      set: preprocessor-block-finish-if-branch-statements
    - match: \}
      scope: punctuation.section.block.end.objc
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.objc keyword.control.import.objc
      pop: true
    - match: \}
      scope: punctuation.section.block.end.objc
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: statements

  ## Preprocessor other

  negated-block:
    - match: '\}'
      scope: punctuation.section.block.end.objc
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.objc
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  preprocessor-macro-define:
    - match: ^\s*(\#\s*define)\b
      captures:
        1: meta.preprocessor.macro.objc keyword.control.import.define.objc
      push:
        - meta_content_scope: meta.preprocessor.macro.objc
        - include: scope:source.c#preprocessor-line-continuation
        - include: scope:source.c#preprocessor-line-ending
        - include: scope:source.c#preprocessor-comments
        - match: '({{identifier}})(?=\()'
          scope: entity.name.function.preprocessor.objc
          set:
            - match: '\('
              scope: punctuation.section.group.begin.objc
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.objc
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.objc meta.group.objc
    - match: '{{identifier}}'
      scope: variable.parameter.objc
    - match: \)
      scope: punctuation.section.group.end.objc
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.objc
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.objc
          pop: true
        - include: scope:source.c#preprocessor-line-continuation
        - include: scope:source.c#preprocessor-comments
        - match: '\.\.\.'
          scope: keyword.operator.variadic.objc
        - match: '(?=\))'
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.objc
          captures:
            1: punctuation.definition.comment.objc
            2: punctuation.definition.comment.objc
        - match: '\S+'
          scope: invalid.illegal.unexpected-character.objc
    - include: scope:source.c#preprocessor-line-continuation
    - include: scope:source.c#preprocessor-comments
    - match: '\.\.\.'
      scope: keyword.operator.variadic.objc
    - match: (/\*).*(\*/)
      scope: comment.block.objc
      captures:
        1: punctuation.definition.comment.objc
        2: punctuation.definition.comment.objc
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.objc

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.objc
    - include: scope:source.c#preprocessor-line-continuation
    - include: scope:source.c#preprocessor-line-ending
    - include: scope:source.c#preprocessor-comments
    # Don't define blocks in define statements
    - match: '\{'
      scope: punctuation.section.block.begin.objc
    - match: '\}'
      scope: punctuation.section.block.end.objc
    - include: expressions

  preprocessor-other:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|line|pragma|undef))\b
      captures:
        1: keyword.control.import.objc
      push:
        - meta_scope: meta.preprocessor.objc
        - include: scope:source.c#preprocessor-line-continuation
        - include: scope:source.c#preprocessor-line-ending
        - include: scope:source.c#preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.objc
    - match: ^\s*(#\s*(endif)\b)
      captures:
        1: meta.preprocessor.objc
        2: keyword.control.import.objc
    - match: ^\s*(#\s*(?:error|warning))\b
      captures:
        1: keyword.control.import.error.objc
      push:
        - meta_scope: meta.preprocessor.diagnostic.objc
        - include: scope:source.c#preprocessor-line-continuation
        - include: scope:source.c#preprocessor-line-ending
        - include: scope:source.c#preprocessor-comments
        - include: strings
        - match: '\S+'
          scope: string.unquoted.objc
    - match: ^\s*(#\s*(?:include|include_next))\b
      captures:
        1: keyword.control.import.include.objc
      push:
        - meta_scope: meta.preprocessor.include.objc
        - include: preprocessor-other-include-common
    - match: ^\s*(#\s*import)\b
      captures:
        1: keyword.control.import.import.objc
      push:
        - meta_scope: meta.preprocessor.import.objc
        - include: preprocessor-other-include-common
    - include: scope:source.c#preprocessor-practical-workarounds

  preprocessor-other-include-common:
    - include: scope:source.c#preprocessor-line-continuation
    - include: scope:source.c#preprocessor-line-ending
    - include: scope:source.c#preprocessor-comments
    - match: '"'
      scope: punctuation.definition.string.begin.objc
      push:
        - meta_scope: string.quoted.double.include.objc
        - match: '"'
          scope: punctuation.definition.string.end.objc
          pop: true
    - match: <
      scope: punctuation.definition.string.begin.objc
      push:
        - meta_scope: string.quoted.other.lt-gt.include.objc
        - match: ">"
          scope: punctuation.definition.string.end.objc
          pop: true
