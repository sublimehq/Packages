# SYNTAX TEST "Packages/Go/YAML (Go).sublime-syntax"

  {{/*
#^ - meta.string - meta.interpolation
# ^^ meta.string.yaml meta.interpolation.go punctuation.section.interpolation.begin.go
#   ^^ meta.string.yaml meta.interpolation.go source.go.template comment.block.go punctuation.definition.comment.begin.go
  Spread a key-value map into the "env" list
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.yaml meta.interpolation.go source.go.template comment.block.go
  */}}
# <- meta.string.yaml meta.interpolation.go source.go.template comment.block.go
#^ meta.string.yaml meta.interpolation.go source.go.template comment.block.go - punctuation
# ^^ meta.string.yaml meta.interpolation.go source.go.template comment.block.go punctuation.definition.comment.end.go
#   ^^ meta.string.yaml meta.interpolation.go punctuation.section.interpolation.end.go
#     ^ - meta.string - meta.interpolation

{{- printf "- name: %s" $key -}}
# <- meta.string.yaml meta.interpolation.go punctuation.section.interpolation.begin.go - meta.mapping
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.yaml meta.interpolation.go - meta.mapping
#                             ^^ punctuation.section.interpolation.end.go

{{- printf "- name: %s" $key -}}:
# <- meta.mapping.key.yaml meta.string.yaml meta.interpolation.go punctuation.section.interpolation.begin.go
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key.yaml meta.string.yaml meta.interpolation.go
#                             ^^ punctuation.section.interpolation.end.go
#                               ^ punctuation.separator.key-value.mapping.yaml

key: {{ /*comment*/ }}
#    ^^^^^^^^^^^^^^^^^ meta.string.yaml meta.interpolation.go - string
#    ^^ punctuation.section.interpolation.begin.go
#      ^^^^^^^^^^^^^ source.go.template
#                   ^^ punctuation.section.interpolation.end.go

{{ if $var true }}
# <- meta.string.yaml meta.interpolation.go punctuation.section.interpolation.begin.go
#^^^^^^^^^^^^^^^^^ meta.string.yaml meta.interpolation.go
#^ punctuation.section.interpolation.begin.go
# ^^^^^^^^^^^^^^ meta.string.yaml meta.interpolation.go source.go.template
#               ^^ punctuation.section.interpolation.end.go

    {{ .keyname }}: "String{{value}}"
#   ^^^^^^^^^^^^^^ meta.mapping.key.yaml meta.string.yaml meta.interpolation.go
#   ^^ punctuation.section.interpolation.begin.go
#     ^^^^^^^^^^ source.go.template
#               ^^ punctuation.section.interpolation.end.go
#                 ^ punctuation.separator.key-value.mapping.yaml
#                   ^^^^^^^ meta.string.yaml string.quoted.double.yaml
#                          ^^^^^^^^^ meta.string.yaml meta.interpolation.go
#                                   ^ meta.string.yaml string.quoted.double.yaml punctuation.definition.string.end.yaml

{{ else }}
# <- meta.string.yaml meta.interpolation.go punctuation.section.interpolation.begin.go
#^^^^^^^^^ meta.string.yaml meta.interpolation.go
#^ punctuation.section.interpolation.begin.go
# ^^^^^^ meta.string.yaml meta.interpolation.go source.go.template
#       ^^ punctuation.section.interpolation.end.go

    {{ .keyname }}:
#   ^^^^^^^^^^^^^^ meta.mapping.key.yaml meta.string.yaml meta.interpolation.go
#   ^^ punctuation.section.interpolation.begin.go
#     ^^^^^^^^^^ source.go.template
#               ^^ punctuation.section.interpolation.end.go
#                 ^ punctuation.separator.key-value.mapping.yaml
        - Multi{{ printf
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^^^^^ meta.string.yaml string.unquoted.plain.out.yaml
#              ^^^^^^^^^^ meta.string.yaml meta.interpolation.go - string
#              ^^ punctuation.section.interpolation.begin.go
#                 ^^^^^^ support.function.builtin.go
          $line }} string
#        ^^^^^^^^^ meta.string.yaml meta.interpolation.go - string
#         ^^^^^ variable.other.template.go
#               ^^ punctuation.section.interpolation.end.go
#                 ^^^^^^^ meta.string.yaml string.unquoted.plain.out.yaml - meta.interpolation

        - 'Multi{{ printf
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^^^^^^ meta.string.yaml string.quoted.single.yaml
#         ^ punctuation.definition.string.begin.yaml
#               ^^^^^^^^^^ meta.string.yaml meta.interpolation.go - string
#               ^^ punctuation.section.interpolation.begin.go
#                  ^^^^^^ support.function.builtin.go
          $line }} string'
#        ^^^^^^^^^ meta.string.yaml meta.interpolation.go - string
#         ^^^^^ variable.other.template.go
#               ^^ punctuation.section.interpolation.end.go
#                 ^^^^^^^^ meta.string.yaml string.quoted.single.yaml - meta.interpolation
#                        ^ punctuation.definition.string.end.yaml

        - "Multi{{ printf
#       ^ punctuation.definition.block.sequence.item.yaml
#         ^^^^^^ meta.string.yaml string.quoted.double.yaml
#         ^ punctuation.definition.string.begin.yaml
#               ^^^^^^^^^^ meta.string.yaml meta.interpolation.go - string
#               ^^ punctuation.section.interpolation.begin.go
#                  ^^^^^^ support.function.builtin.go

          $line }} string"
#        ^^^^^^^^^ meta.string.yaml meta.interpolation.go - string
#         ^^^^^ variable.other.template.go
#               ^^ punctuation.section.interpolation.end.go
#                 ^^^^^^^^ meta.string.yaml string.quoted.double.yaml - meta.interpolation
#                        ^ punctuation.definition.string.end.yaml

{{ end }}
# <- meta.string.yaml meta.interpolation.go punctuation.section.interpolation.begin.go
#^^^^^^^^ meta.string.yaml meta.interpolation.go
#^ punctuation.section.interpolation.begin.go
# ^^^^^ meta.string.yaml meta.interpolation.go source.go.template
#      ^^ punctuation.section.interpolation.end.go

path: /{{.Values.ingress.path}}/*
#     ^ meta.string.yaml string.unquoted.plain.out.yaml
#      ^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.yaml meta.interpolation.go
#                              ^^ meta.string.yaml string.unquoted.plain.out.yaml - comment
