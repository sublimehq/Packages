%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html


# The structure and terminology of this syntax reflects the spec:
# https://golang.org/ref/spec


# The following is a simplified model of Sublime Text's syntax engine, reverse-
# engineered from experience. This description uses assertive language for
# brevity, but does not reflect the real implementation and should not be taken
# literally. Still, this model helps a LOT, and is necessary for understanding
# this syntax.
#
# The engine has a stack of rulesets. The topmost frame is the current ruleset:
#
#   rulesets:
#     # current
#     - [
#       {match: '...', scope: '...'},
#       {match: '...', scope: '...'},
#       {match: '...', scope: '...'},
#     ],
#     # other
#     - [...]
#
# The engine appears to use three nested loops: (1) lines, (2) character
# positions, and (3) rules.
#
# First, the engine loops through lines. On each line, it loops through char
# positions. On each char position, it loops through rules. It also loops
# through rules on at least two special "positions" that don't correspond to a
# character: start of line and end of line.
#
# For each rule, the engine runs its regex against the remainder of the line,
# which may also start with ^ or consist entirely of $. Note that older syntax
# engine(s) supported multiline regexes, but this has been deprecated for
# performance reasons.
#
# Each rule may "consume" 0 to N characters, optionally assigning scopes. In
# addition, the rule may modify the rule stack with `push / pop / set`.
# Consuming characters advances the character loop. Consuming characters OR
# modifying the rule stack also resets the RULE loop; the engine will continue
# from the next character and the FIRST rule in the then-current ruleset.
#
# Rules that consume ZERO characters and DON'T modify the stack also DON'T reset
# the rule loop. We must be mindful of this behavior. Regexes for such rules
# typically look like this: (?=\S) or $. If they did reset the rule loop, it
# would cause an infinite loop in the engine.
#
# Another potential gotcha: the engine will loop through the rules at the end of
# each line, where there aren't any characters to match. The only matches are $
# or its derivatives such as (?=$). Rules intended to work across multiple
# lines, for example to trim whitespace and comments, may be unexpectedly
# interrupted by sibling rules with $.




file_extensions:
  - go
scope: source.go

variables:
  # https://golang.org/ref/spec#Keywords
  # These are the only words that can't be used as identifiers.
  keyword: \b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go|goto|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b

  # Note: this matches ALL valid identifiers, including predeclared constants,
  # functions and types.
  ident: \b(?!{{keyword}})[[:alpha:]_][[:alnum:]_]*\b

  # Single line only
  inline_comment: /[*](?:[^*]|[*](?!/))*[*]/

  # Whitespace and general comments on a single line.
  # This should only be used for lookahead, not for capturing / scoping.
  noise: (?:\s*|{{inline_comment}})*

  char_escape: \\x\h{2}|\\u\h{4}|\\U\h{8}|\\[0-7]{3}|\\.

  exponent: '[Ee][+-]?'

contexts:
  main:
    - include: match-any

  match-any:
    - include: match-comments
    - include: match-tokens

  # https://golang.org/ref/spec#Comments
  match-comments:
    - include: match-line-comment
    - include: match-general-comment

  match-line-comment:
    # Go has special comments in the form of:
    #   //go:some-directive arg0 arg1 ...
    # This regexp captures such a line, carefully scoping it as a comment and
    # an annotation, while assigning ONLY the commend scope to the end of the
    # line. This way, a background color applied to an annotation scope doesn't
    # apply to the infinite blank space on the rest of the line.
    - match: (//go:.*)\s
      scope: comment.line.go
      captures:
        1: meta.annotation.go

    # Explicitly matching \s also captures end-of-line. This ensures that things
    # that rely on comment scoping, such as hotkeys, work properly at the end of
    # the line when typing a new comment.
    - match: //(?:.|\s)*
      scope: comment.line.go

  match-general-comment:
    - match: /\*
      push:
        - meta_scope: comment.block.go
        - match: \*/
          pop: true

  # https://golang.org/ref/spec#Tokens
  match-tokens:
    - include: match-keywords
    - include: match-identifiers
    - include: match-literals
    - include: match-operators
    - include: match-punctuation

  # https://golang.org/ref/spec#Keywords
  match-keywords:
    - include: match-keyword-break
    - include: match-keyword-case
    - include: match-keyword-chan
    - include: match-keyword-const
    - include: match-keyword-continue
    - include: match-keyword-default
    - include: match-keyword-defer
    - include: match-keyword-else
    - include: match-keyword-fallthrough
    - include: match-keyword-for
    - include: match-keyword-func
    - include: match-keyword-go
    - include: match-keyword-goto
    - include: match-keyword-if
    - include: match-keyword-import
    - include: match-keyword-interface
    - include: match-keyword-map
    - include: match-keyword-package
    - include: match-keyword-range
    - include: match-keyword-return
    - include: match-keyword-select
    - include: match-keyword-struct
    - include: match-keyword-switch
    - include: match-keyword-type
    - include: match-keyword-var

  # See `match-selector` for field scoping.
  match-identifiers:
    - include: match-predefined-identifiers
    - include: match-call-or-cast
    - include: match-short-variable-declarations
    - match: '{{ident}}'
      scope: variable.other.go

  # https://golang.org/ref/spec#Predeclared_identifiers
  match-predefined-identifiers:
    # Note: these are NOT keywords, and can be redefined. This syntax treats
    # them as regular identifiers in positions that enforce a certain scope,
    # such as variable declarations, types, function names, etc. This rule
    # should be used in places that are "left over". Detecting redefinition is
    # beyond the scope of this syntax engine, but it should be very uncommon, so
    # we can get away with constant scopes.
    - match: \b(?:true|false|nil)\b
      scope: constant.language.go
    - include: match-new
    - include: match-make

  # Note: calls and casts are syntactically identical. Detecting casts and
  # scoping them as types is beyond the capabilities of this syntax engine.
  #
  # This is somewhat duplicated in `match-selector`, which must be included
  # before this rule.
  match-call-or-cast:
    - match: '{{ident}}(?=(?:{{noise}}\))*{{noise}}\()'
      scope: variable.function.go

  # Note: this currently doesn't work across multiple lines.
  match-short-variable-declarations:
    - match: (?={{ident}}(?:{{noise}},{{noise}}{{ident}})*{{noise}}:=)
      push:
        - include: match-comments
        - match: \b_\b
        - match: '{{ident}}'
          scope: variable.declaration.go
        - include: match-comma
        - include: pop-before-nonblank

  # Note: `new` can be redefined, invalidating this scoping, but such
  # redefinition should be very uncommon.
  match-new:
    - match: \bnew\b(?={{noise}}\()
      scope: variable.function.go
      push: pop-first-argument-as-type

  # Note: `make` can be redefined, invalidating this scoping, but such
  # redefinition should be very uncommon.
  match-make:
    - match: \bmake\b(?={{noise}}\()
      scope: variable.function.go
      push: pop-first-argument-as-type

  # https://golang.org/ref/spec#Operators_and_punctuation
  match-operators: [
    {match: \!=  , scope: keyword.operator.go},
    {match: \!   , scope: keyword.operator.go},
    {match: \%=  , scope: keyword.operator.assignment.go},
    {match: \%   , scope: keyword.operator.go},
    {match: \&&  , scope: keyword.operator.go},
    {match: \&=  , scope: keyword.operator.assignment.go},
    {match: \&^= , scope: keyword.operator.assignment.go},
    {match: \&^  , scope: keyword.operator.go},
    {match: \&   , scope: keyword.operator.go},
    {match: \*=  , scope: keyword.operator.assignment.go},
    {match: \*   , scope: keyword.operator.go},
    {match: \+\+ , scope: keyword.operator.go},
    {match: \+=  , scope: keyword.operator.assignment.go},
    {match: \+   , scope: keyword.operator.go},
    {match: --   , scope: keyword.operator.assignment.go},
    {match: -=   , scope: keyword.operator.assignment.go},
    {match: \-   , scope: keyword.operator.go},
    {match: /=   , scope: keyword.operator.assignment.go},
    {match: /    , scope: keyword.operator.go},
    {match: :=   , scope: keyword.operator.assignment.go},
    {match: <-   , scope: keyword.operator.go},
    {match: <    , scope: keyword.operator.go},
    {match: <<=  , scope: keyword.operator.assignment.go},
    {match: \<<  , scope: keyword.operator.go},
    {match: <=   , scope: keyword.operator.go},
    {match: ==   , scope: keyword.operator.go},
    {match: \=   , scope: keyword.operator.assignment.go},
    {match: \>=  , scope: keyword.operator.assignment.go},
    {match: \>>= , scope: keyword.operator.assignment.go},
    {match: \>>  , scope: keyword.operator.go},
    {match: \>   , scope: keyword.operator.go},
    {match: \^=  , scope: keyword.operator.assignment.go},
    {match: \^   , scope: keyword.operator.go},
    {match: \|=  , scope: keyword.operator.assignment.go},
    {match: \|\| , scope: keyword.operator.go},
    {match: \|   , scope: keyword.operator.go},
  ]

  match-star:
    - match: \*
      scope: keyword.operator.go

  # https://golang.org/ref/spec#Operators_and_punctuation
  match-punctuation:
    - include: match-comma
    - include: match-ellipsis
    - include: match-colon
    - include: match-semicolon
    - include: match-selector
    - include: match-parens
    - include: match-brackets
    - include: match-braces

  match-comma:
    - match: \,
      scope: punctuation.separator.go

  match-ellipsis:
    - match: \.\.\.
      scope: keyword.operator.variadic.go

  match-colon:
    - match: ':'
      scope: punctuation.separator.go

  match-semicolon:
    - match: ;
      scope: punctuation.terminator.go

  match-selector:
    - match: \.
      scope: punctuation.accessor.dot.go
      push:
        - include: match-comments
        - include: pop-type-assertion

        # See `match-call-or-cast` on notes about call/cast ambiguity.
        - match: '{{ident}}(?=(?:{{noise}}\))*{{noise}}\()'
          scope: variable.function.go
          pop: true

        - include: pop-member

        # Note: newlines between dot and assertion/field are ok
        - include: pop-before-nonblank

  match-parens:
    - match: \(
      scope: punctuation.section.parens.begin.go
      push:
        - match: \)
          scope: punctuation.section.parens.end.go
          pop: true
        - match: '{{ident}}(?={{noise}}\){{noise}}\()'
          scope: variable.function.go
          pop: true
        - include: match-any
    - match: \)
      scope: punctuation.section.parens.end.go

  match-brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.go
    - match: \]
      scope: punctuation.section.brackets.end.go
      push:
        - include: pop-on-terminator
        - include: match-comments
        - include: match-star
        - match: '{{ident}}(?={{noise}}\.)'
          scope: variable.other.go
        - match: '{{ident}}'
          scope: storage.type.go
          pop: true
        - include: pop-before-nonblank

  match-braces:
    - match: \{
      scope: punctuation.section.braces.begin.go
      push:
        - meta_scope: meta.block.go
        - match: \}
          scope: punctuation.section.braces.end.go
          pop: true
        - include: match-any
    - match: \}
      scope: punctuation.section.braces.end.go

  match-literals:
    - include: match-imaginary
    - include: match-floats
    - include: match-integers
    - include: match-runes
    - include: match-strings

  match-imaginary:
    # Mandatory integer, optional fraction, optional exponent, mandatory imaginary
    - match: \d+(?:(\.)\d+)?(?:({{exponent}})\d+)?(i)
      scope: constant.numeric.imaginary.go
      captures:
        1: punctuation.separator.decimal.go
        2: punctuation.separator.exponent.go
        3: storage.type.numeric.imaginary.go
    # Dot without fraction
    - match: \d+\.(?:{{exponent}}\d+)?i
      scope: invalid.deprecated.go
    # Dot without integer
    - match: \.\d+(?:{{exponent}}\d+)?i
      scope: invalid.deprecated.go

  match-floats:
    # Integer, no fraction, exponent
    - match: \d+({{exponent}})\d+
      scope: constant.numeric.float.go
      captures:
        1: punctuation.separator.exponent.go
    # Integer, fraction, optional exponent
    - match: \d+(\.)\d+(?:({{exponent}})\d+)?
      scope: constant.numeric.float.go
      captures:
        1: punctuation.separator.decimal.go
        2: punctuation.separator.exponent.go
    # Dot without fraction
    - match: \d+\.(?:{{exponent}}\d+)?
      scope: invalid.deprecated.go
    # Dot without integer
    - match: \.\d+(?:{{exponent}}\d+)?
      scope: invalid.deprecated.go

  match-integers:
    - include: match-octal-integer
    - include: match-hex-integer
    - include: match-decimal-integer

  match-octal-integer:
    - match: (0)[0-7]+(?=\D)
      scope: constant.numeric.octal.go
      captures:
        1: punctuation.definition.numeric.octal.go
    - match: 0[0-7]*[8-9]+
      scope: invalid.illegal.go

  match-hex-integer:
    - match: (0[Xx])\h+
      scope: constant.numeric.hex.go
      captures:
        1: punctuation.definition.numeric.hexadecimal.go

  match-decimal-integer:
    - match: \d+
      scope: constant.numeric.integer.go

  # https://golang.org/ref/spec#Rune_literals
  match-runes:
    - match: \'({{char_escape}})'
      scope: constant.character.go
      captures:
        1: constant.character.escape.go
    - match: \'[^']*'
      scope: constant.character.go

  match-strings:
    - include: match-raw-string
    - include: match-interpreted-string

  match-raw-string:
    - match: '`'
      scope: punctuation.definition.string.begin.go
      push:
        - meta_scope: string.quoted.other.go
        - match: '`'
          scope: punctuation.definition.string.end.go
          pop: true
        - match: \%%
          scope: constant.character.escape.go
        - include: match-fmt

  match-interpreted-string:
    - match: '"'
      scope: punctuation.definition.string.begin.go
      push:
        - meta_scope: string.quoted.double.go
        - match: '"'
          scope: punctuation.definition.string.end.go
          pop: true
        - match: '{{char_escape}}'
          scope: constant.character.escape.go
        - match: \%%
          scope: constant.character.escape.go
        - include: match-fmt

  # https://godoc.org/fmt
  #
  # Tries to match known patterns precisely, to avoid false positives in non-fmt
  # strings that just happen to contain %.
  match-fmt:
    - match: '\%[ .\d#+-]*[A-Za-z]'
      scope: constant.other.placeholder.go

  match-keyword-break:
    - match: \bbreak\b
      scope: keyword.control.go

  match-keyword-case:
    - match: \bcase\b
      scope: keyword.control.go

  match-keyword-chan:
    - match: (?=\bchan\b)
      push: pop-chan

  match-keyword-const:
    - match: \bconst\b
      scope: storage.modifier.const.go
      push:
        - match: \(
          scope: punctuation.section.parens.begin.go
          set:
            - match: \)
              scope: punctuation.section.parens.end.go
              pop: true

            - match: \b_\b(?={{noise}},)
            - match: '{{ident}}(?={{noise}},)'
              scope: variable.other.constant.declaration.go

            - match: \b_\b
              push: pop-const-type-and-or-assignment
            - match: '{{ident}}'
              scope: variable.other.constant.declaration.go
              push: pop-const-type-and-or-assignment

            - include: match-any

        - include: match-comments
        - include: match-comma

        - match: \b_\b(?={{noise}},)
        - match: '{{ident}}(?={{noise}},)'
          scope: variable.other.constant.declaration.go

        - match: \b_\b
          set: pop-const-type-and-or-assignment
        - match: '{{ident}}'
          scope: variable.other.constant.declaration.go
          set: pop-const-type-and-or-assignment

        - include: pop-before-nonblank

  match-keyword-continue:
    - match: \bcontinue\b
      scope: keyword.control.go

  match-keyword-default:
    - match: \bdefault\b
      scope: keyword.control.go

  match-keyword-defer:
    - match: \bdefer\b
      scope: keyword.control.go

  match-keyword-else:
    - match: \belse\b
      scope: keyword.control.go

  match-keyword-fallthrough:
    - match: \bfallthrough\b
      scope: keyword.control.go

  match-keyword-for:
    - match: \bfor\b
      scope: keyword.control.go

  match-keyword-func:
    - match: \bfunc\b
      scope: storage.type.func.go
      push:
        - include: match-comments

        # Method
        - match: (?=\({{noise}}[^)]+{{noise}}\){{noise}}{{ident}}{{noise}}\()
          set:
            - meta_scope: meta.function.declaration.go
            - match: (?=[^(])
              set:
                - meta_scope: meta.function.declaration.go
                - include: pop-func-signature
            # Receiver list
            - match: (?=\()
              push: pop-func-parameter-list

        # Named function
        - match: (?={{ident}}{{noise}}\()
          set: pop-func-signature

        # Anonymous function
        - include: pop-func-parameter-and-return-lists

  match-keyword-go:
    - match: \bgo\b
      scope: keyword.control.go

  match-keyword-goto:
    - match: \bgoto\b
      scope: keyword.control.go

  match-keyword-if:
    - match: \bif\b
      scope: keyword.control.go

  match-keyword-import:
    - match: \bimport\b
      scope: keyword.other.import.go

  match-keyword-interface:
    - match: (?=\binterface\b)
      scope: storage.type.go
      push: pop-interface

  match-keyword-map:
    - match: (?=\bmap\b)
      push: pop-map

  match-keyword-package:
    - match: \bpackage\b
      scope: keyword.other.package.go

  match-keyword-range:
    - match: \brange\b
      scope: keyword.other.go

  match-keyword-return:
    - match: \breturn\b
      scope: keyword.control.go

  match-keyword-select:
    - match: \bselect\b
      scope: keyword.control.go

  match-keyword-struct:
    - match: (?=\bstruct\b)
      push: pop-struct

  match-keyword-switch:
    - match: \bswitch\b
      scope: keyword.control.go

  match-keyword-type:
    - match: \btype\b
      scope: storage.type.go
      push:
        - include: match-comments

        - match: \(
          scope: punctuation.section.parens.begin.go
          set:
            - match: \)
              scope: punctuation.section.parens.end.go
              pop: true
            - match: \b_\b
              push:
                - match: (?=\))
                  pop: true
                - include: pop-type-alias-or-typedef
            - match: '{{ident}}'
              scope: entity.name.type.go
              push:
                - match: (?=\))
                  pop: true
                - include: pop-type-alias-or-typedef
            - include: match-any

        - match: \b_\b
          set: pop-type-alias-or-typedef
        - match: '{{ident}}'
          scope: entity.name.type.go
          set: pop-type-alias-or-typedef

        - include: pop-before-nonblank

  match-keyword-var:
    - match: \bvar\b
      scope: storage.modifier.var.go
      push:
        - match: \(
          scope: punctuation.section.parens.begin.go
          set:
            - match: \)
              scope: punctuation.section.parens.end.go
              pop: true

            - match: \b_\b(?={{noise}},)
            - match: '{{ident}}(?={{noise}},)'
              scope: variable.declaration.go

            - match: \b_\b
              push: pop-var-type-and-or-assignment
            - match: '{{ident}}'
              scope: variable.declaration.go
              push: pop-var-type-and-or-assignment

            - include: match-any

        - include: match-comments
        - include: match-comma

        - match: \b_\b(?={{noise}},)
        - match: '{{ident}}(?={{noise}},)'
          scope: variable.declaration.go

        - match: \b_\b
          set: pop-var-type-and-or-assignment
        - match: '{{ident}}'
          scope: variable.declaration.go
          set: pop-var-type-and-or-assignment

        - include: pop-before-nonblank

  pop-func-signature:
    - include: match-comments
    - match: \b_\b
      set: pop-func-parameter-and-return-lists
    - match: '{{ident}}'
      scope: entity.name.function.go
      set: pop-func-parameter-and-return-lists
    - include: pop-before-nonblank

  # https://golang.org/ref/spec#Function_types
  #
  # Go has two parameter syntaxes: unnamed and named.
  #
  # Unnamed:
  #
  #   (int)
  #   (int, int)
  #   (int, int, ...int)
  #
  # Named:
  #
  #   (a int)
  #   (a, b int)
  #   (a, b ...int)
  #   (a int, b int)
  #   (a, b int, c ...int)
  #
  # The modes are distinct: either all named, or all unnamed.
  #
  # Gotchas:
  #
  #   parameters can span multiple lines
  #   a type can span multiple lines (anonymous struct, interface, etc.)
  #   parameter groups AND parameter names are comma-separated
  #   `chan type` is a type that looks like an identifier followed by a type
  #
  # I have an impression that with the current syntax engine, it's impossible to
  # perfectly parse some parameter lists, particularly ones that are named,
  # multiline, and have name groups. We're still trying to cover as many edge
  # cases as possible.
  pop-func-parameter-and-return-lists:
    - include: match-comments
    - match: (?=\()
      set: [pop-func-return-signature, pop-func-parameter-list]
    - include: pop-before-nonblank

  pop-func-return-signature:
    - include: pop-on-terminator
    - include: match-comments
    - match: (?=\()
      set: pop-func-parameter-list
    - match: (?=\S)
      set: pop-type

  pop-func-parameter-list:
    - include: match-comments
    - match: \(
      scope: punctuation.section.parens.begin.go
      set:
        - include: match-comments
        - match: |
            (?x)
            (?=
              (?:{{noise}}{{ident}}{{noise}},{{noise}})*
              {{ident}}{{noise}}(?:\.\.\.|[^\s/,).])
            )
          set: pop-parameter-list-named
        - match: (?=\S)
          set: pop-parameter-list-unnamed
    - include: pop-before-nonblank

  pop-parameter-list-named:
    - match: \)
      scope: punctuation.section.parens.end.go
      pop: true
    - include: match-comments
    - include: match-keywords
    - include: match-comma
    - include: match-ellipsis
    - match: \b_\b
      push: pop-parameter-type
    - match: '{{ident}}'
      scope: variable.parameter.go
      push: pop-parameter-type

  pop-parameter-type:
    - match: (?=\)|,)
      pop: true
    - include: match-ellipsis
    - include: pop-type

  pop-parameter-list-unnamed:
    - match: \)
      scope: punctuation.section.parens.end.go
      pop: true
    - include: match-comments
    - include: match-keywords
    - include: match-comma
    - include: match-ellipsis
    - match: (?=\S)
      push: pop-type

  pop-before-nonblank:
    - match: (?=\S)
      pop: true

  pop-on-semicolon:
    - match: ;
      scope: punctuation.terminator.go
      pop: true

  pop-on-terminator:
    - include: pop-on-semicolon
    - match: $
      pop: true

  pop-type:
    - include: pop-on-semicolon
    - include: match-comments

    # Note: Go allows wrapping types in an arbitrary number of parens.
    - match: \(
      scope: punctuation.section.parens.begin.go
      push: [pop-type-nested-in-parens, pop-type]

    - match: \[
      scope: punctuation.section.brackets.begin.go
      set:
        - match: \]
          scope: punctuation.section.brackets.end.go
          set: pop-type
        - include: match-any

    - include: match-operators

    - match: (?=\bchan\b)
      set: pop-chan
    - match: (?=\binterface\b)
      set: pop-interface
    - match: (?=\bmap\b)
      set: pop-map
    - match: (?=\bstruct\b)
      set: pop-struct
    - match: \bfunc\b
      scope: storage.type.func.go
      set: pop-func-parameter-and-return-lists
    - match: (?={{ident}})
      set: pop-named-type

    - include: pop-before-nonblank

  pop-type-nested-in-parens:
    - match: \)
      scope: punctuation.section.parens.end.go
      pop: true
    - include: pop-type

  pop-struct:
    - match: \bstruct\b
      scope: storage.type.go
      set:
        - include: match-comments
        - match: \{
          scope: punctuation.section.braces.begin.go
          set:
            - meta_scope: meta.type.go

            - match: \}
              scope: punctuation.section.braces.end.go
              pop: true

            - include: match-keywords
            - include: match-star

            - match: '{{ident}}(?={{noise}}\.)'
              scope: variable.other.go
            - match: \.
              scope: punctuation.accessor.dot.go
            - match: '{{ident}}(?={{noise}}(?:"|`|//|;|\}|$))'
              scope: entity.other.inherited-class.go

            - match: '{{ident}}'
              scope: variable.other.member.declaration.go
              push:
                - match: (?=\})
                  pop: true
                - include: pop-on-terminator
                - include: match-comments
                - include: pop-type
                - include: match-any

            - include: match-any

        - include: pop-before-nonblank

  pop-interface:
    - match: \binterface\b
      scope: storage.type.go
      set:
        - include: match-comments
        - match: \{
          scope: punctuation.section.braces.begin.go
          set:
            - meta_scope: meta.type.go
            - match: \}
              scope: punctuation.section.braces.end.go
              pop: true

            - include: match-keywords
            - include: match-star

            - match: '{{ident}}(?={{noise}}\.)'
              scope: variable.other.go
            - match: \.
              scope: punctuation.accessor.dot.go
            - match: '{{ident}}(?={{noise}}(?://|;|\}|$))'
              scope: entity.other.inherited-class.go

            - match: '{{ident}}(?={{noise}}\()'
              scope: entity.name.function.go
              push:
                - match: (?=\})
                  pop: true
                - include: pop-func-parameter-and-return-lists

            - include: match-any
        - include: pop-before-nonblank

  pop-map:
    # Note: newlines between `map` and `[` are ok, but newlines after `]`
    # terminate the type.
    - match: \bmap\b
      scope: storage.type.go
      set:
        - include: match-comments
        - include: pop-on-semicolon
        - match: \[
          scope: punctuation.section.brackets.begin.go
          set:
            - match: \]
              scope: punctuation.section.brackets.end.go
              set:
                - include: pop-on-terminator
                - include: pop-type
            - include: match-comments
            - match: (?=\S)
              push:
                - match: (?=\])
                  pop: true
                - include: pop-type
        - include: pop-type

  # Note: newlines between `chan`, subsequent arrow, and subsequent type, are
  # perfectly ok.
  pop-chan:
    - match: \bchan\b
      scope: storage.type.go
      set: pop-type

  pop-named-type:
    - include: match-comments
    - match: \b_\b
      pop: true
    - match: '{{ident}}(?={{noise}}\.)'
      scope: variable.other.go
    - match: \.
      scope: punctuation.accessor.dot.go
    - match: '{{ident}}'
      scope: storage.type.go
      pop: true
    - include: pop-before-nonblank

  pop-type-alias-or-typedef:
    - include: pop-on-terminator
    - include: match-comments
    # Newlines after `=` are ok.
    - match: =
      scope: keyword.operator.assignment.go
      set: pop-type
    - match: (?=\S)
      set: pop-type

  pop-const-type-and-or-assignment:
    - include: pop-on-terminator
    - include: match-comments
    - match: =
      scope: keyword.operator.assignment.go
      set: pop-const-expressions
    - match: (?=\S)
      set: [pop-const-assignment-or-terminate, pop-type]

  pop-const-assignment-or-terminate:
    - include: pop-on-terminator
    - include: match-comments
    - match: =
      scope: keyword.operator.assignment.go
      set: pop-const-expressions
    - include: pop-before-nonblank

  # Note: this doesn't support multiline expressions.
  #
  # Note on iota support. See https://golang.org/ref/spec#Iota. `iota` is a
  # regular identifier that happens to be predeclared in constant initialization
  # expressions, and not anywhere else. Just like `true|false|nil`, you can
  # redefine it, eliminating the magic constant for the rest of the package.
  pop-const-expressions:
    - include: pop-on-semicolon
    - include: match-comments
    - match: (?=\S)
      set:
        - include: pop-on-terminator
        - match: \biota\b
          scope: constant.numeric.integer.go
        - include: match-any

  pop-var-type-and-or-assignment:
    - include: pop-on-terminator
    - include: match-comments
    - match: =
      scope: keyword.operator.assignment.go
      set: pop-var-expressions
    - match: (?=\S)
      set: [pop-var-assignment-or-terminate, pop-type]

  pop-var-assignment-or-terminate:
    - include: pop-on-terminator
    - include: match-comments
    - match: =
      scope: keyword.operator.assignment.go
      set: pop-var-expressions
    - include: pop-before-nonblank

  # Note: this doesn't support multiline expressions.
  pop-var-expressions:
    - include: pop-on-semicolon
    - include: match-comments
    - match: (?=\S)
      set:
        - include: pop-on-terminator
        - include: match-any

  pop-type-assertion:
    - match: \(
      scope: punctuation.section.parens.begin.go
      set:
        - match: \)
          scope: punctuation.section.parens.end.go
          pop: true
        - include: pop-type

  pop-member:
    - match: \b_\b
      pop: true
    - match: '{{ident}}'
      scope: variable.other.member.go
      pop: true

  pop-first-argument-as-type:
    - include: match-comments
    - match: \(
      scope: punctuation.section.parens.begin.go
      set:
        - match: \)
          scope: punctuation.section.parens.end.go
          pop: true
        - include: match-comments
        - match: (?=\S)
          set: pop-type
    - include: pop-on-terminator
    - include: pop-before-nonblank
