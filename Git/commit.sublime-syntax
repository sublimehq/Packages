%YAML 1.2
---
# Highlight regular git commits, merge commits, and tags.

name: Git Commit
file_extensions:
  - COMMIT_EDITMSG
  - MERGE_MSG
  - TAG_EDITMSG
scope: source.git.commit

contexts:
  prototype:
    - include: comments

  main:
    # first none comment line is commit subject
    - meta_scope: meta.subject.git.commit markup.heading.subject.git.commit
    - match: \n
      set: [commit-message, commit-separator]

  commit-separator:
    # empty line between subject and message
    - match: \n
      pop: true
    - match: '[^\n]+'
      scope: invalid.illegal.empty-line-expected.git.commit

  commit-message:
    # all none comment lines after subject belong to the message
    - clear_scopes: 2  # meta.subject markup.heading
    - meta_scope: meta.message.git.commit text.plain.message.git.commit

  comments:
    - match: ^\s*(#)
      captures:
        1: punctuation.definition.comment.git.commit
      push:
        - clear_scopes: 2  # meta.heading markup.heading | meta.message text.plain
        - meta_include_prototype: false
        - meta_scope: comment.line.git.commit
        - match: \n
          pop: true
        - include: change-list
        - include: branch-line
        - include: date-line

  branch-line:
    - match: \bOn branch\s+(.*)
      captures:
        1: support.type.branch-name.git.commit

  change-list:
    # list header
    - match: \bChanges to be committed(?=\s*:)
      scope: markup.heading.change-list.git.commit
    # list body
    - match: (new file)\s*(:)\s*(.*)
      scope: meta.change-list.git.commit
      captures:
        1: keyword.other.change-list.git.commit
        2: punctuation.separator.mapping.pair.change-list.git.commit
        3: string.unquoted.git.commit markup.inserted.file.git.commit
    - match: (modified)\s*(:)\s*(.*)
      scope: meta.change-list.git.commit
      captures:
        1: keyword.other.change-list.git.commit
        2: punctuation.separator.mapping.pair.change-list.git.commit
        3: string.unquoted.git.commit markup.changed.file.git.commit
    - match: (deleted)\s*(:)\s*(.*)
      scope: meta.change-list.git.commit
      captures:
        1: keyword.other.change-list.git.commit
        2: punctuation.separator.mapping.pair.change-list.git.commit
        3: string.unquoted.git.commit markup.deleted.file.git.commit

  # apply a meta scope to the commit date
  date-line:
    - match: \bDate\s*(:)\s*(.*)
      captures:
        1: punctuation.separator.date.git.commit
        2: meta.commit-date.git.commit
