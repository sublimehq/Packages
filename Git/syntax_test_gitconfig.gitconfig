# SYNTAX TEST "Packages/Git/gitconfig.sublime-syntax"
# <- source.gitconfig comment.line punctuation.definition.comment

# COMMENT TEST
# <- comment.line punctuation.definition.comment
#^^^^^^^^^^^^^ comment.line
; this is a comment
# <- comment.line punctuation.definition.comment
#^^^^^^^^^^^^^^^^^^ comment.line

# SECTION HEADER TESTS
[section]
# <- meta.brackets punctuation.definition.brackets.begin
#^^^^^^^ meta.brackets entity.name
#       ^ meta.brackets punctuation.definition.brackets.end
#        ^ -meta.brackets
[section "subsection"]
# <- meta.brackets punctuation.definition.brackets.begin
#^^^^^^^^^^^^^ meta.brackets
#^^^^^^^ entity.name
#        ^^^^^^^^^^^^ string.quoted.double
#        ^ punctuation.definition.string.begin
#                   ^ punctuation.definition.string.end
#                    ^ punctuation.definition.brackets.end
[section \"subsection"]
# <- meta.brackets punctuation.definition.brackets.begin
#^^^^^^^^^^^^^ meta.brackets
#^^^^^^^ entity.name
#        ^ invalid.illegal
[section "\slashes\are\legal"]
#        ^^^^^^^^^^^^^^^^^ string.quoted.double
#        ^ punctuation.definition.string.begin
#         ^ -invalid.illegal
#                 ^ -invalid.illegal
#                     ^ -invalid.illegal
#                           ^ punctuation.definition.string.end

[section "slash prevents string from terminating\"]   "] # end the test
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.double
[sec\tion]
#   ^ invalid.illegal

# COLOR TESTS
[color "diff"]
# <- meta.brackets punctuation.definition.brackets.begin
#^^^^^^^^^^^^^ meta.brackets
#^^^^^ entity.name
#      ^^^^^^ string.quoted.double
#      ^ punctuation.definition.string.begin
#           ^ punctuation.definition.string.end
#            ^ punctuation.definition.brackets.end
#             ^ -meta.brackets
    old = red
# <- meta.mapping
#^^^^^^^^^^^^ meta.mapping
#   ^^^ variable.other.readwrite
#      ^ -variable.other.readwrite
#       ^ keyword.operator.assignment
#        ^ -keyword.operator.assignment
#         ^^^ meta.mapping.value support.constant.color
    new = #00aa00 # this should be a comment
# <- meta.mapping
#^^^^^^^^^^^^^^^^ meta.mapping
#   ^^^ variable.other.readwrite
#      ^ -variable.other.readwrite
#       ^ keyword.operator.assignment
#        ^ -keyword.operator.assignment
#         ^ comment.line punctuation.definition.comment
#          ^^^^^^^ comment.line
    commit = bold yellow
# <- meta.mapping
#^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping
#   ^^^^^^ variable.other.readwrite
#         ^ -variable.other.readwrite
#          ^ keyword.operator.assignment
#           ^ -keyword.operator.assignment
#            ^^^^^^^^^^^ meta.mapping.value
#            ^^^^ support.constant.color-attribute
#                 ^^^^^^ support.constant.color
    commit = yellow 0
#            ^^^^^^ support.constant.color
#                   ^ constant.other.color.rgb-value
    commit = yellow 99
#            ^^^^^^ support.constant.color
#                   ^^ constant.other.color.rgb-value
    commit = yellow 100
#            ^^^^^^ support.constant.color
#                   ^^^ constant.other.color.rgb-value
    commit = yellow 123
#            ^^^^^^ support.constant.color
#                   ^^^ constant.other.color.rgb-value
    commit = yellow 199
#            ^^^^^^ support.constant.color
#                   ^^^ constant.other.color.rgb-value
    commit = yellow 255
#            ^^^^^^ support.constant.color
#                   ^^^ constant.other.color.rgb-value
    commit = yellow255
#            ^^^^^^ -support.constant.color
#                  ^^^ -constant.other.color.rgb-value
    commit = yellow 256
#                   ^^^ -constant.other.color.rgb-value
    commit = yellow 01
#                   ^^ -constant.other.color.rgb-value
    commit = yellow 999
#                   ^^^ -constant.other.color.rgb-value

# ESCAPE TESTS
[escapes]
    quoted = "\\ \" \b \n \t"
#^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping
#   ^^^^^^ variable.other.readwrite
#          ^ keyword.operator.assignment
#            ^^^^^^^^^^^^^^^^ meta.mapping.value string.quoted.double
#             ^^ constant.character.escape
#                ^^ constant.character.escape
#                   ^^ constant.character.escape
#                      ^^ constant.character.escape
#                         ^^ constant.character.escape
    unquoted = \\ \" \b \n \t \
#              ^^ constant.character.escape
#                 ^^ constant.character.escape
#                    ^^ constant.character.escape
#                       ^^ constant.character.escape
#                          ^^ constant.character.escape
#                             ^ constant.character.escape
    trailing-slash = \  # comments not legal after trailing slash
#                    ^^ invalid.illegal.escape

# BOOLEAN TESTS
[bools]
    foo = true
#^^^^^^^^^^^^^ meta.mapping
#   ^^^ variable.other.readwrite
#       ^ keyword.operator.assignment
#         ^^^^ meta.mapping.value constant.language
    foo = false
#^^^^^^^^^^^^^^ meta.mapping
#   ^^^ variable.other.readwrite
#       ^ keyword.operator.assignment
#         ^^^^^ meta.mapping.value constant.language
    foo = on
#^^^^^^^^^^^ meta.mapping
#   ^^^ variable.other.readwrite
#       ^ keyword.operator.assignment
#         ^^ meta.mapping.value constant.language
    foo = off
#^^^^^^^^^^^^ meta.mapping
#   ^^^ variable.other.readwrite
#       ^ keyword.operator.assignment
#         ^^^ meta.mapping.value constant.language
    foo = no
#^^^^^^^^^^^ meta.mapping
#   ^^^ variable.other.readwrite
#       ^ keyword.operator.assignment
#         ^^ meta.mapping.value constant.language
    foo = yes
#^^^^^^^^^^^^ meta.mapping
#   ^^^ variable.other.readwrite
#       ^ keyword.operator.assignment
#         ^^^ meta.mapping.value constant.language

# STRAY CHARACTER TEST
[stray-bracket]]
#              ^ invalid.illegal.gitconfig
[stray-chars]asdf
#            ^^^^ invalid.illegal.gitconfig
[valid-trailing-comment]# comments should not match as illegal characters
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal.gitconfig
[valid-trailing-space]  # trailing space should not match as illegal characters
#                     ^^ -invalid.illegal.gitconfig

# STRING TESTS
[strings]
    foo = "foo"
#         ^^^^^ meta.mapping.value string.quoted.double
#         ^ punctuation.definition.string.begin
#             ^ punctuation.definition.string.end
    foo = \"foo\"
#         ^^^^^^^ meta.mapping.value
#         ^^ constant.character.escape
#           ^^^ string.unquoted.value -string.quoted.double
#              ^^ constant.character.escape
    foo = 'foo'
#         ^^^^^ meta.mapping.value string.unquoted.value -string.quoted
    foo = \'foo\'
#         ^^ invalid.illegal.escape
#           ^^^ meta.mapping.value string.unquoted
#              ^^ invalid.illegal.escape
    foo = foo#bar
#         ^^^ meta.mapping.value string.unquoted.value
#            ^ punctuation.definition.comment
#            ^^^^ comment.line
    foo = 'foo#bar'
#         ^^^^ string.unquoted.value
#             ^ punctuation.definition.comment
#             ^^^^^ comment.line
    foo = \"foo#bar\"
#         ^^ constant.character.escape
#           ^^^ string.unquoted.value
#              ^ punctuation.definition.comment
#              ^^^^^^ comment.line
    foo = 'hello#foo'
#         ^^^^^^ string.unquoted.value
#               ^ punctuation.definition.comment
#               ^^^^^ comment.line
    foo = 'hello\"
#         ^^^^^^ string.unquoted.value
#               ^^ constant.character.escape
    foo = \
          hello
#         ^^^^^ string.unquoted.value
    foo = "foo#bar"
#         ^ punctuation.definition.string.begin
#         ^^^^^^^^^ string.quoted.double
#                 ^ punctuation.definition.string.end
    foo = #123123
#         ^ punctuation.definition.comment
#         ^^^^^^^ comment.line
    foo = \hello
#         ^^ invalid.illegal.escape
    foo = \\hello
#         ^^ constant.character.escape
#           ^^^^^ string.unquoted.value
    foo = hello \ # comments not legal after trailing slash
#               ^^ invalid.illegal.escape
    foo = multi \
#         ^^^^^ string.unquoted.value
#               ^ constant.character.escape
          line
#         ^^^^ string.unquoted.value

    foo = "multi\
          line"
#         ^^^^^ string.quoted.double
#             ^ punctuation.definition.string.end
    foo = "invalid
          multi
          line
          "

# REAL WORLD SAMPLE TESTS
[alias]
# <- meta.brackets punctuation.definition.brackets.begin
#^^^^^^ meta.brackets
#^^^^^ entity.name
#     ^ punctuation.definition.brackets.end
    branch-author = for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)'
# <- meta.mapping
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping
#   ^^^^^^^^^^^^^ variable.other.readwrite
#                ^ -variable.other.readwrite
#                 ^ keyword.operator.assignment
#                  ^ -keyword.operator.assignment
#                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value
#                   ^^^^^^^^^^^^ string.unquoted.value

    fatch = fetch --all --prune --tags
# <- meta.mapping
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping
#   ^^^^^ variable.other.readwrite
#        ^ -variable.other.readwrite
#         ^ keyword.operator.assignment
#          ^ -keyword.operator.assignment
#           ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value
#           ^^^^^ string.unquoted.value
#                 ^^^^^ string.unquoted.value
#                       ^^^^^^^ string.unquoted.value
#                               ^^^^^^ string.unquoted.value
    lgrep = log -1 -E -i --grep
# <- meta.mapping
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping
#   ^^^^^ variable.other.readwrite
#        ^ -variable.other.readwrite
#         ^ keyword.operator.assignment
#          ^ -keyword.operator.assignment
#           ^^^^^^^^^^^^^^^^^^^ meta.mapping.value
#           ^^^ string.unquoted.value
#               ^^ string.unquoted.value
#                  ^^ string.unquoted.value
#                     ^^ string.unquoted.value
#                        ^^^^^^ string.unquoted.value

    pushf = push --force-with-lease
# <- meta.mapping
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping
#   ^^^^^ variable.other.readwrite
#        ^ -variable.other.readwrite
#         ^ keyword.operator.assignment
#          ^ -keyword.operator.assignment
#           ^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value
#           ^^^^ string.unquoted.value
#                ^^^^^^^^^^^^^^^^^^ string.unquoted.value
    sla = log --oneline --decorate --graph --all
# <- meta.mapping
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping
#   ^^^ variable.other.readwrite
#      ^ -variable.other.readwrite
#       ^ keyword.operator.assignment
#        ^ -keyword.operator.assignment
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value
#         ^^^ string.unquoted.value
#             ^^^^^^^^^
#                       ^^^^^^^^^^ string.unquoted.value
#                                  ^^^^^^^ string.unquoted.value
#                                          ^^^^^ string.unquoted.value
