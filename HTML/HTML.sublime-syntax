%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
# https://html.spec.whatwg.org/multipage/syntax.html
name: HTML
scope: text.html.basic
version: 2

extends: HTML (Plain).sublime-syntax

file_extensions:
  - html
  - htm
  - shtml
  - xhtml

first_line_match: (?i)<(!DOCTYPE\s*)?html

###############################################################################

variables:
  # HTML tags
  # https://developer.mozilla.org/en-US/docs/Web/HTML/Element
  # Note: Sections are sorted by expected frequency.

  html_block_tags: |-
    (?x:
      {{html_text_content_tags}}
    | {{html_section_tags}}
    | {{html_embedded_tags}}
    | {{html_script_tags}}
    | {{html_web_tags}}
    | {{html_header_tags}}
    | {{html_deprecated_tags}}
    )

  html_block_tags_selfclosing: |-
    (?x:
      {{html_text_content_tags_selfclosing}}
    | {{html_embedded_tags_selfclosing}}
    )

  html_inline_tags: |-
    (?x:
      {{html_text_semantic_tags}}
    | {{html_markup_tags}}
    | {{html_media_tags}}
    | {{html_interactive_tags}}
    )

  html_inline_tags_selfclosing: |-
    (?x:
      {{html_text_semantic_tags_selfclosing}}
    | {{html_media_tags_selfclosing}}
    )

  # Aggregates structural root notes from
  # https://developer.mozilla.org/en-US/docs/Web/HTML/Element#main_root
  # https://developer.mozilla.org/en-US/docs/Web/HTML/Element#document_metadata
  # https://developer.mozilla.org/en-US/docs/Web/HTML/Element#sectioning_root
  html_structure_tags: |-
    (?xi: html | head | body ){{tag_name_break}}

  # Note:
  #  <head> is moved to `html_structure_tags`
  #  <script> and <style> are handled by dedicated matches
  html_header_tags: |-
    (?xi: base (?# | script | style ) | title ){{tag_name_break}}
  html_header_tags_selfclosing: |-
    (?xi: link | meta ){{tag_name_break}}

  html_section_tags: |-
    (?xi:
      address | article | aside | footer | header | h1 | h2 | h3 | h4 | h5 | h6
    | hgroup | main | nav | section
    ){{tag_name_break}}

  html_text_content_tags: |-
    (?xi:
      blockquote | cite | dd | dt | dl | div | figcaption | figure | li
    | ol | p | pre | ul
    ){{tag_name_break}}
  html_text_content_tags_selfclosing: |-
    (?xi: hr ){{tag_name_break}}

  html_text_semantic_tags: |-
    (?xi:
      a | abbr | b | bdi | bdo | code | data | time | dfn | em | i | kbd
    | mark | q | rb | ruby | rp | rt | rtc | s | samp | small | span | strong
    | sub | sup | u | var | wbr
    ){{tag_name_break}}
  html_text_semantic_tags_selfclosing: |-
    (?xi: br ){{tag_name_break}}

  html_media_tags: |-
    (?xi: audio | map | video ){{tag_name_break}}
  html_media_tags_selfclosing: |-
    (?xi: area | img | track ){{tag_name_break}}

  html_embedded_tags: |-
    (?xi: iframe | object | picture ){{tag_name_break}}
  html_embedded_tags_selfclosing: |-
    (?xi: embed | param | source ){{tag_name_break}}

  html_script_tags: |-
    (?xi: canvas | noscript (?# | script ) ){{tag_name_break}}

  html_markup_tags: |-
    (?xi: del | ins ){{tag_name_break}}

  html_table_tags: |-
    (?xi:
      caption | colgroup | table | tbody | tr | td | tfoot | th | thead
    ){{tag_name_break}}
  html_table_tags_selfclosing: |-
    (?xi: col ){{tag_name_break}}

  html_forms_tags: |-
    (?xi:
      button | datalist | option | fieldset | label | form | legend
    | meter | optgroup | select | output | progress | textarea
    ){{tag_name_break}}
  html_forms_tags_selfclosing: |-
    (?xi: input ){{tag_name_break}}

  html_interactive_tags: |-
    (?xi: details | dialog | menu | summary ){{tag_name_break}}

  html_web_tags: |-
    (?xi: slot | template ){{tag_name_break}}

  html_deprecated_tags: |-
    (?xi:
      acronym | applet | basefont | bgsound | big | blink | center | command
    | content | dir | element | font | frame | frameset | image | isindex
    | keygen | listing | marquee | menuitem | multicol | nextid | nobr
    | noembed | noframes | plaintext | shadow | spacer | strike | tt | xmp
    ){{tag_name_break}}

  javascript_mime_type: |-
    (?ix:
      # https://mimesniff.spec.whatwg.org/#javascript-mime-type
      (?:application|text)/(?:x-)?(?:java|ecma)script
      | text/javascript1\.[0-5]
      | text/jscript
      | text/livescript
    )

  script_close_lookahead: (?=(?:-->\s*)?</(?i:script){{tag_name_break_char}})
  style_close_lookahead: (?=</(?i:style){{tag_name_break_char}})

###############################################################################

contexts:

  tag:
    - include: tag-html
    - include: tag-other
    - include: tag-incomplete

  tag-html:
    - include: tag-html-script
    - include: tag-html-style
    - include: tag-html-any-closing
    - include: tag-html-any-opening
    - include: tag-html-any-selfclosing

###[ HTML TAG ]###############################################################

  tag-html-any-closing:
    - match: |-
        (?x)
        (</)
        (?:
          ({{html_inline_tags}})
        | ({{html_block_tags}})
        | ({{html_table_tags}})
        | ({{html_forms_tags}})
        | ({{html_structure_tags}})
        )
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.html
        3: entity.name.tag.block.html
        4: entity.name.tag.table.html
        5: entity.name.tag.form.html
        6: entity.name.tag.structure.html
      push: tag-html-any-closing-attributes

  tag-html-any-closing-attributes:
    - meta_include_prototype: false
    - meta_scope: meta.tag.html.closing.html
    - include: tag-end

  tag-html-any-opening:
    - match: |-
        (?x)
        (<)
        (?:
          ({{html_inline_tags}})
        | ({{html_block_tags}})
        | ({{html_table_tags}})
        | ({{html_forms_tags}})
        | ({{html_structure_tags}})
        )
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.html
        3: entity.name.tag.block.html
        4: entity.name.tag.table.html
        5: entity.name.tag.form.html
        6: entity.name.tag.structure.html
      push: tag-html-any-opening-attributes

  tag-html-any-opening-attributes:
    - meta_scope: meta.tag.html.opening.html
    - include: tag-end
    - include: tag-attributes

  tag-html-any-selfclosing:
    - match: |-
        (?x)
        (<)
        (?:
          ({{html_inline_tags_selfclosing}})
        | ({{html_block_tags_selfclosing}})
        | ({{html_table_tags_selfclosing}})
        | ({{html_forms_tags_selfclosing}})
        )
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.html
        3: entity.name.tag.block.html
        4: entity.name.tag.table.html
        5: entity.name.tag.form.html
      push: tag-html-any-selfclosing-attributes

  tag-html-any-selfclosing-attributes:
    - meta_scope: meta.tag.html.selfclosing.html
    - include: tag-end-maybe-self-closing
    - include: tag-attributes

###[ OTHER TAG ]##############################################################

  tag-other:
    - match: <(?=[A-Za-z])
      scope: punctuation.definition.tag.begin.html
      push:
        - tag-other-opening
        - tag-other-name
    - match: </(?=[A-Za-z])
      scope: punctuation.definition.tag.begin.html
      push:
        - tag-other-closing
        - tag-other-name

  tag-other-name:
    - meta_content_scope: entity.name.tag.other.html
    - match: '{{tag_name_break}}'
      pop: 1

  tag-other-opening:
    - meta_scope: meta.tag.other.opening.html
    - include: tag-end-maybe-self-closing
    - include: tag-attributes

  tag-other-closing:
    - meta_include_prototype: false
    - meta_scope: meta.tag.other.closing.html
    - include: tag-end

###[ HTML SCRIPT TAG ]########################################################

  tag-html-script:
    - match: (<)((?i:script)){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.html
      push: script-javascript

  script-javascript:
    - meta_scope: meta.tag.html.opening.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set:
        - include: script-close-tag
        - include: script-javascript-content
    - include: script-common

  script-javascript-content:
    - match: (?=\S)
      embed: scope:source.js
      embed_scope: source.js.embedded.html
      escape: '{{script_close_lookahead}}'

  script-html:
    - meta_scope: meta.tag.html.opening.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set:
        - meta_content_scope: text.html.embedded.html
        - include: comment
        - include: script-close-tag
        - include: main
    - include: script-common

  script-other:
    - meta_scope: meta.tag.html.opening.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: script-close-tag
    - include: script-common

  script-close-tag:
    - match: <!--
      scope: comment.block.html punctuation.definition.comment.begin.html
    - match: '{{script_close_lookahead}}'
      set:
        - match: -->
          scope: comment.block.html punctuation.definition.comment.end.html
        - match: (</)((?i:script){{tag_name_break}})
          captures:
            1: punctuation.definition.tag.begin.html
            2: entity.name.tag.block.html
          set:
            - meta_scope: meta.tag.html.closing.html
            - include: tag-end
            - include: tag-attributes

  script-common:
    - include: script-type-attribute
    - include: tag-attributes
    - include: tag-end

  script-type-attribute:
    - match: (?i:type){{attribute_name_break}}
      scope: entity.other.attribute-name.html
      set:
        - meta_scope: meta.tag.html.opening.html meta.attribute-with-value.html
        - match: =
          scope: punctuation.separator.key-value.html
          set:
            - meta_content_scope: meta.tag.html.opening.html meta.attribute-with-value.html
            - include: script-type-decider
        - match: (?=\S)
          set: script-javascript

  script-type-decider:
    - match: (?={{javascript_mime_type}}{{unquoted_attribute_break}}|'{{javascript_mime_type}}'|"{{javascript_mime_type}}")
      set:
        - script-javascript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=(?i:module{{unquoted_attribute_break}}|'module'|"module"))
      set:
        - script-javascript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=>|''|"")
      set:
        - script-javascript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=(?i:text/html{{unquoted_attribute_break}}|'text/html'|"text/html"))
      set:
        - script-html
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=\S)
      set:
        - script-other
        - tag-generic-attribute-meta
        - tag-generic-attribute-value

###[ HTML STYLE TAG ]#########################################################

  tag-html-style:
    - match: (<)((?i:style)){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.html
      push: style-css

  style-css:
    - meta_scope: meta.tag.html.opening.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set:
        - include: style-close-tag
        - include: style-css-content
    - include: style-common

  style-css-content:
    - match: ''
      embed: scope:source.css
      embed_scope: source.css.embedded.html
      escape: '{{style_close_lookahead}}'

  style-other:
    - meta_scope: meta.tag.html.opening.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-close-tag
    - include: style-common

  style-close-tag:
    - match: (</)((?i:style){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.html
      set:
        - meta_scope: meta.tag.html.closing.html
        - include: tag-end
        - include: tag-attributes

  style-common:
    - include: style-type-attribute
    - include: tag-attributes
    - include: tag-end

  style-type-attribute:
    - match: (?i:type){{attribute_name_break}}
      scope: entity.other.attribute-name.html
      set:
        - meta_scope: meta.tag.html.opening.html meta.attribute-with-value.html
        - match: =
          scope: punctuation.separator.key-value.html
          set:
            - meta_content_scope: meta.tag.html.opening.html meta.attribute-with-value.html
            - include: style-type-decider
        - match: (?=\S)
          set: style-css

  style-type-decider:
    - match: (?=(?i:text/css{{unquoted_attribute_break}}|'text/css'|"text/css"))
      set:
        - style-css
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=>|''|"")
      set:
        - style-css
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=\S)
      set:
        - style-other
        - tag-generic-attribute-meta
        - tag-generic-attribute-value

###[ ATTRIBUTES ]#############################################################

  # This is to prevent breaking syntaxes referencing the old context name
  tag-stuff:
    - include: tag-attributes

  tag-attributes:
    - include: tag-id-attribute
    - include: tag-class-attribute
    - include: tag-style-attribute
    - include: tag-event-attribute
    - include: tag-href-attribute
    - include: tag-generic-attribute

  tag-attribute-value-separator-double-quoted:
    - match: (?=[{{ascii_space}}])
      push:
        - clear_scopes: 3 # clear `meta.class-name` or `meta.toc-list.id`
        - meta_include_prototype: false
        - meta_scope: meta.string.html string.quoted.double.html
        - include: else-pop

  tag-attribute-value-separator-single-quoted:
    - match: (?=[{{ascii_space}}])
      push:
        - clear_scopes: 3 # clear `meta.class-name` or `meta.toc-list.id`
        - meta_include_prototype: false
        - meta_scope: meta.string.html string.quoted.single.html
        - include: else-pop

###[ CLASS ATTRIBUTE ]########################################################

  tag-class-attribute:
    - match: (?i:class){{attribute_name_break}}
      scope: entity.other.attribute-name.class.html
      push:
        - tag-class-attribute-meta
        - tag-class-attribute-assignment

  tag-class-attribute-meta:
    - meta_include_prototype: false
    - meta_scope: meta.attribute-with-value.class.html
    - include: immediately-pop

  tag-class-attribute-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-class-attribute-value
    - include: else-pop

  tag-class-attribute-value:
    - match: \"
      scope:
        meta.string.html string.quoted.double.html
        punctuation.definition.string.begin.html
      set: tag-class-attribute-value-double-quoted-content
    - match: \'
      scope:
        meta.string.html string.quoted.single.html
        punctuation.definition.string.begin.html
      set: tag-class-attribute-value-single-quoted-content
    - match: '{{unquoted_attribute_start}}'
      set: tag-class-attribute-value-unquoted-content
    - include: else-pop

  tag-class-attribute-value-double-quoted-content:
    # See HTML (Plain).sublime-syntax for why prototype is excluded
    - meta_include_prototype: false
    - meta_content_scope: meta.class-name.html meta.string.html string.quoted.double.html
    - include: strings-double-quoted-end
    - include: tag-class-attribute-value-quoted-content
    - include: tag-attribute-value-separator-double-quoted

  tag-class-attribute-value-single-quoted-content:
    # See HTML (Plain).sublime-syntax for why prototype is excluded
    - meta_include_prototype: false
    - meta_content_scope: meta.class-name.html meta.string.html string.quoted.single.html
    - include: strings-single-quoted-end
    - include: tag-class-attribute-value-quoted-content
    - include: tag-attribute-value-separator-single-quoted

  tag-class-attribute-value-quoted-content:
    - include: tag-class-attribute-value-content

  tag-class-attribute-value-unquoted-content:
    # See HTML (Plain).sublime-syntax for why prototype is excluded
    - meta_include_prototype: false
    - meta_content_scope: meta.class-name.html meta.string.html string.unquoted.html
    - include: tag-attribute-value-unquoted-end
    - include: tag-class-attribute-value-content
    - include: tag-attribute-value-unquoted-invalid-char

  tag-class-attribute-value-content:
    - include: tag-attribute-value-content

###[ EVENT ATTRIBUTE ]########################################################

  tag-event-attribute:
    - match: |-
        (?ix:on(?:
          abort|autocomplete|autocompleteerror|auxclick|blur|cancel|canplay
          |canplaythrough|change|click|close|contextmenu|cuechange|dblclick|drag
          |dragend|dragenter|dragexit|dragleave|dragover|dragstart|drop
          |durationchange|emptied|ended|error|focus|input|invalid|keydown
          |keypress|keyup|load|loadeddata|loadedmetadata|loadstart|mousedown
          |mouseenter|mouseleave|mousemove|mouseout|mouseover|mouseup|mousewheel
          |pause|play|playing|progress|ratechange|reset|resize|scroll|seeked
          |seeking|select|show|sort|stalled|submit|suspend|timeupdate|toggle
          |volumechange|waiting
        )){{attribute_name_break}}
      scope: entity.other.attribute-name.event.html
      push:
        - tag-event-attribute-meta
        - tag-event-attribute-assignment

  tag-event-attribute-meta:
    - meta_include_prototype: false
    - meta_scope: meta.attribute-with-value.event.html
    - include: immediately-pop

  tag-event-attribute-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-event-attribute-value
    - include: else-pop

  tag-event-attribute-value:
    - match: \"
      scope: meta.string.html string.quoted.double.html punctuation.definition.string.begin.html
      embed: scope:source.js
      embed_scope: meta.string.html meta.interpolation.html source.js.embedded.html
      escape: \"
      escape_captures:
        0: meta.string.html string.quoted.double.html punctuation.definition.string.end.html
    - match: \'
      scope: meta.string.html string.quoted.single.html punctuation.definition.string.begin.html
      embed: scope:source.js
      embed_scope: meta.string.html meta.interpolation.html source.js.embedded.html
      escape: \'
      escape_captures:
        0: meta.string.html string.quoted.single.html punctuation.definition.string.end.html
    - include: else-pop

###[ HREF ATTRIBUTE ]#########################################################

  tag-href-attribute:
    - match: (?i:href|src){{attribute_name_break}}
      scope: entity.other.attribute-name.href.html
      push:
        - tag-href-attributes-meta
        - tag-href-attributes-assignment

  tag-href-attributes-meta:
    - meta_include_prototype: false
    - meta_scope: meta.attribute-with-value.href.html
    - include: immediately-pop

  tag-href-attributes-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-href-attribute-value
    - include: else-pop

  tag-href-attribute-value:
    - match: \"
      scope:
        meta.string.html string.quoted.double.html
        punctuation.definition.string.begin.html
      set: tag-href-attribute-value-double-quoted-content
    - match: \'
      scope:
        meta.string.html string.quoted.single.html
        punctuation.definition.string.begin.html
      set: tag-href-attribute-value-single-quoted-content
    - match: '{{unquoted_attribute_start}}'
      set: tag-href-attribute-value-unquoted-content
    - include: else-pop

  tag-href-attribute-value-double-quoted-content:
    # See HTML (Plain).sublime-syntax for why prototype is excluded
    - meta_include_prototype: false
    - meta_content_scope: meta.path.url.html meta.string.html string.quoted.double.html
    - include: strings-double-quoted-end
    - include: tag-href-attribute-value-quoted-content

  tag-href-attribute-value-single-quoted-content:
    # See HTML (Plain).sublime-syntax for why prototype is excluded
    - meta_include_prototype: false
    - meta_content_scope: meta.path.url.html meta.string.html string.quoted.single.html
    - include: strings-single-quoted-end
    - include: tag-href-attribute-value-quoted-content

  tag-href-attribute-value-quoted-content:
    - include: tag-href-attribute-value-content

  tag-href-attribute-value-unquoted-content:
    # See HTML (Plain).sublime-syntax for why prototype is excluded
    - meta_include_prototype: false
    - meta_content_scope: meta.path.url.html meta.string.html string.unquoted.html
    - include: tag-attribute-value-unquoted-end
    - include: tag-href-attribute-value-content
    - include: tag-attribute-value-unquoted-invalid-char

  tag-href-attribute-value-content:
    - include: tag-attribute-value-content
    - match: (%)\h{2}
      scope: constant.character.escape.url.html
      captures:
        1: punctuation.definition.escape.html
    - match: '[/&?#]|://'
      scope: punctuation.separator.path.html

###[ ID ATTRIBUTE ]###########################################################

  tag-id-attribute:
    - match: (?i:id){{attribute_name_break}}
      scope: entity.other.attribute-name.id.html
      push:
        - tag-id-attribute-meta
        - tag-id-attribute-assignment

  tag-id-attribute-meta:
    - meta_include_prototype: false
    - meta_scope: meta.attribute-with-value.id.html
    - include: immediately-pop

  tag-id-attribute-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-id-attribute-value
    - include: else-pop

  tag-id-attribute-value:
    - match: \"
      scope:
        meta.string.html string.quoted.double.html
        punctuation.definition.string.begin.html
      set: tag-id-attribute-value-double-quoted-content
    - match: \'
      scope:
        meta.string.html string.quoted.single.html
        punctuation.definition.string.begin.html
      set: tag-id-attribute-value-single-quoted-content
    - match: '{{unquoted_attribute_start}}'
      set: tag-id-attribute-value-unquoted-content
    - include: else-pop

  tag-id-attribute-value-double-quoted-content:
    # See HTML (Plain).sublime-syntax for why prototype is excluded
    - meta_include_prototype: false
    - meta_content_scope: meta.toc-list.id.html meta.string.html string.quoted.double.html
    - include: strings-double-quoted-end
    - include: tag-id-attribute-value-quoted-content
    - include: tag-attribute-value-separator-double-quoted

  tag-id-attribute-value-single-quoted-content:
    # See HTML (Plain).sublime-syntax for why prototype is excluded
    - meta_include_prototype: false
    - meta_content_scope: meta.toc-list.id.html meta.string.html string.quoted.single.html
    - include: strings-single-quoted-end
    - include: tag-id-attribute-value-quoted-content
    - include: tag-attribute-value-separator-single-quoted

  tag-id-attribute-value-quoted-content:
    - include: tag-id-attribute-value-content

  tag-id-attribute-value-unquoted-content:
    # See HTML (Plain).sublime-syntax for why prototype is excluded
    - meta_include_prototype: false
    - meta_content_scope: meta.toc-list.id.html meta.string.html string.unquoted.html
    - include: tag-attribute-value-unquoted-end
    - include: tag-id-attribute-value-content
    - include: tag-attribute-value-unquoted-invalid-char

  tag-id-attribute-value-content:
    - include: tag-attribute-value-content

###[ STYLE ATTRIBUTE ]########################################################

  tag-style-attribute:
    - match: (?i:style){{attribute_name_break}}
      scope: entity.other.attribute-name.style.html
      push:
        - tag-style-attribute-meta
        - tag-style-attribute-assignment

  tag-style-attribute-meta:
    - meta_include_prototype: false
    - meta_scope: meta.attribute-with-value.style.html
    - include: immediately-pop

  tag-style-attribute-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-style-attribute-value
    - include: else-pop

  tag-style-attribute-value:
    - match: \"
      scope: meta.string.html string.quoted.double.html punctuation.definition.string.begin.html
      embed: scope:source.css#rule-list-body
      embed_scope: meta.string.html meta.interpolation.html source.css.embedded.html
      escape: \"
      escape_captures:
        0: meta.string.html string.quoted.double.html punctuation.definition.string.end.html
    - match: \'
      scope: meta.string.html string.quoted.single.html punctuation.definition.string.begin.html
      embed: scope:source.css#rule-list-body
      embed_scope: meta.string.html meta.interpolation.html source.css.embedded.html
      escape: \'
      escape_captures:
        0: meta.string.html string.quoted.single.html punctuation.definition.string.end.html
    - include: else-pop
