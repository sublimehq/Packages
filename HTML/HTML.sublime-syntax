%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
# https://html.spec.whatwg.org/multipage/syntax.html
name: HTML
scope: text.html.basic
version: 2

file_extensions:
  - html
  - htm
  - shtml
  - xhtml

first_line_match: (?i)<(!DOCTYPE\s*)?html

###############################################################################

variables:
  ascii_space: '\t\n\f '

  # https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
  attribute_name_break_char: '[{{ascii_space}}=/>]'
  attribute_name_break: (?={{attribute_name_break_char}})
  attribute_name_start: (?=[^{{attribute_name_break_char}}])

  # https://html.spec.whatwg.org/multipage/syntax.html#syntax-attribute-value
  unquoted_attribute_break: (?=[{{ascii_space}}]|/?>)
  unquoted_attribute_start: (?=[^{{ascii_space}}=>])

  # https://html.spec.whatwg.org/multipage/parsing.html#tag-name-state
  tag_name_break_char: '[{{ascii_space}}/<>]'
  tag_name_break: (?={{tag_name_break_char}})
  tag_name_char: '[^{{tag_name_break_char}}]'
  tag_name: '[A-Za-z]{{tag_name_char}}*'

  block_tag_name: |-
    (?ix:
      address|applet|article|aside|blockquote|center|dd|dir|div|dl|dt|figcaption|figure|footer|frame|frameset|h1|h2|h3|h4|h5|h6|header|iframe|menu|nav|noframes|object|ol|p|pre|section|ul
    ){{tag_name_break}}

  inline_tag_name: |-
    (?ix:
      abbr|acronym|area|audio|b|base|basefont|bdi|bdo|big|br|canvas|caption|cite|code|del|details|dfn|dialog|em|font|head|html|i|img|ins|isindex|kbd|li|link|map|mark|menu|menuitem|meta|noscript|param|picture|q|rp|rt|rtc|ruby|s|samp|script|small|source|span|strike|strong|style|sub|summary|sup|time|title|track|tt|u|var|video|wbr
    ){{tag_name_break}}

  form_tag_name: |-
    (?ix:
      button|datalist|input|label|legend|meter|optgroup|option|output|progress|select|template|textarea
    ){{tag_name_break}}

  javascript_mime_type: |-
    (?ix:
      # https://mimesniff.spec.whatwg.org/#javascript-mime-type
      (?:application|text)/(?:x-)?(?:java|ecma)script
      | text/javascript1\.[0-5]
      | text/jscript
      | text/livescript
    )

  custom_element_char: |-
    (?x:
      # https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-core-concepts
        [-._a-z0-9\x{00B7}]
      | [\x{00C0}-\x{00D6}]
      | [\x{00D8}-\x{00F6}]
      | [\x{00F8}-\x{02FF}]
      | [\x{0300}-\x{037D}]
      | [\x{037F}-\x{1FFF}]
      | [\x{200C}-\x{200D}]
      | [\x{203F}-\x{2040}]
      | [\x{2070}-\x{218F}]
      | [\x{2C00}-\x{2FEF}]
      | [\x{3001}-\x{D7FF}]
      | [\x{F900}-\x{FDCF}]
      | [\x{FDF0}-\x{FFFD}]
      | [\x{10000}-\x{EFFFF}]
    )

  script_close_lookahead: (?=(?:-->\s*)?</(?i:script){{tag_name_break_char}})
  style_close_lookahead: (?=</(?i:style){{tag_name_break_char}})

###############################################################################

contexts:

  main:
    - include: preprocessor
    - include: doctype
    - include: comment
    - include: cdata
    - include: tag
    - include: entities

###[ CDATA ]##################################################################

  cdata:
    - match: (<!\[)(CDATA)(\[)
      captures:
        1: punctuation.definition.tag.begin.html
        2: keyword.declaration.cdata.html
        3: punctuation.definition.tag.begin.html
      push: cdata-content

  cdata-content:
    - meta_scope: meta.tag.sgml.cdata.html
    - meta_content_scope: string.unquoted.cdata.html
    - match: ']]>'
      scope: punctuation.definition.tag.end.html
      pop: 1

###[ COMMENT ]################################################################

  comment:
    - match: (<!--)(-?>)?
      captures:
        1: punctuation.definition.comment.begin.html
        2: invalid.illegal.bad-comments-or-CDATA.html
      push: comment-content

  comment-content:
    - meta_scope: comment.block.html
    - match: (<!-)?(--\s*>)
      captures:
        1: invalid.illegal.bad-comments-or-CDATA.html
        2: punctuation.definition.comment.end.html
      pop: 1
    - match: <!--(?!-?>)|--!>
      scope: invalid.illegal.bad-comments-or-CDATA.html

###[ DOCTYPE DECLARATION ]####################################################

  doctype:
    - match: (<!)((?i:doctype){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: keyword.declaration.doctype.html
      push:
        - doctype-meta
        - doctype-content
        - doctype-content-type
        - doctype-name

  doctype-meta:
    - meta_scope: meta.tag.sgml.doctype.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      pop: 1

  doctype-name:
    - match: '{{tag_name}}'
      scope: constant.language.doctype.html
      pop: 1
    - include: else-pop

  doctype-content-type:
    - match: (?i:public|system){{tag_name_break}}
      scope: keyword.content.external.html
      pop: 1
    - include: else-pop

  doctype-content:
    - match: \[
      scope: punctuation.section.brackets.begin.html
      set: doctype-internal-subset-content
    - include: strings
    - include: else-pop

  doctype-internal-subset-content:
    - meta_scope: meta.brackets.html meta.internal-subset.xml.html
    - match: \]
      scope: punctuation.section.brackets.end.html
      pop: 1
    - include: comment

###[ PREPROCESSOR ]###########################################################

  preprocessor:
    - match: (<\?)(xml)
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.xml.html
      push: preprocessor-content

  preprocessor-content:
    - meta_scope: meta.tag.preprocessor.xml.html
    - match: \?>
      scope: punctuation.definition.tag.end.html
      pop: 1
    - include: tag-generic-attribute
    - include: strings

###[ TAGS ]###################################################################

  tag:
    - include: tag-html
    - include: tag-custom
    - include: tag-incomplete

  tag-incomplete:
    - match: (<)[{{ascii_space}}]*(/?>)
      scope: meta.tag.incomplete.html invalid.illegal.incomplete.html
      captures:
        1: punctuation.definition.tag.begin.html
        2: punctuation.definition.tag.end.html

  tag-end:
    - match: '>'
      scope: punctuation.definition.tag.end.html
      pop: 1

  tag-end-self-closing:
    - match: />
      scope: punctuation.definition.tag.end.html
      pop: 1

  tag-end-maybe-self-closing:
    - match: /?>
      scope: punctuation.definition.tag.end.html
      pop: 1

###[ HTML TAGS ]##############################################################

  tag-html:
    - match: (<)((?i:style)){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.style.html
      push: style-css
    - match: (<)((?i:script)){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.script.html
      push: script-javascript
    - match: (</?)((?i:body|head|html){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.structure.any.html
      push:
        - meta_scope: meta.tag.structure.any.html
        - include: tag-end
        - include: tag-attributes
    - match: (</?)({{block_tag_name}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.any.html
      push:
        - meta_scope: meta.tag.block.any.html
        - include: tag-end
        - include: tag-attributes
    - match: (</?)((?i:hr){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.any.html
      push:
        - meta_scope: meta.tag.block.any.html
        - include: tag-end-maybe-self-closing
        - include: tag-attributes
    - match: (</?)((?i:form|fieldset){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.form.html
      push:
        - meta_scope: meta.tag.block.form.html
        - include: tag-end
        - include: tag-attributes
    - match: (</?)({{inline_tag_name}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.any.html
      push:
        - meta_scope: meta.tag.inline.any.html
        - include: tag-end-maybe-self-closing
        - include: tag-attributes
    - match: (</?)({{form_tag_name}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.form.html
      push:
        - meta_scope: meta.tag.inline.form.html
        - include: tag-end-maybe-self-closing
        - include: tag-attributes
    - match: (</?)((?i:a){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.a.html
      push:
        - meta_scope: meta.tag.inline.a.html
        - include: tag-end-maybe-self-closing
        - include: tag-attributes
    - match: (</?)((?i:col|colgroup|table|tbody|td|tfoot|th|thead|tr){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.table.html
      push:
        - meta_scope: meta.tag.inline.table.html
        - include: tag-end-maybe-self-closing
        - include: tag-attributes

###[ CUSTOM TAG ]#############################################################

  tag-custom:
    - match: </?(?=[A-Za-z]{{tag_name_char}}*?-)
      scope: punctuation.definition.tag.begin.html
      push:
        - tag-custom-content
        - tag-custom-name
    - match: </?(?=[A-Za-z])
      scope: punctuation.definition.tag.begin.html
      push:
        - tag-other-content
        - tag-other-name

  tag-custom-name:
      - meta_content_scope: entity.name.tag.custom.html
      - match: '{{tag_name_break}}'
        pop: 1
      - match: '{{custom_element_char}}+'
        # no scope
      - match: '{{tag_name_char}}'
        scope: invalid.illegal.custom-tag-name.html

  tag-custom-content:
      - meta_scope: meta.tag.custom.html
      - include: tag-end-maybe-self-closing
      - include: tag-attributes

  tag-other-name:
      - meta_content_scope: entity.name.tag.other.html
      - match: '{{tag_name_break}}'
        pop: 1

  tag-other-content:
      - meta_scope: meta.tag.other.html
      - include: tag-end-maybe-self-closing
      - include: tag-attributes

###[ SCRIPT TAG ]#############################################################

  script-javascript:
    - meta_scope: meta.tag.script.begin.html
    - include: script-common
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set:
        - include: script-close-tag
        - match: (?=\S)
          embed: scope:source.js
          embed_scope: source.js.embedded.html
          escape: '{{script_close_lookahead}}'

  script-html:
    - meta_scope: meta.tag.script.begin.html
    - include: script-common
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set:
        - meta_content_scope: text.html.embedded.html
        - include: comment
        - include: script-close-tag
        - include: main

  script-other:
    - meta_scope: meta.tag.script.begin.html
    - include: script-common
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: script-close-tag

  script-close-tag:
    - match: <!--
      scope: comment.block.html punctuation.definition.comment.begin.html
    - match: '{{script_close_lookahead}}'
      set:
        - match: -->
          scope: comment.block.html punctuation.definition.comment.end.html
        - match: (</)((?i:script){{tag_name_break}})
          captures:
            1: punctuation.definition.tag.begin.html
            2: entity.name.tag.script.html
          set:
            - meta_scope: meta.tag.script.end.html
            - include: tag-end
            - include: tag-attributes

  script-common:
    - include: script-type-attribute
    - include: tag-attributes
    - include: tag-end-self-closing

  script-type-attribute:
    - match: (?i:type){{attribute_name_break}}
      scope: entity.other.attribute-name.html
      set:
        - meta_scope: meta.tag.script.begin.html meta.attribute-with-value.html
        - match: =
          scope: punctuation.separator.key-value.html
          set:
            - meta_content_scope: meta.tag.script.begin.html meta.attribute-with-value.html
            - include: script-type-decider
        - match: (?=\S)
          set: script-javascript

  script-type-decider:
    - match: (?={{javascript_mime_type}}{{unquoted_attribute_break}}|'{{javascript_mime_type}}'|"{{javascript_mime_type}}")
      set:
        - script-javascript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=(?i:module{{unquoted_attribute_break}}|'module'|"module"))
      set:
        - script-javascript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=>|''|"")
      set:
        - script-javascript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=(?i:text/html{{unquoted_attribute_break}}|'text/html'|"text/html"))
      set:
        - script-html
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=\S)
      set:
        - script-other
        - tag-generic-attribute-meta
        - tag-generic-attribute-value

###[ STYLE TAG ]##############################################################

  style-css:
    - meta_scope: meta.tag.style.begin.html
    - include: style-common
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set:
        - include: style-close-tag
        - match: ''
          embed: scope:source.css
          embed_scope: source.css.embedded.html
          escape: '{{style_close_lookahead}}'

  style-other:
    - meta_scope: meta.tag.style.begin.html
    - include: style-common
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-close-tag

  style-close-tag:
    - match: (</)((?i:style){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.style.html
      set:
        - meta_scope: meta.tag.style.end.html
        - include: tag-end
        - include: tag-attributes

  style-common:
    - include: style-type-attribute
    - include: tag-attributes
    - include: tag-end-self-closing

  style-type-attribute:
    - match: (?i:type){{attribute_name_break}}
      scope: entity.other.attribute-name.html
      set:
        - meta_scope: meta.tag.style.begin.html meta.attribute-with-value.html
        - match: =
          scope: punctuation.separator.key-value.html
          set:
            - meta_content_scope: meta.tag.style.begin.html meta.attribute-with-value.html
            - include: style-type-decider
        - match: (?=\S)
          set: style-css

  style-type-decider:
    - match: (?=(?i:text/css{{unquoted_attribute_break}}|'text/css'|"text/css"))
      set:
        - style-css
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=>|''|"")
      set:
        - style-css
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=\S)
      set:
        - style-other
        - tag-generic-attribute-meta
        - tag-generic-attribute-value

###[ ATTRIBUTES ]#############################################################

  # This is to prevent breaking syntaxes referencing the old context name
  tag-stuff:
    - include: tag-attributes

  tag-attributes:
    - include: tag-id-attribute
    - include: tag-class-attribute
    - include: tag-style-attribute
    - include: tag-event-attribute
    - include: tag-href-attribute
    - include: tag-generic-attribute

  tag-attribute-value-content:
    - include: entities

  tag-attribute-value-separator-double-quoted:
    - match: (?=[{{ascii_space}}])
      push:
        - clear_scopes: 3 # clear `meta.class-name` or `meta.toc-list.id`
        - meta_include_prototype: false
        - meta_scope: meta.string.html string.quoted.double.html
        - include: else-pop

  tag-attribute-value-separator-single-quoted:
    - match: (?=[{{ascii_space}}])
      push:
        - clear_scopes: 3 # clear `meta.class-name` or `meta.toc-list.id`
        - meta_include_prototype: false
        - meta_scope: meta.string.html string.quoted.single.html
        - include: else-pop

  tag-attribute-value-unquoted-end:
    - match: '{{unquoted_attribute_break}}'
      pop: 1

  tag-attribute-value-unquoted-invalid-char:
    - match: '["''`<]'
      scope: invalid.illegal.attribute-value.html

###[ CLASS ATTRIBUTE ]########################################################

  tag-class-attribute:
    - match: (?i:class){{attribute_name_break}}
      scope: entity.other.attribute-name.class.html
      push:
        - tag-class-attribute-meta
        - tag-class-attribute-assignment

  tag-class-attribute-meta:
    - meta_scope: meta.attribute-with-value.class.html
    - include: immediately-pop

  tag-class-attribute-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-class-attribute-value
    - include: else-pop

  tag-class-attribute-value:
    - match: \"
      scope:
        meta.string.html string.quoted.double.html
        punctuation.definition.string.begin.html
      set: tag-class-attribute-value-double-quoted-content
    - match: \'
      scope:
        meta.string.html string.quoted.single.html
        punctuation.definition.string.begin.html
      set: tag-class-attribute-value-single-quoted-content
    - match: '{{unquoted_attribute_start}}'
      set: tag-class-attribute-value-unquoted-content
    - include: else-pop

  tag-class-attribute-value-double-quoted-content:
    - meta_content_scope: meta.class-name.html meta.string.html string.quoted.double.html
    - include: strings-double-quoted-end
    - include: tag-class-attribute-value-quoted-content
    - include: tag-attribute-value-separator-double-quoted

  tag-class-attribute-value-single-quoted-content:
    - meta_content_scope: meta.class-name.html meta.string.html string.quoted.single.html
    - include: strings-single-quoted-end
    - include: tag-class-attribute-value-quoted-content
    - include: tag-attribute-value-separator-single-quoted

  tag-class-attribute-value-quoted-content:
    - include: tag-class-attribute-value-content

  tag-class-attribute-value-unquoted-content:
    - meta_content_scope: meta.class-name.html meta.string.html string.unquoted.html
    - include: tag-attribute-value-unquoted-end
    - include: tag-class-attribute-value-content
    - include: tag-attribute-value-unquoted-invalid-char

  tag-class-attribute-value-content:
    - include: tag-attribute-value-content

###[ EVENT ATTRIBUTE ]########################################################

  tag-event-attribute:
    - match: |-
        (?ix:on(?:
          abort|autocomplete|autocompleteerror|auxclick|blur|cancel|canplay
          |canplaythrough|change|click|close|contextmenu|cuechange|dblclick|drag
          |dragend|dragenter|dragexit|dragleave|dragover|dragstart|drop
          |durationchange|emptied|ended|error|focus|input|invalid|keydown
          |keypress|keyup|load|loadeddata|loadedmetadata|loadstart|mousedown
          |mouseenter|mouseleave|mousemove|mouseout|mouseover|mouseup|mousewheel
          |pause|play|playing|progress|ratechange|reset|resize|scroll|seeked
          |seeking|select|show|sort|stalled|submit|suspend|timeupdate|toggle
          |volumechange|waiting
        )){{attribute_name_break}}
      scope: entity.other.attribute-name.event.html
      push:
        - tag-event-attribute-meta
        - tag-event-attribute-assignment

  tag-event-attribute-meta:
    - meta_scope: meta.attribute-with-value.event.html
    - include: immediately-pop

  tag-event-attribute-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-event-attribute-value
    - include: else-pop

  tag-event-attribute-value:
    - match: \"
      scope: meta.string.html string.quoted.double.html punctuation.definition.string.begin.html
      embed: scope:source.js
      embed_scope: meta.string.html meta.interpolation.html source.js.embedded.html
      escape: \"
      escape_captures:
        0: meta.string.html string.quoted.double.html punctuation.definition.string.end.html
    - match: \'
      scope: meta.string.html string.quoted.single.html punctuation.definition.string.begin.html
      embed: scope:source.js
      embed_scope: meta.string.html meta.interpolation.html source.js.embedded.html
      escape: \'
      escape_captures:
        0: meta.string.html string.quoted.single.html punctuation.definition.string.end.html
    - include: else-pop

###[ GENERIC ATTRIBUTE ]######################################################

  tag-generic-attribute:
    - match: '{{attribute_name_start}}'
      push:
        - tag-generic-attribute-meta
        - tag-generic-attribute-assignment
        - tag-generic-attribute-name

  tag-generic-attribute-name:
    - meta_scope: entity.other.attribute-name.html
    - match: '{{attribute_name_break}}'
      pop: 1
    - match: '["''`<]'
      scope: invalid.illegal.attribute-name.html

  tag-generic-attribute-meta:
    - meta_scope: meta.attribute-with-value.html
    - include: immediately-pop

  tag-generic-attribute-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-generic-attribute-value
    - include: else-pop

  tag-generic-attribute-value:
    - match: \"
      scope:
        meta.string.html string.quoted.double.html
        punctuation.definition.string.begin.html
      set: tag-generic-attribute-value-double-quoted-content
    - match: \'
      scope:
        meta.string.html string.quoted.single.html
        punctuation.definition.string.begin.html
      set: tag-generic-attribute-value-single-quoted-content
    - match: '{{unquoted_attribute_start}}'
      set: tag-generic-attribute-value-unquoted-content
    - include: else-pop

  tag-generic-attribute-value-double-quoted-content:
    - meta_content_scope: meta.string.html string.quoted.double.html
    - include: strings-double-quoted-end
    - include: tag-generic-attribute-value-quoted-content

  tag-generic-attribute-value-single-quoted-content:
    - meta_content_scope: meta.string.html string.quoted.single.html
    - include: strings-single-quoted-end
    - include: tag-generic-attribute-value-quoted-content

  tag-generic-attribute-value-quoted-content:
    - include: tag-generic-attribute-value-content

  tag-generic-attribute-value-unquoted-content:
    - meta_content_scope: meta.string.html string.unquoted.html
    - include: tag-attribute-value-unquoted-end
    - include: tag-generic-attribute-value-content
    - include: tag-attribute-value-unquoted-invalid-char

  tag-generic-attribute-value-content:
    - include: tag-attribute-value-content

###[ HREF ATTRIBUTE ]#########################################################

  tag-href-attribute:
    - match: (?i:href|src){{attribute_name_break}}
      scope: entity.other.attribute-name.href.html
      push:
        - tag-href-attributes-meta
        - tag-href-attributes-assignment

  tag-href-attributes-meta:
    - meta_scope: meta.attribute-with-value.href.html
    - include: immediately-pop

  tag-href-attributes-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-href-attribute-value
    - include: else-pop

  tag-href-attribute-value:
    - match: \"
      scope:
        meta.string.html string.quoted.double.html
        punctuation.definition.string.begin.html
      set: tag-href-attribute-value-double-quoted-content
    - match: \'
      scope:
        meta.string.html string.quoted.single.html
        punctuation.definition.string.begin.html
      set: tag-href-attribute-value-single-quoted-content
    - match: '{{unquoted_attribute_start}}'
      set: tag-href-attribute-value-unquoted-content
    - include: else-pop

  tag-href-attribute-value-double-quoted-content:
    - meta_content_scope: meta.path.url.html meta.string.html string.quoted.double.html
    - include: strings-double-quoted-end
    - include: tag-href-attribute-value-quoted-content

  tag-href-attribute-value-single-quoted-content:
    - meta_content_scope: meta.path.url.html meta.string.html string.quoted.single.html
    - include: strings-single-quoted-end
    - include: tag-href-attribute-value-quoted-content

  tag-href-attribute-value-quoted-content:
    - include: tag-href-attribute-value-content

  tag-href-attribute-value-unquoted-content:
    - meta_content_scope: meta.path.url.html meta.string.html string.unquoted.html
    - include: tag-attribute-value-unquoted-end
    - include: tag-href-attribute-value-content
    - include: tag-attribute-value-unquoted-invalid-char

  tag-href-attribute-value-content:
    - match: (%)\h{2}
      scope: constant.character.escape.url.html
      captures:
        1: punctuation.definition.escape.html
    - include: tag-attribute-value-content

###[ ID ATTRIBUTE ]###########################################################

  tag-id-attribute:
    - match: (?i:id){{attribute_name_break}}
      scope: entity.other.attribute-name.id.html
      push:
        - tag-id-attribute-meta
        - tag-id-attribute-assignment

  tag-id-attribute-meta:
    - meta_scope: meta.attribute-with-value.id.html
    - include: immediately-pop

  tag-id-attribute-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-id-attribute-value
    - include: else-pop

  tag-id-attribute-value:
    - match: \"
      scope:
        meta.string.html string.quoted.double.html
        punctuation.definition.string.begin.html
      set: tag-id-attribute-value-double-quoted-content
    - match: \'
      scope:
        meta.string.html string.quoted.single.html
        punctuation.definition.string.begin.html
      set: tag-id-attribute-value-single-quoted-content
    - match: '{{unquoted_attribute_start}}'
      set: tag-id-attribute-value-unquoted-content
    - include: else-pop

  tag-id-attribute-value-double-quoted-content:
    - meta_content_scope: meta.toc-list.id.html meta.string.html string.quoted.double.html
    - include: strings-double-quoted-end
    - include: tag-id-attribute-value-quoted-content
    - include: tag-attribute-value-separator-double-quoted

  tag-id-attribute-value-single-quoted-content:
    - meta_content_scope: meta.toc-list.id.html meta.string.html string.quoted.single.html
    - include: strings-single-quoted-end
    - include: tag-id-attribute-value-quoted-content
    - include: tag-attribute-value-separator-single-quoted

  tag-id-attribute-value-quoted-content:
    - include: tag-id-attribute-value-content

  tag-id-attribute-value-unquoted-content:
    - meta_content_scope: meta.toc-list.id.html meta.string.html string.unquoted.html
    - include: tag-attribute-value-unquoted-end
    - include: tag-id-attribute-value-content
    - include: tag-attribute-value-unquoted-invalid-char

  tag-id-attribute-value-content:
    - include: tag-attribute-value-content

###[ STYLE ATTRIBUTE ]########################################################

  tag-style-attribute:
    - match: (?i:style){{attribute_name_break}}
      scope: entity.other.attribute-name.style.html
      push:
        - tag-style-attribute-meta
        - tag-style-attribute-assignment

  tag-style-attribute-meta:
    - meta_scope: meta.attribute-with-value.style.html
    - include: immediately-pop

  tag-style-attribute-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-style-attribute-value
    - include: else-pop

  tag-style-attribute-value:
    - match: \"
      scope: meta.string.html string.quoted.double.html punctuation.definition.string.begin.html
      embed: scope:source.css#rule-list-body
      embed_scope: meta.string.html meta.interpolation.html source.css.embedded.html
      escape: \"
      escape_captures:
        0: meta.string.html string.quoted.double.html punctuation.definition.string.end.html
    - match: \'
      scope: meta.string.html string.quoted.single.html punctuation.definition.string.begin.html
      embed: scope:source.css#rule-list-body
      embed_scope: meta.string.html meta.interpolation.html source.css.embedded.html
      escape: \'
      escape_captures:
        0: meta.string.html string.quoted.single.html punctuation.definition.string.end.html
    - include: else-pop

###[ CONSTANTS ]##############################################################

  entities:
    - match: (&#[xX])[01]?\h{1,5}(;)
      scope: constant.character.entity.hexadecimal.html
      captures:
        1: punctuation.definition.entity.html
        2: punctuation.terminator.entity.html
    - match: (&#)[0-9]{1,7}(;)
      scope: constant.character.entity.decimal.html
      captures:
        1: punctuation.definition.entity.html
        2: punctuation.terminator.entity.html
    - match: (&)[a-zA-Z0-9]+(;)
      scope: constant.character.entity.named.html
      captures:
        1: punctuation.definition.entity.html
        2: punctuation.terminator.entity.html

  strings:
    - include: strings-double-quoted
    - include: strings-single-quoted

  strings-double-quoted:
    - match: \"
      scope:
        meta.string.html string.quoted.double.html
        punctuation.definition.string.begin.html
      push: strings-double-quoted-content

  strings-double-quoted-end:
    - match: \"
      scope:
        meta.string.html string.quoted.double.html
        punctuation.definition.string.end.html
      pop: 1

  strings-double-quoted-content:
    - meta_content_scope: meta.string.html string.quoted.double.html
    - include: strings-double-quoted-end
    - include: strings-quoted-content

  strings-single-quoted:
    - match: \'
      scope:
        meta.string.html string.quoted.single.html
        punctuation.definition.string.begin.html
      push: strings-single-quoted-content

  strings-single-quoted-end:
    - match: \'
      scope:
        meta.string.html string.quoted.single.html
        punctuation.definition.string.end.html
      pop: 1

  strings-single-quoted-content:
    - meta_content_scope: meta.string.html string.quoted.single.html
    - include: strings-single-quoted-end
    - include: strings-quoted-content

  strings-quoted-content:
    # This context exists as common entry point for inherited syntaxes to add
    # custom highlighting to all quoted strings.
    - include: strings-common-content

  strings-unquoted-content:
    # This context exists as common entry point for inherited syntaxes to add
    # custom highlighting to all unquoted strings.
    - include: strings-common-content

  strings-common-content:
    # This context exists as common entry point for inherited syntaxes to add
    # custom highlighting to all strings.
    - include: entities

###[ PROTOTYPES ]#############################################################

  else-pop:
    - match: (?=\S)
      pop: 1

  immediately-pop:
    - match: ''
      pop: 1
