# SYNTAX TEST "Packages/YAML/YAML.sublime-syntax"
# <- source.yaml comment

# http://yaml.org/spec/1.2/spec.html#style/flow/


##############################################################################
## Aliases
# http://yaml.org/spec/1.2/spec.html#alias//

*alias
#^^^^^ variable.other.alias
# <- keyword.control.flow.alias punctuation.definition.alias

*al[ias]
#^^      variable.other.alias
#  ^^^^^ invalid.illegal.character
# <- keyword.control.flow.alias punctuation.definition.alias


##############################################################################
## Double-quoted
# http://yaml.org/spec/1.2/spec.html#style/flow/double-quoted

"flow string"
#^^^^^^^^^^^^ string.quoted.double
#           ^ punctuation.definition.string.end
# <- string.quoted.double punctuation.definition.string.begin

"flow string
 more string"
#^^^^^^^^^^^^ string.quoted.double
#           ^ punctuation.definition.string.end

"\" \0 \\ \x1b \u12c4 \U1234F678"
#^^                              constant.character.escape
#   ^^                           constant.character.escape
#      ^^                        constant.character.escape
#         ^^^^                   constant.character.escape
#              ^^^^^^            constant.character.escape
#                     ^^^^^^^^^^ constant.character.escape
#                    ^           -constant

"\x1 \u123 \U1234567"
#^^^^^^^^^^^^^^^^^^^ -constant.character.escape

"\x123 \u12345 \U123456789"
#^^^^                      constant.character.escape
#    ^                     -constant.character.escape
#      ^^^^^^              constant.character.escape
#            ^             -constant.character.escape
#              ^^^^^^^^^^  constant.character.escape
#                        ^ -constant.character.escape

# The following can't be tested because there must be a newline after the
# backslash and comments are not allowed in strings.
# Just verify manually that the \ is highlighted as
# "constant.character.escape.newline".
"string\
continuation"


##############################################################################
## Single-quoted
# http://yaml.org/spec/1.2/spec.html#style/flow/single-quoted

'flow string'
#^^^^^^^^^^^^ string.quoted.single
#           ^ punctuation.definition.string.end
# <- string.quoted.single punctuation.definition.string.begin

'flow string
 more string'
#^^^^^^^^^^^^ string.quoted.single
#           ^ punctuation.definition.string.end
# <- string.quoted.single

' '' '
#^ -constant
# ^^ constant.character.escape
#   ^ -constant


##############################################################################
## Flow-sequence
# http://yaml.org/spec/1.2/spec.html#style/flow/sequence

[a, b, c,
# <- meta.sequence.flow punctuation.definition.sequence.begin
#^        string.unquoted.plain.in
# ^       punctuation.separator.sequence
#    ^    punctuation.separator.sequence
*alias]
#^^^^^ variable.other.alias
#     ^ meta.sequence.flow punctuation.definition.sequence.end

[a: b, c,'d', e: f, g:h]
#^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.flow.yaml
#^                      meta.mapping.key string.unquoted.plain.in
# ^                     meta.mapping punctuation.separator.key-value.mapping -meta.mapping.value
#   ^                   meta.mapping.value string.unquoted.plain.in
#      ^                string.unquoted.plain.in
#       ^               punctuation.separator.sequence
#        ^^^            string.quoted.single
#             ^         meta.mapping.key string.unquoted.plain.in
#              ^        punctuation.separator.key-value.mapping
#                 ^     punctuation.separator.sequence
#                   ^^^ string.unquoted.plain.in - entity.name.tag


##############################################################################
## Flow-mapping
# http://yaml.org/spec/1.2/spec.html#style/flow/sequence

{a: b, :c: :d,
#^^^^^^^^^^^^^^ meta.mapping - meta.mapping meta.mapping
#^ meta.mapping.key.yaml string.unquoted.plain.in.yaml
# ^ meta.mapping.yaml punctuation.separator.key-value.mapping.yaml
#   ^ meta.mapping.value string.unquoted.plain.in -entity.name.tag
#    ^ meta.mapping.yaml punctuation.separator.mapping
#      ^^ meta.mapping.key.yaml string.unquoted.plain.in
#        ^ meta.mapping.yaml punctuation.separator.key-value.mapping
#          ^^ meta.mapping.value.yaml string.unquoted.plain.in
#            ^ punctuation.separator.mapping
# <- meta.mapping.yaml punctuation.definition.mapping.begin
*alias, true : false }
#^^^^^^^^^^^^^^^^^^^^^ meta.mapping - meta.mapping meta.mapping
#^^^^^ variable.other.alias
#     ^ punctuation.separator.mapping
#       ^^^^ meta.mapping.key.yaml constant.language.boolean.yaml - string
#            ^     punctuation.separator.key-value.mapping
#              ^^^^^ meta.mapping.value.yaml constant.language.boolean.yaml
#                    ^ meta.mapping.yaml punctuation.definition.mapping.end

{ 1: 2 }

{? !!str 'key' : !!str value,
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping - meta.mapping meta.mapping
#               ^^^^^^^^^^^^ meta.mapping.value
#                           ^ punctuation.separator.mapping - meta.mapping.value
#^ punctuation.definition.key.begin.yaml
#^^^^^^^^^^^^^^ meta.mapping.key.yaml
#  ^^^^^ storage
#        ^^^^^ string
#        ^ punctuation
#            ^ punctuation
#              ^ meta.mapping.yaml punctuation.separator.key-value.mapping
#                ^^^^^ storage
#                      ^^^^^ string
 ? !!str foo : :bar
#^^^^^^^^^^^^ meta.mapping.key.yaml
#^ punctuation.definition.key.begin.yaml
#  ^^^^^ storage
#        ^^^ string.unquoted.plain.in.yaml
#            ^ meta.mapping.yaml punctuation.separator.key-value.mapping.yaml
#              ^^^^ meta.mapping.value.yaml string.unquoted.plain.in.yaml
}

# TODO catch `!!set` and set meta.set scope
!!set {this, is, a, set}
#  ^ storage
#      ^ string - meta.mapping.key
#            ^ string - meta.mapping.key
#                ^ string - meta.mapping.key
#                   ^ string - meta.mapping.key
