# SYNTAX TEST "Packages/YAML/YAML.sublime-syntax"
# <- source.yaml comment

# http://yaml.org/spec/1.2/spec.html#style/block/


##############################################################################
## Scalars
# http://yaml.org/spec/1.2/spec.html#style/block/scalar

# Headers ############################
# (note that block scalars may be empty)
- |
# ^ keyword.control.flow.block-scalar.literal

- >
# ^ keyword.control.flow.block-scalar.folded

- >1
# ^ keyword.control.flow.block-scalar
#  ^ constant.numeric.indentation-indicator

- |1-
# ^ keyword.control.flow.block-scalar
#  ^ constant.numeric.indentation-indicator
#   ^ storage.modifier.chomping-indicator

# Headers and content ################
- |
 literal
#^^^^^^^ string.unquoted.block

- >1
  folded
#^^^^^^^ string.unquoted.block

- |+
 keep
#^^^^ string.unquoted.block

- >1-
  strip
#^^^^^^ string.unquoted.block

- >
  content
   # still content
#^^^^^^^^^^^^^^^^^ string.unquoted.block

- >
  # content
   # still content
 # not content
#^^^^^^^^^^^^^ comment

# Empty blocks #######################
- > asdf
#  ^^^^^ invalid.illegal.expected-comment-or-newline
- ># not comment
#  ^^^^^^^^^^^^^ invalid.illegal.expected-comment-or-newline
- |
plain
# <- -string.unquoted.block


##############################################################################
## Sequence
# http://yaml.org/spec/1.2/spec.html#style/block/sequence

-
# <- punctuation.definition.block.sequence.item
- -
# <- punctuation.definition.block.sequence.item
# ^ punctuation.definition.block.sequence.item
- !!omap -
# <- punctuation.definition.block.sequence.item
#        ^ punctuation.definition.block.sequence.item
-


##############################################################################
## Mapping
# http://yaml.org/spec/1.2/spec.html#style/block/mapping

key: value
#^^        meta.mapping.key string.unquoted.plain.out
#  ^       punctuation.separator.key-value.mapping, -entity
#    ^^^^^ string.unquoted.plain.out
key#  :  value
#^^^           meta.mapping.key string.unquoted.plain.out
#   ^          -string
#     ^        punctuation.separator.key-value.mapping
#        ^^^^^ string.unquoted.plain.out
:
# <- punctuation.separator.key-value.mapping

_type_null: (?:null|Null|NULL|~) # http://yaml.org/type/null.html
#^^^^^^^^^                         meta.mapping.key
#           ^^^^^^^^^^^^^^^^^^^^   -meta.mapping.key
#                                ^ comment

key on line one:
#^^^^^^^^^^^^^^ meta.mapping.key
  value on line two

? explicit key # Empty value
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.key
# ^^^^^^^^^^^^               string.unquoted.plain.out
#              ^^^^^^^^^^^^^ comment
# <- meta.mapping punctuation.definition.key-value.begin

? |
  block key
# ^^^^^^^^^ meta.mapping string.unquoted.block
# ^^^^^^^^^ -meta.mapping meta.mapping
: - one # Explicit compact
# <- meta.mapping punctuation.separator.key-value.mapping
  - two: :three # block value
# ^ punctuation.definition.block.sequence
#   ^^^ meta.mapping.key string.unquoted.plain.out
#      ^ punctuation.separator.key-value.mapping
#        ^^^^^^ string.unquoted.plain.out

? a key : not a value
#       ^ meta.mapping invalid.illegal.expected-newline

scalar
# <- -meta.mapping

x:
  - #1
#   ^^ comment.line
