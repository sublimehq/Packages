%YAML 1.2
---
name: Regular Expressions (Python)
version: 2
comment: Matches Python's regular expression syntax.
scope: source.regexp.python
hidden: true
extends: Packages/Regular Expressions/RegExp (Basic).sublime-syntax

variables:
  # modifiers
  activate_x_mode: (?:\?[imsLua]*x[ixmsLua]*(?:-[imsLua]+)?)
  deactivate_x_mode: (?:\?[imsLua]*-[imsLua]*x[imxsLua]*)
  other_modifiers: \?(?:[ixmsLua]*-)?[ixmsLua]+

contexts:
  base:
    - meta_prepend: true
    - match: (#)[^]\[(){}^$+*?\\|"']*$
      comment:
        We are restrictive in what we allow to go after the comment character to avoid
        false positives, since the availability of comments depend on regexp flags.
      scope: comment.line.number-sign.regexp
      captures:
        1: punctuation.definition.comment.regexp

  group-start:
    - meta_prepend: true
    - match: (?:\?P=(?:[a-zA-Z_][a-zA-Z_0-9]*\w*))(?=\))
      scope: keyword.other.back-reference.named.regexp
    - match: (\?P<)([a-z]\w*)(>)
      captures:
        1: punctuation.definition.group.capture.regexp
        2: entity.name.other.group.regexp
        3: punctuation.definition.group.capture.regexp
    - match: (\?\(([1-9][0-9]?|[a-zA-Z_][a-zA-Z_0-9]*)\))
      # We can make this more sophisticated to match the | character that separates
      # yes-pattern from no-pattern, but it's not really necessary.
      captures:
        1: punctuation.definition.group.assertion.conditional.regexp
        2: variable.other.back-reference.regexp

