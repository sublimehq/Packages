{
    "scope": "source.python",
    "completions": [
        {
            "trigger": "enc\tencoding",
            "contents": "# -*- coding: utf-8 -*-\n"
        },
        {
            "trigger": "env\tenvironment",
            "contents": "#!/usr/bin/env python\n",
        },
        {
            "trigger": "lc\tlist comprehension",
            "contents": "[${1:i} for ${4:i} in ${5:range(${6:10})}]",
        },
        {
            "trigger": "sc\tset comprehension",
            "contents": "{${1:i} for ${4:i} in ${5:range(${6:10})}}"
        },
        {
            "trigger": "ge\tgenerator expression",
            "contents": "(${1:i} for ${4:i} in ${5:range(${6:10})})"
        },
        {
            "trigger": "dc\tdict comprehension",
            "contents": "{${1:k}: ${2:v} for ${3:k}, ${4:v} in ${5:collection}}"
        },
        {
            "trigger": "for\tfor loop",
            "contents": "for ${1:i} in ${2:range(${3:10})}:\n\t${4:pass}"
        },
        {
            "trigger": "def\tfunction",
            "contents": "def ${1:func}($2):\n\t${3:pass}"
        },
        {
            "trigger": "defs\tmethod",
            "contents": "def ${1:method}(self, $2)\n\t${3:pass}"
        },
        {
            "trigger": "__magic__",
            "contents": "__${1:init}__"
        },
        {
            "trigger": "ifmain",
            "contents": "if __name__ == '__main__':\n\t${1:main()}",
        },
        {
            "trigger": "property\tnew property",
            "contents": "def ${1:foo}(self):\n\treturn self.${2:_$1}",
        },
        // {
        //     "trigger": "class\tnew class",
        //     "contents": "class ${1:ClassName}(${2:object}):\n\n\t${3/.+/\"\"\"/}${3:docstring for $1}${3/.+/\"\"\"\n/}${3/.+/\t/}def __init__(self${4/([^,])?(.*)/(?1:, )/}${4:arg}):\n\t\t${5:super($1, self).__init__()}\n${4/(\A\s*,\s*\Z)|,?\s*([A-Za-z_][a-zA-Z0-9_]*)\s*(=[^,]*)?(,\s*|$)/(?2:\t\tself.$2 = $2\n)/g}      $0",
        // },
        {
            "trigger": "while\twhile loop",
            "contents": "while ${1:condition}\n\t${2:pass}"
        },
        {
            "trigger": "if\tif statement",
            "contents": "if ${1:condition}:\n\t${2:pass}"
        },
        {
            "trigger": "elif\telif statement",
            "contents": "elif ${1:condition}:\n\t${2:pass}"
        },
        {
            "trigger": "with\twith statement",
            "contents": "with ${1:open(\"${2:file}\", \"${3:w}\")} as ${4:f}:\n\t${5:pass}"
        },
        {
            "trigger": "try\ttry/except",
            "contents": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:pass}"
        },
        {
            "trigger": "lambda\tlambda expression",
            "contents": "lambda ${1:x}: $0"
        },
        {
            "trigger": "fim\tfrom ... import ...",
            "contents": "from ${1:module} import ${2:name}"
        },
        {
            "trigger": "ims\timport ... as ...",
            "contents": "import ${1:module} as ${2:name}"
        },
    ]
}
