%YAML 1.2
---
name: Regular Expressions (Python)
scope: source.regexp.python
version: 2
hidden: true

extends: Packages/Regular Expressions/RegExp (Basic).sublime-syntax

variables:
  # modifiers
  activate_x_mode: (?:\?[imsLua]*x[ixmsLua]*(?:-[imsLua]+)?)
  deactivate_x_mode: (?:\?[imsLua]*-[imsLua]*x[imxsLua]*)
  other_modifiers: \?(?:[ixmsLua]*-)?[ixmsLua]+

  # capture group identifiers
  capture_group_name: (?:[a-zA-Z_][a-zA-Z0-9_]*)
  # non-ASCII is deprecated since v3.11
  capture_group_name_deprecated: (?:[[:alpha:]][[:alnum:]_]*)

contexts:
  base:
    - meta_prepend: true
    - match: (#)[^]\[(){}^$+*?\\|"']*$\n?
      # Restrictive allowed chars after comment punctuation to avoid false positives,
      # since the availability of comments depend on regexp flags.
      scope: comment.line.number-sign.regexp
      captures:
        1: punctuation.definition.comment.regexp

  group-start:
    - meta_prepend: true
    - match: (\?P=)({{capture_group_name}})(?=\))
      captures:
        1: keyword.other.back-reference.named.regexp
        2: variable.other.backref-and-recursion.regexp
    - match: (\?P=)({{capture_group_name_deprecated}})(?=\))
      captures:
        1: keyword.other.back-reference.named.regexp
        2: variable.other.backref-and-recursion.regexp invalid.deprecated.regexp
    - match: (\?P)(<)({{capture_group_name}})(>)
      captures:
        1: keyword.other.backref-and-recursion.regexp
        2: punctuation.definition.capture-group-name.begin.regexp
        3: entity.name.capture-group.regexp
        4: punctuation.definition.capture-group-name.end.regexp
    - match: (\?P)(<)({{capture_group_name_deprecated}})(>)
      captures:
        1: keyword.other.backref-and-recursion.regexp
        2: punctuation.definition.capture-group-name.begin.regexp
        3: entity.name.capture-group.regexp invalid.deprecated.regexp
        4: punctuation.definition.capture-group-name.end.regexp
    # We can make this more sophisticated to match the | character that separates
    # yes-pattern from no-pattern, but it's not really necessary.
    - match: (\?)(\()([1-9]\d*|{{capture_group_name}})(\))
      captures:
        1: keyword.other.backref-and-recursion.conditional.regexp
        2: punctuation.definition.group.begin.assertion.conditional.regexp
        3: variable.other.back-reference.regexp
        4: punctuation.definition.group.end.assertion.conditional.regexp
    - match: (\?)(\()({{capture_group_name_deprecated}})(\))
      captures:
        1: keyword.other.backref-and-recursion.conditional.regexp
        2: punctuation.definition.group.begin.assertion.conditional.regexp
        3: variable.other.back-reference.regexp invalid.deprecated.regexp
        4: punctuation.definition.group.end.assertion.conditional.regexp

  backrefs:
    - meta_prepend: true
    - match: \\g(<)([1-9][0-9]*|{{capture_group_name}})(>)
      scope: keyword.other.backref-and-recursion.regexp
      captures:
        1: punctuation.definition.capture-group-name.begin.regexp
        2: variable.other.backref-and-recursion.regexp
        3: punctuation.definition.capture-group-name.end.regexp
    - match: \\g(<)({{capture_group_name_deprecated}})(>)
      scope: keyword.other.backref-and-recursion.regexp
      captures:
        1: punctuation.definition.capture-group-name.begin.regexp
        2: variable.other.backref-and-recursion.regexp invalid.deprecated.regexp
        3: punctuation.definition.capture-group-name.end.regexp
