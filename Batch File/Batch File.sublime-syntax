%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
name: Batch File
scope: source.dosbatch
version: 2

file_extensions:
  - bat
  - cmd

###############################################################################

variables:
  # A character that, when unquoted, separates words. A metacharacter is a
  # space, tab, newline, or one of the following characters:
  # ‘|’, ‘&’, ‘,’, ‘;’, ‘<’, or ‘>’.
  metachar: '[\s=,;{{command_terminator_chars}}]'

  # Command names are non-posix identifiers
  cmd_begin: (?={{cmd_start}})
  cmd_break: (?!{{cmd_char}})
  cmd_start: '[^{{metachar}}()]'
  cmd_char: '[^{{metachar}}(]'

  # Command arguments are identifiers, which may start with interpolation.
  opt_punctuation: (?:\s+|^)(--?|//?){{arg_begin}}
  arg_begin: (?={{arg_char}})
  arg_break: (?!{{arg_char}})
  arg_char: '[^{{metachar}}:]'

  command_terminator_chars: '[|&<>]'
  command_terminators: (?:$|(?=\s*[{{command_terminator_chars}}]))

  label_comment: ':[^{{label_start}}]'
  label_name: '{{label_start}}{{label_char}}*'
  label_start: '[^\s+=,;:%!{{command_terminator_chars}}]'
  label_char: '[^%!{{command_terminator_chars}}]'

  set_arithmetic_operators_unquoted: (?:\+|-|\*|/|%%|~)
  set_arithmetic_operators_quoted: (?:\||<<|>>|&|\^)
  set_quoted_end: \"(?![^&|]*(\"|\^$))

  expansion_begin: |-
    (?x:
      %
      (?=
        # anything but no colon, percentage or command terminator char
        ( [^:%{{command_terminator_chars}}]
        # otherwise must not look like followed by a command
        | [{{command_terminator_chars}}](?!\s*\w+[\s{{command_terminator_chars}}])
        )+
        # don't check substrings and substitutions
        (:~?[^%]*)? %
      )
    )

  delayed_expansion_begin: |-
    (?x:
      !
      (?=
        # anything but no colon, exclamation mark or command terminator char
        ( [^:!{{command_terminator_chars}}]
        # otherwise must not look like followed by a command
        | [{{command_terminator_chars}}](?!\s*\w+[\s{{command_terminator_chars}}])
        )+
        # don't check substrings and substitutions
        (:~?[^!]*)? !
      )
    )

  parameter: (%)(?:(?:~([fdpnxsatz]|\$PATH:)*)?\d|\*)

  # variables
  variable: '{{varchars}}+{{varbreak}}'
  varbreak: (?![^="\s])
  varchars:  (?:{{varchar}}|{{varescape}})
  varchar: '[^="\^\s{{command_terminator_chars}}]'
  varescape: \^[^=\s]

  builtin_commands: |-
    \b(?xi:
      assoc | break | cd | chdir | cls | color | copy | date | del | dir
    | dpath | erase | ftype | keys | md | mkdir | mklink | move | path
    | popd | prompt | pushd | ren | rename | rd | rmdir | set | shift | start
    | time | title | type | ver | verify | vol
    )(?=[\s{{command_terminator_chars}}])

  external_commands: |-
    \b(?xi:
      aciniupd | adprep | append | arp | at | atmadm | attrib | autofail
    | backup | basica | bcdboot | bcdedit | bitsadmin | bootcfg | cacls
    | cdburn | certreq | certutil | change logon | change port | change user
    | change | chcp | chglogon | chgport | chgusr | chkdsk | chkntfs | choice
    | cipher | cleanmgr | clip | cluadmin | cluster | cmd | cmdkey | cmstp
    | comp | compact | compress | control | convert | cprofile | cscript
    | csvde | ctty | dcgpofix | debug | defrag | deltree | devcon | dfscmd
    | dhcploc | diantz | diskcomp | diskcopy | diskpart | doskey | driverquery
    | dsadd | dsget | dsmod | dsmove | dsquery | dsrm | dvdburn | edit | edlin
    | epal | eventcreate | eventtriggers | evntcmd | exe2bin | expand
    | explorer | extract | fastopen | fc | fdisk | filever | find | findramd
    | findstr | finger | flattemp | forcedos | forfiles | format | freedisk
    | fsutil | ftp | getmac | gettype | gpresult | gpupdate | graftabl
    | gwbasic | help | helpctr | hostname | icacls | iexpress | ifconfig
    | iisreset | inuse | ipconfig | ipxroute | irftp | jt | keyb | label
    | ldifde | lfnfor | lh | loadhigh | lock | lodctr | logman | logoff | lpq
    | lpr | macfile | makecab | mem | mklink | mmc | mode | more | mountvol
    | mrinfo | msd | msg | msiexec | msinfo32 | mstsc | mtrace | nbtstat
    | net accounts | net computer | net config | net continue | net file
    | net group | net help | net helpmsg | net localgroup | net name
    | net pause | net print | net send | net session | net share | net start
    | net statistics | net stop | net time | net use | net user | net view
    | net | netdom | netsh | netstat | nlb | nlbmgr | nltest | notepad
    | nslookup | ntbackup | ntcmdprompt | ntdsutil | ntsd | ocsetup
    | odbcconf | openfiles | pathping | pbadmin | pentnt | perfmon | ping
    | ping6 | pkgmgr | powercfg | powershell | print | qappsrv | qbasic
    | qchain | qfarm | qprocess | qserver | query process | query session
    | query termserver | query user | query | quser | qwinsta | rasdial
    | rasphone | rcp | readline | recimg | recover | reg | regedit | regedt32
    | regini | register | regsvr32 | relog | replace | reset session | reset
    | restore | rexec | risetup | robocopy | route | rsh | rsm | rss | runas
    | rundll | rundll32 | sc | schtasks | secedit | setx | sfc | shadow
    | shutdown | sort | subinacl | subst | sysocmgr | systeminfo | takeown
    | tapicfg | taskkill | tasklist | tcmsetup | tftp | timeout | tracerpt
    | tracert | tracert6 | tracerte | tree | truename | tscon | tsdiscon
    | tsecimp | tskill | tsprof | tsshutdn | typeperf | tzchange | unlock
    | unlodctr | vhdmount | vssadmin | w32tm | waitfor | where | whoami
    | winmsd | winmsdp | winnt | winnt32 | winpop | winsat | wlbs | wmic
    | wscript | wupdmgr | xcacls | xcopy
    )(?=[\s{{command_terminator_chars}}])

  operator_comparison: (?xi:equ | neq | lss | leq | gtr | geq)\b

###############################################################################

contexts:
  main:
    - include: comments
    - include: statements

  statements:
    - include: blocks
    - include: labels
    - include: operators
    - include: redirections
    - include: control
    - include: commands

  statement:
    - include: unquoted-eoc-pop
    - include: statements

  commands:
    - include: cmd-echo
    - include: cmd-rem
    - include: cmd-set
    - include: cmd-mode
    - include: cmd-title
    - include: cmd-builtin
    - include: cmd-extern
    - include: cmd-other

  control:
    - include: ctl-call
    - include: ctl-if
    - include: ctl-endlocal
    - include: ctl-exit
    - include: ctl-for
    - include: ctl-goto
    - include: ctl-pause
    - include: ctl-setlocal

  expressions:
    - include: groups
    - include: redirections
    - include: cmd-args-values

###[ PROTOTYPES ]#############################################################

  any-pop:
    - match: (?=\S)
      pop: 1

  quoted-eoc-pop:
    - match: '{{command_terminators}}'
      pop: 1

  unquoted-eoc-pop:
    - include: quoted-eoc-pop
    - include: line-continuation

  quoted-eol-pop:
    - match: $
      pop: 1

  unquoted-eol-pop:
    - include: quoted-eol-pop
    - include: line-continuation

  else-pop:
    - include: unquoted-eol-pop
    - include: any-pop

  immediatelly-pop:
    - match: ''
      pop: 1

  expect-unquoted-eoc-pop:
    - include: unquoted-eoc-pop
    - match: \S
      scope: invalid.illegal.expect-end-of-command.dosbatch

  illegal-eol-pop:
    - match: \n
      scope: invalid.illegal.newline.dosbatch
      pop: 1

  illegal-comment-pop:
    - match: '{{label_comment}}'
      set:
        - meta_scope: invalid.illegal.unexpected.dosbatch
        - include: unquoted-eol-pop
    - include: else-pop

  illegal-token-pop:
    - match: \S+
      scope: invalid.illegal.unexpected.dosbatch
      set: else-pop
    - include: unquoted-eol-pop

  line-continuation:
    - match: \^\n
      scope: punctuation.separator.continuation.line.dosbatch
      push:
        - match: ^
          pop: 1

###[ COMMENTS ]###############################################################

  comments:
    # https://ss64.com/nt/rem.html
    - match: '{{label_comment}}'
      scope: punctuation.definition.comment.dosbatch
      push: comment-body

  comment-body:
    - meta_scope: comment.line.colon.dosbatch
    - include: line-continuation
    - match: \n
      pop: 1

  ignored-tail:
    - include: unquoted-eoc-pop
    - match: (?=\S)
      set: ignored-tail-body

  ignored-tail-body:
    - meta_scope: comment.line.ignored.dosbatch
    - include: unquoted-eoc-pop

  ignored-tail-inner:
    - match: .*$\n?
      scope: comment.line.ignored.dosbatch
      pop: 1

###[ LABELS ]#################################################################

  labels:
    - match: ^\s*((:){{label_name}})
      captures:
        1: entity.name.label.dosbatch
        2: punctuation.definition.label.dosbatch

###[ BLOCKS ]#################################################################

  embedded:
    - match: \'
      scope: meta.embedded.dosbatch punctuation.section.embedded.begin.dosbatch
      embed: commands
      embed_scope: meta.embedded.dosbatch source.dosbatch.embedded
      escape: \'(?=\s*($|['{{command_terminator_chars}}]))
      escape_captures:
        0: meta.embedded.dosbatch punctuation.section.embedded.end.dosbatch
    - match: \`
      scope: meta.embedded.dosbatch punctuation.section.embedded.begin.dosbatch
      embed: commands
      embed_scope: meta.embedded.dosbatch source.dosbatch.embedded
      escape: \`(?=\s*($|[`{{command_terminator_chars}}]))
      escape_captures:
        0: meta.embedded.dosbatch punctuation.section.embedded.end.dosbatch

  ctl-block:
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      set: Packages/Batch File/Batch File (Compound).sublime-syntax#block-common
    - include: statement

  blocks:
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: Packages/Batch File/Batch File (Compound).sublime-syntax#block-common
    - match: \)
      scope: invalid.illegal.stray.dosbatch

  block-common:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: 1
    - include: main

  groups:
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: Packages/Batch File/Batch File (Compound).sublime-syntax#group-common

  group-common:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: 1
    - include: separator-semicolon
    - include: separator-comma
    - include: expressions

###[ CONTROL CONDITIONAL ]####################################################

  ctl-if:
    # https://ss64.com/nt/if.html
    - match: (?i:if)\b
      scope: keyword.control.conditional.if.dosbatch
      push:
        - ctl-if-meta
        - ctl-if-condition
    - match: (?i:else)\b
      scope: invalid.illegal.stray.dosbatch

  ctl-if-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.conditional.dosbatch
    - include: immediatelly-pop

  ctl-if-condition:
    - include: unquoted-eoc-pop
    - match: (?i:(/)i)\b
      scope: variable.parameter.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      set:
        - ctl-else
        - ctl-block
        - maybe-operand
        - expect-operator-comparison
        - maybe-operand
        - maybe-operator-not
    - match: (?=\S)
      set:
        - ctl-else
        - ctl-block
        - ctl-if-checks
        - maybe-operator-not

  ctl-if-checks:
    - include: unquoted-eoc-pop
    - match: (?i:errorlevel|cmdextversion)\b
      scope: variable.language.dosbatch
      set:
        - maybe-operand
        - maybe-operator-equal
    - match: (?i:exist)\b
      scope: support.function.builtin.dosbatch
      set: path-pattern
    - match: (?i:defined)\b
      scope: support.function.builtin.dosbatch
      set: maybe-operand
    - match: (?=\S)
      set:
        - maybe-operand
        - expect-operator-comparison
        - maybe-operand

  maybe-operand:
    - include: unquoted-eol-pop
    - match: (?=\S)
      set: operand-body

  operand-body:
    - include: groups
    - include: numbers
    - include: strings
    - include: variables
    - match: '[^-+*=\s{{command_terminator_chars}})][^=\s{{command_terminator_chars}}]*'
      scope: variable.other.readwrite.dosbatch
      pop: 1
    - include: immediatelly-pop

  expect-operator-comparison:
    - match: '{{operator_comparison}}|=='
      scope: keyword.operator.comparison.dosbatch
      pop: 1
    - include: illegal-token-pop

  maybe-operator-equal:
    - match: ==
      scope: keyword.operator.comparison.dosbatch
      pop: 1
    - match: '{{operator_comparison}}'
      scope: invalid.illegal.unexpected.dosbatch
      pop: 1
    - include: else-pop

  maybe-operator-not:
    - match: (?i:not)\b
      scope: keyword.operator.logical.dosbatch
      pop: 1
    - include: else-pop

  ctl-else:
    - match: (?i:else)\b
      scope: keyword.control.conditional.else.dosbatch
      set: ctl-block
    - include: expect-unquoted-eoc-pop

###[ CONTROL FOR ]############################################################

  ctl-for:
    # https://ss64.com/nt/for.html
    - match: \b(?i:for)\b
      scope: keyword.control.loop.for.dosbatch
      push:
        - ctl-for-meta
        - ctl-block
        - ctl-for-do
        - ctl-for-set
        - ctl-for-in
        - ctl-for-parameter
        - ctl-for-switches

  ctl-for-meta:
    - meta_include_prototype: false
    - meta_scope: meta.for.dosbatch
    - include: immediatelly-pop

  ctl-for-switches:
    # https://ss64.com/nt/for_d.html
    - match: (?i:(/)d)\b
      scope: variable.parameter.dir.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_l.html
    - match: (?i:(/)l)\b
      scope: variable.parameter.range.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_f.html
    - match: (?i:(/)f)\b
      scope: variable.parameter.files.dosbatch
      push: ctl-for-maybe-f-args
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_r.html
    - match: (?i:(/)r)\b
      scope: variable.parameter.recursive.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      push: path-pattern
    - match: (?i:/\S+)\b
      scope: invalid.illegal.parameter.dosbatch
      pop: 1
    - include: else-pop

  ctl-for-maybe-f-args:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set: ctl-for-f-args
    - include: else-pop

  ctl-for-f-args:
    - meta_include_prototype: false
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
    - include: string-common
    - match: =
      scope: keyword.operator.assignment.dosbatch
    - match: \b(delims|eol|skip|tokens)\b
      scope: constant.language.dosbatch
    - match: \busebackq\b
      scope: constant.language.dosbatch

  ctl-for-parameter:
    - match: (?=(?i:in|do)\b|\()
      pop: 1
    - match: (%%){{variable}}
      scope: meta.interpolation.dosbatch variable.other.readwrite.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      pop: 1
    - match: \S
      scope: invalid.illegal.parameter.dosbatch
    - include: unquoted-eol-pop

  ctl-for-in:
    - match: \b(?i:in)\b
      scope: keyword.operator.logical.dosbatch
      pop: 1
    - include: else-pop

  ctl-for-set:
    - match: \(
      scope: punctuation.section.set.begin.dosbatch
      set: Packages/Batch File/Batch File (Compound).sublime-syntax#ctl-for-set-body
    - include: else-pop

  ctl-for-set-body:
    - meta_scope: meta.set.dosbatch
    - match: \)
      scope: punctuation.section.set.end.dosbatch
      pop: 1
    - include: invalid-operators
    - include: separator-comma
    - include: constants
    - include: numbers
    - include: embedded
    - include: variables
    - match: (?=\S)
      push: path-pattern

  ctl-for-do:
    - match: \b(?i:do)\b
      scope: keyword.control.loop.do.dosbatch
      pop: 1
    - include: else-pop

###[ CONTROL CALL ]###########################################################

  ctl-call:
    # https://ss64.com/nt/call.html
    - match: \b(?i:call)\b
      scope:
        meta.function-call.dosbatch
        keyword.control.flow.call.dosbatch
      push: ctl-call-identifier

  ctl-call-identifier:
    - meta_content_scope: meta.function-call.dosbatch
    - match: ':'
      scope: punctuation.definition.variable.dosbatch
      set: ctl-call-label
    - include: else-pop

  ctl-call-label:
    - meta_scope:
        meta.function-call.identifier.dosbatch
        variable.label.dosbatch
    - match: '{{cmd_break}}'
      set:
        - cmd-args-meta
        - cmd-args-common
    - include: variable-interpolations

###[ CONTROL EXIT ]###########################################################

  ctl-exit:
    # https://ss64.com/nt/exit.html
    - match: \b(?i:exit)\b
      scope: keyword.control.flow.exit.dosbatch
      push: ctl-exit-args

  ctl-exit-args:
    - meta_scope: meta.command.exit.dosbatch
    - match: (?i:(/)b)\b
      scope: variable.parameter.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    - include: numbers
    - include: variables
    - include: expect-unquoted-eoc-pop

###[ CONTROL GOTO ]###########################################################

  ctl-goto:
    # https://ss64.com/nt/goto.html
    - match: \b(?i:goto)\b
      scope: keyword.control.flow.goto.dosbatch
      push: ctl-goto-args

  ctl-goto-args:
    - meta_scope: meta.command.goto.dosbatch
    - include: unquoted-eoc-pop
    - match: (:)(?i:(eof))\b
      scope: variable.label.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
        2: keyword.control.flow.return.dosbatch
      pop: 1
    - match: (:)?(?=\S)
      scope: variable.label.dosbatch punctuation.definition.variable.dosbatch
      set:
        - meta_content_scope: meta.command.goto.dosbatch variable.label.dosbatch
        - include: escaped-characters
        - include: variables
        - include: unquoted-eoc-pop

###[ CONTROL PAUSE ]##########################################################

  ctl-pause:
    # https://ss64.com/nt/pause.html
    - match: \b(?i:pause)\b
      scope: keyword.control.flow.pause.dosbatch
      push: ctl-pause-args

  ctl-pause-args:
    - meta_scope: meta.command.pause.dosbatch
    - include: expect-unquoted-eoc-pop

###[ CONTEXT SETLOCAL ]#######################################################

  ctl-setlocal:
    # https://ss64.com/nt/setlocal.html
    - match: \b(?i:setlocal)\b
      scope: keyword.context.setlocal.dosbatch
      push: ctl-setlocal-args

  ctl-setlocal-args:
    - meta_scope: meta.command.setlocal.dosbatch
    - match: |-
        \b(?xi:
          EnableDelayedExpansion | DisableDelayedExpansion |
          EnableExtensions | DisableExtensions
        )\b
      scope: constant.language.dosbatch
    - include: expect-unquoted-eoc-pop

###[ CONTEXT ENDLOCAL ]#######################################################

  ctl-endlocal:
    # https://ss64.com/nt/endlocal.html
    - match: \b(?i:endlocal)\b
      scope: keyword.context.endlocal.dosbatch
      push: ctl-endlocal-args

  ctl-endlocal-args:
    - meta_scope: meta.command.endlocal.dosbatch
    - include: expect-unquoted-eoc-pop

###[ COMMANDS ]###############################################################

  cmd-builtin:
    - match: '{{builtin_commands}}'
      scope:
        meta.function-call.identifier.dosbatch
        support.function.builtin.dosbatch
      push:
        - cmd-args-meta
        - cmd-args-common

  cmd-extern:
    - match: (")({{external_commands}})(")
      scope: meta.function-call.identifier.dosbatch
      captures:
         1: punctuation.definition.string.begin.dosbatch
         2: support.function.external.dosbatch
         3: punctuation.definition.string.end.dosbatch
      push:
        - cmd-args-meta
        - cmd-args-common
    - match: '{{external_commands}}'
      scope:
        meta.function-call.identifier.dosbatch
        support.function.external.dosbatch
      push:
        - cmd-args-meta
        - cmd-args-common

  cmd-other:
    - match: '{{cmd_begin}}'
      push:
        - cmd-other-identifier
        - path-pattern-relative

  cmd-other-identifier:
    - meta_scope:
        meta.function-call.identifier.dosbatch
        variable.function.dosbatch
    - include: line-continuation
    - match: '{{cmd_break}}'
      set:
        - cmd-args-meta
        - cmd-args-common
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      push:
        - cmd-other-identifier-quoted-common
        - path-pattern-relative
    - include: path-pattern-common

  cmd-other-identifier-quoted-common:
    - clear_scopes: 1
    - meta_include_prototype: false
    - meta_scope: meta.string.dosbatch variable.function.dosbatch
    - include: string-end
    - include: path-pattern-common
    - include: illegal-eol-pop

  cmd-args-meta:
    - meta_include_prototype: false
    - meta_content_scope: meta.function-call.arguments.dosbatch
    - include: immediatelly-pop

  cmd-args-common:
    - include: redirections
    - include: cmd-args-options
    - include: cmd-args-values
    - include: unquoted-eoc-pop

  cmd-args-options:
    - match: (?:^|\s*)((/)\?){{arg_break}}
      captures:
        1: variable.parameter.help.dosbatch
        2: punctuation.definition.variable.dosbatch
      push: ignored-tail
    - match: '{{opt_punctuation}}'
      captures:
        1: meta.parameter.option.dosbatch
           variable.parameter.option.dosbatch
           punctuation.definition.variable.dosbatch
      push: cmd-args-option-identifier

  cmd-args-option-identifier:
    - meta_content_scope:
        meta.parameter.option.dosbatch
        variable.parameter.option.dosbatch
    - match: '[=:]'
      scope:
        meta.parameter.dosbatch
        keyword.operator.assignment.dosbatch
      set: cmd-args-option-value
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      push: cmd-args-option-identifier-quoted-common
    - include: line-continuation
    - include: variable-interpolations
    - match: '{{arg_break}}'
      pop: 1

  cmd-args-option-identifier-quoted-common:
    - clear_scopes: 1
    - meta_include_prototype: false
    - meta_scope: meta.string.dosbatch variable.parameter.option.dosbatch
    - include: string-end
    - include: variable-interpolations
    - include: illegal-eol-pop

  cmd-args-option-value:
    - meta_content_scope: meta.parameter.value.dosbatch
    - include: cmd-args-values
    - include: immediatelly-pop

  cmd-args-values:
    - include: constants
    - include: numbers
    - match: '{{arg_begin}}'
      branch_point: cmd-args-values
      branch:
        - cmd-args-value-chars
        - path-pattern

  cmd-args-value-chars:
    - match: (?=(\.\.?|\:)[\\%{{metachar}}]|[\\?*])
      fail: cmd-args-values
    - match: '{{arg_break}}'
      pop: 1
    - include: strings
    - include: variables
    - include: line-continuation
    - include: escaped-characters

###[ COMMAND ECHO ]###########################################################

  cmd-echo:
    # https://ss64.com/nt/echo.html
    - match: \b(?i:echo)\b
      scope:
        meta.command.echo.dosbatch
        support.function.builtin.dosbatch
      push: cmd-echo-args

  cmd-echo-args:
    - meta_content_scope: meta.command.echo.arguments.dosbatch
    - include: unquoted-eoc-pop
    - match: \s*((/)\?)
      captures:
        1: variable.parameter.help.dosbatch
        2: punctuation.definition.variable.dosbatch
      push: ignored-tail
    - match: \s*((?i:on|off)){{command_terminators}}
      captures:
        1: constant.language.dosbatch
      push: ignored-tail
    - match: '[.:]'
      scope:
        meta.command.echo.dosbatch
        punctuation.separator.arguments.dosbatch
      set: cmd-echo-output
    - match: \s+
      scope: meta.command.echo.dosbatch
      set: cmd-echo-output

  cmd-echo-output:
    - meta_content_scope:
        meta.command.echo.output.dosbatch
        meta.string.dosbatch string.unquoted.dosbatch
    - match: \"
      push: cmd-echo-output-quoted
    - include: escaped-characters
    - include: variable-interpolations
    - include: unquoted-eoc-pop

  cmd-echo-output-quoted:
    # Note: echo "text" outputs the quotation marks no matter where they are
    #       located. Hence `punctuation` scopes and `string.quoted` feel not
    #       correct in this situation. Distinction is needed anyway as escaped
    #       chars and line continuation are ignored within quotes.
    - meta_include_prototype: false
    - match: \"
      pop: 1
    - match: $
      pop: 2
    - match: \^\^!|%% # prevent variable interpolation
    - include: variable-interpolations

###[ COMMAND MODE ]###########################################################

  cmd-mode:
    - match: \b(?i:mode)\b
      scope:
        meta.command.mode.dosbatch
        support.function.external.dosbatch
      push: cmd-mode-args

  cmd-mode-args:
    - meta_content_scope: meta.command.mode.arguments.dosbatch
    - match: \b(?i:COM\d+|CON|LPT\d+)(:|\b)
      scope: variable.language.device.dosbatch
    # known option values
    - match: \b(?i:on|off|hs|tg)\b
      scope: constant.language.dosbatch
    # COM/LPT options
    - match: \b(?i:BAUD|PARITY|DATA|STOP|to|xon|odsr|octs|dtr|rts|idsr)\b
      scope: variable.parameter.option.dosbatch
    # CON options
    - match: \b(?i:CP|SELECT|COLS|LINES|RATE|DELAY)\b
      scope: variable.parameter.option.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch
    - include: cmd-args-options
    - include: cmd-args-values
    - include: unquoted-eoc-pop

###[ COMMAND REM ]############################################################

  cmd-rem:
    # https://ss64.com/nt/rem.html
    - match: \b(?i:rem)\b
      scope: keyword.declaration.rem.dosbatch
      push: cmd-rem-body

  cmd-rem-body:
    - meta_scope: meta.command.rem.dosbatch
    # meta_content_scope is used since rem should not be
    # highlighted as a comment, but a command
    - meta_content_scope: comment.line.rem.dosbatch
    - include: line-continuation
    - match: \n
      scope: comment.line.rem.dosbatch
      pop: 1

###[ COMMAND SET ]############################################################

  cmd-set:
    # https://ss64.com/nt/set.html
    - match: \b(?i:set)\b
      scope: support.function.builtin.dosbatch
      push:
        - cmd-set-meta
        - cmd-set-type

  cmd-set-meta:
    - meta_include_prototype: false
    - meta_scope: meta.command.set.dosbatch
    - include: immediatelly-pop

  cmd-set-type:
    - include: unquoted-eoc-pop
    - include: cmd-set-arithmetic
    - include: cmd-set-prompt
    - include: cmd-args-illegal-parameter
    - include: cmd-set-quoted
    - include: cmd-set-unquoted

  cmd-set-variable-common:
    - match: \^=
      scope: invalid.illegal.parameter.dosbatch
    - match: \^\S

  cmd-args-illegal-parameter:
    # SET /illegal
    - match: /{{arg_char}}+
      scope: invalid.illegal.parameter.dosbatch

###[ COMMAND SET "VARIABLE=VALUE" ]############################################

  cmd-set-quoted:
    # Quoted assignments require some magic to mimic correct interpreter
    # behaviour, with regards to line continuation and quotation marks.
    #
    # Even though quotation marks (except the very last one) are not removed
    # from the variable or its value, they still effect whether line continuation
    # or logical operators (e.g.: `&`) are effective or not.
    #
    # A line continuation operator following an even occurrence of a quote
    # causes the following line to be concatenated to the value.
    #
    # After doing so, the very last quotation mark is used as value terminator.
    # All content behind is ignored.
    #
    # Logical operators are effective only, if not followed by a quotation mark.
    #
    # The contexts of this section try their best to do so. The main reason
    # for all that effort is to provide some assistance to avoid otherwise
    # hard to debug interpreter issues.
    #
    # SET "variable"=
    # SET "variable="
    # SET "variable=string"
    # SET "variable=string with literal "quotes" !"
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - cmd-set-quoted-meta
        - cmd-set-quoted-variable-inner

  cmd-set-quoted-meta:
    - meta_scope: meta.string.dosbatch
    - include: immediatelly-pop

  cmd-set-quoted-variable-inner:
    - meta_include_prototype: false
    - meta_content_scope: variable.other.readwrite.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch
      set: cmd-set-quoted-value-inner
    - match: \"
      set: cmd-set-quoted-variable-outer
    - include: cmd-set-variable-common
    - include: quoted-eoc-pop

  cmd-set-quoted-variable-outer:
    - meta_include_prototype: false
    - meta_scope: variable.other.readwrite.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch
      pop: 1
      push: cmd-set-quoted-value-outer
    - match: \"
      set: cmd-set-quoted-variable-inner
    - include: cmd-set-variable-common
    - include: unquoted-eoc-pop

  cmd-set-quoted-value-inner:
    - meta_include_prototype: false
    - meta_content_scope: string.unquoted.dosbatch
    # match the very last quotation mark of a non-continued line
    - match: \"(?![^"{{command_terminator_chars}}]*(\"|\^$))
      scope: punctuation.definition.string.end.dosbatch
      set: ignored-tail
    - match: \"
      scope: string.unquoted.dosbatch
      set: cmd-set-quoted-value-outer
    - include: cmd-set-quoted-value-common
    - include: quoted-eol-pop

  cmd-set-quoted-value-outer:
    - meta_include_prototype: false
    - meta_content_scope: string.unquoted.dosbatch
    # match the very last quotation mark of the current line
    - match: \"(?=[^"]*$)
      scope: punctuation.definition.string.end.dosbatch
      pop: 1
      set: ignored-tail-inner
    - match: \"
      scope: string.unquoted.dosbatch
      set: cmd-set-quoted-value-inner
    - include: cmd-set-quoted-value-common
    - include: unquoted-eoc-pop

  cmd-set-quoted-value-common:
    - include: escaped-characters
    - include: variable-interpolations

###[ COMMAND SET VARIABLE=VALUE ]##############################################

  cmd-set-unquoted:
    # SET variable
    # SET variable=string
    # SET variable="string"
    - match: (?=\S)
      set: cmd-set-unquoted-variable-outer

  cmd-set-unquoted-variable-inner:
    - meta_include_prototype: false
    - meta_content_scope: variable.other.readwrite.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch
      set: cmd-set-unquoted-value-inner
    - match: \"
      set: cmd-set-unquoted-variable-outer
    - include: cmd-set-variable-common
    - include: quoted-eoc-pop

  cmd-set-unquoted-variable-outer:
    - meta_include_prototype: false
    - meta_scope: variable.other.readwrite.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch
      pop: 1
      push: cmd-set-unquoted-value-outer
    - match: \"
      set: cmd-set-unquoted-variable-inner
    - include: cmd-set-variable-common
    - include: unquoted-eoc-pop

  cmd-set-unquoted-value-inner:
    - meta_include_prototype: false
    - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
    - match: \"
      scope: meta.string.dosbatch string.unquoted.dosbatch
      set: cmd-set-unquoted-value-outer
    - include: cmd-set-unquoted-value-common
    - include: quoted-eoc-pop

  cmd-set-unquoted-value-outer:
    - meta_include_prototype: false
    - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
    - match: \"
      scope: meta.string.dosbatch string.unquoted.dosbatch
      set: cmd-set-unquoted-value-inner
    - include: cmd-set-unquoted-value-common
    - include: unquoted-eoc-pop

  cmd-set-unquoted-value-common:
    - include: escaped-characters
    - include: variable-interpolations

###[ COMMAND SET /A ]#########################################################

  cmd-set-arithmetic:
    # SET /A "variable"=expression
    # SET /A "variable=expression"
    # SET /A variable=expression
    - match: (?i:(/)a)\b
      scope: variable.parameter.expression.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      set: cmd-set-arithmetic-body

  cmd-set-arithmetic-body:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - cmd-set-arithmetic-meta
        - cmd-set-arithmetic-quoted
    - match: (?=\S)
      set:
        - cmd-set-arithmetic-meta
        - cmd-set-arithmetic-unquoted

  cmd-set-arithmetic-meta:
    - meta_include_prototype: false
    - meta_scope: meta.expression.dosbatch
    - include: immediatelly-pop

  cmd-set-arithmetic-unquoted:
    - include: unquoted-eoc-pop
    - include: cmd-set-arithmetic-operator-common
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: cmd-set-group-unquoted
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      push: cmd-set-arithmetic-quoted
    - include: inside-cmd-set-arithmetic

  cmd-set-group-unquoted:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: 1
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set: cmd-set-group-newly-quoted
    - include: cmd-set-arithmetic-unquoted

  cmd-set-arithmetic-operator-common:
    - match: ({{set_arithmetic_operators_unquoted}})=
      scope: keyword.operator.assignment.augmented.dosbatch
    - match: (\^)(\^=)
      captures:
        1: constant.character.escape.dosbatch
        2: keyword.operator.assignment.augmented.dosbatch
    - match: ({{set_arithmetic_operators_unquoted}})
      scope: keyword.operator.arithmetic.dosbatch
    - match: (\^)(\^)
      captures:
        1: constant.character.escape.dosbatch
        2: keyword.operator.arithmetic.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch

  cmd-set-arithmetic-operator-quoted:
    - match: ({{set_arithmetic_operators_quoted}})=
      scope: keyword.operator.assignment.augmented.dosbatch
    - match: ({{set_arithmetic_operators_quoted}})
      scope: keyword.operator.arithmetic.dosbatch
    - include: cmd-set-arithmetic-operator-common

  cmd-set-arithmetic-quoted:
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      pop: 1
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      set:
        - meta_scope: meta.group.dosbatch
        - match: ''
          set: cmd-set-group-newly-quoted
    - include: cmd-set-arithmetic-operator-quoted
    - include: inside-cmd-set-arithmetic
    - include: unquoted-eol-pop

  cmd-set-group-already-quoted:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: 1
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      set:
        - match: ''
          set: cmd-set-group-unquoted
    - include: cmd-set-arithmetic-quoted

  cmd-set-group-newly-quoted:
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch meta.group.dosbatch
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: cmd-set-group-already-quoted
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      set:
        - match: ''
          set: cmd-set-arithmetic-quoted
    - include: cmd-set-group-already-quoted

  inside-cmd-set-arithmetic:
    - match: '!'
      scope: keyword.operator.logical.dosbatch
    - include: numbers
    - include: separator-comma
    - include: variables
    - include: escaped-characters
    - include: line-continuation
    - match: (?:(?!{{set_arithmetic_operators_unquoted}}|{{set_arithmetic_operators_quoted}}|[=")])\S)+
      scope: variable.other.readwrite.dosbatch

###[ COMMAND SET /P ]#########################################################

  cmd-set-prompt:
    # SET /P "variable"=[promptString] REM ...
    # SET /P "variable=[promptString]" REM ...
    # SET /P variable="[promptString]" REM ...
    # SET /P variable=[promptString]
    - match: (?i:(/)p)\b
      scope: variable.parameter.prompt.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      set:
        - ignored-tail
        - cmd-set-prompt-body

  cmd-set-prompt-body:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - cmd-set-prompt-meta
        - cmd-set-propmpt-unquoted-variable-inner
    - match: (?=\S)
      set:
        - cmd-set-prompt-meta
        - cmd-set-prompt-unquoted-variable-outer

  cmd-set-prompt-meta:
    - meta_include_prototype: false
    - meta_scope: meta.prompt.dosbatch
    - include: immediatelly-pop

  cmd-set-propmpt-unquoted-variable-inner:
    - meta_include_prototype: false
    - meta_content_scope: variable.other.readwrite.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch
      set: cmd-set-prompt-quoted
    - match: \"
      set: cmd-set-prompt-unquoted-variable-outer
    - include: cmd-set-variable-common
    - include: quoted-eoc-pop

  cmd-set-prompt-unquoted-variable-outer:
    - meta_include_prototype: false
    - meta_scope: variable.other.readwrite.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch
      pop: 1
      push: cmd-set-prompt-unquoted
    - match: \"
      set: cmd-set-propmpt-unquoted-variable-inner
    - include: cmd-set-variable-common
    - include: unquoted-eoc-pop

  cmd-set-prompt-quoted:
    # quoted value in quoted prompt
    - match: \"(?=[^&<|>]*\")
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
        - match: \"
          scope:
            punctuation.definition.string.end.dosbatch
            punctuation.definition.string.end.dosbatch
          pop: 1
        - include: cmd-set-prompt-output
    # unquoted value in quoted prompt
    - match: (?=\S)
      set:
        - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
        - match: \"
          scope: punctuation.definition.string.end.dosbatch
          pop: 1
        - include: cmd-set-prompt-output
    - include: unquoted-eol-pop

  cmd-set-prompt-unquoted:
    # quoted value in unquoted prompt
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
        - match: \"
          scope: punctuation.definition.string.end.dosbatch
          pop: 1
        - include: cmd-set-prompt-output
    # unquoted value in unquoted prompt
    - match: (?=\S)
      set:
        - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
        - include: escaped-characters
        - include: redirection-interpolations
        - include: variable-interpolations
        - include: unquoted-eoc-pop
    - include: unquoted-eol-pop

  cmd-set-prompt-output:
    - include: escaped-characters
    - include: variable-interpolations
    - include: line-continuation
    - include: illegal-eol-pop

###[ COMMAND TITLE ]##########################################################

  cmd-title:
    - match: \b(?i:title)\b
      scope:
        meta.command.title.dosbatch
        support.function.builtin.dosbatch
      push: cmd-title-args

  cmd-title-args:
    - meta_content_scope: meta.command.title.arguments.dosbatch
    - include: unquoted-eoc-pop
    - match: \s*((/)\?)
      captures:
        1: variable.parameter.help.dosbatch
        2: punctuation.definition.variable.dosbatch
      push: ignored-tail
    - match: \s*
      scope: meta.command.title.dosbatch
      set: cmd-title-output

  cmd-title-output:
    - meta_content_scope:
        meta.command.title.arguments.dosbatch
        meta.string.dosbatch string.unquoted.dosbatch
    - include: unquoted-eoc-pop

###[ OPERATORS ]##############################################################

  operators:
    - match: \@(?=\S)
      scope: keyword.operator.at.dosbatch
    - match: \&\&?|\|\|
      scope: keyword.operator.logical.dosbatch
    - match: \|
      scope: keyword.operator.assignment.pipe.dosbatch
      push: illegal-comment-pop

  separator-comma:
    - match: ','
      scope: punctuation.separator.comma.dosbatch

  separator-semicolon:
    - match: ';'
      scope: punctuation.separator.semicolon.dosbatch

  invalid-operators:
    - match: '[{{command_terminator_chars}}]'
      scope: invalid.illegal.operator.dosbatch

###[ CONSTANTS ]##############################################################

  constants:
    - match: \b(?i:nul)\b
      scope: constant.language.null.dosbatch

  numbers:
    - match: \b(0[xX])(\h*)\b
      captures:
        0: meta.number.integer.hexadecimal.dosbatch
        1: constant.numeric.base.dosbatch
        2: constant.numeric.value.dosbatch
    - match: ([-+]|\b)(0)([0-7]+)\b
      captures:
        0: meta.number.integer.octal.dosbatch
        1: keyword.operator.arithmetic.dosbatch
        2: constant.numeric.base.dosbatch
        3: constant.numeric.value.dosbatch
    - match: ([-+]|\b)(?:0|[1-9][0-9]*)\b
      captures:
        0: meta.number.integer.decimal.dosbatch constant.numeric.value.dosbatch
        1: keyword.operator.arithmetic.dosbatch

  number:
    - match: \b(0[xX])(\h*)\b
      captures:
        0: meta.number.integer.hexadecimal.dosbatch
        1: constant.numeric.base.dosbatch
        2: constant.numeric.value.dosbatch
      pop: 1
    - match: ([-+]|\b)(0)([0-7]+)\b
      captures:
        0: meta.number.integer.octal.dosbatch
        1: keyword.operator.arithmetic.dosbatch
        2: constant.numeric.base.dosbatch
        3: constant.numeric.value.dosbatch
      pop: 1
    - match: ([-+]|\b)(?:0|[1-9][0-9]*)\b
      captures:
        0: meta.number.integer.decimal.dosbatch constant.numeric.value.dosbatch
        1: keyword.operator.arithmetic.dosbatch
      pop: 1

###[ PATH PATTERNS ]##########################################################

  redirection-interpolations:
    - match: \s*(?=\d*(?:<&?|>[&>]?))
      push: redirection-interpolations-body

  redirection-interpolations-body:
    - match: (\d*)(<&?|>[&>]?)
      captures:
        1: meta.number.integer.decimal.dosbatch
           constant.numeric.value.dosbatch
        2: keyword.operator.assignment.redirection.dosbatch
      set:
        - redirection-interpolations-meta
        - redirection-path

  redirection-interpolations-meta:
    - clear_scopes: 1
    - meta_include_prototype: false
    - meta_scope: meta.interpolation.dosbatch meta.redirection.dosbatch
    - include: immediatelly-pop

  redirections:
    - match: (?=\d*(<&?|>[&>]?))
      push: redirection-body

  redirection:
    - match: (?=\d*(<&?|>[&>]?))
      set: redirection-body

  redirection-body:
    - match: (\d*)(<&?|>[&>]?)
      captures:
        1: meta.number.integer.decimal.dosbatch
           constant.numeric.value.dosbatch
        2: keyword.operator.assignment.redirection.dosbatch
      push:
        - redirection-meta
        - redirection-path
    - include: strings
    - include: variables
    - include: else-pop

  redirection-meta:
    - meta_include_prototype: false
    - meta_scope: meta.redirection.dosbatch
    - include: immediatelly-pop

  redirection-path:
    - match: (?i:nul)\b
      scope: constant.language.null.dosbatch
      pop: 1
    - match: \d\b
      scope: meta.number.integer.decimal.dosbatch constant.numeric.value.dosbatch
      pop: 1
    - include: path-pattern

  path-pattern:
    - include: unquoted-eol-pop
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - path-pattern-quoted-body
        - path-pattern-relative
    - match: (?=(?!%%)\S)
      set:
        - path-pattern-unquoted-body
        - path-pattern-relative
    - include: any-pop

  path-pattern-quoted-body:
    - meta_scope: meta.path.dosbatch meta.string.dosbatch string.quoted.double.dosbatch
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      pop: 1
    - include: illegal-eol-pop
    - include: path-pattern-common

  path-pattern-unquoted-body:
    - meta_scope: meta.path.dosbatch meta.string.dosbatch string.unquoted.dosbatch
    - match: (?=[\s,;"])
      pop: 1
    - include: unquoted-eoc-pop
    - include: path-pattern-common

  path-pattern-common:
    - include: escaped-characters
    - include: variable-interpolations
    - match: '[.:\\/]'
      scope: punctuation.separator.path.dosbatch
      push: path-pattern-relative
    - match: \.
      scope: punctuation.separator.path.dosbatch
    - match: '[*?]'
      scope: constant.other.placeholder.dosbatch

  path-pattern-relative:
    - match: \.\.(?=[\\/])
      scope: constant.language.path.parent.dosbatch
      pop: 1
    - match: \.(?=[\\/])
      scope: constant.language.path.self.dosbatch
      pop: 1
    - include: immediatelly-pop

###[ STRINGS ]################################################################

  strings:
    - match: \"(?=.*\")
      scope: punctuation.definition.string.begin.dosbatch
      push: string-common

  string-common:
    - meta_include_prototype: false
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
    - include: string-end
    - include: escaped-characters
    - include: variable-interpolations
    - include: quoted-eol-pop

  string-end:
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      pop: 1

  escaped-characters:
    - match: '%%|\^\^!|\^.'
      scope: constant.character.escape.dosbatch

###[ VARIABLES ]##############################################################

  # NOTE: To be used in strings to remove `string` scope.
  variable-interpolations:
    # parameters
    - match: '{{parameter}}'
      scope:
        meta.interpolation.dosbatch
        variable.parameter.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      push: clear-string-scope
    # variable expansions
    - match: '{{expansion_begin}}'
      scope:
        meta.interpolation.dosbatch
        punctuation.section.interpolation.begin.dosbatch
      push:
        - clear-string-scope
        - variable-expansion-name
    # delayed variable expansions
    - match: '{{delayed_expansion_begin}}'
      scope:
        meta.interpolation.dosbatch
        punctuation.section.interpolation.begin.dosbatch
      push:
        - clear-string-scope
        - variable-delayed-name

  clear-string-scope:
    - clear_scopes: 1
    - meta_include_prototype: false
    - include: immediatelly-pop

  variables:
    - include: variable-parameters
    - include: variable-expansions
    - include: variable-delayed

  variable-parameters:
    - match: '{{parameter}}'
      scope:
        meta.interpolation.dosbatch
        variable.parameter.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    - match: (%%){{variable}}
      scope:
        meta.interpolation.dosbatch
        variable.other.readwrite.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch

  variable-expansions:
    - match: '{{expansion_begin}}'
      scope:
        meta.interpolation.dosbatch
        punctuation.section.interpolation.begin.dosbatch
      push: variable-expansion-name

  variable-expansion-name:
    - meta_include_prototype: false
    - meta_content_scope: meta.interpolation.dosbatch
    - include: variable-expansion-end
    - include: variable-names
    - match: ':~'
      scope:
        meta.interpolation.substring.dosbatch
        punctuation.separator.dosbatch
      set: variable-expansion-substring
    - match: ':'
      scope:
        meta.interpolation.substitution.dosbatch
        punctuation.separator.dosbatch
      set: variable-expansion-substitution-pattern

  variable-expansion-substring:
    - meta_include_prototype: false
    - meta_content_scope: meta.interpolation.substring.dosbatch
    - include: variable-expansion-end
    - include: variable-delayed
    - include: variable-substrings

  variable-expansion-substitution-pattern:
    - meta_include_prototype: false
    - meta_content_scope: meta.interpolation.substitution.pattern.dosbatch
    - include: variable-expansion-end
    - include: variable-delayed
    - match: =
      scope:
        meta.interpolation.substitution.dosbatch
        keyword.operator.asignment.dosbatch
      set: variable-expansion-substitution-replacement
    - match: '[^=%!]+'
      scope: string.unquoted.dosbatch

  variable-expansion-substitution-replacement:
    - meta_include_prototype: false
    - meta_content_scope: meta.interpolation.substitution.replacement.dosbatch
    - include: variable-expansion-end
    - include: variable-delayed
    - match: '[^%!]+'
      scope: string.unquoted.dosbatch

  variable-expansion-end:
    - match: '%'
      scope:
        meta.interpolation.dosbatch
        punctuation.section.interpolation.end.dosbatch
      pop: 1

  variable-delayed:
    - match: '{{delayed_expansion_begin}}'
      scope:
        meta.interpolation.dosbatch
        punctuation.section.interpolation.begin.dosbatch
      push: variable-delayed-name

  variable-delayed-name:
    - meta_include_prototype: false
    - meta_content_scope: meta.interpolation.dosbatch
    - include: variable-delayed-end
    - include: variable-names
    - match: ':~'
      scope:
        meta.interpolation.substring.dosbatch
        punctuation.separator.dosbatch
      set: variable-delayed-substring
    - match: ':'
      scope:
        meta.interpolation.substitution.dosbatch
        punctuation.separator.dosbatch
      set: variable-delayed-substitution-pattern

  variable-delayed-substring:
    - meta_include_prototype: false
    - meta_content_scope: meta.interpolation.substring.dosbatch
    - include: variable-delayed-end
    - include: variable-expansions
    - include: variable-substrings

  variable-delayed-substitution-pattern:
    - meta_include_prototype: false
    - meta_content_scope: meta.interpolation.substitution.pattern.dosbatch
    - include: variable-delayed-end
    - include: variable-expansions
    - match: =
      scope:
        meta.interpolation.substitution.dosbatch
        keyword.operator.asignment.dosbatch
      set: variable-delayed-substitution-replacement
    - match: '[^=%!]+'
      scope: string.unquoted.dosbatch

  variable-delayed-substitution-replacement:
    - meta_include_prototype: false
    - meta_content_scope: meta.interpolation.substitution.replacement.dosbatch
    - include: variable-delayed-end
    - include: variable-expansions
    - match: '[^%!]+'
      scope: string.unquoted.dosbatch

  variable-delayed-end:
    - match: '!'
      scope:
        meta.interpolation.dosbatch
        punctuation.section.interpolation.end.dosbatch
      pop: 1

  variable-names:
    - match: (?i:errorlevel)\b
      scope: variable.language.dosbatch
    - match: '[^:~%!]+'
      scope: variable.other.readwrite.dosbatch

  variable-substrings:
    - include: separator-comma
    - match: ([-+]?)(0|[1-9][0-9]*)
      scope: meta.number.integer.decimal.dosbatch
      captures:
        1: keyword.operator.arithmetic.dosbatch
        2: constant.numeric.value.dosbatch
    # Note: This makes the whole expansion being handled as plain text.
    - match: ':[^%!{{command_terminator_chars}}]*'
      scope: invalid.illegal.unexpected.dosbatch
