%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Batch File
file_extensions:
  - bat
  - cmd
scope: source.dosbatch
variables:
  colon_comment_start: ':[+=,;: ]'
  command_terminator_chars: '&<|>\)'
  command_terminators: (?:$|(?=\s*[{{command_terminator_chars}}]))
  label: '[^+=,;:\s%!{{command_terminator_chars}}][^%!{{command_terminator_chars}}]*'
  set_arithmetic_operators_unquoted: (?:\+|-|\*|/|%%|~)
  set_arithmetic_operators_quoted: (?:\||<<|>>|&|\^)

  builtin_commands:  |-
    \b(?xi:
      assoc|break|cd|chdir|cls|color|copy|date|del|dir|dpath|erase|ftype|
      keys|md|mkdir|mklink|move|path|pause|popd|prompt|pushd|ren|rename|rd|
      rmdir|set|shift|start|time|title|type|ver|verify|vol
    )(?=[\s{{command_terminator_chars}}])

  external_commands:  |-
    \b(?xi:
      aciniupd|adprep|append|arp|at|atmadm|attrib|autofail|backup|basica|
      bcdboot|bcdedit|bitsadmin|bootcfg|cacls|cdburn|certreq|certutil|
      change logon|change port|change user|change|chcp|chglogon|chgport|chgusr|
      chkdsk|chkntfs|choice|cipher|cleanmgr|clip|cluadmin|cluster|cmd|cmdkey|cmstp|
      comp|compact|compress|control|convert|cprofile|cscript|csvde|ctty|
      dcgpofix|debug|defrag|deltree|devcon|dfscmd|dhcploc|diantz|diskcomp|
      diskcopy|diskpart|doskey|driverquery|dsadd|dsget|dsmod|dsmove|dsquery|
      dsrm|dvdburn|edit|edlin|epal|eventcreate|eventtriggers|evntcmd|
      exe2bin|expand|explorer|extract|fastopen|fc|fdisk|filever|find|findramd|
      findstr|finger|flattemp|forcedos|forfiles|format|freedisk|fsutil|ftp|
      getmac|gettype|gpresult|gpupdate|graftabl|gwbasic|help|helpctr|hostname|
      icacls|iexpress|ifconfig|iisreset|inuse|ipconfig|ipxroute|irftp|jt|keyb|
      label|ldifde|lfnfor|lh|loadhigh|lock|lodctr|logman|logoff|lpq|lpr|macfile|
      makecab|mem|mklink|mmc|mode|more|mountvol|mrinfo|msd|msg|
      msiexec|msinfo32|mstsc|mtrace|nbtstat|net accounts|net computer|net config|
      net continue|net file|net group|net help|net helpmsg|net localgroup|
      net name|net pause|net print|net send|net session|net share|net start|
      net statistics|net stop|net time|net use|net user|net view|net|netdom|netsh|
      netstat|nlb|nlbmgr|nltest|notepad|nslookup|ntbackup|ntcmdprompt|ntdsutil|
      ntsd|ocsetup|odbcconf|openfiles|pathping|pbadmin|pentnt|perfmon|
      ping|ping6|pkgmgr|powercfg|powershell|print|qappsrv|qbasic|
      qchain|qfarm|qprocess|qserver|query process|query session|query termserver|
      query user|query|quser|qwinsta|rasdial|rasphone|rcp|readline|recimg|
      recover|reg|regedit|regedt32|regini|register|regsvr32|relog|
      replace|reset session|reset|restore|rexec|risetup|robocopy|route|rsh|
      rsm|rss|runas|rundll|rundll32|sc|schtasks|secedit|setx|sfc|
      shadow|shutdown|sort|subinacl|subst|sysocmgr|systeminfo|takeown|
      tapicfg|taskkill|tasklist|tcmsetup|tftp|timeout|tracerpt|tracert|
      tracert6|tracerte|tree|truename|tscon|tsdiscon|tsecimp|tskill|tsprof|
      tsshutdn|typeperf|tzchange|unlock|unlodctr|vhdmount|
      vssadmin|w32tm|waitfor|where|whoami|winmsd|winmsdp|winnt|winnt32|winpop|
      winsat|wlbs|wmic|wscript|wupdmgr|xcacls|xcopy
    )(?=[\s{{command_terminator_chars}}])

  operator_comparison: (?i:equ|neq|lss|leq|gtr|geq)\b

contexts:
  main:
    - include: statements

  statements:
    - include: comments
    - include: labels
    - include: operators
    - include: control
    - include: commands

  commands:
    - include: command-echo
    - include: command-set
    - include: command-builtin
    - include: command-other

  control:
    - include: control-call
    - include: control-conditional
    - include: control-endlocal
    - include: control-exit
    - include: control-for
    - include: control-goto
    - include: control-pause
    - include: control-setlocal

  expressions:
    - include: groups
    - include: constants
    - include: numbers
    - include: strings
    - include: escaped-characters
    - include: line-continuation
    - include: variables
    - include: switches

###[ PROTOTYPES ]#############################################################

  any-pop:
    - match: (?=\S)
      pop: true

  eoc-pop:
    - match: '{{command_terminators}}'
      pop: true
    - include: line-continuation

  eol-pop:
    - match: $
      pop: true
    - include: line-continuation

  else-pop:
    - include: eol-pop
    - include: any-pop

  immediatelly-pop:
    - match: ''
      pop: true

  expect-eoc-pop:
    - include: eoc-pop
    - match: \S
      scope: invalid.illegal.expect-end-of-command.dosbatch

  illegal-eol-pop:
    - match: \n
      scope: invalid.illegal.newline.dosbatch
      pop: true

  illegal-token-pop:
    - match: \S+
      scope: invalid.illegal.unexpected.dosbatch
      set: else-pop
    - include: eol-pop

  line-continuation:
    - match: \^\n
      scope: punctuation.separator.continuation.line.dosbatch
      push:
        - match: ^
          pop: true

###[ COMMENTS ]###############################################################

  comments:
    - match: (?:^|(&))\s*({{colon_comment_start}})
      captures:
        1: keyword.operator.conditional.dosbatch
        2: comment.line.colon.dosbatch punctuation.definition.comment.dosbatch
      push:
        - meta_content_scope: comment.line.colon.dosbatch
        - include: line-continuation
        - match: \n
          scope: comment.line.colon.dosbatch
          pop: true
    # REM command
    # https://technet.microsoft.com/en-us/library/bb490986.aspx
    - match: \b(?i:rem)\b
      scope: keyword.declaration.rem.dosbatch
      push:
        # meta_content_scope is used since rem should not be
        # highlighted as a comment, but a command
        - meta_content_scope: comment.line.rem.dosbatch
        - include: line-continuation
        - match: \n
          scope: comment.line.rem.dosbatch
          pop: true

###[ LABELS ]#################################################################

  labels:
    - match: ^\s*((:){{label}})
      captures:
        1: entity.name.label.dosbatch
        2: punctuation.definition.label.dosbatch

###[ BLOCKS ]#################################################################

  embedded:
    - match: (['`])
      scope: meta.embedded.dosbatch punctuation.section.embedded.begin.dosbatch
      embed: commands
      embed_scope: meta.embedded.dosbatch source.dosbatch.embedded
      escape: \1(?=\s*($|['`{{command_terminator_chars}}]))
      escape_captures:
        0: meta.embedded.dosbatch punctuation.section.embedded.end.dosbatch

  control-block:
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      set:
        - meta_scope: meta.group.dosbatch
        - match: \)
          scope: punctuation.section.group.end.dosbatch
          pop: true
        - include: statements
    - include: eoc-pop
    - include: statements

  groups:
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push:
        - meta_scope: meta.group.dosbatch
        - match: \)
          scope: punctuation.section.group.end.dosbatch
          pop: true
        - include: separator-semicolon
        - include: separator-comma
        - include: expressions

###[ CONTROL CONDITIONAL ]####################################################

  control-conditional:
    # https://ss64.com/nt/if.html
    - match: (?i:if)\b
      scope: keyword.control.conditional.if.dosbatch
      push:
        - control-if-meta
        - control-if-block
        - control-if-condition
    - match: (?i:else)\b
      scope: invalid.illegal.stray.dosbatch

  control-if-meta:
      - meta_scope: meta.if.dosbatch
      - include: immediatelly-pop

  control-if-condition:
      - include: eoc-pop
      - match: (?i:(/)i)\b
        scope: variable.parameter.dosbatch
        captures:
          1: punctuation.definition.variable.dosbatch
        set:
          - expect-operand
          - expect-operator-comparison
          - expect-operand
          - maybe-operator-not
      - match: (?=\S)
        set:
          - control-if-checks
          - maybe-operator-not

  control-if-block:
    - match: (?=\()
      set: [control-else, control-block]
    - include: eoc-pop
    - include: statements

  control-if-checks:
    - include: eoc-pop
    - match: (?i:errorlevel|cmdextversion)\b
      scope: variable.language.dosbatch
      set: [expect-operand, maybe-operator-equal]
    - match: (?i:exist)\b
      scope: support.function.builtin.dosbatch
      set: [path-patterns, else-pop]
    - match: (?i:defined)\b
      scope: support.function.builtin.dosbatch
      set: [else-pop, expect-operand, else-pop]
    - match: (?=\S)
      set: [expect-operand, expect-operator-comparison, expect-operand]

  expect-operand:
    - match: (?={{operator_comparison}}|==)
      pop: true
    - include: groups
    - include: numbers
    - include: strings
    - include: variables
    - match: '[^-+*\s{{command_terminator_chars}})][^\s{{command_terminator_chars}}]*'
      scope: variable.other.readwrite.dosbatch
      pop: true
    - include: immediatelly-pop

  expect-operator-comparison:
    - match: '{{operator_comparison}}|=='
      scope: keyword.operator.comparison.dosbatch
      set: else-pop
    - include: illegal-token-pop

  maybe-operator-equal:
    - match: ==
      scope: keyword.operator.comparison.dosbatch
      set: else-pop
    - match: '{{operator_comparison}}'
      scope: invalid.illegal.unexpected.dosbatch
      set: else-pop
    - include: else-pop

  maybe-operator-not:
    - match: (?i:not)\b
      scope: keyword.operator.logical.dosbatch
      set: else-pop
    - include: else-pop

  control-else:
    - match: (?i:else)\b|(?=\()
      scope: keyword.control.conditional.else.dosbatch
      set: control-block
    - match: $|(?=[&<|>])
      pop: true
    - include: line-continuation
    - match: \S
      scope: invalid.illegal.dosbatch

###[ CONTROL FOR ]############################################################

  control-for:
    # https://ss64.com/nt/for.html
    - match: \b(?i:for)\b
      scope: keyword.control.loop.for.dosbatch
      push:
        - control-for-meta
        - control-block
        - control-for-do
        - control-for-set
        - control-for-in
        - control-for-parameter
        - control-for-switches

  control-for-meta:
    - meta_scope: meta.for.dosbatch
    - include: immediatelly-pop

  control-for-switches:
    # https://ss64.com/nt/for_d.html
    - match: (?i:(/)d)\b
      scope: variable.parameter.dir.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_l.html
    - match: (?i:(/)l)\b
      scope: variable.parameter.range.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_f.html
    - match: (?i:(/)f)\b
      scope: variable.parameter.files.dosbatch
      push: control-for-switches-f-body
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_r.html
    - match: (?i:(/)r)\b
      scope: variable.parameter.recursive.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      push: path-patterns
    - match: (?i:/\S+)\b
      scope: invalid.illegal.parameter.dosbatch
      pop: true
    - include: else-pop

  control-for-switches-f-body:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
        - include: strings-common
        - match: =
          scope: punctuation.separator.mapping.key-value.dosbatch
        - match: \b(delims|eol|skip|tokens)\b
          scope: constant.language.dosbatch
        - match: \busebackq\b
          scope: constant.language.dosbatch
    - include: else-pop

  control-for-parameter:
    - match: (?=(?i:in|do)\b|\()
      pop: true
    - match: (%%?)\w+\b
      scope: meta.variable.dosbatch variable.other.readwrite.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      pop: true
    - match: \S
      scope: invalid.illegal.parameter.dosbatch
    - include: eol-pop

  control-for-in:
    - match: \b(?i:in)\b
      scope: keyword.operator.logical.dosbatch
      pop: true
    - include: else-pop

  control-for-set:
    - match: \(
      scope: punctuation.section.set.begin.dosbatch
      set:
        - - meta_scope: meta.set.dosbatch
          - include: immediatelly-pop
        - - match: \)
            scope: punctuation.section.set.end.dosbatch
            pop: true
          - include: invalid-operators
          - include: separator-comma
          - include: constants
          - include: numbers
          - include: embedded
          - include: variables
          - match: (?=\S)
            push: path-patterns
    - include: else-pop

  control-for-do:
    - match: \b(?i:do)\b
      scope: keyword.control.loop.do.dosbatch
      pop: true
    - include: else-pop

###[ CONTROL FLOW ]###########################################################

  control-call:
    # https://ss64.com/nt/call.html
    - match: \b(?i:call)\b
      scope: keyword.control.flow.call.dosbatch
      push:
        - - meta_scope: meta.command.call.dosbatch
          - include: immediatelly-pop
        - - include: eoc-pop
          - match: ':'
            scope: punctuation.definition.variable.dosbatch
            set:
              - meta_scope: meta.function-call.name.dosbatch variable.label.dosbatch
              - match: (?=\s)
                set: function-arguments
              - include: variables-interpolation
              - include: eoc-pop
          - include: commands
          - include: command-other

  control-exit:
    # https://ss64.com/nt/exit.html
    - match: \b(?i:exit)\b
      scope: keyword.control.flow.exit.dosbatch
      push:
        - meta_scope: meta.command.exit.dosbatch
        - match: (?i:(/)b)\b
          scope: variable.parameter.dosbatch
          captures:
            1: punctuation.definition.variable.dosbatch
        - include: numbers
        - include: variables
        - include: expect-eoc-pop

  control-goto:
    # https://ss64.com/nt/goto.html
    - match: \b(?i:goto)\b
      scope: keyword.control.flow.goto.dosbatch
      push:
        - meta_scope: meta.command.goto.dosbatch
        - include: eoc-pop
        - match: (:)(?i:(eof))\b
          scope: variable.label.dosbatch
          captures:
            1: punctuation.definition.variable.dosbatch
            2: keyword.control.flow.return.dosbatch
          pop: true
        - match: (:)?(?=\S)
          scope: variable.label.dosbatch punctuation.definition.variable.dosbatch
          set:
            - meta_content_scope: meta.command.goto.dosbatch variable.label.dosbatch
            - include: escaped-characters
            - include: variables
            - include: eoc-pop

  control-pause:
    # https://ss64.com/nt/pause.html
    - match: \b(?i:pause)\b
      scope: keyword.control.flow.pause.dosbatch
      push:
        - meta_scope: meta.command.pause.dosbatch
        - include: expect-eoc-pop

  control-setlocal:
    # https://ss64.com/nt/setlocal.html
    - match: \b(?i:setlocal)\b
      scope: keyword.control.namespace.setlocal.dosbatch
      push:
        - meta_scope: meta.command.setlocal.dosbatch
        - match: |-
            \b(?xi:
              EnableDelayedExpansion | DisableDelayedExpansion |
              EnableExtensions | DisableExtensions
            )\b
          scope: constant.language.dosbatch
        - include: expect-eoc-pop

  control-endlocal:
    # https://ss64.com/nt/endlocal.html
    - match: \b(?i:endlocal)\b
      scope: keyword.control.namespace.endlocal.dosbatch
      push:
        - meta_scope: meta.command.endlocal.dosbatch
        - include: expect-eoc-pop

###[ COMMANDS ]###############################################################

  command-builtin:
    - match: '{{builtin_commands}}'
      scope: meta.function-call.name.dosbatch support.function.builtin.dosbatch
      push: function-arguments
    - match: '{{external_commands}}'
      scope: meta.function-call.name.dosbatch support.function.external.dosbatch
      push: function-arguments

  command-other:
    - match: \"
      scope: punctuation.definition.variable.begin.dosbatch
      push:
        - - meta_scope: meta.function-call.name.dosbatch variable.function.dosbatch
          - match: \"
            scope: punctuation.definition.variable.end.dosbatch
            set: function-arguments
          - include: path-patterns-common
          - include: illegal-eol-pop
        - path-patterns-relative
    - match: (?=[^&<|>\s])
      push:
        - - meta_scope: meta.function-call.name.dosbatch variable.function.dosbatch
          - match: (?=\s)
            set: function-arguments
          - include: path-patterns-common
          - include: eoc-pop
        - path-patterns-relative

  function-arguments:
    - meta_content_scope: meta.function-call.arguments.dosbatch
    - include: expressions
    - include: eoc-pop

  switches:
    - match: \s+(/\?|([-/][-/]?)[-_[:alnum:]]+)(?:([=:])|(?=\s))
      captures:
        1: variable.parameter.switch.dosbatch
        2: punctuation.definition.variable.dosbatch
        3: punctuation.separator.mapping.key-value.dosbatch

###[ COMMAND ECHO ]###########################################################

  command-echo:
    # https://ss64.com/nt/echo.html
    - match: \b(?i:echo)\b
      scope: support.function.builtin.dosbatch
      push: [command-echo-meta, command-echo-body]

  command-echo-meta:
    - meta_scope: meta.command.echo.dosbatch
    - include: immediatelly-pop

  command-echo-body:
    - match: |-
        (?x: \s* (?i: (on|off) | ((/)\?) ) {{command_terminators}})
      captures:
        1: constant.language.dosbatch
        2: variable.parameter.help.dosbatch
        3: punctuation.definition.variable.dosbatch
      pop: true
    - match: '[.:]'
      scope: punctuation.separator.arguments.dosbatch
      set: command-echo-output
    - match: \s+
      set: command-echo-output

  command-echo-output:
    - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      push:
        - clear_scopes: 1
        - meta_scope: string.quoted.double.dosbatch
        - include: strings-common
    - include: escaped-characters
    - include: variables-interpolation
    - include: eoc-pop

###[ COMMAND SET ]############################################################

  command-set:
    - match: \b(?i:set)\b
      scope: support.function.builtin.dosbatch
      push: inside-command-set

  inside-command-set:
      - include: eoc-pop
      - include: escaped-characters
      - include: variables
      - match: (")\s*([^ ][^=]*)(=)
        captures:
          1: punctuation.definition.string.begin.dosbatch
          2: variable.other.readwrite.dosbatch
          3: keyword.operator.assignment.dosbatch
        push:
          - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
          - match: '"(?=\s*(?:$|[{{command_terminator_chars}}]))'
            scope: punctuation.definition.string.end.dosbatch
            pop: true
          - include: line-continuation
          - include: escaped-characters
          - include: variables
          - include: numbers
          - include: groups
      - match: ([^ ][^=]*)(=)
        captures:
          1: variable.other.readwrite.dosbatch
          2: keyword.operator.assignment.dosbatch
        push:
          - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
          - include: eoc-pop
          - include: escaped-characters
          - include: variables
          - match: \"
            scope: punctuation.definition.string.begin.dosbatch
            push:
              - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
              - clear_scopes: 1
              - include: strings-common
      - include: numbers
      - include: groups
      - match: \b([^ ][^=\n]*)$
        scope: variable.other.readwrite.dosbatch
      - include: strings
      - match: '\s+/[aA]\s+' # SET arithmetic
        push:
          - meta_content_scope: meta.expression.set.dosbatch
          - include: set-arithmetic-unquoted
      - match: '\s+/[pP]\s+' # SET from standard input
        push:
          - include: eoc-pop
          - match: ([^ ][^=]*)(=)
            captures:
              1: variable.other.readwrite.dosbatch
              2: keyword.operator.assignment.dosbatch
            set:
              - meta_scope: meta.prompt.set.dosbatch
              - include: eoc-pop
              - match: (?=")
                push:
                  - include: strings
                  - include: eoc-pop
                  - match: .
                    scope: comment.line.ignored.dosbatch
              - match: ''
                push:
                  - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
                  - include: eoc-pop
                  - include: escaped-characters
                  - include: variables

  set-arithmetic-unquoted:
    - include: eoc-pop
    - include: set-arithmetic-operator-common
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: command-set-group-unquoted
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      push: set-arithmetic-quoted
    - include: inside-command-set-arithmetic

  command-set-group-unquoted:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: true
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set: command-set-group-newly-quoted
    - include: set-arithmetic-unquoted

  set-arithmetic-operator-common:
    - match: ({{set_arithmetic_operators_unquoted}})=
      scope: keyword.operator.assignment.augmented.dosbatch
    - match: (\^)(\^=)
      captures:
        1: constant.character.escape.dosbatch
        2: keyword.operator.assignment.augmented.dosbatch
    - match: ({{set_arithmetic_operators_unquoted}})
      scope: keyword.operator.arithmetic.dosbatch
    - match: (\^)(\^)
      captures:
        1: constant.character.escape.dosbatch
        2: keyword.operator.arithmetic.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch

  set-arithmetic-operator-quoted:
    - match: ({{set_arithmetic_operators_quoted}})=
      scope: keyword.operator.assignment.augmented.dosbatch
    - match: ({{set_arithmetic_operators_quoted}})
      scope: keyword.operator.arithmetic.dosbatch
    - include: set-arithmetic-operator-common

  set-arithmetic-quoted:
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      pop: true
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      set:
        - meta_scope: meta.group.dosbatch
        - match: ''
          set: command-set-group-newly-quoted
    - include: set-arithmetic-operator-quoted
    - include: inside-command-set-arithmetic
    - include: eol-pop

  command-set-group-already-quoted:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: true
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      set:
        - match: ''
          set: command-set-group-unquoted
    - include: set-arithmetic-quoted

  command-set-group-newly-quoted:
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch meta.group.dosbatch
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: command-set-group-already-quoted
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      set:
        - match: ''
          set: set-arithmetic-quoted
    - include: command-set-group-already-quoted

  inside-command-set-arithmetic:
    - match: '!'
      scope: keyword.operator.logical.dosbatch
    - include: numbers
    - include: separator-comma
    - include: variables
    - include: escaped-characters
    - include: line-continuation
    - match: (?:(?!{{set_arithmetic_operators_unquoted}}|{{set_arithmetic_operators_quoted}}|[=")])\S)+
      scope: variable.other.readwrite.dosbatch

###[ OPERATORS ]##############################################################

  operators:
    - match: '@(?=\S)'
      scope: keyword.operator.at.dosbatch
    - match: '&&?|\|\|'
      scope: keyword.operator.conditional.dosbatch
    - match: '\|'
      scope: keyword.operator.pipe.dosbatch
    - match: '<&?|>[&>]?'
      scope: keyword.operator.redirection.dosbatch

  separator-comma:
    - match: ','
      scope: punctuation.separator.comma.dosbatch

  separator-semicolon:
    - match: ';'
      scope: punctuation.separator.semicolon.dosbatch

  invalid-operators:
    - match: '[{{command_terminator_chars}}]'
      scope: invalid.illegal.operator.dosbatch

###[ CONSTANTS ]##############################################################

  constants:
    - match: \b(?i:nul)\b
      scope: constant.language.dosbatch

  numbers:
    - match: \b(0[xX])\h*\b
      scope: constant.numeric.integer.hexadecimal.dosbatch
      captures:
        1: punctuation.definition.numeric.hexadecimal.dosbatch
    - match: \b(0)[0-7]+\b
      scope: constant.numeric.integer.octal.dosbatch
      captures:
        1: punctuation.definition.numeric.octal.dosbatch
    - match: \b(?:0|[1-9][0-9]*)\b
      scope: constant.numeric.integer.decimal.dosbatch

###[ PATH PATTERNS ]##########################################################

  path-patterns:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
          - match: \"
            scope: punctuation.definition.string.end.dosbatch
            pop: true
          - include: illegal-eol-pop
          - include: path-patterns-common
        - path-patterns-relative
    - match: (?=(?!%%)\S)
      set:
        - - meta_scope: meta.string.dosbatch string.unquoted.dosbatch
          - match: (?=[\s,;"])
            pop: true
          - include: eoc-pop
          - include: path-patterns-common
        - path-patterns-relative
    - include: else-pop

  path-patterns-common:
    - include: escaped-characters
    - include: variables-interpolation
    - match: '[.:\\/]'
      scope: punctuation.separator.path.dosbatch
      push: path-patterns-relative
    - match: \.
      scope: punctuation.separator.path.dosbatch
    - match: '[*?]'
      scope: constant.other.placeholder.dosbatch

  path-patterns-relative:
    - match: \.\.(?=[\\/])
      scope: constant.language.path.parent.dosbatch
      pop: true
    - match: \.(?=[\\/])
      scope: constant.language.path.self.dosbatch
      pop: true
    - match: ''
      pop: true

###[ STRINGS ]################################################################

  strings:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      push:
        - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
        - include: strings-common

  strings-common:
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      pop: true
    - include: illegal-eol-pop
    - include: escaped-characters
    - include: variables-interpolation

  escaped-characters:
  - match: '%%|\^\^!|\^.'
    scope: constant.character.escape.dosbatch

###[ VARIABLES ]##############################################################

  variables-interpolation:
    - match: (?=[!%][^%])
      push:
        - clear_scopes: 1
        - meta_scope: meta.interpolation.dosbatch
        - include: variables
        - include: immediatelly-pop

  variables:
    - include: variable-parameter
    - include: variable-expansion
    - include: variable-delayed

  variable-parameter:
    - match: (%)(?:(?:~([fdpnxsatz]|\$PATH:)*)?\d|\*)
      scope: variable.parameter.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch

  variable-expansion:
    - match: '%(?=[^{{command_terminator_chars}}%]*(?:%|\^$))'
      scope: punctuation.definition.variable.begin.dosbatch
      push:
        - meta_scope: meta.variable.dosbatch
        - match: '%'
          scope: punctuation.definition.variable.end.dosbatch
          pop: true
          # substring expansion
        - match: ':~'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.substring.dosbatch
            - include: variable-expansion-end
            - include: variable-substring
          # string substitution
        - match: ':'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.substitution.dosbatch
            - match: '='
              scope: punctuation.separator.dosbatch
              set:
                - meta_content_scope: meta.substitution.dosbatch
                - include: variable-expansion-substitution
            - include: variable-expansion-substitution
        - include: variable-name

  variable-expansion-substitution:
    - include: variable-expansion-end
    - include: variable-delayed
    - include: variable-substitution

  variable-expansion-end:
    - match: (?=%)
      pop: true
    - include: eol-pop

  variable-delayed:
    - match: '!(?=[^{{command_terminator_chars}}!]*(?:!|\^$))'
      scope: punctuation.definition.variable.begin.dosbatch
      push:
        - meta_scope: meta.variable.dosbatch
        - match: '!'
          scope: punctuation.definition.variable.end.dosbatch
          pop: true
          # substring expansion
        - match: ':~'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.substring.dosbatch
            - include: variable-delayed-end
            - include: variable-substring
          # string substitution
        - match: ':'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.substitution.dosbatch
            - match: '='
              scope: punctuation.separator.dosbatch
              set:
                - meta_content_scope: meta.substitution.dosbatch
                - include: variable-delayed-substitution
            - include: variable-delayed-substitution
        - include: variable-name

  variable-delayed-substitution:
    - include: variable-delayed-end
    - include: variable-expansion
    - include: variable-substitution

  variable-delayed-end:
    - match: (?=!)
      pop: true
    - include: eol-pop

  variable-name:
    - include: eol-pop
    - match: \b(?i:errorlevel)\b
      scope: variable.language.dosbatch
    - match: .
      scope: variable.other.readwrite.dosbatch

  variable-substitution:
    - match: .
      scope: string.unquoted.dosbatch

  variable-substring:
    - match: '[-+]?(?:0|[1-9][0-9]*)'
      scope: constant.numeric.integer.decimal.dosbatch
    - include: separator-comma
