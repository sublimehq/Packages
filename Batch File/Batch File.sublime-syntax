%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Batch File
file_extensions:
  - bat
  - cmd
scope: source.dosbatch
variables:
  colon_comment_start: ':[+=,;: ]'
  command_terminators: (?=$\n|[&|><)])
  set_arithmetic_operators_unquoted: (?:\+|-|\*|/|%%|~)
  set_arithmetic_operators_quoted: (?:\||<<|>>|&|\^)

contexts:
  main:
    - include: statements

  statements:
    - include: comments
    - include: commands
    - include: control-for
    - include: control
    - include: labels
    - include: expressions

  expressions:
    - include: groups
    - include: constants
    - include: numbers
    - include: strings
    - include: operators
    - include: escaped-characters
    - include: variables

###[ PROTOTYPES ]#############################################################

  any-pop:
    - match: (?=\S)
      pop: true

  eol-pop:
    - match: $
      pop: true

  else-pop:
    - include: any-pop
    - include: eol-pop

  immediatelly-pop:
    - match: ''
      pop: true

  illegal-eol-pop:
    - match: \n
      scope: invalid.illegal.newline.dosbatch
      pop: true

###[ COMMENTS ]###############################################################

  comments:
    - match: (?:^|(&))\s*(({{colon_comment_start}}).*\n)
      captures:
        1: keyword.operator.conditional.dosbatch
        2: comment.line.colon.dosbatch
        3: punctuation.definition.comment.dosbatch
    # REM command
    # https://technet.microsoft.com/en-us/library/bb490986.aspx
    - match: \b(?i:rem)\b
      scope: keyword.command.rem.dosbatch
      push:
        # meta_content_scope is used since rem should not be
        # highlighted as a comment, but a command
        - meta_content_scope: comment.line.rem.dosbatch
        - match: \n
          scope: comment.line.rem.dosbatch
          pop: true

###[ LABELS ]#################################################################

  labels:
    - match: ^\s*((:)[^+=,;:\s].*$)
      captures:
        1: entity.name.label.dosbatch
        2: punctuation.definition.label.dosbatch

###[ BLOCKS ]#################################################################

  embedded:
    - match: (['`])
      scope: meta.embedded.dosbatch punctuation.section.embedded.begin.dosbatch
      embed: statements
      embed_scope: meta.embedded.dosbatch source.dosbatch.embedded
      escape: \1(?=\s*($|['`&|><)]))
      escape_captures:
        0: meta.embedded.dosbatch punctuation.section.embedded.end.dosbatch

  groups:
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push:
        - meta_scope: meta.group.dosbatch
        - match: \)
          scope: punctuation.section.group.end.dosbatch
          pop: true
        - include: separator-semicolon
        - include: separator-comma
        - include: statements

###[ CONTROL ]################################################################

  control:
    # flow
    - match: \b(?i:call)\b
      scope: keyword.control.flow.call.dosbatch
      push: stmt-call-body
    - match: \b(?i:exit)\b
      scope: keyword.control.flow.exit.dosbatch
    - match: \b(?i:goto)\b
      scope: keyword.control.flow.goto.dosbatch
      push: stmt-goto-body
    # conditional
    - match: \b(?i:if)\b
      scope: keyword.control.conditional.if.dosbatch
      push: stmt-if-condition
    - match: \b(?i:else)\b
      scope: keyword.control.conditional.else.dosbatch

  stmt-call-body:
    - match: (:)\w+\b
      scope: variable.label.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      pop: true
    - match: \w+\b
      scope: meta.function-call.dosbatch variable.function.dosbatch
      pop: true
    - include: else-pop

  stmt-goto-body:
    - match: (:)(?i:(eof))\b
      scope: variable.label.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
        2: keyword.control.flow.return.dosbatch
      pop: true
    - match: (:)?\w+\b
      scope: variable.label.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      pop: true
    - include: else-pop

  stmt-if-condition:
    - match: \b(?i:errorlevel|cmdextversion)\b
      scope: variable.language.dosbatch
      pop: true
    - match: \b(?i:exist)\b
      scope: keyword.other.dosbatch
      set: path-patterns
    - match: \b(?i:defined)\b
      scope: keyword.other.dosbatch
      pop: true
    - include: operator-not
    - include: else-pop

###[ CONTROL FOR ]############################################################

  control-for:
    # https://ss64.com/nt/for.html
    - match: \b(?i:for)\b
      scope: keyword.control.loop.for.dosbatch
      push:
        - control-for-do
        - control-for-set
        - control-for-in
        - control-for-parameter
        - control-for-switches

  control-for-switches:
    # https://ss64.com/nt/for_d.html
    - match: (?i:(/)d)\b
      scope: variable.parameter.dir.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_l.html
    - match: (?i:(/)l)\b
      scope: variable.parameter.range.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_f.html
    - match: (?i:(/)f)\b
      scope: variable.parameter.files.dosbatch
      push: control-for-switches-f-body
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_r.html
    - match: (?i:(/)r)\b
      scope: variable.parameter.recursive.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      push: path-patterns
    - match: (?i:/\S+)\b
      scope: invalid.illegal.parameter.dosbatch
      pop: true
    - include: else-pop

  control-for-switches-f-body:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - meta_include_prototype: false
        - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
        - include: strings-common
        - match: =
          scope: punctuation.separator.mapping.key-value.dosbatch
        - match: \b(delims|eol|skip|tokens)\b
          scope: constant.language.dosbatch
        - match: \busebackq\b
          scope: constant.language.dosbatch
    - include: else-pop

  control-for-parameter:
    - match: (?=(?i:in|do)\b|\()
      pop: true
    - match: (%%?)\w+\b
      scope: variable.other.readwrite.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      pop: true
    - match: \S
      scope: invalid.illegal.parameter.dosbatch
    - include: eol-pop

  control-for-in:
    - match: \b(?i:in)\b
      scope: keyword.operator.logical.dosbatch
      pop: true
    - include: else-pop

  control-for-set:
    - match: \(
      scope: punctuation.section.set.begin.dosbatch
      set:
        - - meta_scope: meta.set.dosbatch
          - include: immediatelly-pop
        - - match: \)
            scope: punctuation.section.set.end.dosbatch
            pop: true
          - include: separator-comma
          - include: constants
          - include: numbers
          - include: embedded
          - include: variables
          - match: (?=\S)
            push: path-patterns
    - include: else-pop

  control-for-do:
    - match: \b(?i:do)\b
      scope: keyword.control.loop.do.dosbatch
      pop: true
    - include: else-pop

###[ COMMANDS ]###############################################################

  commands:
    - match: \b(?i:echo)\b
      scope: keyword.command.dosbatch
      push:
        - match: '{{command_terminators}}'
          pop: true
        - include: escaped-characters
        - include: variables
        - include: numbers
        - include: strings
    - include: command-set
    - match: \b(?i:aciniupd|adprep|append|arp|assoc|at|atmadm|attrib|autofail|backup|basica|bcdedit|bootcfg|break|cacls|cd|cdburn|certreq|certutil|change logon|change port|change user|change|chcp|chdir|chglogon|chgport|chgusr|chkdsk|chkntfs|choice|cipher|cleanmgr|clip|cls|cluadmin|cluster|cmd|cmdkey|cmstp|color|comp|compact|control|convert|copy|cprofile|cscript|csvde|ctty|date|dcgpofix|debug|defrag|del|deltree|devcon|dfscmd|dhcploc|diantz|dir|diskcomp|diskcopy|diskpart|doskey|dpath|driverquery|dsadd|dsget|dsmod|dsmove|dsquery|dsrm|dvdburn|edit|edlin|endlocal|epal|erase|eventcreate|eventtriggers|evntcmd|exe2bin|expand|explorer|extract|fastopen|fc|fdisk|filever|find|findramd|findstr|finger|flattemp|forcedos|forfiles|format|freedisk|fsutil|ftp|ftype|getmac|gettype|gpresult|gpupdate|graftabl|gwbasic|help|helpctr|hostname|icacls|iexpress|ifconfig|iisreset|inuse|ipconfig|ipxroute|irftp|jt|keyb|label|ldifde|lfnfor|lh|loadhigh|lock|lodctr|logman|logoff|lpq|lpr|macfile|makecab|md|mem|mkdir|mklink|mmc|mode|more|mountvol|move|mrinfo|msd|msg|msiexec|msinfo32|mstsc|mtrace|nbtstat|net accounts|net computer|net config|net continue|net file|net group|net help|net helpmsg|net localgroup|net name|net pause|net print|net send|net session|net share|net start|net statistics|net stop|net time|net use|net user|net view|net|netdom|netsh|netstat|nlb|nlbmgr|nltest|notepad|nslookup|ntbackup|ntcmdprompt|ntdsutil|ntsd|ocsetup|odbcconf|openfiles|path|pathping|pause|pbadmin|pentnt|perfmon|ping|ping6|pkgmgr|popd|powercfg|print|prompt|pushd|qappsrv|qbasic|qchain|qfarm|qprocess|qserver|query process|query session|query termserver|query user|query|quser|qwinsta|rasdial|rasphone|rcp|rd|readline|recimg|recover|reg|regedit|regedt32|regini|register|regsvr32|relog|rem|ren|rename|replace|reset session|reset|restore|rexec|risetup|rmdir|robocopy|route|rsh|rsm|rss|runas|rundll|rundll32|sc|schtasks|secedit|set|setlocal|setx|sfc|shadow|shift|shutdown|sort|start|subinacl|subst|sysocmgr|systeminfo|takeown|tapicfg|taskkill|tasklist|tcmsetup|tftp|time|timeout|title|tracerpt|tracert|tracert6|tracerte|tree|truename|tscon|tsdiscon|tsecimp|tskill|tsprof|tsshutdn|type|typeperf|tzchange|unlock|unlodctr|ver|verify|vhdmount|vol|vssadmin|w32tm|waitfor|where|whoami|winmsd|winmsdp|winnt|winnt32|winpop|winsat|wlbs|wmic|wscript|wupdmgr|xcacls|xcopy)\b
      scope: keyword.command.dosbatch

  command-set:
    - match: \b(?i:set)\b
      scope: keyword.command.dosbatch
      push: inside-command-set

  inside-command-set:
      - match: '{{command_terminators}}'
        pop: true
      - include: escaped-characters
      - include: variables
      - match: (")\s*([^ ][^=]*)(=)
        captures:
          1: punctuation.definition.string.begin.dosbatch
          2: variable.other.readwrite.dosbatch
          3: keyword.operator.assignment.dosbatch
        push:
          - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
          - match: '"(?=\s*(?:{{command_terminators}}))'
            scope: punctuation.definition.string.end.dosbatch
            pop: true
          - include: escaped-characters
          - include: variables
          - include: numbers
          - include: groups
      - match: ([^ ][^=]*)(=)
        captures:
          1: variable.other.readwrite.dosbatch
          2: keyword.operator.assignment.dosbatch
        push:
          - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
          - match: '{{command_terminators}}'
            pop: true
          - include: variables
          - match: \"
            scope: punctuation.definition.string.begin.dosbatch
            push:
              - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
              - clear_scopes: 1
              - include: strings-common
      - include: numbers
      - include: groups
      - match: \b([^ ][^=\n]*)$
        scope: variable.other.readwrite.dosbatch
      - include: strings
      - match: '\s+/[aA]\s+' # SET arithmetic
        push:
          - meta_content_scope: meta.expression.set.dosbatch
          - include: set-arithmetic-unquoted
      - match: '\s+/[pP]\s+' # SET from standard input
        push:
          - match: '{{command_terminators}}'
            pop: true
          - match: ([^ ][^=]*)(=)
            captures:
              1: variable.other.readwrite.dosbatch
              2: keyword.operator.assignment.dosbatch
            set:
              - meta_scope: meta.prompt.set.dosbatch
              - match: '{{command_terminators}}'
                pop: true
              - match: (?=")
                push:
                  - include: strings
                  - match: '{{command_terminators}}'
                    pop: true
                  - match: .
                    scope: comment.line.ignored.dosbatch
              - match: ''
                push:
                  - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
                  - match: '{{command_terminators}}'
                    pop: true
                  - include: variables

  set-arithmetic-unquoted:
    - match: '{{command_terminators}}'
      pop: true
    - include: set-arithmetic-operator-common
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: command-set-group-unquoted
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      push: set-arithmetic-quoted
    - include: inside-command-set-arithmetic

  command-set-group-unquoted:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: true
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set: command-set-group-newly-quoted
    - include: set-arithmetic-unquoted

  set-arithmetic-operator-common:
    - match: ({{set_arithmetic_operators_unquoted}})=
      scope: keyword.operator.assignment.augmented.dosbatch
    - match: (\^)(\^=)
      captures:
        1: constant.character.escape.dosbatch
        2: keyword.operator.assignment.augmented.dosbatch
    - match: ({{set_arithmetic_operators_unquoted}})
      scope: keyword.operator.arithmetic.dosbatch
    - match: (\^)(\^)
      captures:
        1: constant.character.escape.dosbatch
        2: keyword.operator.arithmetic.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch

  set-arithmetic-operator-quoted:
    - match: ({{set_arithmetic_operators_quoted}})=
      scope: keyword.operator.assignment.augmented.dosbatch
    - match: ({{set_arithmetic_operators_quoted}})
      scope: keyword.operator.arithmetic.dosbatch
    - include: set-arithmetic-operator-common

  set-arithmetic-quoted:
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      pop: true
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      set:
        - meta_scope: meta.group.dosbatch
        - match: ''
          set: command-set-group-newly-quoted
    - include: set-arithmetic-operator-quoted
    - include: inside-command-set-arithmetic
    - include: eol-pop

  command-set-group-already-quoted:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: true
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      set:
        - match: ''
          set: command-set-group-unquoted
    - include: set-arithmetic-quoted

  command-set-group-newly-quoted:
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch meta.group.dosbatch
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: command-set-group-already-quoted
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      set:
        - match: ''
          set: set-arithmetic-quoted
    - include: command-set-group-already-quoted

  inside-command-set-arithmetic:
    - match: '!'
      scope: keyword.operator.logical.dosbatch
    - include: numbers
    - include: separator-comma
    - include: variables
    - include: escaped-characters
    - match: (?:(?!{{set_arithmetic_operators_unquoted}}|{{set_arithmetic_operators_quoted}}|[=")])\S)+
      scope: variable.other.readwrite.dosbatch

###[ OPERATORS ]##############################################################

  operators:
    - include: operator-not
    - match: '@(?=\S)'
      scope: keyword.operator.at.dosbatch
    - match: \b(?i:EQU|NEQ|LSS|LEQ|GTR|GEQ)\b|==
      scope: keyword.operator.comparison.dosbatch
    - match: '&&?|\|\|'
      scope: keyword.operator.conditional.dosbatch
    - match: '\|'
      scope: keyword.operator.pipe.dosbatch
    - match: '<&?|>[&>]?'
      scope: keyword.operator.redirection.dosbatch

  operator-not:
    - match: \b(?i:not)\b
      scope: keyword.operator.logical.dosbatch

  separator-comma:
    - match: ','
      scope: punctuation.separator.comma.dosbatch

  separator-semicolon:
    - match: ';'
      scope: punctuation.separator.semicolon.dosbatch

###[ CONSTANTS ]##############################################################

  constants:
    - match: \b(?i:nul)\b
      scope: constant.language.dosbatch

  numbers:
    - match: \b(0[xX])\h*\b
      scope: constant.numeric.integer.hexadecimal.dosbatch
      captures:
        1: punctuation.definition.numeric.hexadecimal.dosbatch
    - match: \b(0)[0-7]+\b
      scope: constant.numeric.integer.octal.dosbatch
      captures:
        1: punctuation.definition.numeric.octal.dosbatch
    - match: \b(?:0|[1-9][0-9]*)\b
      scope: constant.numeric.integer.decimal.dosbatch

###[ PATH PATTERNS ]##########################################################

  path-patterns:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
          - include: strings-common
          - include: path-patterns-common
        - path-patterns-relative
    - match: (?=(?!%%)\S)
      set:
        - - meta_scope: meta.string.dosbatch string.unquoted.dosbatch
          - include: escaped-characters
          - include: variables-interpolation
          - include: path-patterns-common
          - match: (?=[\s<>",;|)])
            pop: true
        - path-patterns-relative
    - include: else-pop

  path-patterns-common:
    - match: '[.:\\/]'
      scope: punctuation.separator.path.dosbatch
      push: path-patterns-relative
    - match: \.
      scope: punctuation.separator.path.dosbatch
    - match: '[*?]'
      scope: constant.other.placeholder.dosbatch

  path-patterns-relative:
    - match: \.\.(?=[\\/])
      scope: constant.language.path.parent.dosbatch
      pop: true
    - match: \.(?=[\\/])
      scope: constant.language.path.self.dosbatch
      pop: true
    - match: ''
      pop: true

###[ STRINGS ]################################################################

  strings:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      push:
        - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
        - include: strings-common

  strings-common:
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      pop: true
    - include: illegal-eol-pop
    - include: escaped-characters
    - include: variables-interpolation

  escaped-characters:
  - match: '%%|\^\^!|\^.|\^\n'
    scope: constant.character.escape.dosbatch

###[ VARIABLES ]##############################################################

  variables-interpolation:
    - match: (?=%)
      push:
        - clear_scopes: 1
        - meta_scope: meta.interpolation.dosbatch
        - include: variables
        - include: immediatelly-pop

  variables:
    # global parameters
    - match: '(%)((~([fdpnxsatz]|\$PATH:)*)?\d|\*)'
      scope: variable.parameter.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    - match: (?i)(%)errorlevel(%)
      scope: variable.language.dosbatch
      captures:
        1: punctuation.definition.variable.begin.dosbatch
        2: punctuation.definition.variable.end.dosbatch
    - include: variable
    - include: variable-delayed-expansion

  variable:
    # variable
    - match: '%(?=[^%]+%)'
      scope: punctuation.definition.variable.begin.dosbatch
      push:
        - meta_scope: variable.other.readwrite.dosbatch
        - match: '(%)|\n'
          captures:
            1: punctuation.definition.variable.end.dosbatch
          pop: true
          # substring expansion
        - match: ':~'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.variable.substring.dosbatch
            - match: '(?=%|\n)'
              pop: true
            - include: inside-variable-substring
          # string substitution
        - match: ':'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.variable.substitution.dosbatch
            - match: '(?=%|\n)'
              pop: true
            - include: variable-substitution-replacee
            - match: '='
              scope: punctuation.separator.dosbatch
              push:
                - match: '(?=%|\n)'
                  pop: true
                - include: variable-delayed-expansion
                - match: '[^%]+'
                  scope: meta.string.dosbatch string.unquoted.dosbatch

  variable-delayed-expansion:
    # variable with delayed expansion
    - match: '!(?=[^!]+!)'
      scope: punctuation.definition.variable.begin.dosbatch
      push:
        - meta_scope: variable.other.readwrite.dosbatch
        - match: '(!)|\n'
          captures:
            1: punctuation.definition.variable.end.dosbatch
          pop: true
          # substring expansion
        - match: ':~'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.variable.substring.dosbatch
            - match: '(?=!|\n)'
              pop: true
            - include: inside-variable-substring
          # string substitution
        - match: ':'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.variable.substitution.dosbatch
            - match: '(?=!|\n)'
              pop: true
            - include: variable
            - include: variable-substitution-replacee
            - match: '='
              scope: punctuation.separator.dosbatch
              push:
                - match: '(?=!|\n)'
                  pop: true
                - include: variable
                - match: '[^!]+'
                  scope: meta.string.dosbatch string.unquoted.dosbatch

  variable-substitution-replacee:
    - match: '[^=]+'
      scope: meta.string.dosbatch string.unquoted.dosbatch

  inside-variable-substring:
    - match: '[+-]?\d+'
      scope: constant.numeric.dosbatch
    - include: separator-comma
