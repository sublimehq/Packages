%YAML 1.2
---
# TODO:
# - if 1 (echo str()) else ()

# https://www.sublimetext.com/docs/syntax.html
name: Batch File
scope: source.dosbatch
version: 2

file_extensions:
  - bat
  - cmd

###############################################################################

variables:
  colon_comment_start: ':[+=,;: ]'
  command_terminator_chars: '&<|>\)'
  command_terminators: (?:$|(?=\s*[{{command_terminator_chars}}]))
  label: '[^+=,;:\s%!{{command_terminator_chars}}][^%!{{command_terminator_chars}}]*'
  set_arithmetic_operators_unquoted: (?:\+|-|\*|/|%%|~)
  set_arithmetic_operators_quoted: (?:\||<<|>>|&|\^)
  set_quoted_end: \"(?![^&|]*(\"|\^$))

  commands: (?:{{builtin_commands}}|{{external_commands}})

  builtin_commands: |-
    \b(?xi:
      assoc | break | cd | chdir | cls | color | copy | date | del | dir
    | dpath | erase | ftype | keys | md | mkdir | mklink | move | path | pause
    | popd | prompt | pushd | ren | rename | rd | rmdir | set | shift | start
    | time | title | type | ver | verify | vol
    )(?=[\s{{command_terminator_chars}}])

  external_commands: |-
    \b(?xi:
      aciniupd | adprep | append | arp | at | atmadm | attrib | autofail
    | backup | basica | bcdboot | bcdedit | bitsadmin | bootcfg | cacls
    | cdburn | certreq | certutil | change logon | change port | change user
    | change | chcp | chglogon | chgport | chgusr | chkdsk | chkntfs | choice
    | cipher | cleanmgr | clip | cluadmin | cluster | cmd | cmdkey | cmstp
    | comp | compact | compress | control | convert | cprofile | cscript
    | csvde | ctty | dcgpofix | debug | defrag | deltree | devcon | dfscmd
    | dhcploc | diantz | diskcomp | diskcopy | diskpart | doskey | driverquery
    | dsadd | dsget | dsmod | dsmove | dsquery | dsrm | dvdburn | edit | edlin
    | epal | eventcreate | eventtriggers | evntcmd | exe2bin | expand
    | explorer | extract | fastopen | fc | fdisk | filever | find | findramd
    | findstr | finger | flattemp | forcedos | forfiles | format | freedisk
    | fsutil | ftp | getmac | gettype | gpresult | gpupdate | graftabl
    | gwbasic | help | helpctr | hostname | icacls | iexpress | ifconfig
    | iisreset | inuse | ipconfig | ipxroute | irftp | jt | keyb | label
    | ldifde | lfnfor | lh | loadhigh | lock | lodctr | logman | logoff | lpq
    | lpr | macfile | makecab | mem | mklink | mmc | mode | more | mountvol
    | mrinfo | msd | msg | msiexec | msinfo32 | mstsc | mtrace | nbtstat
    | net accounts | net computer | net config | net continue | net file
    | net group | net help | net helpmsg | net localgroup | net name
    | net pause | net print | net send | net session | net share | net start
    | net statistics | net stop | net time | net use | net user | net view
    | net | netdom | netsh | netstat | nlb | nlbmgr | nltest | notepad
    | nslookup | ntbackup | ntcmdprompt | ntdsutil | ntsd | ocsetup
    | odbcconf | openfiles | pathping | pbadmin | pentnt | perfmon | ping
    | ping6 | pkgmgr | powercfg | powershell | print | qappsrv | qbasic
    | qchain | qfarm | qprocess | qserver | query process | query session
    | query termserver | query user | query | quser | qwinsta | rasdial
    | rasphone | rcp | readline | recimg | recover | reg | regedit | regedt32
    | regini | register | regsvr32 | relog | replace | reset session | reset
    | restore | rexec | risetup | robocopy | route | rsh | rsm | rss | runas
    | rundll | rundll32 | sc | schtasks | secedit | setx | sfc | shadow
    | shutdown | sort | subinacl | subst | sysocmgr | systeminfo | takeown
    | tapicfg | taskkill | tasklist | tcmsetup | tftp | timeout | tracerpt
    | tracert | tracert6 | tracerte | tree | truename | tscon | tsdiscon
    | tsecimp | tskill | tsprof | tsshutdn | typeperf | tzchange | unlock
    | unlodctr | vhdmount | vssadmin | w32tm | waitfor | where | whoami
    | winmsd | winmsdp | winnt | winnt32 | winpop | winsat | wlbs | wmic
    | wscript | wupdmgr | xcacls | xcopy
    )(?=[\s{{command_terminator_chars}}])

  operator_comparison: (?xi:equ | neq | lss | leq | gtr | geq)\b

###############################################################################

contexts:
  main:
    - include: comments
    - include: statements

  statements:
    - include: blocks
    - include: labels
    - include: operators
    - include: control
    - include: commands

  commands:
    - include: command-echo
    - include: command-rem
    - include: command-set
    - include: command-builtin
    - include: command-other

  control:
    - include: control-call
    - include: control-conditional
    - include: control-endlocal
    - include: control-exit
    - include: control-for
    - include: control-goto
    - include: control-pause
    - include: control-setlocal

  expressions:
    - include: groups
    - include: constants
    - include: numbers
    - include: strings
    - include: escaped-characters
    - include: line-continuation
    - include: variables
    - include: switches
    - match: (?=[^\s|{{command_terminator_chars}}]*?[.:?*\\])
      push: path-pattern

###[ PROTOTYPES ]#############################################################

  any-pop:
    - match: (?=\S)
      pop: 1

  eoc-pop:
    - match: '{{command_terminators}}'
      pop: 1
    - include: line-continuation

  eol-pop:
    - match: $
      pop: 1
    - include: line-continuation

  else-pop:
    - include: eol-pop
    - include: any-pop

  immediatelly-pop:
    - match: ''
      pop: 1

  expect-eoc-pop:
    - include: eoc-pop
    - match: \S
      scope: invalid.illegal.expect-end-of-command.dosbatch

  illegal-eol-pop:
    - match: \n
      scope: invalid.illegal.newline.dosbatch
      pop: 1

  illegal-comment-pop:
    - match: '{{colon_comment_start}}'
      set:
        - meta_scope: invalid.illegal.unexpected.dosbatch
        - include: eol-pop
    - include: else-pop

  illegal-token-pop:
    - match: \S+
      scope: invalid.illegal.unexpected.dosbatch
      set: else-pop
    - include: eol-pop

  line-continuation:
    - match: \^\n
      scope: punctuation.separator.continuation.line.dosbatch
      push:
        - match: ^
          pop: 1

###[ COMMENTS ]###############################################################

  comments:
    # https://ss64.com/nt/rem.html
    - match: '{{colon_comment_start}}'
      scope: punctuation.definition.comment.dosbatch
      push: line-comment-body
    # block comments
    - match: (^:\d+:$)
      scope: punctuation.definition.comment.begin.dosbatch
      push: block-comment-body

  block-comment-body:
    - meta_scope: comment.block.documentation.dosbatch
    - match: \1
      scope: punctuation.definition.comment.end.dosbatch
      pop: 1

  line-comment-body:
    - meta_scope: comment.line.colon.dosbatch
    - include: line-continuation
    - match: \n
      pop: 1

  ignored-tail:
    - include: eoc-pop
    - match: '{{colon_comment_start}}'
      scope: punctuation.definition.comment.dosbatch
      set: ignored-tail-comment
    - match: (?i:rem)\b
      scope: keyword.declaration.rem.dosbatch
      set: ignored-tail-rem
    - match: (?=\S)
      set: ignored-tail-other

  ignored-tail-comment:
    - meta_scope: comment.line.colon.dosbatch
    - include: eoc-pop

  ignored-tail-rem:
    - meta_scope: meta.command.rem.dosbatch
    # meta_content_scope is used since rem should not be
    # highlighted as a comment, but a command
    - meta_content_scope: comment.line.rem.dosbatch
    - include: eoc-pop

  ignored-tail-other:
    - meta_scope: comment.line.ignored.dosbatch
    - include: eoc-pop

###[ LABELS ]#################################################################

  labels:
    - match: ^\s*((:){{label}})
      captures:
        1: entity.name.label.dosbatch
        2: punctuation.definition.label.dosbatch

###[ BLOCKS ]#################################################################

  embedded:
    - match: \'
      scope: meta.embedded.dosbatch punctuation.section.embedded.begin.dosbatch
      embed: commands
      embed_scope: meta.embedded.dosbatch source.dosbatch.embedded
      escape: \'(?=\s*($|['{{command_terminator_chars}}]))
      escape_captures:
        0: meta.embedded.dosbatch punctuation.section.embedded.end.dosbatch
    - match: \`
      scope: meta.embedded.dosbatch punctuation.section.embedded.begin.dosbatch
      embed: commands
      embed_scope: meta.embedded.dosbatch source.dosbatch.embedded
      escape: \`(?=\s*($|[`{{command_terminator_chars}}]))
      escape_captures:
        0: meta.embedded.dosbatch punctuation.section.embedded.end.dosbatch

  control-block:
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      set: block-common
    - include: eoc-pop
    - include: statements

  blocks:
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: block-common

  block-common:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: 1
    - include: main

  groups:
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: group-common

  group-common:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: 1
    - include: separator-semicolon
    - include: separator-comma
    - include: expressions

###[ CONTROL CONDITIONAL ]####################################################

  control-conditional:
    # https://ss64.com/nt/if.html
    - match: (?i:if)\b
      scope: keyword.control.conditional.if.dosbatch
      push:
        - control-if-meta
        - control-if-block
        - control-if-condition
    - match: (?i:else)\b
      scope: invalid.illegal.stray.dosbatch

  control-if-meta:
      - meta_scope: meta.if.dosbatch
      - include: immediatelly-pop

  control-if-condition:
      - include: eoc-pop
      - match: (?i:(/)i)\b
        scope: variable.parameter.dosbatch
        captures:
          1: punctuation.definition.variable.dosbatch
        set:
          - expect-operand
          - expect-operator-comparison
          - expect-operand
          - maybe-operator-not
      - match: (?=\S)
        set:
          - control-if-checks
          - maybe-operator-not

  control-if-block:
    - match: (?=\()
      set: [control-else, control-block]
    - include: eoc-pop
    - include: statements

  control-if-checks:
    - include: eoc-pop
    - match: (?i:errorlevel|cmdextversion)\b
      scope: variable.language.dosbatch
      set: [expect-operand, maybe-operator-equal]
    - match: (?i:exist)\b
      scope: support.function.builtin.dosbatch
      set: [path-pattern, else-pop]
    - match: (?i:defined)\b
      scope: support.function.builtin.dosbatch
      set: [else-pop, expect-operand, else-pop]
    - match: (?=\S)
      set: [expect-operand, expect-operator-comparison, expect-operand]

  expect-operand:
    - match: (?={{operator_comparison}}|==)
      pop: 1
    - include: groups
    - include: numbers
    - include: strings
    - include: variables
    - match: '[^-+*\s{{command_terminator_chars}})][^\s{{command_terminator_chars}}]*'
      scope: variable.other.readwrite.dosbatch
      pop: 1
    - include: immediatelly-pop

  expect-operator-comparison:
    - match: '{{operator_comparison}}|=='
      scope: keyword.operator.comparison.dosbatch
      set: else-pop
    - include: illegal-token-pop

  maybe-operator-equal:
    - match: ==
      scope: keyword.operator.comparison.dosbatch
      set: else-pop
    - match: '{{operator_comparison}}'
      scope: invalid.illegal.unexpected.dosbatch
      set: else-pop
    - include: else-pop

  maybe-operator-not:
    - match: (?i:not)\b
      scope: keyword.operator.logical.dosbatch
      set: else-pop
    - include: else-pop

  control-else:
    - match: (?i:else)\b|(?=\()
      scope: keyword.control.conditional.else.dosbatch
      set: control-block
    - match: $|(?=[&<|>])
      pop: 1
    - include: line-continuation
    - match: \S
      scope: invalid.illegal.dosbatch

###[ CONTROL FOR ]############################################################

  control-for:
    # https://ss64.com/nt/for.html
    - match: \b(?i:for)\b
      scope: keyword.control.loop.for.dosbatch
      push:
        - control-for-meta
        - control-block
        - control-for-do
        - control-for-set
        - control-for-in
        - control-for-parameter
        - control-for-switches

  control-for-meta:
    - meta_scope: meta.for.dosbatch
    - include: immediatelly-pop

  control-for-switches:
    # https://ss64.com/nt/for_d.html
    - match: (?i:(/)d)\b
      scope: variable.parameter.dir.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_l.html
    - match: (?i:(/)l)\b
      scope: variable.parameter.range.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_f.html
    - match: (?i:(/)f)\b
      scope: variable.parameter.files.dosbatch
      push: control-for-maybe-f-args
      captures:
        1: punctuation.definition.variable.dosbatch
    # https://ss64.com/nt/for_r.html
    - match: (?i:(/)r)\b
      scope: variable.parameter.recursive.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      push: path-pattern
    - match: (?i:/\S+)\b
      scope: invalid.illegal.parameter.dosbatch
      pop: 1
    - include: else-pop

  control-for-maybe-f-args:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set: control-for-f-args
    - include: else-pop

  control-for-f-args:
    - meta_include_prototype: false
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
    - include: string-common
    - match: =
      scope: punctuation.separator.mapping.key-value.dosbatch
    - match: \b(delims|eol|skip|tokens)\b
      scope: constant.language.dosbatch
    - match: \busebackq\b
      scope: constant.language.dosbatch

  control-for-parameter:
    - match: (?=(?i:in|do)\b|\()
      pop: 1
    - match: (%%?)\w+\b
      scope: meta.variable.dosbatch variable.other.readwrite.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      pop: 1
    - match: \S
      scope: invalid.illegal.parameter.dosbatch
    - include: eol-pop

  control-for-in:
    - match: \b(?i:in)\b
      scope: keyword.operator.logical.dosbatch
      pop: 1
    - include: else-pop

  control-for-set:
    - match: \(
      scope: punctuation.section.set.begin.dosbatch
      set: control-for-set-body
    - include: else-pop

  control-for-set-body:
    - meta_scope: meta.set.dosbatch
    - match: \)
      scope: punctuation.section.set.end.dosbatch
      pop: 1
    - include: invalid-operators
    - include: separator-comma
    - include: constants
    - include: numbers
    - include: embedded
    - include: variables
    - match: (?=\S)
      push: path-pattern

  control-for-do:
    - match: \b(?i:do)\b
      scope: keyword.control.loop.do.dosbatch
      pop: 1
    - include: else-pop

###[ CONTROL FLOW ]###########################################################

  control-call:
    # https://ss64.com/nt/call.html
    - match: \b(?i:call)\b
      scope: keyword.control.flow.call.dosbatch
      push:
        - - meta_scope: meta.command.call.dosbatch
          - include: immediatelly-pop
        - - include: eoc-pop
          - match: ':'
            scope: punctuation.definition.variable.dosbatch
            set:
              - meta_scope: meta.function-call.name.dosbatch variable.label.dosbatch
              - match: (?=\s)
                set: function-arguments
              - include: variables-interpolation
              - include: eoc-pop
          - include: commands
          - include: command-other

  control-exit:
    # https://ss64.com/nt/exit.html
    - match: \b(?i:exit)\b
      scope: keyword.control.flow.exit.dosbatch
      push:
        - meta_scope: meta.command.exit.dosbatch
        - match: (?i:(/)b)\b
          scope: variable.parameter.dosbatch
          captures:
            1: punctuation.definition.variable.dosbatch
        - include: numbers
        - include: variables
        - include: expect-eoc-pop

  control-goto:
    # https://ss64.com/nt/goto.html
    - match: \b(?i:goto)\b
      scope: keyword.control.flow.goto.dosbatch
      push:
        - meta_scope: meta.command.goto.dosbatch
        - include: eoc-pop
        - match: (:)(?i:(eof))\b
          scope: variable.label.dosbatch
          captures:
            1: punctuation.definition.variable.dosbatch
            2: keyword.control.flow.return.dosbatch
          pop: 1
        - match: (:)?(?=\S)
          scope: variable.label.dosbatch punctuation.definition.variable.dosbatch
          set:
            - meta_content_scope: meta.command.goto.dosbatch variable.label.dosbatch
            - include: escaped-characters
            - include: variables
            - include: eoc-pop

  control-pause:
    # https://ss64.com/nt/pause.html
    - match: \b(?i:pause)\b
      scope: keyword.control.flow.pause.dosbatch
      push:
        - meta_scope: meta.command.pause.dosbatch
        - include: expect-eoc-pop

  control-setlocal:
    # https://ss64.com/nt/setlocal.html
    - match: \b(?i:setlocal)\b
      scope: keyword.control.namespace.setlocal.dosbatch
      push:
        - meta_scope: meta.command.setlocal.dosbatch
        - match: |-
            \b(?xi:
              EnableDelayedExpansion | DisableDelayedExpansion |
              EnableExtensions | DisableExtensions
            )\b
          scope: constant.language.dosbatch
        - include: expect-eoc-pop

  control-endlocal:
    # https://ss64.com/nt/endlocal.html
    - match: \b(?i:endlocal)\b
      scope: keyword.control.namespace.endlocal.dosbatch
      push:
        - meta_scope: meta.command.endlocal.dosbatch
        - include: expect-eoc-pop

###[ COMMANDS ]###############################################################

  command-builtin:
    - match: '{{builtin_commands}}'
      scope: meta.function-call.name.dosbatch support.function.builtin.dosbatch
      push: function-arguments
    - match: '{{external_commands}}'
      scope: meta.function-call.name.dosbatch support.function.external.dosbatch
      push: function-arguments

  command-other:
    - match: \"
      scope: punctuation.definition.variable.begin.dosbatch
      push:
        - - meta_scope: meta.function-call.name.dosbatch variable.function.dosbatch
          - match: \"
            scope: punctuation.definition.variable.end.dosbatch
            set: function-arguments
          - include: path-pattern-common
          - include: illegal-eol-pop
        - path-pattern-relative
    - match: (?=[^&<|>\s])
      push:
        - - meta_scope: meta.function-call.name.dosbatch variable.function.dosbatch
          - match: (?=\s)
            set: function-arguments
          - include: path-pattern-common
          - include: eoc-pop
        - path-pattern-relative

  function-arguments:
    - meta_content_scope: meta.function-call.arguments.dosbatch
    - include: expressions
    - include: eoc-pop

  switches:
    - match: \s+(/\?|([-/][-/]?)[-_[:alnum:]]+)(?:([=:])|(?=\s))
      captures:
        1: variable.parameter.option.dosbatch
        2: punctuation.definition.variable.dosbatch
        3: punctuation.separator.mapping.key-value.dosbatch

###[ COMMAND ECHO ]###########################################################

  command-echo:
    # https://ss64.com/nt/echo.html
    - match: \b(?i:echo)\b
      scope:
        meta.command.echo.dosbatch
        support.function.builtin.dosbatch
      push: command-echo-args

  command-echo-args:
    - meta_content_scope: meta.command.echo.arguments.dosbatch
    - include: eoc-pop
    - match: \s*((/)\?)
      scope: meta.command.echo.arguments.dosbatch
      captures:
        1: variable.parameter.help.dosbatch
        2: punctuation.definition.variable.dosbatch
      set: ignored-tail
    - match: \s*((?i:on|off)){{command_terminators}}
      scope: meta.command.echo.arguments.dosbatch
      captures:
        1: constant.language.dosbatch
      set: ignored-tail
    - match: '[.:]'
      scope:
        meta.command.echo.dosbatch
        punctuation.separator.arguments.dosbatch
      set: command-echo-output
    - match: \s+
      scope: meta.command.echo.dosbatch
      set: command-echo-output

  command-echo-output:
    - meta_content_scope:
        meta.command.echo.output.dosbatch
        meta.string.dosbatch string.unquoted.dosbatch
    - match: \"
      push: command-echo-output-quoted
    - include: escaped-characters
    - include: variables-interpolation
    - include: eoc-pop

  command-echo-output-quoted:
    # Note: echo "text" outputs the quotation marks no matter where they are
    #       located. Hence `punctuation` scopes and `string.quoted` feel not
    #       correct in this situation. Distinction is needed anyway as escaped
    #       chars and line continuation are ignored within quotes.
    - meta_include_prototype: false
    - match: \"
      pop: 1
    - match: $
      pop: 2
    - match: \^\^!|%% # prevent variable interpolation
    - include: variables-interpolation

###[ COMMAND REM ]############################################################

  command-rem:
    # https://ss64.com/nt/rem.html
    - match: \b(?i:rem)\b
      scope: keyword.declaration.rem.dosbatch
      push:
        - meta_scope: meta.command.rem.dosbatch
        # meta_content_scope is used since rem should not be
        # highlighted as a comment, but a command
        - meta_content_scope: comment.line.rem.dosbatch
        - include: line-continuation
        - match: \n
          scope: comment.line.rem.dosbatch
          pop: 1

###[ COMMAND SET ]############################################################

  command-set:
    # https://ss64.com/nt/set.html
    - match: \b(?i:set)\b
      scope: support.function.builtin.dosbatch
      push:
        - ignored-tail
        - command-set-meta
        - command-set-type

  command-set-end:
    - include: line-continuation
    - match: $|(?=[&<|>])
      pop: 1

  command-set-meta:
    - meta_scope: meta.command.set.dosbatch
    - include: immediatelly-pop

  command-set-type:
    # SET
    - include: eoc-pop
    # SET /A "variable=expression"
    # SET /A variable=expression
    - match: (?i:(/)a)\b
      scope: variable.parameter.expression.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      set: command-set-arithmetic
    # SET /P "variable=[promptString]" REM ...
    # SET /P variable="[promptString]" REM ...
    # SET /P variable=[promptString]
    - match: (?i:(/)p)\b
      scope: variable.parameter.prompt.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch
      set: command-set-prompt
    # SET /illegal
    - match: /[^=\s{{command_terminator_chars}}]+
      scope: invalid.illegal.parameter.dosbatch
    # SET "variable=string"
    # SET "variable="
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set: [command-set-quoted, command-set-variable]
    # SET variable
    # SET variable=string
    - match: (?=\S)
      set: [command-set-unquoted, command-set-variable]

  command-set-quoted:
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
    - match: '{{set_quoted_end}}'
      scope: punctuation.definition.string.end.dosbatch
      pop: 1
    - include: command-set-nested-quotes
    - include: escaped-characters
    - include: variables-interpolation
    - include: eol-pop

  command-set-nested-quotes:
    - match: \"
      push:
        # Consume quotation mark, if it is in the middle of the string
        # Otherwise let the parent context do.
        - match: (?={{set_quoted_end}})|\"
          pop: 1
        - include: escaped-characters
        - include: variables-interpolation
        - include: illegal-eol-pop

  command-set-unquoted:
    - match: (?=\S)
      set:
        - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
        - include: escaped-characters
        - include: variables-interpolation
        - include: eoc-pop

  command-set-variable:
    - include: eoc-pop
    - match: =
      scope: keyword.operator.assignment.dosbatch
      pop: 1
    - match: .
      scope: variable.other.readwrite.dosbatch

  inside-command-set:
      - include: eoc-pop
      - include: escaped-characters
      - include: variables
      - match: (")\s*([^ ][^=]*)(=)
        captures:
          1: punctuation.definition.string.begin.dosbatch
          2: variable.other.readwrite.dosbatch
          3: keyword.operator.assignment.dosbatch
        push:
          - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
          - match: '"(?=\s*(?:$|[{{command_terminator_chars}}]))'
            scope: punctuation.definition.string.end.dosbatch
            pop: 1
          - include: line-continuation
          - include: escaped-characters
          - include: variables
          - include: numbers
          - include: groups
      - match: ([^ ][^=]*)(=)
        captures:
          1: variable.other.readwrite.dosbatch
          2: keyword.operator.assignment.dosbatch
        push:
          - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
          - include: eoc-pop
          - include: escaped-characters
          - include: variables
          - match: \"
            scope: punctuation.definition.string.begin.dosbatch
            push:
              - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
              - clear_scopes: 1
              - include: string-common
      - include: numbers
      - include: groups
      - match: \b([^ ][^=\n]*)$
        scope: variable.other.readwrite.dosbatch
      - include: strings

###[ COMMAND SET /A ]#########################################################

  command-set-arithmetic:
    - match: \"
      scope: punctuation.definition.prompt.begin.dosbatch
      set:
        - command-set-arithmetic-meta
        - command-set-arithmetic-quoted
    - match: (?=\S)
      set:
        - command-set-arithmetic-meta
        - command-set-arithmetic-unquoted

  command-set-arithmetic-meta:
    - meta_scope: meta.expression.dosbatch
    - include: immediatelly-pop

  command-set-arithmetic-unquoted:
    - include: eoc-pop
    - include: command-set-arithmetic-operator-common
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: command-set-group-unquoted
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      push: command-set-arithmetic-quoted
    - include: inside-command-set-arithmetic

  command-set-group-unquoted:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: 1
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set: command-set-group-newly-quoted
    - include: command-set-arithmetic-unquoted

  command-set-arithmetic-operator-common:
    - match: ({{set_arithmetic_operators_unquoted}})=
      scope: keyword.operator.assignment.augmented.dosbatch
    - match: (\^)(\^=)
      captures:
        1: constant.character.escape.dosbatch
        2: keyword.operator.assignment.augmented.dosbatch
    - match: ({{set_arithmetic_operators_unquoted}})
      scope: keyword.operator.arithmetic.dosbatch
    - match: (\^)(\^)
      captures:
        1: constant.character.escape.dosbatch
        2: keyword.operator.arithmetic.dosbatch
    - match: =
      scope: keyword.operator.assignment.dosbatch

  command-set-arithmetic-operator-quoted:
    - match: ({{set_arithmetic_operators_quoted}})=
      scope: keyword.operator.assignment.augmented.dosbatch
    - match: ({{set_arithmetic_operators_quoted}})
      scope: keyword.operator.arithmetic.dosbatch
    - include: command-set-arithmetic-operator-common

  command-set-arithmetic-quoted:
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      pop: 1
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      set:
        - meta_scope: meta.group.dosbatch
        - match: ''
          set: command-set-group-newly-quoted
    - include: command-set-arithmetic-operator-quoted
    - include: inside-command-set-arithmetic
    - include: eol-pop

  command-set-group-already-quoted:
    - meta_scope: meta.group.dosbatch
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      pop: 1
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      set:
        - match: ''
          set: command-set-group-unquoted
    - include: command-set-arithmetic-quoted

  command-set-group-newly-quoted:
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch meta.group.dosbatch
    - match: \(
      scope: punctuation.section.group.begin.dosbatch
      push: command-set-group-already-quoted
    - match: \)
      scope: punctuation.section.group.end.dosbatch
      set:
        - match: ''
          set: command-set-arithmetic-quoted
    - include: command-set-group-already-quoted

  inside-command-set-arithmetic:
    - match: '!'
      scope: keyword.operator.logical.dosbatch
    - include: numbers
    - include: separator-comma
    - include: variables
    - include: escaped-characters
    - include: line-continuation
    - match: (?:(?!{{set_arithmetic_operators_unquoted}}|{{set_arithmetic_operators_quoted}}|[=")])\S)+
      scope: variable.other.readwrite.dosbatch

###[ COMMAND SET /P ]#########################################################

  command-set-prompt:
    - match: \"
      scope: punctuation.definition.prompt.begin.dosbatch
      set:
        - command-set-prompt-meta
        - command-set-prompt-quoted
        - command-set-variable
    - match: (?=\S)
      set:
        - command-set-prompt-meta
        - command-set-prompt-unquoted
        - command-set-variable

  command-set-prompt-meta:
    - meta_scope: meta.prompt.dosbatch
    - include: immediatelly-pop

  command-set-prompt-quoted:
    # quoted value in quoted prompt
    - match: \"(?=[^&<|>]*\")
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
        - match: \"
          scope:
            punctuation.definition.prompt.end.dosbatch
            punctuation.definition.string.end.dosbatch
          pop: 1
        - include: command-set-prompt-output
    # unquoted value in quoted prompt
    - match: (?=\S)
      set:
        - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
        - match: \"
          scope: punctuation.definition.prompt.end.dosbatch
          pop: 1
        - include: command-set-prompt-output
    - include: eol-pop

  command-set-prompt-unquoted:
    # quoted value in unquoted prompt
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
        - match: \"
          scope: punctuation.definition.string.end.dosbatch
          pop: 1
        - include: command-set-prompt-output
    # unquoted value in unquoted prompt
    - match: (?=\S)
      set:
        - meta_content_scope: meta.string.dosbatch string.unquoted.dosbatch
        - include: escaped-characters
        - include: redirection-interpolations
        - include: variables-interpolation
        - include: eoc-pop
    - include: eol-pop

  command-set-prompt-output:
    - include: escaped-characters
    - include: variables-interpolation
    - include: line-continuation
    - include: illegal-eol-pop

###[ OPERATORS ]##############################################################

  operators:
    - match: '@(?=\S)'
      scope: keyword.operator.at.dosbatch
    - match: '&&?|\|\|'
      scope: keyword.operator.conditional.dosbatch
    - match: '\|'
      scope: keyword.operator.pipe.dosbatch
      push: illegal-comment-pop
    - include: redirections

  separator-comma:
    - match: ','
      scope: punctuation.separator.comma.dosbatch

  separator-semicolon:
    - match: ';'
      scope: punctuation.separator.semicolon.dosbatch

  invalid-operators:
    - match: '[{{command_terminator_chars}}]'
      scope: invalid.illegal.operator.dosbatch

###[ CONSTANTS ]##############################################################

  constants:
    - match: \b(?i:nul)\b
      scope: constant.language.dosbatch

  numbers:
    - match: \b(0[xX])\h*\b
      scope: constant.numeric.integer.hexadecimal.dosbatch
      captures:
        1: punctuation.definition.numeric.hexadecimal.dosbatch
    - match: \b(0)[0-7]+\b
      scope: constant.numeric.integer.octal.dosbatch
      captures:
        1: punctuation.definition.numeric.octal.dosbatch
    - match: \b(?:0|[1-9][0-9]*)\b
      scope: constant.numeric.integer.decimal.dosbatch

###[ PATH PATTERNS ]##########################################################

  redirection-interpolations:
    - match: \s*(?=(<&?|>[&>]?))
      push: redirection-interpolation

  redirection-interpolation:
    - match: '<&?|>[&>]?'
      scope: keyword.operator.redirection.dosbatch
      set:
        - redirection-interpolation-meta
        - redirection-path

  redirection-interpolation-meta:
    - clear_scopes: 1
    - meta_scope: meta.interpolation.dosbatch meta.redirection.dosbatch
    - include: immediatelly-pop

  redirections:
    - match: '<&?|>[&>]?'
      scope: keyword.operator.redirection.dosbatch
      push:
        - redirection-meta
        - redirection-path

  redirection-meta:
    - clear_scopes: 1
    - meta_scope: meta.redirection.dosbatch
    - include: immediatelly-pop

  redirection-path:
    - match: (?i:nul)\b
      scope: constant.language.dosbatch
      pop: 1
    - match: \d\b
      scope: constant.numeric.integer.decimal.dosbatch
      pop: 1
    - include: path-pattern

  path-pattern:
    - match: \"
      scope: punctuation.definition.string.begin.dosbatch
      set:
        - path-pattern-quoted-body
        - path-pattern-relative
    - match: (?=(?!%%)\S)
      set:
        - path-pattern-unquoted-body
        - path-pattern-relative
    - include: else-pop

  path-pattern-quoted-body:
    - meta_scope: meta.path.dosbatch meta.string.dosbatch string.quoted.double.dosbatch
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      pop: 1
    - include: illegal-eol-pop
    - include: path-pattern-common

  path-pattern-unquoted-body:
    - meta_scope: meta.path.dosbatch meta.string.dosbatch string.unquoted.dosbatch
    - match: (?=[\s,;"])
      pop: 1
    - include: eoc-pop
    - include: path-pattern-common

  path-pattern-common:
    - include: escaped-characters
    - include: variables-interpolation
    - match: '[.:\\/]'
      scope: punctuation.separator.path.dosbatch
      push: path-pattern-relative
    - match: \.
      scope: punctuation.separator.path.dosbatch
    - match: '[*?]'
      scope: constant.other.placeholder.dosbatch

  path-pattern-relative:
    - match: \.\.(?=[\\/])
      scope: constant.language.path.parent.dosbatch
      pop: 1
    - match: \.(?=[\\/])
      scope: constant.language.path.self.dosbatch
      pop: 1
    - include: immediatelly-pop

###[ STRINGS ]################################################################

  strings:
    - match: \"(?=.*\")
      scope: punctuation.definition.string.begin.dosbatch
      push: string-common

  string-common:
    - meta_include_prototype: false
    - meta_scope: meta.string.dosbatch string.quoted.double.dosbatch
    - match: \"
      scope: punctuation.definition.string.end.dosbatch
      pop: 1
    - match: $
      pop: 1
    - include: escaped-characters
    - include: variables-interpolation

  escaped-characters:
    - match: '%%|\^\^!|\^.'
      scope: constant.character.escape.dosbatch

###[ VARIABLES ]##############################################################

  variables-interpolation:
    - match: (?=[!%])
      push:
        - clear_scopes: 1
        - meta_scope: meta.interpolation.dosbatch
        - match: (?=%%(?!\w))
          pop: 1
        - include: variables
        - include: immediatelly-pop

  variables:
    - include: variable-parameter
    - include: variable-expansion
    - include: variable-delayed

  variable-parameter:
    - match: (%)(?:(?:~([fdpnxsatz]|\$PATH:)*)?\d|\*)
      scope: variable.parameter.dosbatch
      captures:
        1: punctuation.definition.variable.dosbatch

  variable-expansion:
    - match: '%(?=[^{{command_terminator_chars}}%]*(?:%|\^$))'
      scope: punctuation.definition.variable.begin.dosbatch
      push:
        - meta_scope: meta.variable.dosbatch
        - match: '%'
          scope: punctuation.definition.variable.end.dosbatch
          pop: 1
          # substring expansion
        - match: ':~'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.substring.dosbatch
            - include: variable-expansion-end
            - include: variable-substring
          # string substitution
        - match: ':'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.substitution.dosbatch
            - match: '='
              scope: punctuation.separator.dosbatch
              set:
                - meta_scope: meta.substitution.dosbatch
                - include: variable-expansion-substitution
            - include: variable-expansion-substitution
        - include: variable-name

  variable-expansion-substitution:
    - include: variable-expansion-end
    - include: variable-delayed
    - include: variable-substitution

  variable-expansion-end:
    - match: (?=%)
      pop: 1
    - include: eol-pop

  variable-delayed:
    - match: '!(?=[^{{command_terminator_chars}}!]*(?:!|\^$))'
      scope: punctuation.definition.variable.begin.dosbatch
      push:
        - meta_scope: meta.variable.dosbatch
        - match: '!'
          scope: punctuation.definition.variable.end.dosbatch
          pop: 1
          # substring expansion
        - match: ':~'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.substring.dosbatch
            - include: variable-delayed-end
            - include: variable-substring
          # string substitution
        - match: ':'
          scope: punctuation.separator.dosbatch
          push:
            - meta_content_scope: meta.substitution.dosbatch
            - match: '='
              scope: punctuation.separator.dosbatch
              set:
                - meta_scope: meta.substitution.dosbatch
                - include: variable-delayed-substitution
            - include: variable-delayed-substitution
        - include: variable-name

  variable-delayed-substitution:
    - include: variable-delayed-end
    - include: variable-expansion
    - include: variable-substitution

  variable-delayed-end:
    - match: (?=!)
      pop: 1
    - include: eol-pop

  variable-name:
    - include: eol-pop
    - match: \b(?i:errorlevel)\b
      scope: variable.language.dosbatch
    - match: .
      scope: variable.other.readwrite.dosbatch

  variable-substitution:
    - match: .
      scope: string.unquoted.dosbatch

  variable-substring:
    - match: '[-+]?(?:0|[1-9][0-9]*)'
      scope: constant.numeric.integer.decimal.dosbatch
    - include: separator-comma
