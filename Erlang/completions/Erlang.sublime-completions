{
    "scope": "source.erlang",
    "completions":
    [
        { "trigger": "beh\tBehaviour Directive", "contents": "-behaviour (${1:behaviour})." },
        { "trigger": "case\tCase Expression", "contents": "case ${1:expression} of\n\t${2:pattern}${3: when ${4:guard}} ->\n\t\t${5:body}\nend" },
        { "trigger": "def\tDefine Directive", "contents": "-define (${1:macro}${2: (${3:param})}, ${4:body})." },
        { "trigger": "exp\tExport Directive", "contents": "-export ([${1:function}/${2:arity}])." },
        { "trigger": "fun\tFun Expression", "contents": "fun\n\t(${1:pattern})${2: when ${3:guard}} ->\n\t\t${4:body}\nend" },
        { "trigger": "if\tIf Expression", "contents": "if\n\t${1:guard} ->\n\t\t${2:body}\nend" },
        { "trigger": "ifdef\tIfdef Directive", "contents": "-ifdef (${1:macro})." },
        { "trigger": "ifndef\tIfndef Directive", "contents": "-ifndef (${1:macro})." },
        { "trigger": "imp\tImport Directive", "contents": "-import (${1:module}, [${2:function}/${3:arity}])." },
        { "trigger": "inc\tInclude Directive", "contents": "-include (\"${1:file}\")." },
        { "trigger": "mod\tModule Directive", "contents": "-module (${1:${TM_FILEPATH/^.*\\/(.*)\\.erl$/$1/g}})." },
        { "trigger": "rcv\tReceive Expression", "contents": "receive\n${1:\t${2:pattern}${3: when ${4:guard}} ->\n\t\t${5:body}\n}${6:after\n\t${7:expression} ->\n\t\t${8:body}\n}end" },
        { "trigger": "rec\tRecord Directive", "contents": "-record (${1:record}, {${2:field}${3: = ${4:value}}})." },
        { "trigger": "try\tTry Expression", "contents": "try${1: ${2:expression}${3: of\n\t${4:pattern}${5: when ${6:guard}} ->\n\t\t${7:body}}}\n${8:catch\n\t${9:pattern}${10: when ${11:guard}} ->\n\t\t${12:body}}\n${13:after\n\t${14:body}}\nend" },
        { "trigger": "undef\tUndef Directive", "contents": "-undef (${1:macro})." }
    ]
}
