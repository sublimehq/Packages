%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: C++
comment: I don't think anyone uses .hp. .cp tends to be paired with .h. (I could be wrong. :) -- chris
file_extensions:
  - cpp
  - cc
  - cp
  - cxx
  - c++
  - C
  - h
  - hh
  - hpp
  - hxx
  - h++
  - inl
  - ipp
first_line_match: '-\*- C\+\+ -\*-'
scope: source.c++
contexts:
  main:
    - include: special_block
    - include: scope:source.c
    - match: \b(friend|explicit|virtual)\b
      scope: storage.modifier.c++
    - match: \b(private:|protected:|public:)
      scope: storage.modifier.c++
    - match: \b(catch|noexcept|operator|static_assert|try|throw|using)\b
      scope: keyword.control.c++
    - match: '\bdelete\b(\s*\[\])?|\bnew\b(?!])'
      scope: keyword.control.c++
    - match: '\b(f|m)[A-Z]\w*\b'
      comment: common C++ instance var naming idiom -- fMemberName
      scope: variable.other.readwrite.member.c++
    - match: \bthis\b
      scope: variable.language.c++
    - match: \bnullptr\b
      scope: constant.language.c++
    - match: \btemplate\b\s*
      scope: storage.type.template.c++
    - match: \b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\b\s*
      scope: keyword.operator.cast.c++
    - match: \b(alignof|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq)\b
      scope: keyword.operator.c++
    - match: \b(char16_t|char32_t|class|decltype|wchar_t|nullptr_t)\b
      scope: storage.type.c++
    - match: \b(alignas|constexpr|export|mutable|thread_local|typename)\b
      scope: storage.modifier.c++
    - match: '((?:L|u8|u|U)?R)("([^\(\)\\ ]{0,16})\()'
      captures:
        1: storage.type.string.c++
        2: punctuation.definition.string.begin.c++
      push:
        - meta_scope: string.quoted.double.c++
        - match: '\)\3"'
          captures:
            0: punctuation.definition.string.end.c++
          pop: true
    - match: |-
        (?x)
          (?:  ^                                 # begin-of-line
            |  (?: (?<!else|new|=) )             #  or word + space before name
          )
          ((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name
           \s*(\()                           # start bracket or end-of-line
      captures:
        1: entity.name.function.c++
        2: punctuation.definition.parameters.c
      push:
        - meta_scope: meta.function.destructor.c++
        - match: \)
          captures:
            0: punctuation.definition.parameters.c
          pop: true
        - include: $top_level_main
    - match: |-
        (?x)
          (?:  ^                                 # begin-of-line
            |  (?: (?<!else|new|=) )             #  or word + space before name
          )
          ((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name
           \s*(\()                           # terminating semi-colon
      captures:
        1: entity.name.function.c++
        2: punctuation.definition.parameters.c
      push:
        - meta_scope: meta.function.destructor.prototype.c++
        - match: \)
          captures:
            0: punctuation.definition.parameters.c
          pop: true
        - include: $top_level_main
  angle_brackets:
    - match: <
      push:
        - meta_scope: meta.angle-brackets.c++
        - match: ">"
          pop: true
        - include: angle_brackets
        - include: $top_level_main
  block:
    - match: '\{'
      push:
        - meta_scope: meta.block.c++
        - match: '\}'
          pop: true
        - match: |-
            (?x)
            (
              (?!while|for|do|if|else|switch|catch|enumerate|return|r?iterate)(?: \b[A-Za-z_][A-Za-z0-9_]*+\b | :: )*+                  # actual name
            )
             \s*(\()
          scope: meta.function-call.c
          captures:
            1: support.function.any-method.c
            2: punctuation.definition.parameters.c
        - include: $top_level_main
  constructor:
    - match: |-
        (?x)
          (?:  ^\s*)                             # begin-of-line
          ((?!while|for|do|if|else|switch|catch|enumerate|r?iterate)[A-Za-z_][A-Za-z0-9_:]*) # actual name
           \s*(\()                            # start bracket or end-of-line
      captures:
        1: entity.name.function.c++
        2: punctuation.definition.parameters.c
      push:
        - meta_scope: meta.function.constructor.c++
        - match: \)
          captures:
            0: punctuation.definition.parameters.c
          pop: true
        - include: $top_level_main
    - match: |-
        (?x)
          (:)                            # begin-of-line
          ((?=\s*[A-Za-z_][A-Za-z0-9_:]* # actual name
           \s*(\()))                      # start bracket or end-of-line
      captures:
        1: punctuation.definition.parameters.c
      push:
        - meta_scope: meta.function.constructor.initializer-list.c++
        - match: '(?=\{)'
          pop: true
        - include: $top_level_main
  special_block:
    - match: |-
        (?x)
        (?<!['\.]) # Number must not be preceded by a decimal point
        (?:
        # floats
          (?:
          (?:\b\d(?:[\d']*\d)?\.\d(?:[\d']*\d)?|\B\.\d(?:[\d']*\d)?)(?:[Ee][+-]?\d(?:[\d']*\d)?)?(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b
          |
          (?:\b\d(?:[\d']*\d)?\.)(?:\B|(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))\b|(?:[Ee][+-]?\d(?:[\d']*\d)?)(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b)
          |
          \b\d(?:[\d']*\d)?(?:[Ee][+-]?\d(?:[\d']*\d)?)(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\w*))?\b
          )
        |
        # ints
          \b(?:
          (?:
          # dec
          [1-9](?:[\d']*\d)?
          |
          # oct
          0(?:[0-7']*[0-7])?
          |
          # hex
          0[Xx][\da-fA-F](?:[\da-fA-F']*[\da-fA-F])?
          |
          # bin
          0[Bb][01](?:[01']*[01])?
          )
          # int suffixes
          (?:(?:l{1,2}|L{1,2})[uU]?|[uU](?:l{0,2}|L{0,2})|(?:i[fl]?|h|min|[mun]?s|_\w*))?)\b
        )
        (?!\.) # Number must not be followed by a decimal point
      scope: constant.numeric.c++
    - match: '\b(namespace)\s+([A-Za-z_][_A-Za-z0-9:]*\b)?+(?!\s*?(;|=|,))'
      captures:
        1: keyword.control.c++
      push:
        - meta_scope: meta.namespace-block.c++
        - match: '(?<=\})'
          pop: true
        - match: '\{'
          push:
            - match: '\}'
              pop: true
            - include: special_block
            - include: constructor
            - include: $top_level_main
    - match: '\b(class|struct)\s+([_A-Za-z][_A-Za-z0-9]*\b);'
      scope: meta.class-struct-block.c++
      captures:
        1: storage.type.c++
        2: entity.name.type.forward-decl.c++
    - match: '\b(class|struct)\s+([_A-Za-z][_A-Za-z0-9]*\b)'
      captures:
        1: storage.type.c++
        2: entity.name.type.c++
      push:
        - meta_scope: meta.class-struct-block.c++
        - match: '(?<=\}|;)|(?=(;|,|\(|\)|>|\[|\]))'
          pop: true
        - include: angle_brackets
        - match: (?<!:):(?!:)
          push:
            - meta_scope: meta.class-struct-block.base-classes.c++
            - match: '(?=\{)'
              pop: true
            - match: \b(private|protected|public|virtual)
              scope: storage.modifier.c++
            - match: '[_A-Za-z][_A-Za-z0-9]*\b'
              push:
                - match: ',|(?=\{)'
                  pop: true
                - include: angle_brackets
        - match: '(\{)'
          captures:
            1: punctuation.definition.scope.c++
          push:
            - match: '(\})(\s*\n)?'
              captures:
                1: punctuation.definition.invalid.c++
                2: invalid.illegal.you-forgot-semicolon.c++
              pop: true
            - include: special_block
            - include: constructor
            - include: $top_level_main
        - include: $top_level_main
    - match: \b(extern)(?=\s*")
      captures:
        1: storage.modifier.c++
      push:
        - meta_scope: meta.extern-block.c++
        - match: '(?<=\})|(?=\w)'
          pop: true
        - match: '\{'
          push:
            - match: '\}'
              pop: true
            - include: special_block
            - include: $top_level_main
        - include: $top_level_main
