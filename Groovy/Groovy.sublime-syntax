%YAML 1.2
---
# https://docs.groovy-lang.org/latest/html/documentation/
# https://groovy-lang.org/documentation.html
# http://www.sublimetext.com/docs/syntax.html

name: Groovy
scope: source.groovy
version: 2

file_extensions:
  - groovy
  - gvy
  - gradle

hidden_file_extensions:
  - Jenkinsfile

first_line_match: |-
  (?xi:
    ^ \#! .* {{first_line_lang}}                                                # shebang
  | {{leading_wspace}} // .*? -\*- .*? {{first_line_lang}} .*? -\*-             # editorconfig
  )

###[ CONTEXTS ]################################################################

contexts:

  prototype:
    - include: comments

  main:
    - meta_include_prototype: false
    - match: ''
      push: [groovy, shebang]

  shebang:
    - meta_include_prototype: false
    - match: ^\#!
      scope: punctuation.definition.comment.groovy
      set: shebang-body
    - match: ^|(?=\S)                                                           # ensure highlighting when embedded
      pop: 1

  shebang-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.shebang.groovy
    - match: '{{eol}}'
      pop: 1
    - match: '{{first_line_lang}}'
      scope: constant.language.shebang.groovy

###[ COMMENTS ]################################################################

  # https://docs.groovy-lang.org/latest/html/documentation/#_comments

  comments:
    - include: line-comments
    - include: block-comments
    - include: merge-conflict-markers

  line-comments:
    - match: //
      scope: punctuation.definition.comment.groovy
      push: line-comment-body

  line-comment-body:
    - meta_scope: comment.line.double-slash.groovy
    - include: eol-pop

  block-comments:
    - match: /\*\*/
      scope: >-
        comment.block.empty.groovy
        punctuation.definition.comment.groovy

    # TODO: add groovydoc /**@ */
    # TODO: check prototype vs. javadoc
    - include: scope:text.html.javadoc

    - match: /\*
      scope: punctuation.definition.comment.begin.groovy
      push: block-comment-body

  block-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.groovy
    - match: \*/
      scope: punctuation.definition.comment.end.groovy
      pop: 1

  merge-conflict-markers:
    # NOTE: also included in the different kinds of block strings
    # see also: Diff.sublime-syntax#conflict-markers

    - match: ^(<{7})(?:\s+(\S.*?))?$\n?
      scope: meta.block.conflict.begin.diff
      captures:
        1: punctuation.section.block.begin.diff
        2: entity.name.section.diff
    - match: ^(>{7})(?:\s+(\S.*?))?$\n?
      scope: meta.block.conflict.end.diff
      captures:
        1: punctuation.section.block.end.diff
        2: entity.name.section.diff
    - match: ^(\|{7}|={7})(?:\s+(\S.*?))?$\n?
      scope: meta.block.conflict.separator.diff
      captures:
        1: punctuation.section.block.diff
        2: entity.name.section.diff

###[ GROOVY ]##################################################################

  groovy:
    # https://docs.groovy-lang.org/latest/html/documentation/#_package_names
    - match: '{{leading_wspace}}(package)\s+([^ ;]+)'
      scope: meta.package.groovy
      captures:
        1: keyword.other.package.groovy
        2: storage.type.package.groovy

    # https://docs.groovy-lang.org/latest/html/documentation/#_imports
    - match: '{{leading_wspace}}(import)\s+([^ ;$]+);?'
      scope: meta.import.groovy
      captures:
        1: keyword.other.import.groovy
        2: storage.type.import.groovy

    - include: classes
    - include: methods
    - include: groovy-code

  groovy-code:
    - include: map-keys
    - include: groovy-code-minus-map-keys
    - include: block

  groovy-code-minus-map-keys:
    - include: comments
    - include: support-functions
    - include: language-keywords
    - include: values
    - include: operator-keywords
    - include: storage-types
    - include: storage-modifiers

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.groovy
      push:
        - meta_scope: meta.block.groovy
        - match: '\}'
          scope: punctuation.section.block.end.groovy
          pop: 1
        - include: groovy-code

###[ MAPPINGS ]################################################################

  # https://docs.groovy-lang.org/latest/html/documentation/#_maps

  map-keys:
    - match: (\w+)\s*(:)
      captures:
        1: constant.other.key.groovy
        2: punctuation.definition.separator.key-value.groovy

###[ CLASSES ]#################################################################

  class-object:
    - match: |-
        (?x:
          \b(?:
            (?:[[:lower:]]\w*\.)*                                               # Optional package specification
            [[:upper:]]\w+\b                                                    # Class name
            (?:<(?:[\w, ]*)>)?                                                  # Optional Generics
            {{optional_arrays}}
          )\b
        )
      scope: storage.type.class.groovy

  classes:
    - match: |-
        (?x:
          {{leading_wspace}}
          (?:
            (?:
              \b(?:
                ({{access_control_modifiers}})
              | ({{static_modifiers}})
              | ({{final_modifiers}})
              | ({{other_modifiers}})
              )\b\s*
            )*
          )                                                                     # modifier
          (class)\s+
          (\w+)\s*                                                              # identifier
        )
      captures:
        1: storage.modifier.access-control.groovy
        2: storage.modifier.static.groovy
        3: storage.modifier.final.groovy
        4: storage.modifier.other.groovy
        5: storage.type.class.groovy
        6: entity.name.type.class.groovy
      push: class-body

  class-body:
    - meta_scope: meta.definition.class.groovy
    - match: $|(?=\})
      pop: 1
    - match: '(extends)\s+([[:alnum:]_\.]+(?:<(?:[[:alnum:]_, ])+>)?)\s*'
      scope: meta.definition.class.inherited.classes.groovy
      captures:
        1: storage.modifier.extends.groovy
        2: entity.other.inherited-class.groovy
    - match: (implements)\s
      captures:
        1: storage.modifier.implements.groovy
      push: class-body-implemented-meta

  class-body-implemented-meta:
    - meta_scope: meta.definition.class.implemented.interfaces.groovy
    - match: '(?=\s*extends|$|\{)'
      pop: 1
    - match: '((?:[[:lower:]]\w*.)*[[:upper:]]\w*)\s*(?:(,)|$|\{)'
      captures:
        1: entity.other.inherited-class.interface.groovy
        2: punctuation.definition.implemented.interfaces.separator.groovy

###[ CONSTANTS ]###############################################################

  constants:
    - match: \b([[:upper:]][[:upper:][:digit:]_]+)\b(?!\s*:)
      captures:
        1: constant.other.groovy
    - match: \bfalse\b
      scope: constant.language.boolean.false.groovy
    - match: \btrue\b
      scope: constant.language.boolean.true.groovy
    - match: \bnull\b
      scope: constant.language.null.groovy

    # TODO: check if primitive types should match here

###[ KEYWORDS ]################################################################

  # https://docs.groovy-lang.org/latest/html/documentation/#_keywords

  keywords:
    - include: language-keywords
    - include: operator-keywords

###[ KEYWORDS / LANGUAGE ]#####################################################

  language-keywords:
    # TODO: labeled statements

    - match: \bnew\b
      scope: keyword.operator.new.groovy

    - include: conditional-keywords
    - include: exception-keywords
    - include: flow-keywords
    - include: loop-keywords

  conditional-keywords:
    # https://docs.groovy-lang.org/latest/html/documentation/#_conditional_structures

    - match: \bcase\b
      scope: keyword.control.conditional.case.groovy
      push: case-body
    - match: \bdefault\b
      scope: keyword.control.conditional.default.groovy
    - match: \b(?:else[[:blank:]]+if)\b
      scope: keyword.control.conditional.elseif.groovy
    - match: \belse\b
      scope: keyword.control.conditional.else.groovy
    - match: \bif\b
      scope: keyword.control.conditional.if.groovy
    - match: \bswitch\b
      scope: keyword.control.conditional.switch.groovy

  case-body:
    - meta_scope: meta.case.groovy
    - match: ':'
      scope: punctuation.definition.case-terminator.groovy
      pop: 1
    - include: groovy-code-minus-map-keys

  exception-keywords:
    # https://docs.groovy-lang.org/latest/html/documentation/#_exception_handling

    - match: \bcatch\b
      scope: keyword.control.exception.catch.groovy
    - match: \bfinally\b
      scope: keyword.control.exception.finally.groovy
    # NOTE: `throws` vs. `throw` in Groovy
    - match: \bthrows\b
      scope: keyword.control.exception.throws.groovy
    - match: \btry\b
      scope: keyword.control.exception.try.groovy

  flow-keywords:
    # https://docs.groovy-lang.org/latest/html/documentation/#_power_assertion

    - match: \bassert\b
      scope: keyword.control.flow.assert.groovy
      push: assert-body
    - match: \bbreak\b
      scope: keyword.control.flow.break.groovy
    - match: \bcontinue\b
      scope: keyword.control.flow.continue.groovy
    - match: \breturn\b
      scope: keyword.control.flow.return.groovy
    # NOTE: `throws` vs. `throw` in Groovy
    - match: \bthrow\b
      scope: keyword.control.flow.throw.groovy

  assert-body:
    - meta_scope: meta.declaration.assertion.groovy
    - match: $|(?=\})
      pop: 1
    - match: ':'
      scope: keyword.operator.assert.expression-separator.groovy
    - include: groovy-code-minus-map-keys

  loop-keywords:
    # https://docs.groovy-lang.org/latest/html/documentation/#_looping_structures

    - match: \bdo\b
      scope: keyword.control.loop.do-while.groovy
    # TODO: for ... in
    - match: \bin\b
      scope: keyword.control.loop.in.groovy
    - match: \bfor\b
      scope: keyword.control.loop.for.groovy
    - match: \bwhile\b
      scope: keyword.control.loop.while.groovy

###[ KEYWORDS / OPERATOR ]#####################################################

  # https://docs.groovy-lang.org/latest/html/documentation/#groovy-operators

  operator-keywords:
    - include: word-operators
    - include: range-operators

    - match: '\->'
      scope: keyword.operator.arrow.groovy
    - match: (?<=\S)\.(?=\S)
      scope: punctuation.accessor.dot.groovy
    - match: (?<=\S)\?\.(?=\S)
      scope: punctuation.accessor.null-coalescing.groovy

    - include: match-and-find-operators
    - include: spaceship-and-diamond-operators
    - include: assignment-augmented-bitwise-shift-operators
    - include: bitwise-shift-operators
    - include: relational-operators
    - include: assignment-augmented-operators
    - include: arithmetic-operators
    - include: logical-operators
    - include: bitwise-operators
    - include: comparison-operators
    - include: assignment-operators
    - include: elvis-and-ternary-operators

  word-operators:
    - match: \bas\b
      scope: keyword.operator.coercion.groovy
    - match: (?:!|\b)in\b
      scope: keyword.operator.membership.groovy
    - match: (?:!|\b)instanceof\b
      scope: keyword.operator.instanceof.groovy

  range-operators:
    - match: '<\.\.>'
      scope: keyword.operator.range.exclusive.both.groovy
    - match: '<\.\.'
      scope: keyword.operator.range.exclusive.lower.groovy
    - match: '\.\.>'
      scope: keyword.operator.range.exclusive.upper.groovy
    - match: '\.\.'
      scope: keyword.operator.range.inclusive.groovy

  match-and-find-operators:
    - match: '==~'
      scope: keyword.operator.match.groovy
    - match: '=~'
      scope: keyword.operator.find.groovy

  spaceship-and-diamond-operators:
    - match: '<=>'
      scope: keyword.operator.comparison.groovy
    - match: '<>'
      scope: keyword.operator.comparison.groovy

  assignment-augmented-bitwise-shift-operators:
    # NOTE: no unsigned shift left augmented assignment in Groovy
    - match: '>>>='
      scope: keyword.operator.assignment.augmented.bitwise.shift.right.unsigned.groovy

    - match: '<<='
      scope: keyword.operator.assignment.augmented.bitwise.shift.left.signed.groovy
    - match: '>>='
      scope: keyword.operator.assignment.augmented.bitwise.shift.right.signed.groovy

  bitwise-shift-operators:
    # NOTE: no unsigned shift left in Groovy
    - match: '>>>'
      scope: keyword.operator.bitshift.shift.right.unsigned.groovy

    - match: '<<'
      scope: keyword.operator.bitshift.shift.left.signed.groovy
    - match: '>>'
      scope: keyword.operator.bitshift.shift.right.signed.groovy

  relational-operators:
    - match: '<='
      scope: keyword.operator.relational.less-equal.groovy
    - match: '>='
      scope: keyword.operator.relational.greater-equal.groovy

    - match: '<'
      scope: keyword.operator.relational.less.groovy
    - match: '>'
      scope: keyword.operator.relational.greater.groovy

  assignment-augmented-operators:
    - match: '\*\*='
      scope: keyword.operator.assignment.augmented.power.groovy

    - match: '\+='
      scope: keyword.operator.assignment.augmented.addition.groovy
    - match: '-='
      scope: keyword.operator.assignment.augmented.subtraction.groovy
    - match: '\*='
      scope: keyword.operator.assignment.augmented.multiplication.groovy
    - match: '/='
      scope: keyword.operator.assignment.augmented.division.groovy
    - match: '%='
      scope: keyword.operator.assignment.augmented.remainder.groovy

  arithmetic-operators:
    - match: '\+\+'
      scope: keyword.operator.arithmetic.increment.groovy
    - match: '\-\-'
      scope: keyword.operator.arithmetic.decrement.groovy
    - match: '\*\*'
      scope: keyword.operator.arithmetic.power.groovy

    - match: '\+'
      scope: keyword.operator.arithmetic.addition.groovy
    - match: '\-'
      scope: keyword.operator.arithmetic.subtraction.groovy
    - match: '\*'
      scope: keyword.operator.arithmetic.multiplication.groovy
    - match: '/'
      scope: keyword.operator.arithmetic.division.groovy
    - match: '%'
      scope: keyword.operator.arithmetic.remainder.groovy

  logical-operators:
    - match: '&&'
      scope: keyword.operator.logical.and.groovy
    - match: '\|\|'
      scope: keyword.operator.logical.or.groovy
    - match: '!(?!=)'
      scope: keyword.operator.logical.not.groovy

  bitwise-operators:
    - match: '~'
      scope: keyword.operator.bitwise.not.groovy
    - match: '\^'
      scope: keyword.operator.bitwise.xor.groovy
    - match: '&'
      scope: keyword.operator.bitwise.and.groovy
    - match: '\|'
      scope: keyword.operator.bitwise.or.groovy

  comparison-operators:
    - match: '==='
      scope: keyword.operator.comparison.equal.value.strict.groovy
    - match: '!=='
      scope: keyword.operator.comparison.not-equal.value.strict.groovy

    - match: '=='
      scope: keyword.operator.comparison.equal.value.groovy
    - match: '!='
      scope: keyword.operator.comparison.not-equal.value.groovy

  assignment-operators:
    - match: '='
      scope: keyword.operator.assignment.groovy

  elvis-and-ternary-operators:

    # https://docs.groovy-lang.org/latest/html/documentation/#_elvis_operator
    - match: '\?\:'
      scope: keyword.operator.elvis.groovy

    - match: \?
      scope: keyword.operator.ternary.groovy
      push: ternary-body

  ternary-body:
    - meta_scope: meta.evaluation.ternary.groovy

    - match: $|(?=\})
      pop: 1
    - match: ':'
      scope: keyword.operator.ternary.expression-separator.groovy

    - include: groovy-code-minus-map-keys

###[ METHODS ]#################################################################

  method-call:
    - match: (\w+)(\()
      captures:
        1: >-
          meta.function-call.identifier.groovy
          variable.function.groovy
        2: >-
          meta.function-call.arguments.groovy
          punctuation.section.arguments.begin.groovy
      push: method-call-body

  method-call-body:
    - meta_content_scope: meta.function-call.arguments.groovy

    - match: \)
      scope: >-
        meta.function-call.groovy
        punctuation.section.arguments.end.groovy
      pop: 1
    - match: ','
      scope: punctuation.separator.parameters.groovy

    - include: groovy-code

  method-declaration-remainder:
    - match: \(
      scope: punctuation.definition.parameters.begin.groovy
      push: method-declaration-parameters-body
    - match: (?<=\))\s*(throws)\s
      captures:
        1: storage.modifier.throws.groovy
      push: method-declaration-throwables-meta

  method-declaration-parameters-body:
    - meta_content_scope: meta.definition.method.parameters.groovy
    - match: \)
      scope: punctuation.definition.parameters.end.groovy
      pop: 1

    - match: |-
        (?x:
          \s*
          (
            (?:
              {{primitive_types}}
            | (?:\w+\.)*[[:upper:]]\w*\b(?:<(?:[\w, ]*)>)?{{optional_arrays}}
            )
          )?
          \s*
          ([[:lower:]_][[:alnum:]_]*)                                           # variable
        )
      scope: meta.definition.method.parameter.groovy
      captures:
        1: storage.type.parameter.groovy
        2: variable.parameter.groovy
    - match: |-
        (?x:
          {{primitive_types}}
        | (?:\w+\.)*[[:upper:]]\w*\b(?:<(?:[\w, ]*)>)?{{optional_arrays}}
        )
      scope: >-
        meta.definition.method.parameter.groovy
        storage.type.parameter.groovy
    - match: ','
      scope: punctuation.separator.parameters.groovy

    - include: block-comments

  method-declaration-throwables-meta:
    - meta_scope: meta.definition.method.throwables.groovy

    - match: '(?=$|\{)'
      captures:
        1: storage.modifier.throws.groovy
      pop: 1
    - match: '((?:[[:lower:]]\w*.)*[[:upper:]]\w*)\s*(?:(,)|$|\{)'
      captures:
        1: storage.type.throwable.groovy
        2: punctuation.definition.throwables.separator.groovy

  methods:
    - match: |-
        (?x:
          {{leading_wspace}}
          (?:                                                                   # zero or more modifiers
            (?:
              ({{access_control_modifiers}})|({{final_modifiers}})|({{other_modifiers}})
            )
            \s+
          )?
          \s*
          ([[:upper:]][[:alnum:]_]+)                                            # constructor/class name
          \s*
          (?=\()
        )
      captures:
        1: storage.modifier.access-control.groovy
        2: storage.modifier.final.groovy
        3: storage.modifier.other.groovy
        4: entity.name.function.constructor.groovy
        5: punctuation.definition.parameters.begin.groovy
      push: method-body-constructor
    - match: |-
        (?x:
          {{leading_wspace}}
          (?:
            (?:                                                                 # or modifier and optional type
              (?:(?:
                \b({{access_control_modifiers}})
              | ({{static_modifiers}})
              | ({{final_modifiers}})
              | ({{other_modifiers}})
              )\b\s+)+\s*                                                       # modifier
              (?:\b
                (void\b)
                |
                ({{primitive_types}})
                |
                (                                                               # or class type
                  (?:\w+\.)*[[:upper:]]\w+\b                                    # Class name
                  (?:<(?:[\w, ]*)>)?                                            # optional Generic type
                  {{optional_arrays}}
                )
              )?
            )
            |
            (?:\b                                                               # or type by itself
              (def\b)
            | (void\b)
            | ({{primitive_types}})
            | (                                                                 # or class type
                (?:\w+\.)*[[:upper:]]\w+\b                                      # Class name
                (?:<(?:[\w, ]*)>)?                                              # optional generics info
                {{optional_arrays}}
              )
            )
          )
          \s*
          (\w+)                                                                 # method name
          \s*
          (?=\()                                                                # opening parens
        )
      captures:
        1: storage.modifier.access-control.groovy
        2: storage.modifier.static.groovy
        3: storage.modifier.final.groovy
        4: storage.modifier.other.groovy
        5: storage.type.return-type.void.groovy
        6: storage.type.return-type.primitive.groovy
        7: storage.type.return-type.class.groovy
        8: keyword.declaration.function.groovy
        9: storage.type.return-type.void.groovy
        10: storage.type.return-type.primitive.groovy
        11: storage.type.return-type.class.groovy
        12: entity.name.function.groovy
      push: method-body-method

  method-body-constructor:
    - meta_scope: meta.definition.constructor.groovy

    - match: (?=\{)|{{eol}}
      pop: 1

    - include: method-declaration-remainder

  method-body-method:
    - meta_scope: meta.definition.method.groovy

    - match: (?=\{)|{{eol}}
      pop: 1

    - include: method-declaration-remainder

###[ NUMBERS ]#################################################################

  numbers:
    # https://docs.groovy-lang.org/latest/html/documentation/#_numbers

    - include: floats
    - include: integers

###[ NUMBERS / FLOATS ]########################################################

  floats:
    - include: decimal-floats

  decimal-floats:
    - match: |-
        (?x:
          (?:
            ([-+])?
            \b(
              (?:(?:\d+(?:_*\d+)*)\.?(?:\d+(?:_*\d+)*)?)
            | (?:\.\d+(?:_*\d+)*)
            )
            ([eE][-+]?\d+)?
          )
          ([FfDdIiLlGg])?\b
        )
      scope: meta.number.float.decimal.groovy
      captures:
        1: constant.numeric.value.sign.groovy
        2: constant.numeric.value.groovy
        3: constant.numeric.value.exponent.groovy
        4: constant.numeric.suffix.groovy

###[ NUMBERS / INTEGERS ]######################################################

  integers:
    - include: binary-integers
    - include: hexadecimal-integers
    - include: octal-integers
    - include: decimal-integers

  binary-integers:
    - match: (0[bB])({{bin_int}})([FfDdIiLlGg])?
      scope: meta.number.integer.binary.groovy
      captures:
        1: constant.numeric.base.groovy
        2: constant.numeric.value.groovy
        3: constant.numeric.suffix.groovy

  octal-integers:
    - match: |-
        (?x:
          (?: (0[oO]) | (0) )
          ({{oct_int}})
          ([FfDdIiLlGg])?
        )
      scope: meta.number.integer.octal.groovy
      captures:
        1: constant.numeric.base.groovy
        2: invalid.illegal.octal-integer-base.groovy
        3: constant.numeric.value.groovy
        4: constant.numeric.suffix.groovy

  hexadecimal-integers:
    - match: (0[xX])({{hex_int}})([FfDdIiLlGg])?
      scope: meta.number.integer.hexadecimal.groovy
      captures:
        1: constant.numeric.base.groovy
        2: constant.numeric.value.groovy
        3: constant.numeric.suffix.groovy

  decimal-integers:
    - match: |-
        (?x:
          (?:
            ([-+])?
            \b(
              \d+(?:_*\d+)*
            )
          )
          ([FfDdIiLlGg])?\b
        )
      scope: meta.number.integer.decimal.groovy
      captures:
        1: constant.numeric.value.sign.groovy
        2: constant.numeric.value.groovy
        3: constant.numeric.suffix.groovy

###[ STORAGE ]#################################################################

  storage-modifiers:
    - match: \b{{access_control_modifiers}}\b
      scope: storage.modifier.access-control.groovy
    - match: \b{{static_modifiers}}\b
      scope: storage.modifier.static.groovy
    - match: \b{{final_modifiers}}\b
      scope: storage.modifier.final.groovy
    - match: \b{{other_modifiers}}\b
      scope: storage.modifier.other.groovy

  storage-types:
    # https://docs.groovy-lang.org/latest/html/documentation/#_types

    - include: annotations
    - match: \bdef\b
      scope: storage.type.def.groovy
    - include: primitive-types

  annotations:
    # https://docs.groovy-lang.org/latest/html/documentation/#_annotations

    - match: '(@[^ (]+)(\()'
      captures:
        1: storage.type.annotation.groovy
        2: punctuation.definition.annotation-arguments.begin.groovy
      push: inside-annotation
    - match: '@\S+'
      scope: storage.type.annotation.groovy

    # TODO: @groovy.transform.TypeChecked
    # TODO: @groovy.transform.TypeCheckingMode

  inside-annotation:
    - meta_scope: meta.declaration.annotation.groovy
    - match: \)
      scope: punctuation.definition.annotation-arguments.end.groovy
      pop: 1
    - match: (\w*)\s*(=)
      captures:
        1: constant.other.key.groovy
        2: keyword.operator.assignment.groovy
    - include: values
    - match: ','
      scope: punctuation.definition.separator.groovy

  primitive-types:
    - match: \bbyte(?:\b|{{optional_arrays}}\b)
      scope: storage.type.primitive.integer.8bit.groovy
    - match: \bshort(?:\b|{{optional_arrays}}\b)
      scope: storage.type.primitive.integer.16bit.groovy
    - match: \bint(?:\b|{{optional_arrays}}\b)
      scope: storage.type.primitive.integer.32bit.groovy
    - match: \blong(?:\b|{{optional_arrays}}\b)
      scope: storage.type.primitive.integer.64bit.groovy
    - match: \bfloat(?:\b|{{optional_arrays}}\b)
      scope: storage.type.primitive.float.32bit.groovy
    - match: \bdouble(?:\b|{{optional_arrays}}\b)
      scope: storage.type.primitive.float.64bit.groovy
    - match: \bboolean(?:\b|{{optional_arrays}}\b)
      scope: storage.type.primitive.boolean.groovy
    - match: \bchar(?:\b|{{optional_arrays}}\b)
      scope: storage.type.primitive.character.16bit.groovy

###[ STRINGS ]#################################################################

  strings:
    # https://docs.groovy-lang.org/latest/html/documentation/#all-strings

    - include: double-quoted-block-strings
    - include: double-quoted-strings

    - include: single-quoted-block-strings
    - include: single-quoted-strings

    - include: dollar-slashy-strings
    - include: regexp

  double-quoted-block-strings:
    - match: \"{3}
      scope: punctuation.definition.string.begin.groovy
      push: double-quoted-block-string-body

  double-quoted-block-string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.block.groovy

    - match: \"{4,}
      scope: invalid.illegal
      pop: 1
    - match: \"{3}
      scope: punctuation.definition.string.end.groovy
      pop: 1

    - include: string-escape-sequences
    - include: single-dollar-string-interpolation
    - include: string-interpolation-multiple-lines

    - include: merge-conflict-markers

    # anything else following a dollar sign is not a valid interpolation
    - match: \$(?=")
      scope: invalid.illegal.groovy
    - match: \$[^"]+
      scope: invalid.illegal.groovy

  single-quoted-block-strings:
    - match: \'{3}
      scope: punctuation.definition.string.begin.groovy
      push: single-quoted-block-string-body

  single-quoted-block-string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.block.groovy

    - match: \'{3}
      scope: punctuation.definition.string.end.groovy
      pop: 1

    - include: string-escape-sequences

    - include: merge-conflict-markers

  double-quoted-strings:
    - match: \"
      scope: punctuation.definition.string.begin.groovy
      push: double-quoted-string-body

  double-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.groovy

    - match: \"
      scope: punctuation.definition.string.end.groovy
      pop: 1
    - match: '\n'
      scope: invalid.illegal.unclosed-string.groovy
      pop: 1

    - include: string-escape-sequences
    - include: single-dollar-string-interpolation

    - match: '\$\{'
      scope: punctuation.section.interpolation.begin.groovy
      push:
        - meta_include_prototype: false
        - meta_scope: source.groovy.embedded.source
        - match: '\}'
          scope: punctuation.section.interpolation.end.groovy
          pop: 1
        - include: escaped-end-of-line
        # we don't consume the newline here, so that
        # the outer scope handles it and pops correctly
        - match: '(?=\n)'
          pop: 1
        - include: groovy-code

    # anything else following a dollar sign is not a valid interpolation
    - match: \$(?=")
      scope: invalid.illegal.identifier.groovy
    - match: \$[^"]+
      scope: invalid.illegal.identifier.groovy

  single-quoted-strings:
    - match: \'
      scope: punctuation.definition.string.begin.groovy
      push: single-quoted-string-body

  single-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.groovy

    - match: \'
      scope: punctuation.definition.string.end.groovy
      pop: 1
    - match: '\n'
      scope: invalid.illegal.unclosed-string.groovy
      pop: 1

    - include: string-escape-sequences

  dollar-slashy-strings:
    - match: '\$/'
      scope: punctuation.definition.string.begin.groovy
      push: dollar-slashy-string-body

  dollar-slashy-string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.other.dollar-slashy.groovy

    - match: '/\$'
      scope: punctuation.definition.string.end.groovy
      pop: 1
    - match: '\$/|\$\$'
      scope: constant.character.escape.groovy

    # backslashes only escape newlines (and unicode)
    - include: escaped-end-of-line
    - include: unicode-escape-sequence
    - include: single-dollar-string-interpolation

    - include: merge-conflict-markers

    - match: '\$\{'
      scope: punctuation.section.interpolation.begin.groovy
      push:
        - meta_scope: source.groovy.embedded.source
        - match: '\}'
          scope: punctuation.section.interpolation.end.groovy
          pop: 1
        - include: escaped-end-of-line
        - include: groovy-code

###[ STRINGS / REGULAR EXPRESSIONS ]###########################################

  # https://docs.groovy-lang.org/latest/html/documentation/#_slashy_string

  regexp:
    - match: '/(?=[^/])'
      scope: punctuation.definition.string.regexp.begin.groovy
      push:
        - regexp-meta
        - regexp-body

  regexp-meta:
    - meta_include_prototype: false
    - meta_scope: >-
        meta.string.groovy
        string.regexp.groovy

    - match: '\/'
      scope: punctuation.definition.string.regexp.end.groovy
      pop: 1

  regexp-body:
    - meta_include_prototype: false
    - include: scope:source.regexp.groovy
    - include: immediately-pop

###[ STRINGS / STRING INTERPOLATION ]##########################################

  string-interpolation-multiple-lines:
    - match: '\$\{'
      scope: punctuation.section.interpolation.begin.groovy
      push: string-interpolation-multiple-line-body

  string-interpolation-multiple-line-body:
    - meta_include_prototype: false
    - meta_scope: source.groovy.embedded.source

    - match: '\}'
      scope: punctuation.section.interpolation.end.groovy
      pop: 1

    - include: escaped-end-of-line
    - include: groovy-code

  single-dollar-string-interpolation:
    - match: \${{single_dollar_interpolation_identifier}}
      scope: variable.other.interpolated.groovy
      push: single-dollar-string-interpolation-body

  single-dollar-string-interpolation-body:
    - meta_include_prototype: false

    - match: \.(?={{single_dollar_interpolation_identifier}})
      scope: punctuation.accessor.dot.groovy
    - match: '{{single_dollar_interpolation_identifier}}'
      scope: variable.other.interpolated.groovy
    - match: \b
      pop: 1

###[ STRINGS / ESCAPES ]#######################################################

  unicode-escape-sequence:
    - match: \\u\h{4}
      scope: constant.character.escape.groovy
    - match: \\u(?!\h{4}).{4}
      scope: invalid.illegal.escape.groovy

  escaped-end-of-line:
    - match: \\\n
      scope: constant.character.escape.groovy

  string-escape-sequences:
    - include: unicode-escape-sequence
    - include: escaped-end-of-line
    - match: |-
        \\[nrtbf\$\\'"]
      scope: constant.character.escape.groovy
    - match: \\.
      scope: invalid.illegal.escape.groovy

###[ SEQUENCES ]###############################################################

  # https://docs.groovy-lang.org/latest/html/documentation/#_lists
  # https://docs.groovy-lang.org/latest/html/documentation/#_arrays

  sequences:
    - match: '\['
      scope: punctuation.section.sequence.begin.groovy
      push: sequence-body

  sequence-body:
    - meta_scope: meta.sequence.groovy
    - match: '\]'
      scope: punctuation.section.sequence.end.groovy
      pop: 1
    - include: groovy-code
    - match: ','
      scope: punctuation.separator.sequence.groovy

###[ FUNCTIONS ]###############################################################

  support-functions:
    - match: \b{{printing_functions}}\b
      scope: support.function.print.groovy
    - match: \b{{testing_functions}}\b
      scope: support.function.testing.groovy
    - match: \b{{other_functions}}\b
      scope: support.function.other.groovy

  values:
    - include: strings
    - include: numbers
    - include: constants
    - include: class-object
    - include: sequences
    - include: method-call
    - include: variables
    - match: \(
      scope: punctuation.section.group.begin.groovy
      push: inside-parens

  variables:
    - match: \b(?:this|super)\b
      scope: variable.language.groovy

    - match: \b(sh)\s+(\'{3})
      captures:
        1: support.function.groovy
        2: >-
          meta.string.embedded-shell.groovy
          punctuation.definition.string.begin.groovy
      embed: scope:source.shell.bash
      embed_scope: >-
        meta.string.embedded-shell.groovy
        string.quoted.single.block.groovy
      escape: \'{3}
      escape_captures:
        0: >-
          meta.string.embedded-shell.groovy
          punctuation.definition.string.end.groovy
      #- include: string-escape-sequences

    - match: \b(sh)\s+(\"{3})
      captures:
        1: support.function.groovy
        2: >-
          meta.string.embedded-shell.groovy
          punctuation.definition.string.begin.groovy
      embed: scope:source.shell.bash
      embed_scope: >-
        meta.string.embedded-shell.groovy
        string.quoted.double.block.groovy
      escape: \"{3}
      escape_captures:
        0: >-
          meta.string.embedded-shell.groovy
          punctuation.definition.string.end.groovy
      #- include: string-interpolation-multiple-lines

    - match: \b(sh)\s+(')
      captures:
        1: support.function.groovy
        2: >-
          meta.string.embedded-shell.groovy
          punctuation.definition.string.begin.groovy
      embed: scope:source.shell.bash
      embed_scope: >-
        meta.string.embedded-shell.groovy
        string.quoted.single.groovy
      escape: \'
      escape_captures:
        0: >-
          meta.string.embedded-shell.groovy
          punctuation.definition.string.end.groovy

    - match: \b(?!def\b)(?![[:upper:]])\w+\b(?!\s+\w)
      scope: variable.other.readwrite.groovy

  inside-parens:
    - meta_scope: meta.group.groovy
    - match: \)
      scope: punctuation.section.group.end.groovy
      pop: 1
    - include: groovy-code-minus-map-keys

###[ PROTOTYPES ]##############################################################

  eol-pop:
    - match: '{{eol}}'
      pop: 1

  immediately-pop:
    - match: ''
      pop: 1

###[ VARIABLES ]###############################################################

variables:
  first_line_lang: (?:\b(?:gradle|groovy|jenkinsfile)\b)

  leading_wspace: (?:^\s*)
  line_break: (?:\n)
  eol: (?:${{line_break}}?)

  bin_int: (?:[01](?:_*[01])*)
  oct_int: (?:[0-7](?:_*[0-7])*)
  dec_int: (?:\d(?:_*\d)*)
  hex_int: (?:\h(?:_*\h)*)

  unicode_letter: |-
    (?xi:
      # Valid unicode letters according to:
      # http://groovy-lang.org/syntax.html#_normal_identifiers
      #   Literal Unicode         Escaped Unicode
          [\x{00C0}-\x{00D6}]  |  \\u00C[0-9A-F] | \\u00D[0-6]
        | [\x{00D8}-\x{00F6}]  |  \\u00D[89A-F]  | \\u00E[0-9A-F] | \\u00F[0-6]
        | [\x{00F8}-\x{00FF}]  |  \\u00F[89A-F]
        | [\x{0100}-\x{FFFE}]  |  \\u0[1-9A-F][0-9A-F]{2} | \\u(?!FFFF)[1-9A-F][0-9A-F]{3}
    )

  # dollars aren't allowed in the single dollar interpolated identifiers
  # (dotted expressions), but they are supposed to be valid characters
  # in identifiers in other contexts
  # e.g. `"$$a"` is invalid, but `"${$a}"` is fine.
  single_dollar_interpolation_identifier: (?:{{unicode_letter}}|[[:alpha:]_])(?:{{unicode_letter}}|[[:alnum:]_])*

  primitive_types: (?:boolean|byte|char|double|float|int|long|short)\b

  optional_arrays: (?:(?:\[\s*\])*)

  access_control_modifiers: (?:public|private|protected)
  static_modifiers: (?:static)
  final_modifiers: (?:final)
  other_modifiers: (?:native|synchronized|abstract|threadsafe|transient)

  printing_functions: (?:sprintf|print(?:f|ln)?)
  testing_functions: |-
    (?x:
      shouldFail
    | fail(?:NotEquals)?
    | ass(?:
        ume
      | ert(?:
          S(?:cript|ame)
        | N(?:ot(?:Same|Null)|ull)
        | Contains
        | T(?:hat|oString|rue)
        | Inspect
        | Equals
        | False
        | Length
        | ArrayEquals
        )
      )
    )
  other_functions: (?:sleep|inspect|dump|use|with)
