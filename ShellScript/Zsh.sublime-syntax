%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
# https://zsh-manual.netlify.app/shell-grammar/
# https://zsh.sourceforge.io/Doc/Release/
name: Zsh
scope: source.shell.zsh
version: 2

extends: Packages/ShellScript/Bash.sublime-syntax

file_extensions:
  - zsh

hidden_file_extensions:
  - .zlogin
  - .zlogout
  - .zprofile
  - .zshenv
  - .zshrc

first_line_match: |-
  (?xi:
    ^ \#! .* \bzsh\b              # shebang
  | ^ \#(autoload|compdef)\b      # zsh completions
  )

###############################################################################

contexts:

###[ ANONYMOUS FUNCTION DEFINITIONS ]##########################################

  def-anonymous-body:
    - meta_prepend: true
    - include: terminators

###[ FUNCTION DEFINITIONS ]####################################################

  def-function-begin:
    - meta_include_prototype: false
    - meta_scope: meta.function.shell
    - match: ''
      set:
        - def-function-body
        - def-function-params
        - def-function-name
        - def-function-flag

  def-function-flag:
    - clear_scopes: 1
    - meta_scope: meta.function.shell
    - match: ([-+])[tTuU]{{opt_break}}
      scope: meta.parameter.option.shell variable.parameter.option.shell
      captures:
        1: punctuation.definition.parameter.shell
      pop: 1
    - include: line-continuations
    - include: comments
    - include: else-pop

  def-function-name:
    - meta_prepend: true
    - match: '{{hook_functions}}'
      scope: entity.name.function.shell support.function.shell.zsh
      pop: 1
    - match: '{{trap_functions}}'
      scope: entity.name.function.shell support.function.shell.zsh
      pop: 1

  def-function-body:
    - meta_include_prototype: false
    - meta_content_scope: meta.function.shell
    - include: def-function-body-braces
    - include: line-continuations
    - include: comments
    - include: terminators
    - match: (?=\S)
      set:
        - def-function-simple-body
        - statement

  def-function-simple-body:
    - meta_include_prototype: false
    - meta_content_scope: meta.function.body.shell
    - include: immediately-pop

  def-function-end:
    - meta_prepend: true
    - include: redirections

###[ BUILTINS ]################################################################

  cmd-builtin:
    - meta_prepend: true
    - match: autoload{{cmd_break}}
      scope:
        meta.function-call.identifier.shell
        support.function.shell.zsh
      set:
        - cmd-args-meta
        - cmd-args-end-of-options-then-function-references

  cmd-mapfile: []

###[ COMMANDS ]################################################################

  cmd-compound:
    - match: \{
      scope: punctuation.section.block.begin.shell
      set: cmd-compound-braces-body
    - match: \(
      scope: punctuation.section.compound.begin.shell
      set: cmd-compound-parens-body

  cmd-compound-braces-body:
    - meta_scope: meta.block.shell
    - match: \}
      scope: punctuation.section.block.end.shell
      pop: 1
    - include: statements

###[ CONTROL STATEMENTS ]######################################################

  cmd-control:
    - meta_append: true
    # 6.3 Complex Commands
    - match: always{{cmd_break}}
      scope: keyword.control.exception.always.shell.zsh
    - match: repeat{{cmd_break}}
      scope: keyword.control.loop.repeat.shell.zsh
      set:
        - repeat-meta
        - repeat-args
    # 6.4 Alternate Forms For Complex Commands
    - match: foreach{{cmd_break}}
      scope: keyword.control.loop.foreach.shell.zsh
      set:
        - foreach-meta
        - loop-iterator-wordlist
        - loop-iterator-var
    - match: end{{cmd_break}}
      scope: keyword.control.loop.endforeach.shell.zsh

  case-word:
    - meta_prepend: true
    - match: \{
      scope: punctuation.section.block.begin.shell.zsh
      set: case-block-body

  case-block-body:
    - meta_scope: meta.statement.conditional.case.body.shell meta.block.shell.zsh
    - match: \}
      scope: punctuation.section.block.end.shell.zsh
      pop: 1
    - include: comments
    - include: case-clauses

  foreach-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.loop.foreach.shell.zsh
    - include: immediately-pop

  repeat-meta:
    - meta_include_prototype: false
    - meta_scope: meta.statement.loop.repeat.shell.zsh
    - include: immediately-pop

  repeat-args:
    - meta_include_prototype: false
    - include: eoc-pop
    - include: arithmetic-word

  loop-iterator-wordlist:
    - meta_prepend: true
    - match: \(
      scope: punctuation.section.sequence.begin.shell.zsh
      set: loop-iterator-wordlist-group-body

  loop-iterator-wordlist-group-body:
    - meta_scope: meta.sequence.list.shell.zsh
    - match: \)
      scope: punctuation.section.sequence.end.shell.zsh
      pop: 1
    - include: comments
    - include: string-path-patterns

###[ ARITHMETIC EXPRESSIONS ]##################################################

  expression-common:
    - meta_prepend: true
    - include: zsh-expression-flags
    - include: zsh-expression-function-call

  zsh-expression-flags:
    - match: \[#
      scope: punctuation.definition.modifier.begin.shell.zsh
      push: zsh-expression-flag-body

  zsh-expression-flag-body:
    - meta_scope: meta.modifier.base.shell.zsh
    - meta_content_scope: storage.modifier.mode.base.shell.zsh
    - match: \]
      scope: punctuation.definition.modifier.end.shell.zsh
      pop: 1
    - include: string-interpolations

  zsh-expression-function-call:
    - match: '{{identifier}}(?=\s*\()'
      scope: meta.function-call.identifier.shell.zsh variable.function.shell.zsh
      push: zsh-expression-function-argument-list

  zsh-expression-function-argument-list:
    - meta_content_scope: meta.function-call.identifier.shell.zsh
    - match: \(
      scope: punctuation.section.arguments.begin.shell.zsh
      set: zsh-expression-function-argument-list-body

  zsh-expression-function-argument-list-body:
    - meta_scope: meta.function-call.arguments.shell.zsh
    - match: \)
      scope: punctuation.section.arguments.end.shell.zsh
      pop: 1
    - include: expression-common

###[ OPERATORS ]###############################################################

  operators:
    - meta_prepend: true
    - match: \&[|!]
      scope: keyword.operator.assignment.pipe.shell.zsh

###[ REDIRECTIONS AND HEREDOCS ]###############################################

  redirections-input:
    # not looking like a number range
    - match: (\d*)(<(?:&|(?!(?:\{.*?\}|\S)*>)))
      captures:
        1: meta.file-descriptor.shell
           meta.number.integer.decimal.shell
           constant.numeric.value.shell
        2: keyword.operator.assignment.redirection.shell
      push:
        - redirection-meta
        - redirection-descriptor

###[ LITERALS ]################################################################

  numbers:
    - meta_prepend: true
    - match: (\d{{digit}}*(\.){{digit}}*(?:[eE][-+]?{{digit}}*)?)({{word_char}}*)
      scope: meta.number.float.decimal.shell.zsh
      captures:
        1: constant.numeric.value.shell.zsh
        2: punctuation.separator.decimal.shell.zsh
        3: invalid.illegal.shell.zsh

  number:
    - meta_prepend: true
    - match: ([-+]?)(\d{{digit}}*(\.){{digit}}*(?:[eE][-+]?{{digit}}*)?){{word_break}}
      scope: meta.number.float.decimal.shell.zsh
      captures:
        1: keyword.operator.arithmetic.shell.zsh
        2: constant.numeric.value.shell.zsh
        3: punctuation.separator.decimal.shell.zsh
      pop: 1

###[ STRING PATH PATTERN MATCHING ]############################################

  string-path-patterns:
    - meta_prepend: true
    - match: \^
      scope: keyword.operator.logical.regexp.shell.zsh
      push:
        - string-path-pattern-body
        - maybe-tilde-interpolation

  string-path-pattern:
    - meta_prepend: true
    - match: \^
      scope: keyword.operator.logical.regexp.shell.zsh
      set:
        - string-path-pattern-body
        - maybe-tilde-interpolation

  string-path-pattern-content:
    - meta_prepend: true
    - include: zsh-pattern-flags
    - include: zsh-pattern-operators
    - include: zsh-pattern-ranges

###[ PATH PATTERN MATCHING ]###################################################

  path-pattern-content:
    - meta_prepend: true
    - include: zsh-pattern-flags
    - include: zsh-pattern-operators
    - include: zsh-pattern-ranges

###[ SHELL PATTERN MATCHING ]##################################################

  pattern-main-content:
    - meta_prepend: true
    - include: zsh-pattern-flags
    - include: zsh-pattern-operators
    - include: zsh-pattern-ranges

  pattern-groups:
    # KSH_GLOB is optional (hence not matching ? and * in favor of ZSH globs)
    - match: ([+@!]??)(\()
      captures:
        1: string.unquoted.shell keyword.operator.quantifier.regexp.shell
        2: meta.group.regexp.shell string.unquoted.shell punctuation.definition.group.begin.regexp.shell
      push: pattern-group-body

  pattern-group-content:
    - meta_prepend: true
    - match: (?=e(?:[<{(\[]|.["']))
      push: zsh-evaluation-interpolation
    - include: zsh-pattern-flags
    - include: zsh-pattern-operators
    - include: zsh-pattern-ranges

  zsh-evaluation-interpolation:
    - clear_scopes: 1
    - meta_scope: meta.interpolation.command.shell.zsh
    - match: e\{(["']?)
      scope: punctuation.section.interpolation.begin.shell.zsh
      embed: statements
      escape: \1\}
      escape_captures:
        0: punctuation.section.interpolation.end.shell.zsh
    - match: e\[(["']?)
      scope: punctuation.section.interpolation.begin.shell.zsh
      embed: statements
      escape: \1\]
      escape_captures:
        0: punctuation.section.interpolation.end.shell.zsh
    - match: e\((["']?)
      scope: punctuation.section.interpolation.begin.shell.zsh
      embed: statements
      escape: \3\)
      escape_captures:
        0: punctuation.section.interpolation.end.shell.zsh
    - match: e<(["']?)
      scope: punctuation.section.interpolation.begin.shell.zsh
      embed: statements
      escape: \3>
      escape_captures:
        0: punctuation.section.interpolation.end.shell.zsh
    - match: e(.)(['"]?)
      scope: punctuation.section.interpolation.begin.shell.zsh
      embed: statements
      escape: \2\1
      escape_captures:
        0: punctuation.section.interpolation.end.shell.zsh
    - include: immediately-pop

  zsh-pattern-flags:
    - match: \(#
      scope: punctuation.definition.modifier.begin.shell.zsh
      push: zsh-pattern-flag-body

  zsh-pattern-flag-body:
    - clear_scopes: 1
    - meta_scope: meta.modifier.glob.shell.zsh
    - meta_content_scope: storage.modifier.mode.glob.shell.zsh
    - include: zsh-pattern-flag-end
    - include: string-interpolations
    - match: \,
      scope: punctuation.separator.sequence.shell
    - match: q
      scope: storage.modifier.mode.glob.shell.zsh
      set: zsh-pattern-flag-qualifier-body

  zsh-pattern-flag-qualifier-body:
    # Contains glob qualifiers if EXTENDED_GLOB is set
    # https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers
    - clear_scopes: 1
    - meta_scope: meta.modifier.glob.shell.zsh
    - include: zsh-pattern-flag-end
    - include: string-interpolations

  zsh-pattern-flag-end:
    - match: \)
      scope: punctuation.definition.modifier.end.shell.zsh
      pop: 1
    - include: line-continuations

  zsh-pattern-operators:
    - match: '[~^]'
      scope: keyword.operator.logical.regexp.shell.zsh
      push: maybe-tilde-interpolation
    - match: \#{1,2}
      scope: keyword.operator.quantifier.regexp.shell.zsh

  zsh-pattern-ranges:
    - match: (?=<[^<&])
      branch_point: zsh-pattern-range
      branch:
        - zsh-pattern-range-begin
        - zsh-pattern-range-fallback

  zsh-pattern-range-begin:
    - meta_include_prototype: false
    - match: \<
      scope: punctuation.definition.range.begin.shell.zsh
      set: zsh-pattern-range-body

  zsh-pattern-range-body:
    - meta_scope: meta.range.shell.zsh
    - match: \>
      scope: punctuation.definition.range.end.shell.zsh
      pop: 1
    - include: line-continuations
    - include: expansions-variables
    - match: \-
      scope: keyword.operator.range.shell.zsh
    - match: ([-+]?)(\d+)
      scope: meta.number.integer.decimal.shell
      captures:
        1: keyword.operator.arithmetic.shell
        2: constant.numeric.value.shell
    - match: ''
      fail: zsh-pattern-range

  zsh-pattern-range-fallback:
    - meta_include_prototype: false
    # input redirection
    - match: (\d*)(<&?)
      captures:
        1: meta.file-descriptor.shell
           meta.number.integer.decimal.shell
           constant.numeric.value.shell
        2: keyword.operator.assignment.redirection.shell
      set: redirection-descriptor

###[ ARITHMETIC EXPANSIONS ]###################################################

  expansions-arithmetic:
    - meta_prepend: true
    - match: (\$)(\[)
      captures:
        1: punctuation.definition.variable.shell.zsh
        2: punctuation.section.interpolation.begin.shell.zsh
      push: zsh-arithmetic-expansion-body

  zsh-arithmetic-expansion-body:
    - meta_scope: meta.interpolation.arithmetic.shell.zsh
    - match: \]
      scope: punctuation.section.interpolation.end.shell.zsh
      pop: 1
    - include: expression-content

###[ PARAMETER EXPANSIONS ]####################################################

  expansions-parameter:
    - match: (\$)(\{)
      captures:
        1: punctuation.definition.variable.shell
        2: punctuation.section.interpolation.begin.shell
      push:
        - expansion-parameter-meta
        - expansion-parameter-modifier
        - expansion-parameter-name
        - expansion-parameter-operator
        - zsh-parameter-flags
    # https://www.gnu.org/software/bash/manual/bash.html#Positional-Parameters
    - match: (\$)\d
      scope: variable.language.positional.shell
      captures:
        1: punctuation.definition.variable.shell
      push: zsh-parameter-subscription
    # https://www.gnu.org/software/bash/manual/bash.html#Shell-Variables
    - match: (\$){{builtin_variables}}
      scope: variable.language.builtin.shell
      captures:
        1: punctuation.definition.variable.shell
      push: zsh-parameter-subscription
    # https://www.gnu.org/software/bash/manual/bash.html#Special-Parameters
    - match: (\$){{special_variables}}
      scope: variable.language.special.shell
      captures:
        1: punctuation.definition.variable.shell
      push: zsh-parameter-subscription
    - match: (\$){{identifier}}
      scope: variable.other.readwrite.shell
      captures:
        1: punctuation.definition.variable.shell
      push: zsh-parameter-subscription

  expansion-parameter-operator:
    # 14.3 Parameter Expansion
    # https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion
    - meta_prepend: true
    # Expand elements like brace expansion
    - match: \^{1,2}
      scope: keyword.operator.expansion.brace.shell.zsh
      pop: 1
    # Allow globbing, file expansion on result
    - match: \~{1,2}
      scope: keyword.operator.expansion.glob.shell.zsh
      pop: 1
    # Split words of result like lesser shells
    - match: \={1,2}
      scope: keyword.operator.expansion.split.shell.zsh
      pop: 1
    # 1 if var is set, else 0
    - match: \+
      scope: keyword.operator.expansion.valid.shell.zsh
      pop: 1

  expansion-parameter-modifier:
    # 14.3 Parameter Expansion
    - meta_prepend: true
    # $var if non-null, else str and set var to it
    - match: ::=
      scope: keyword.operator.assignment.shell.zsh
      set:
        - expansion-parameter-pattern
        - maybe-tilde-interpolation
    - match: :#
      scope: keyword.operator.assignment.shell.zsh
      set:
        - expansion-parameter-pattern
        - maybe-tilde-interpolation

  expansion-parameter-pattern:
    - meta_prepend: true
    - include: zsh-pattern-flags
    - include: zsh-pattern-operators
    - include: zsh-pattern-ranges

  expansion-parameter-pattern-groups:
    # KSH_GLOB is optional (hence not matching ? and * in favor of ZSH globs)
    - match: ([+@!]??)(\()
      captures:
        1: string.unquoted.shell keyword.operator.quantifier.regexp.shell
        2: meta.group.regexp.shell string.unquoted.shell punctuation.definition.group.begin.regexp.shell
      push: expansion-parameter-pattern-group-body

  expansion-parameter-pattern-group-body:
    - meta_prepend: true
    - include: zsh-pattern-flags
    - include: zsh-pattern-operators
    - include: zsh-pattern-ranges

  zsh-parameter-subscription:
    - meta_include_prototype: false
    - meta_scope: meta.interpolation.parameter.shell
    - include: variable-subscription

  zsh-parameter-flags:
    # 14.3.1 Parameter Expansion Flags
    # https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion-Flags
    - match: \(
      scope: punctuation.definition.modifier.begin.shell.zsh
      set: zsh-parameter-flag-body
    - include: immediately-pop

  zsh-parameter-flag-body:
    - meta_scope: meta.modifier.parameter.shell.zsh
    - match: \)
      scope: punctuation.definition.modifier.end.shell.zsh
      pop: 1
    # bailout from unbalanced brackets
    - include: brace-pop
    # flag:expr:
    - match: '[Ilr]'
      scope: storage.modifier.expansion.flag.shell.zsh
      push: zsh-parameter-flag-expression-argument
    # _:flags:
    - match: (_)(\W)(.*?)(\2)
      captures:
        1: storage.modifier.expansion.flag.reserved.shell.zsh
        2: punctuation.section.argument.begin.shell.zsh
        3: invalid.illegal.unsupported.shell.zsh
        4: punctuation.section.argument.end.shell.zsh
    # simple single char flags
    # TODO: `*` enables extended globs -> handle in syntax?
    - match: '[-~#%*@0ABCDEFLMNOPQRSTUVWXZabcefgijkmnopqstuvwz]'
      scope: storage.modifier.expansion.flag.shell.zsh
    # string arguments
    - match: \<
      scope: punctuation.section.argument.begin.shell.zsh
      push: zsh-parameter-flag-angle-string-argument
    - match: \{
      scope: punctuation.section.argument.begin.shell.zsh
      push: zsh-parameter-flag-brace-string-argument
    - match: \[
      scope: punctuation.section.argument.begin.shell.zsh
      push: zsh-parameter-flag-bracket-string-argument
    - match: \(
      scope: punctuation.section.argument.begin.shell.zsh
      push: zsh-parameter-flag-paren-string-argument
    - match: (\W)
      scope: punctuation.section.argument.begin.shell.zsh
      push: zsh-parameter-flag-string-argument

  zsh-parameter-flag-expression-argument:
    - meta_include_prototype: false
    - match: \<
      scope: punctuation.section.argument.begin.shell.zsh
      set: zsh-parameter-flag-angle-expression-argument
    - match: \{
      scope: punctuation.section.argument.begin.shell.zsh
      set: zsh-parameter-flag-brace-expression-argument
    - match: \[
      scope: punctuation.section.argument.begin.shell.zsh
      set: zsh-parameter-flag-bracket-expression-argument
    - match: \(
      scope: punctuation.section.argument.begin.shell.zsh
      set: zsh-parameter-flag-paren-expression-argument
    - match: (\W)
      scope: punctuation.section.argument.begin.shell.zsh
      set: zsh-parameter-flag-other-expression-argument
    - include: immediately-pop

  zsh-parameter-flag-angle-expression-argument:
    - meta_include_prototype: false
    - meta_scope: meta.argument.shell.zsh
    - meta_content_scope: meta.arithmetic.shell
    - match: \>
      scope: punctuation.section.argument.end.shell.zsh
      pop: 1
    - include: brace-pop
    - include: expression-content

  zsh-parameter-flag-brace-expression-argument:
    - meta_include_prototype: false
    - meta_scope: meta.argument.shell.zsh
    - meta_content_scope: meta.arithmetic.shell
    - match: \}
      scope: punctuation.section.argument.end.shell.zsh
      pop: 1
    - include: expression-content

  zsh-parameter-flag-bracket-expression-argument:
    - meta_include_prototype: false
    - meta_scope: meta.argument.shell.zsh
    - meta_content_scope: meta.arithmetic.shell
    - match: \]
      scope: punctuation.section.argument.end.shell.zsh
      pop: 1
    - include: brace-pop
    - include: expression-content

  zsh-parameter-flag-paren-expression-argument:
    - meta_include_prototype: false
    - meta_scope: meta.argument.shell.zsh
    - meta_content_scope: meta.arithmetic.shell
    - match: \)
      scope: punctuation.section.argument.end.shell.zsh
      pop: 1
    - include: brace-pop
    - include: expression-content

  zsh-parameter-flag-other-expression-argument:
    - meta_include_prototype: false
    - meta_scope: meta.argument.shell.zsh
    - meta_content_scope: meta.arithmetic.shell
    - match: \1
      scope: punctuation.section.argument.end.shell.zsh
      pop: 1
    - include: brace-pop
    - include: expression-content

  zsh-parameter-flag-angle-string-argument:
    - meta_include_prototype: false
    - meta_scope: meta.argument.shell.zsh
    - meta_content_scope: meta.string.shell.zsh string.unquoted.shell.zsh
    - match: \>
      scope: punctuation.section.argument.end.shell.zsh
      pop: 1
    - include: brace-pop
    - include: string-unquoted-content

  zsh-parameter-flag-brace-string-argument:
    - meta_include_prototype: false
    - meta_scope: meta.argument.shell.zsh
    - meta_content_scope: meta.string.shell.zsh string.unquoted.shell.zsh
    - match: \}
      scope: punctuation.section.argument.end.shell.zsh
      pop: 1
    - include: string-unquoted-content

  zsh-parameter-flag-bracket-string-argument:
    - meta_include_prototype: false
    - meta_scope: meta.argument.shell.zsh
    - meta_content_scope: meta.string.shell.zsh string.unquoted.shell.zsh
    - match: \]
      scope: punctuation.section.argument.end.shell.zsh
      pop: 1
    - include: brace-pop
    - include: string-unquoted-content

  zsh-parameter-flag-paren-string-argument:
    - meta_include_prototype: false
    - meta_scope: meta.argument.shell.zsh
    - meta_content_scope: meta.string.shell.zsh string.unquoted.shell.zsh
    - match: \)
      scope: punctuation.section.argument.end.shell.zsh
      pop: 1
    - include: brace-pop
    - include: string-unquoted-content

  zsh-parameter-flag-string-argument:
    - meta_include_prototype: false
    - meta_scope: meta.argument.shell.zsh
    - meta_content_scope: meta.string.shell.zsh string.unquoted.shell.zsh
    - match: \1
      scope: punctuation.section.argument.end.shell.zsh
      pop: 1
    - include: brace-pop
    - include: string-unquoted-content

###[ TILDE EXPANSIONS ]########################################################

  tilde-interpolation:
    - meta_append: true
    - include: equals-expansion

  tilde-modifier:
    - meta_prepend: true
    # 14.7.1 Dynamic named directories
    # https://zsh.sourceforge.io/Doc/Release/Expansion.html#Dynamic-named-directories
    - match: \[
      scope: punctuation.section.brackets.begin.shell.zsh
      push: tilde-modifier-function

  tilde-modifier-function:
    - meta_scope: meta.brackets.shell.zsh
    - meta_content_scope: meta.function-call.identifier.shell.zsh variable.function.shell.zsh
    - match: \]
      scope: punctuation.section.brackets.end.shell.zsh
      pop: 2
    - include: literal-unquoted-content

  equals-expansion:
    # 14.7.3 ‘=’ expansion
    # https://zsh.sourceforge.io/Doc/Release/Expansion.html#g_t_0060_003d_0027-expansion
    - match: =
      scope: punctuation.definition.expansion.shell.zsh
      pop: 1

###[ VARIABLES ]###############################################################

variables:
  # Language identifier in shebang
  shebang_language: \bzsh\b

  # Numbers
  digit: '[\d_]'

  # Parameter expansions
  is_interpolation: (?=\$[({\[{{identifier_char}}{{special_variables}}]|`)

  # A character that, when unquoted, separates words.
  # Bash ones + `{` and `}`
  metachar: '[\s|&;(){}<>]'

  # 9.3.1 Hook Functions
  hook_functions: |-
    (?x: chpwd | periodic | precmd | preexec | zshaddhistory | zshexit ){{cmd_break}}

  # 9.3.2 Trap Functions
  trap_functions: |-
    (?x: TRAP (?: DEBUG | EXIT | ZERR | {{signal_subnames}} ) ){{cmd_break}}

  # 17 Shell Builtin Commands
  # https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands
  builtin_cmds: |-
    (?x: \. | \: | bg | bindkey | bye | cap | cd | chdir | clone | comparguments
    | compcall | compctl | compdescribe | compfiles | compgroups | compquote
    | comptags | comptry | compvalues | dirs | disable | disown | echotc
    | echoti | emulate | enable | eval | fc | fg | float | functions | getcap
    | getln | getopts | hash | history | integer | job | jobs | kill | limit
    | logout | popd | print | printf | pushd | pushln | pwd | r | read | rehash
    | sched | set | setcap | setopt | shift | source | stat | suspend | times
    | trap | ttyctl | type | typeset | ulimit | umask | unfunction | unhash
    | unlimit | unsetopt | vared | wait | whence | where | which | zcompile
    | zformat | zftp | zle | zmodload | zparseopts | zprof | zpty | zregexparse
    | zsocket | zstyle | ztcp ){{cmd_break}}

  modifier_cmds: |-
    (?x: builtin | nocorrect | noglob ){{cmd_break}}

  # 14.8.1 Glob Operators
  posix_classes: |-
    (?x:
    # POSIX classes
      ascii | alnum | alpha | blank | cntrl | digit | graph
    | lower | print | punct | space | upper | word | xdigit
    # ZSH specific classes
    | IDENT | IFS | IFSSPACE | INCOMPLETE | WORD )

  # 15.5 Parameters Set By The Shell
  # https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell
  # 15.6 Parameters Used By The Shell
  # https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell
  builtin_variables: |-
    (?x:
      _
    | ARGC
    | argv
    | ARGV0
    | BAUD
    | CDPATH
    | cdpath
    | COLUMNS
    | CORRECT_IGNORE
    | CORRECT_IGNORE_FILE
    | CPUTYPE
    | DIRSTACKSIZE
    | EGID
    | ENV
    | ERRNO
    | EUID
    | FCEDIT
    | fignore
    | fpath
    | FUNCNEST
    | GID
    | histchars
    | HISTCHARS
    | HISTCMD
    | HISTFILE
    | HISTORY_IGNORE
    | HISTSIZE
    | HOME
    | HOST
    | IFS
    | KEYBOARD_HACK
    | KEYTIMEOUT
    | LANG
    | LC_ALL
    | LC_COLLATE
    | LC_CTYPE
    | LC_MESSAGES
    | LC_NUMERIC
    | LC_TIME
    | LINENO
    | LINES
    | LISTMAX
    | LOGNAME
    | MACHTYPE
    | MAIL
    | MAILCHECK
    | mailpath
    | manpath
    | match
    | MATCH
    | mbegin
    | MBEGIN
    | mend
    | MEND
    | module_path
    | NULLCMD
    | OLDPWD
    | OPTARG
    | OPTIND
    | OSTYPE
    | PATH
    | path
    | pipestatus
    | POSTEDIT
    | PPID
    | PROMPT
    | prompt
    | PROMPT2
    | PROMPT3
    | PROMPT4
    | PROMPT_EOL_MARK
    | PS1
    | PS2
    | PS3
    | PS4
    | psvar
    | PWD
    | RANDOM
    | READNULLCMD
    | REPLY
    | reply
    | REPORTMEMORY
    | REPORTTIME
    | RPROMPT
    | RPROMPT2
    | RPS1
    | RPS2
    | SAVEHIST
    | SECONDS
    | SHELL
    | SHLVL
    | signals
    | SPROMPT
    | status
    | STTY
    | TERM
    | TERMINFO
    | TERMINFO_DIRS
    | TIMEFMT
    | TMOUT
    | TMPPREFIX
    | TMPSUFFIX
    | TRY_BLOCK_ERROR
    | TRY_BLOCK_INTERRUPT
    | TTY
    | TTYIDLE
    | UID
    | USERNAME
    | VENDOR
    | WORDCHARS
    | ZBEEP
    | ZDOTDIR
    | zle_bracketed_paste
    | zle_highlight
    | ZLE_LINE_ABORTED
    | ZLE_REMOVE_SUFFIX_CHARS
    | ZLE_RPROMPT_INDENT
    | ZLE_SPACE_SUFFIX_CHARS
    | ZSH_ARGZERO
    | zsh_eval_context
    | ZSH_EXECUTION_STRING
    | ZSH_NAME
    | ZSH_PATCHLEVEL
    | zsh_scheduled_events
    | ZSH_SCRIPT
    | ZSH_SUBSHELL
    | ZSH_VERSION
    ){{identifier_break}}

