%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Shell Script (Bash)
file_extensions:
  - sh
  - bash
  - zsh
  - .bash_aliases
  - .bash_functions
  - .bash_login
  - .bash_logout
  - .bash_profile
  - .bash_variables
  - .bashrc
  - .profile
  - .textmate_init
first_line_match: '^#!.*\b(bash|zsh|sh|tcsh)|^#\s*-\*-[^*]*mode:\s*shell-script[^*]*-\*-'
scope: source.shell
contexts:
  main:
    - include: comment
    - include: pipeline
    - include: list
    - include: compound-command
    - include: loop
    - include: function-definition
    - include: string
    - include: variable
    - include: interpolation
    - include: heredoc
    - include: herestring
    - include: redirection
    - include: pathname
    - include: keyword
    - include: support
  comment:
    - match: '(?<!\S)(#)(?!\{).*$\n?'
      scope: comment.line.number-sign.shell
      captures:
        1: punctuation.definition.comment.shell
  case-clause:
    - match: (?=\S)
      push:
        - meta_scope: meta.scope.case-clause.shell
        - match: ;;
          captures:
            0: punctuation.terminator.case-clause.shell
          pop: true
        - match: (\(|(?=\S))
          captures:
            0: punctuation.definition.case-pattern.shell
          push:
            - meta_scope: meta.scope.case-pattern.shell
            - match: \)
              captures:
                0: punctuation.definition.case-pattern.shell
              pop: true
            - match: \|
              scope: punctuation.separator.pipe-sign.shell
            - include: string
            - include: variable
            - include: interpolation
            - include: pathname
        - match: (?<=\))
          push:
            - meta_scope: meta.scope.case-clause-body.shell
            - match: (?=;;)
              pop: true
            - include: main
  compound-command:
    - match: '(\[{2})'
      captures:
        1: punctuation.definition.logical-expression.shell
      push:
        - meta_scope: meta.scope.logical-expression.shell
        - match: '(\]{2})'
          captures:
            1: punctuation.definition.logical-expression.shell
          pop: true
        - include: logical-expression
        - include: main
    - match: '(\({2})'
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.other.math.shell
        - match: '(\){2})'
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: math
    - match: (\()
      captures:
        1: punctuation.definition.subshell.shell
      push:
        - meta_scope: meta.scope.subshell.shell
        - match: (\))
          captures:
            1: punctuation.definition.subshell.shell
          pop: true
        - include: main
    - match: '(?<=\s|^)(\{)(?=\s|$)'
      captures:
        1: punctuation.definition.group.shell
      push:
        - meta_scope: meta.scope.group.shell
        - match: '(?<=^|;)\s*(\})'
          captures:
            1: punctuation.definition.group.shell
          pop: true
        - include: main
  function-definition:
    - match: '\b(function)\s+([^\s\\]+)(?:\s*(\(\)))?'
      captures:
        1: storage.type.function.shell
        2: entity.name.function.shell
        3: punctuation.definition.arguments.shell
      push:
        - meta_scope: meta.function.shell
        - match: ;|&|$
          captures:
            0: punctuation.definition.function.shell
          pop: true
        - include: main
    - match: '\b([^\s\\=]+)\s*(\(\))'
      captures:
        1: entity.name.function.shell
        2: punctuation.definition.arguments.shell
      push:
        - meta_scope: meta.function.shell
        - match: ;|&|$
          captures:
            0: punctuation.definition.function.shell
          pop: true
        - include: main
  heredoc:
    - match: (<<)-("|'|)(RUBY)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.ruby.shell
        - meta_content_scope: source.ruby.embedded.shell
        - match: ^\t*(RUBY)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.ruby
    - match: (<<)("|'|)(RUBY)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.ruby.shell
        - meta_content_scope: source.ruby.embedded.shell
        - match: ^(RUBY)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.ruby
    - match: (<<)-("|'|)(PYTHON)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.python.shell
        - meta_content_scope: source.python.embedded.shell
        - match: ^\t*(PYTHON)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.python
    - match: (<<)("|'|)(PYTHON)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.python.shell
        - meta_content_scope: source.python.embedded.shell
        - match: ^(PYTHON)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.python
    - match: (<<)-("|'|)(APPLESCRIPT)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.applescript.shell
        - meta_content_scope: source.applescript.embedded.shell
        - match: ^\t*(APPLESCRIPT)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.applescript
    - match: (<<)("|'|)(APPLESCRIPT)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.applescript.shell
        - meta_content_scope: source.applescript.embedded.shell
        - match: ^(APPLESCRIPT)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:source.applescript
    - match: (<<)-("|'|)(HTML)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.html.shell
        - meta_content_scope: text.html.embedded.shell
        - match: ^\t*(HTML)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.basic
    - match: (<<)("|'|)(HTML)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.html.shell
        - meta_content_scope: text.html.embedded.shell
        - match: ^(HTML)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.basic
    - match: (<<)-("|'|)(MARKDOWN)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.markdown.shell
        - meta_content_scope: text.html.markdown.embedded.shell
        - match: ^\t*(MARKDOWN)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.markdown
    - match: (<<)("|'|)(MARKDOWN)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.markdown.shell
        - meta_content_scope: text.html.markdown.embedded.shell
        - match: ^(MARKDOWN)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.markdown
    - match: (<<)-("|'|)(TEXTILE)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.textile.shell
        - meta_content_scope: text.html.textile.embedded.shell
        - match: ^\t*(TEXTILE)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.textile
    - match: (<<)("|'|)(TEXTILE)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.textile.shell
        - meta_content_scope: text.html.textile.embedded.shell
        - match: ^(TEXTILE)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
        - include: scope:text.html.textile
    - match: (<<)-("|'|)\\?(\w+)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.no-indent.shell
        - match: ^\t*(\3)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
    - match: (<<)("|'|)\\?(\w+)\2
      captures:
        1: keyword.operator.heredoc.shell
        3: keyword.control.heredoc-token.shell
      push:
        - meta_scope: string.unquoted.heredoc.shell
        - match: ^(\3)\b
          captures:
            1: keyword.control.heredoc-token.shell
          pop: true
  herestring:
    - match: "(<<<)((')[^']*('))"
      scope: meta.herestring.shell
      captures:
        1: keyword.operator.herestring.shell
        2: string.quoted.single.herestring.shell
        3: punctuation.definition.string.begin.shell
        4: punctuation.definition.string.end.shell
    - match: '(<<<)((")(\\("|\\)|[^"])*("))'
      scope: meta.herestring.shell
      captures:
        1: keyword.operator.herestring.shell
        2: string.quoted.double.herestring.shell
        3: punctuation.definition.string.begin.shell
        6: punctuation.definition.string.end.shell
    - match: '(<<<)(([^\s\\]|\\.)+)'
      scope: meta.herestring.shell
      captures:
        1: keyword.operator.herestring.shell
        2: string.unquoted.herestring.shell
  interpolation:
    - match: '\$\({2}'
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.other.math.shell
        - match: '\){2}'
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: math
    - match: "`"
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.backtick.shell
        - match: "`"
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - match: '\\[`\\$]'
          scope: constant.character.escape.shell
        - include: main
    - match: \$\(
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.dollar.shell
        - match: \)
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: main
  keyword:
    - match: \b(?:if|then|else|elif|fi|for|in|do|done|select|case|continue|esac|while|until|return)\b
      scope: keyword.control.shell
    - match: '(?<![-/])\b(?:export|declare|typeset|local|readonly)\b'
      scope: storage.modifier.shell
  list:
    - match: ;|&&|&|\|\|
      scope: keyword.operator.list.shell
  logical-expression:
    - match: '=[=~]?|!=?|<|>|&&|\|\|'
      comment: do we want a special rule for ( expr )?
      scope: keyword.operator.logical.shell
    - match: '(?<!\S)-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])'
      scope: keyword.operator.logical.shell
  loop:
    - match: '\b(for)\s+(?=\({2})'
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.for-loop.shell
        - match: \b(done)\b
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: '\b(for)\s+((?:[^\s\\]|\\.)+)\b'
      captures:
        1: keyword.control.shell
        2: variable.other.loop.shell
      push:
        - meta_scope: meta.scope.for-in-loop.shell
        - match: \b(done)\b
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: \b(while|until)\b
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.while-loop.shell
        - match: \b(done)\b
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: '\b(select)\s+((?:[^\s\\]|\\.)+)\b'
      captures:
        1: keyword.control.shell
        2: variable.other.loop.shell
      push:
        - meta_scope: meta.scope.select-block.shell
        - match: \b(done)\b
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
    - match: \b(case)\b
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.case-block.shell
        - match: \b(esac)\b
          captures:
            1: keyword.control.shell
          pop: true
        - match: \b(?:in)\b
          captures:
            1: keyword.control.shell
          push:
            - meta_scope: meta.scope.case-body.shell
            - match: (?=\b(?:esac)\b)
              pop: true
            - include: comment
            - include: case-clause
            - include: main
        - include: main
    - match: \b(if)\b
      captures:
        1: keyword.control.shell
      push:
        - meta_scope: meta.scope.if-block.shell
        - match: \b(fi)\b
          captures:
            1: keyword.control.shell
          pop: true
        - include: main
  math:
    - include: variable
    - match: '\+{1,2}|-{1,2}|!|~|\*{1,2}|/|%|<[<=]?|>[>=]?|==|!=|^|\|{1,2}|&{1,2}|\?|\:|,|=|[*/%+\-&^|]=|<<=|>>='
      scope: keyword.operator.arithmetic.shell
    - match: '0[xX]\h+'
      scope: constant.numeric.hex.shell
    - match: '0\d+'
      scope: constant.numeric.octal.shell
    - match: '\d{1,2}#[0-9a-zA-Z@_]+'
      scope: constant.numeric.other.shell
    - match: \d+
      scope: constant.numeric.integer.shell
  pathname:
    - match: '(?<=[a-zA-Z0-9_])=(?=\s*$|[^\s])'
      scope: keyword.operator.assign.shell
    - match: (?<=\s|:|=|^)~
      scope: keyword.operator.tilde.shell
    - match: \*|\?
      scope: keyword.operator.glob.shell
    - match: '([?*+@!])(\()'
      captures:
        1: keyword.operator.extglob.shell
        2: punctuation.definition.extglob.shell
      push:
        - meta_scope: meta.structure.extglob.shell
        - match: (\))
          captures:
            1: punctuation.definition.extglob.shell
          pop: true
        - include: main
  pipeline:
    - match: '\b(clang\+\+|g\+\+)'
      scope: keyword.other.shell
    - match: '\b(7za|alias|apropos|apt-get|aptitude|ar|aspell|autoconf|awk|base64|basename|bash|bc|bg|bind|brew|builtin|bzip2|cal|cat|cc|cd|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clang|clear|cmake|cmp|comm|command|cp|cron|crontab|crontab|csh|lua|csplit|cut|date|dc|dd|ddrescue|declare|depmod|df|diff3?|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|thtool|eval|exec|exit|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|function|fuser|gawk|gcc|getopts|git|grep|groupadd|groupdel|groupmd|groups|gzip|hash|head|help|hg|history|hostname|iconv|id|ifconfig|ifdown|ifup|import|insmod|install|jar|java|jobs|join|kill|killall|kmod|less|let|link|llvm|ln|local|locate|logname|loout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsod|lsof|mail|make|man|md5sum|mkdir|mkfifo|mkisofs|mknod|mmv|modinfo|modprobe|more|most|mount|mtools|mtr|mutt|mv|mysql|netstat|nice|nl|nohup|notify-se|nslookup|nstat|op|open|openssl|paswd|paste|pathchk|perl|php|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|py|python[\d.]*|quota|quotachec|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|remsync|renae|renice|return|rev|rm|rmdir|rmmod|rsync|ruby|scp|screen|sdiff|sed|select|seq|set|sftp|sh|shift|shopt|shutdown|sleep|slocate|sort|source|split|sqlite3?|ssh|stat|strace|su|sudo|sum|susend|svn|sync|tail|tar|tcsh|tee|test|time|timeout|times|top|touch|tput|tr|tracerout|trap|true|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unset|unshar|unil|updatedb|uptime|useradd|userdel|usermod|users|uudecode|uuencode|vmstat|wait|watch|wc|wget|whatis|whereis|which|while|who|whoami|write|xargs|xdg-open|xz|yum|zip|zsh)\b'
      scope: keyword.other.shell
    - match: "[|!]"
      scope: keyword.operator.pipe.shell
  redirection:
    - match: '[><]\('
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.interpolated.process-substitution.shell
        - match: \)
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - include: main
    - match: '&>|\d*>&\d*|\d*(>>|>|<)|\d*<&|\d*<>'
      comment: "valid: &>word >&word >word [n]>&[n] [n]<word [n]>word [n]>>word [n]<&word (last one is duplicate)"
      scope: keyword.operator.redirect.shell
  string:
    - match: \\.
      scope: constant.character.escape.shell
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.single.shell
        - match: "'"
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
    - match: \$?"
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.double.shell
        - match: '"'
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - match: '\\[\$`"\\\n]'
          scope: constant.character.escape.shell
        - include: variable
        - include: interpolation
    - match: \$'
      captures:
        0: punctuation.definition.string.begin.shell
      push:
        - meta_scope: string.quoted.single.dollar.shell
        - match: "'"
          captures:
            0: punctuation.definition.string.end.shell
          pop: true
        - match: \\(a|b|e|f|n|r|t|v|\\|')
          scope: constant.character.escape.ansi-c.shell
        - match: '\\[0-9]{3}'
          scope: constant.character.escape.octal.shell
        - match: '\\x[0-9a-fA-F]{2}'
          scope: constant.character.escape.hex.shell
        - match: \\c.
          scope: constant.character.escape.control-char.shell
  support:
    - match: (?<=^|\s)(?::|\.)(?=\s|;|&|$)
      scope: support.function.builtin.shell
    - match: '(?<![-/])\b(?:alias|bg|bind|break|builtin|caller|cd|command|compgen|complete|dirs|disown|echo|enable|eval|exec|exit|false|fc|fg|getopts|hash|help|history|jobs|kill|let|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|times|trap|true|type|ulimit|umask|unalias|unset|wait)\b'
      scope: support.function.builtin.shell
  variable:
    - match: '(\$)[-*@#?$!0_]'
      scope: variable.other.special.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: '(\$)[1-9]'
      scope: variable.other.positional.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: '(\$)[a-zA-Z_][a-zA-Z0-9_]*'
      scope: variable.other.normal.shell
      captures:
        1: punctuation.definition.variable.shell
    - match: '\$\{'
      captures:
        0: punctuation.definition.variable.shell
      push:
        - meta_scope: variable.other.bracket.shell
        - match: '\}'
          captures:
            0: punctuation.definition.variable.shell
          pop: true
        - match: '!|:[-=?]?|\*|@|#{1,2}|%{1,2}|/'
          scope: keyword.operator.expansion.shell
        - match: '(\[)([^\]]+)(\])'
          captures:
            1: punctuation.section.array.shell
            3: punctuation.section.array.shell
