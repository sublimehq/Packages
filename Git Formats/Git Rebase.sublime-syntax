%YAML 1.2
---
# Highlight interactive rebase text (git rebase -i).

name: Git Rebase Todo
scope: text.git.rebase
version: 2

file_extensions:
  - git-rebase-todo

first_line_match: '^(?:drop|edit|fixup|pick|reword|squash|[defprsx]) \h{7,} '

variables:
  comment_char: '[#;]'
  hash: \b\h{7,}\b

contexts:

  main:
    - include: comments
    - include: shell-commands
    - include: branch-commands
    - include: commit-commands

##[ COMMENTS ]#########################################################

  comments:
    - match: '{{comment_char}}'
      scope: punctuation.definition.comment.git.rebase
      push: comment-content

  comment-content:
    - meta_scope: comment.line.git.rebase
    - match: ^(?!\s*{{comment_char}})
      pop: 1
    - include: heading
    - include: commands-help
    - include: rebase-msg

  heading:
    # all comments ending with colon are scoped as headlines
    - match: \b\w.+(?=:\s*$)
      scope: markup.heading.git.rebase

  commands-help:
    # highlight the commands and separators in this comment
    # e.g. p, pick = use commit
    - match: \b(d)\s*(,)\s*(drop)\s*(=)\s*(.+)
      scope: meta.commands-help.drop.git.rebase
      captures:
        1: keyword.operator.commit.drop.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.drop.git.rebase
        4: punctuation.separator.mapping.pair.git.rebase
        5: string.unquoted.git.rebase
    - match: \b(e)\s*(,)\s*(edit)\s*(=)\s*(.+)
      scope: meta.commands-help.edit.git.rebase
      captures:
        1: keyword.operator.commit.edit.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.edit.git.rebase
        4: punctuation.separator.mapping.pair.git.rebase
        5: string.unquoted.git.rebase
    - match: \b(x)\s*(,)\s*(exec)\s*(=)\s*(.+)
      scope: meta.commands-help.exec.git.rebase
      captures:
        1: keyword.operator.commit.exec.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.exec.git.rebase
        4: punctuation.separator.mapping.pair.git.rebase
        5: string.unquoted.git.rebase
    - match: \b(f)\s*(,)\s*(fixup)\s*(=)\s*(.+)
      scope: meta.commands-help.fixup.git.rebase
      captures:
        1: keyword.operator.commit.fixup.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.fixup.git.rebase
        4: punctuation.separator.mapping.pair.git.rebase
        5: string.unquoted.git.rebase
    - match: \b(p)\s*(,)\s*(pick)\s*(=)\s*(.+)
      scope: meta.commands-help.pick.git.rebase
      captures:
        1: keyword.operator.commit.pick.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.pick.git.rebase
        4: punctuation.separator.mapping.pair.git.rebase
        5: string.unquoted.git.rebase
    - match: \b(r)\s*(,)\s*(reword)\s*(=)\s*(.+)
      scope: meta.commands-help.reword.git.rebase
      captures:
        1: keyword.operator.commit.reword.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.reword.git.rebase
        4: punctuation.separator.mapping.pair.git.rebase
        5: string.unquoted.git.rebase
    - match: \b(s)\s*(,)\s*(squash)\s*(=)\s*(.+)
      scope: meta.commands-help.squash.git.rebase
      captures:
        1: keyword.operator.commit.squash.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.squash.git.rebase
        4: punctuation.separator.mapping.pair.git.rebase
        5: string.unquoted.git.rebase

  rebase-msg:
    # e.g. Rebase 9e73d21..6746220 onto 9e73d21 (2 commands)
    # highlight the hashes in this comment
    - match: Rebase\s+({{hash}})(?:(..)({{hash}}))?.+({{hash}}).*
      scope: meta.rebase-msg.git.rebase markup.heading.git.rebase
      captures:
        1: constant.other.hash.git.rebase
        2: punctuation.separator.commit-range.git.rebase
        3: constant.other.hash.git.rebase
        4: constant.other.hash.git.rebase

##[ COMMANDS ]#########################################################

  branch-commands:
    - match: ^\s*(label)\s+(\S+)
      captures:
        0: meta.branch.label.git.rebase
        1: keyword.other.label.git.rebase
        2: constant.language.branch-name.git.commit
    - match: ^\s*(merge)\s+((-)C)\s+({{hash}})\s+(\S+)
      captures:
        0: meta.branch.merge.git.rebase
        1: keyword.operator.branch.merge.git.rebase
        2: variable.parameter.option.git.rebase
        3: punctuation.definition.variable.git.rebase
        4: constant.other.hash.git.rebase
        5: constant.language.branch-name.git.commit
    - match: ^\s*(reset)\s+(?:({{hash}})|(\S+))
      captures:
        0: meta.branch.reset.git.rebase
        1: keyword.operator.branch.reset.git.rebase
        2: constant.other.hash.git.rebase
        3: constant.language.branch-name.git.commit

  commit-commands:
    # e.g. pick d284bb2 Initial commit
    - match: ^\s*
      push: [commit-subject, commit-hash, commit-command]

  commit-command:
    - match: (?:d|drop)\b
      scope: keyword.operator.commit.drop.git.rebase
      pop: 1
    - match: (?:e|edit)\b
      scope: keyword.operator.commit.edit.git.rebase
      pop: 1
    - match: (?:f|fixup)\b
      scope: keyword.operator.commit.fixup.git.rebase
      pop: 1
    - match: (?:p|pick)\b
      scope: keyword.operator.commit.pick.git.rebase
      pop: 1
    - match: (?:r|reword)\b
      scope: keyword.operator.commit.reword.git.rebase
      pop: 1
    - match: (?:s|squash)\b
      scope: keyword.operator.commit.squash.git.rebase
      pop: 1
    - include: comments
    - include: line-end
    - match: \S+
      scope: invalid.illegal.command-expected.git.rebase
      pop: 1

  commit-hash:
    - match: '{{hash}}' # e.g. d284bb2
      scope: constant.other.hash.git.rebase
      pop: 1
    - include: line-end
    - match: \S+
      scope: invalid.illegal.hash-expected.git.rebase
      pop: 1

  commit-subject:
    - meta_scope: meta.commit.git.rebase
    - include: line-end
    - match: (?=\S)  # subject beginns with first none whitespece
      set: commit-subject-content

  commit-subject-content:
    - meta_scope: meta.commit.git.rebase
    - meta_content_scope: meta.subject.git.commit
    - include: Git Common.sublime-syntax#references
    - include: line-end

  shell-commands:
    - match: ^\s*(x|exec)\b
      captures:
        0: meta.shell.git.rebase
        1: keyword.operator.exec.git.rebase
      embed: scope:source.shell
      embed_scope: meta.shell.git.rebase source.shell.embedded.git.rebase
      escape: $\n?
      escape_captures:
        0: meta.shell.git.rebase

##[ PROTOTYPES ]#######################################################

  line-end:
    - match: $\n?
      pop: 1
