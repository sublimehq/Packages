%YAML 1.2
---
# Highlight interactive rebase text (git rebase -i).

name: Git Rebase Todo
scope: text.git.rebase
version: 2

hidden_file_extensions:
  - git-rebase-todo

first_line_match: '^(?:drop|edit|fixup|pick|reword|squash|[defprsx]) \h{7,} '

variables:
  comment_char: '[#;]'
  hash: \b\h{7,}\b
  option: (-)[[:alnum:]]+\b

contexts:

  main:
    - include: comments
    - include: commands

###[ COMMENTS ]################################################################

  comments:
    - match: '{{comment_char}}'
      scope: punctuation.definition.comment.git.rebase
      push:
        - comment-meta
        - comment-content

  comment-meta:
    - meta_include_prototype: false
    - meta_scope: comment.line.git.rebase
    - match: ''
      pop: 1

  comment-content:
    - include: heading
    - include: commands-help
    - include: rebase-msg
    - include: comment-text

  comment-text:
    # consume anything else up to the end of a line
    - match: \S.*
    - match: \n
      pop: 1

  heading:
    # all comments ending with colon are scoped as headlines
    - match: \b\w.+(?=:\s*$)
      scope: markup.heading.git.rebase

  commands-help:
    # highlight the commands and separators in this comment
    # e.g. p, pick = use commit
    - match: \b(b)(,) (break)\b
      captures:
        1: keyword.operator.commit.break.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.break.git.rebase
      set: help-cmd-args
    - match: \b(d)(,) (drop)\b
      captures:
        1: keyword.operator.commit.drop.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.drop.git.rebase
      set: help-cmd-args
    - match: \b(e)(,) (edit)\b
      captures:
        1: keyword.operator.commit.edit.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.edit.git.rebase
      set: help-cmd-args
    - match: \b(x)(,) (exec)\b
      captures:
        1: keyword.operator.commit.exec.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.exec.git.rebase
      set: help-cmd-args
    - match: \b(f)(,) (fixup)\b
      captures:
        1: keyword.operator.commit.fixup.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.fixup.git.rebase
      set:
        - help-fixup-description
        - help-cmd-args-content
    - match: \b(l)(,) (label)\b
      captures:
        1: keyword.operator.commit.label.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.label.git.rebase
      set: help-cmd-args
    - match: \b(u)(,) (update-ref)\b
      captures:
        1: keyword.operator.commit.update-ref.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.update-ref.git.rebase
      set: help-cmd-args
    - match: \b(m)(,) (merge)\b
      captures:
        1: keyword.operator.commit.merge.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.merge.git.rebase
      set:
        - help-merge-description
        - help-cmd-args-content
    - match: \b(p)(,) (pick)\b
      captures:
        1: keyword.operator.commit.pick.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.pick.git.rebase
      set: help-cmd-args
    - match: \b(r)(,) (reword)\b
      captures:
        1: keyword.operator.commit.reword.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.reword.git.rebase
      set: help-cmd-args
    - match: \b(t)(,) (reset)\b
      captures:
        1: keyword.operator.commit.reset.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.reset.git.rebase
      set: help-cmd-args
    - match: \b(s)(,) (squash)\b
      captures:
        1: keyword.operator.commit.squash.git.rebase
        2: punctuation.separator.sequence.git.rebase
        3: keyword.operator.commit.squash.git.rebase
      set: help-cmd-args

  help-fixup-description:
    - meta_scope: meta.commands-help.git.rebase
    - match: ^({{comment_char}})\s{20,}(\S.+)
      captures:
        1: punctuation.definition.comment.git.rebase
        2: string.unquoted.git.rebase
    - match: ^
      pop: 1

  help-merge-description:
    - meta_scope: meta.commands-help.git.rebase
    - match: ^({{comment_char}})\s+(\.)\s+(.+)
      captures:
        1: punctuation.definition.comment.git.rebase
        2: punctuation.definition.description.git.rebase
        3: string.unquoted.git.rebase
    - match: ^
      pop: 1

  help-cmd-args:
    - meta_scope: meta.commands-help.git.rebase
    - include: help-cmd-args-content

  help-cmd-args-content:
    - include: help-cmd-descriptions
    - include: help-cmd-brackets
    - include: help-cmd-parameters
    - include: cmd-options
    - include: line-end

  help-cmd-brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.git.rebase
      push: help-cmd-brackets-body

  help-cmd-brackets-body:
    - meta_scope: meta.brackets.git.rebase
    - match: \]
      scope: punctuation.section.brackets.end.git.rebase
      pop: 1
    - match: \#
      scope: punctuation.definition.comment.git.rebase
    - match: \|
      scope: punctuation.separator.sequence.git.rebase
    - include: help-cmd-parameters
    - include: cmd-options

  help-cmd-descriptions:
    - match: (=)\s*(\S.+)
      captures:
        1: punctuation.separator.key-value.git.rebase
        2: string.unquoted.git.rebase

  help-cmd-parameters:
    - match: (<)[-\w]+(>)
      scope: variable.parameter.git.rebase
      captures:
        1: punctuation.definition.variable.begin.git.rebase
        2: punctuation.definition.variable.end.git.rebase

  rebase-msg:
    # e.g. Rebase 9e73d21..6746220 onto 9e73d21 (2 commands)
    # highlight the hashes in this comment
    - match: Rebase\s+({{hash}})(?:(..)({{hash}}))?.+({{hash}}).*
      scope: meta.rebase-msg.git.rebase markup.heading.git.rebase
      captures:
        1: constant.other.hash.git.rebase
        2: punctuation.separator.commit-range.git.rebase
        3: constant.other.hash.git.rebase
        4: constant.other.hash.git.rebase
      pop: 1

###[ COMMANDS ]################################################################

  commands:
    # branch commands
    - match: ^\s*(l|label)\b
      captures:
        1: keyword.other.label.git.rebase
      push:
        - cmd-end
        - label-ref
    - match: ^\s*(m|merge)\b
      captures:
        1: keyword.operator.branch.merge.git.rebase
      push:
        - cmd-end
        - merge-ref
        - ref-name
        - maybe-cmd-options
    - match: ^\s*(t|reset)\b
      captures:
        1: keyword.operator.branch.reset.git.rebase
      push:
        - cmd-end
        - reset-ref
    - match: ^\s*(u|update-ref)\b
      captures:
        1: keyword.operator.update-ref.git.rebase
      push:
        - cmd-end
        - update-ref

    # commit commands
    - match: ^\s*(b|break)\b
      captures:
        1: keyword.operator.commit.break.git.rebase
      push:
        - commit-subject
        - commit-hash
    - match: ^\s*(d|drop)\b
      captures:
        1: keyword.operator.commit.drop.git.rebase
      push:
        - commit-subject
        - commit-hash
    - match: ^\s*(e|edit)\b
      captures:
        1: keyword.operator.commit.edit.git.rebase
      push:
        - commit-subject
        - commit-hash
    - match: ^\s*(f|fixup)\b
      captures:
        1: keyword.operator.commit.fixup.git.rebase
      push:
        - commit-subject
        - commit-hash
        - maybe-cmd-options
    - match: ^\s*(p|pick)\b
      captures:
        1: keyword.operator.commit.pick.git.rebase
      push:
        - commit-subject
        - commit-hash
    - match: ^\s*(r|reword)\b
      captures:
        1: keyword.operator.commit.reword.git.rebase
      push:
        - commit-subject
        - commit-hash
    - match: ^\s*(s|squash)\b
      captures:
        1: keyword.operator.commit.squash.git.rebase
      push:
        - commit-subject
        - commit-hash

    # shell commands
    - match: ^\s*(x|exec)\b
      captures:
        0: meta.shell.git.rebase
        1: keyword.operator.exec.git.rebase
      embed: scope:source.shell
      embed_scope: meta.shell.git.rebase source.shell.embedded.git.rebase
      escape: $\n?
      escape_captures:
        0: meta.shell.git.rebase

  commit-hash:
    - match: $|(?=#)
      pop: 1
    - match: '{{hash}}' # e.g. d284bb2
      scope: constant.other.hash.git.rebase
      pop: 1
    - match: \S+
      scope: invalid.illegal.hash-expected.git.rebase
      pop: 1

  commit-subject:
    - meta_scope: meta.commit.git.rebase
    - match: '{{comment_char}}'
      scope: punctuation.definition.comment.git.rebase
      push: cmd-comment-body
    - match: (?=\S)
      push: cmd-comment-body
    - include: line-end

  cmd-end:
    - match: '{{comment_char}}'
      scope: punctuation.definition.comment.git.rebase
      set: cmd-comment-body
    - include: line-end

  cmd-comment-body:
    - meta_scope: comment.line.git.rebase
    - include: line-end

  label-ref:
    - meta_scope: meta.branch.label.git.rebase
    - include: ref-name

  merge-ref:
    - meta_scope: meta.branch.merge.git.rebase
    - include: ref-name

  reset-ref:
    - meta_scope: meta.branch.reset.git.rebase
    - include: ref-name

  update-ref:
    - meta_scope: meta.branch.update-ref.git.rebase
    - include: ref-name

  ref-name:
    - match: $|(?=#)
      pop: 1
    - match: '{{hash}}' # e.g. d284bb2
      scope: constant.other.hash.git.rebase
      pop: 1
    - match: (?=refs/)
      push: ref-name-body
    - match: (?=\S)
      push: branch-name-body

  branch-name-body:
    - meta_scope: constant.language.branch-name.git.commit
    - include: ref-name-body

  ref-name-body:
    - meta_scope: constant.language.ref.git.commit
    - match: (?=\s)
      pop: 2
    - match: (/)(\.*)
      captures:
        1: punctuation.separator.path.git.commit
        2: invalid.illegal.unexpected-token.git.commit
    - match: \.(?:\.|(?:lock)?(?=\s))|[:?\[\\^~]
      scope: invalid.illegal.unexpected-token.git.commit

  maybe-cmd-options:
    - include: cmd-options
    - include: else-pop

  cmd-options:
    - match: '{{option}}'
      scope: variable.parameter.option.git.rebase
      captures:
        1: punctuation.definition.variable.git.rebase

###[ PROTOTYPES ]##############################################################

  line-end:
    - match: $\n?
      pop: 1

  else-pop:
    - match: (?=\S)
      pop: 1
