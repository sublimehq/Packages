%YAML 1.2
---
# https://clojure.org/reference/documentation
# https://clojure.org/api/cheatsheet
# https://github.com/clojure/clojure-cheatsheets/
# https://github.com/clojure/clojure/tree/master/test/clojure
# http://www.sublimetext.com/docs/syntax.html

name: Clojure
scope: source.clojure
version: 2

file_extensions:
  - clj
  - cljc
  - edn

first_line_match: |-
  (?xi:
    ^ \#! .* {{shebang_language}}                        # shebang
  | ^ \s* ; .*? -\*- .*? {{shebang_language}} .*? -\*-   # editorconfig
  )

###[ CONTEXTS ]################################################################

contexts:

  prototype:
    - include: comments
    - include: merge-conflict-markers

  main:
    - meta_include_prototype: false
    - match: ''
      push: [clojure, shebang]

  clojure:
    - include: match-expr

###[ COMMENTS ]################################################################

  shebang:
    - meta_include_prototype: false
    - match: ^\s*(\#!)
      captures:
        1: punctuation.definition.comment.clojure
      set: shebang-body
    # NOTE: Ensure to highlight shebang if Clojure is embedded.
    - match: ^|(?=\S)
      pop: 1

  shebang-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.shebang.clojure
    - match: '{{shebang_language}}'
      scope: constant.language.shebang.clojure
    - match: $\n?
      pop: 1

  comments:
    - include: line-comments

  line-comments:
    - match: ;+
      scope: punctuation.definition.comment.clojure
      push: line-comment-body

    # https://cljs.github.io/api/syntax/shebang
    # https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L118
    # https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L625-L636
    - match: '#!'
      scope: punctuation.definition.comment.clojure
      push: line-comment-body

  line-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.clojure
    - match: $\n?
      pop: 1

  merge-conflict-markers:
    # see also: Diff.sublime-syntax#conflict-markers
    - match: ^(<{7})(?:\s+(\S.*?))?$\n?
      scope: meta.block.conflict.begin.diff
      captures:
        1: punctuation.section.block.begin.diff
        2: entity.name.section.diff
    - match: ^(>{7})(?:\s+(\S.*?))?$\n?
      scope: meta.block.conflict.end.diff
      captures:
        1: punctuation.section.block.end.diff
        2: entity.name.section.diff
    - match: ^(\|{7}|={7})(?:\s+(\S.*?))?$\n?
      scope: meta.block.conflict.separator.diff
      captures:
        1: punctuation.section.block.diff
        2: entity.name.section.diff

###[ NOISE ]###################################################################

  match-noise:
    - match: ','
      scope: punctuation.comma.clojure comment.punctuation.comma.clojure
    - match: \^
      scope: keyword.operator.macro.clojure
      push: pop-expr

###[ EXPRESSIONS ]#############################################################

  match-expr:
    - include: match-noise
    - match: '[)\]}]'
      scope: invalid.illegal.clojure
    - match: \(
      scope: punctuation.section.parens.begin.clojure
      push: pop-list-head
    - match: \[
      scope: punctuation.section.brackets.begin.clojure
      push:
        - match: \]
          scope: punctuation.section.brackets.end.clojure
          pop: 1
        - include: match-expr
    - match: '#?{'
      scope: punctuation.section.braces.begin.clojure
      push:
        - match: \}
          scope: punctuation.section.braces.end.clojure
          pop: 1
        - include: match-expr
    - match: \"
      scope: punctuation.definition.string.begin.clojure
      push: pop-string-tail
    - match: \#
      scope: keyword.operator.macro.clojure
      push: pop-dispatch-expr
    - match: '[''`~@]'
      scope: keyword.operator.macro.clojure
      push: pop-expr
    - match: \\\S[^{{non_char_chars}}]*
      scope: constant.character.clojure
    - match: '{{constant}}'
      scope: constant.language.clojure
    - match: '{{keyword}}'
      scope: constant.other.keyword.clojure
      captures:
        1: punctuation.definition.keyword.clojure
    - match: '{{evil_octal}}'
      scope: invalid.deprecated.clojure
    - match: '{{dec_integer}}'
      scope: meta.number.integer.decimal.clojure
      captures:
        1: keyword.operator.arithmetic.clojure
        2: constant.numeric.value.clojure
        3: constant.numeric.suffix.clojure
    - match: '{{hex_integer}}'
      scope: meta.number.integer.hexadecimal.clojure
      captures:
        1: keyword.operator.arithmetic.clojure
        2: constant.numeric.base.clojure
        3: constant.numeric.value.clojure
        4: constant.numeric.suffix.clojure
    - match: '{{other_integer}}'
      scope: meta.number.integer.other.clojure
      captures:
        1: keyword.operator.arithmetic.clojure
        2: constant.numeric.base.clojure
        3: constant.numeric.value.clojure
    - match: '{{rational}}'
      scope: meta.number.rational.decimal.clojure
      captures:
        1: keyword.operator.arithmetic.clojure
        2: constant.numeric.value.clojure
        3: punctuation.separator.rational.clojure
        4: constant.numeric.value.clojure
    - match: '{{float}}'
      scope: meta.number.float.decimal.clojure
      captures:
        1: keyword.operator.arithmetic.clojure
        2: constant.numeric.value.clojure
        3: constant.numeric.value.clojure
        4: punctuation.separator.decimal.clojure
        5: constant.numeric.suffix.clojure
        6: constant.numeric.suffix.clojure
    - match: '{{atom}}'

  pop-expr:
    - include: match-noise
    - match: '[)\]}]'
      scope: invalid.illegal.clojure
      pop: 1
    - match: \(
      scope: punctuation.section.parens.begin.clojure
      set: pop-list-head
    - match: \[
      scope: punctuation.section.brackets.begin.clojure
      set:
        - match: \]
          scope: punctuation.section.brackets.end.clojure
          pop: 1
        - include: match-expr
    - match: '#?{'
      scope: punctuation.section.braces.begin.clojure
      set:
        - match: \}
          scope: punctuation.section.braces.end.clojure
          pop: 1
        - include: match-expr
    - match: \"
      scope: punctuation.definition.string.begin.clojure
      set: pop-string-tail
    - match: \#
      scope: keyword.operator.macro.clojure
      set: pop-dispatch-expr
    - match: '[''`~@]'
      scope: keyword.operator.macro.clojure
      set: pop-expr
    - match: '\\\S[^{{non_char_chars}}]*'
      scope: constant.character.clojure
      pop: 1
    - match: '{{constant}}'
      scope: constant.language.clojure
      pop: 1
    - match: '{{keyword}}'
      scope: constant.other.keyword.clojure
      captures:
        1: punctuation.definition.keyword.clojure
      pop: 1
    - match: '{{evil_octal}}'
      scope: invalid.deprecated.clojure
      pop: 1
    - match: '{{dec_integer}}'
      scope: meta.number.integer.decimal.clojure
      captures:
        1: keyword.operator.arithmetic.clojure
        2: constant.numeric.value.clojure
        3: constant.numeric.suffix.clojure
      pop: 1
    - match: '{{hex_integer}}'
      scope: meta.number.integer.hexadecimal.clojure
      captures:
        1: keyword.operator.arithmetic.clojure
        2: constant.numeric.base.clojure
        3: constant.numeric.value.clojure
        4: constant.numeric.suffix.clojure
      pop: 1
    - match: '{{other_integer}}'
      scope: meta.number.integer.other.clojure
      captures:
        1: keyword.operator.arithmetic.clojure
        2: constant.numeric.base.clojure
        3: constant.numeric.value.clojure
      pop: 1
    - match: '{{rational}}'
      scope: meta.number.rational.decimal.clojure
      captures:
        1: keyword.operator.arithmetic.clojure
        2: constant.numeric.value.clojure
        3: punctuation.separator.rational.clojure
        4: constant.numeric.value.clojure
      pop: 1
    - match: '{{float}}'
      scope: meta.number.float.decimal.clojure
      captures:
        1: keyword.operator.arithmetic.clojure
        2: constant.numeric.value.clojure
        3: constant.numeric.value.clojure
        4: punctuation.separator.decimal.clojure
        5: constant.numeric.suffix.clojure
        6: constant.numeric.suffix.clojure
      pop: 1
    - match: '{{atom}}'
      pop: 1

  pop-dispatch-expr:
    - match: (?=\s)
      set: pop-dispatch-tag-expr
    - match: _
      scope: keyword.operator.macro.clojure
      set: pop-expr
    - match: \#
      scope: keyword.operator.macro.clojure
      set: pop-symbolic-value
    - match: \'
      scope: keyword.operator.macro.clojure
      pop: 1
    - match: \"
      scope: meta.string.clojure string.regexp.clojure punctuation.definition.string.begin.clojure
      pop: 1
      embed: scope:source.regexp
      embed_scope: meta.string.clojure string.regexp.clojure source.regexp
      escape: '{{no_escape_behind}}"'
      escape_captures:
        0: meta.string.clojure string.regexp.clojure punctuation.definition.string.end.clojure
    - match: (?=[\^:])
      pop: 1
    - match: (?=\S)
      set: pop-dispatch-tag-expr

  pop-dispatch-tag-expr:
    - include: match-noise
    - match: '{{symbol}}'
      scope: keyword.operator.macro.clojure
      pop: 1
    - match: (?=\S)
      set: pop-expr

###[ VALUES ]##################################################################

  pop-symbolic-value:
    - include: match-noise
    - match: '{{atom}}'
      scope: constant.other.symbolic.clojure
      pop: 1
    - match: (?=\S)
      set: pop-expr

###[ STRINGS ]#################################################################

  pop-string-tail:
    - meta_include_prototype: false
    - meta_scope: meta.string.clojure string.quoted.double.clojure
    - match: \\.
      scope: constant.character.escape.clojure
    - match: \"
      scope: punctuation.definition.string.end.clojure
      pop: 1
    - include: merge-conflict-markers

###[ LISTS ]###################################################################

  pop-list-head:
    - include: match-noise
    - match: defprotocol[^{{non_symbol_chars}}]*
      scope: storage.type.clojure
      set: pop-declare-protocol-list-tail
    - match: definterface[^{{non_symbol_chars}}]*
      scope: storage.type.clojure
      set: pop-declare-interface-list-tail
    - match: (?:deftype|defrecord)[^{{non_symbol_chars}}]*
      scope: storage.type.clojure
      set: pop-declare-type-list-tail
    - match: defmethod[^{{non_symbol_chars}}]*
      scope: storage.modifier.def.clojure
      set: pop-fn-list-tail
    - match: def[^{{non_symbol_chars}}]*
      scope: storage.modifier.def.clojure
      set: pop-declare-def-list-tail
    - match: (?:reify|proxy|extend-protocol|extend-type)[^{{non_symbol_chars}}]*
      scope: variable.function.clojure
      set: pop-type-list-tail
    - match: fn\*?(?=[{{non_symbol_chars}}])
      scope: storage.modifier.fn.clojure
      set: pop-fn-list-tail
    - match: declare[^{{non_symbol_chars}}]*
      scope: storage.modifier.declare.clojure
      set: pop-declare-list-tail
    - match: (?=\S)
      set: pop-invoke-list-tail

  pop-list-tail:
    - match: \)
      scope: punctuation.section.parens.end.clojure
      pop: 1
    - include: match-expr

###[ LISTS / PROTOCOL LISTS ]##################################################

  pop-declare-protocol-list-tail:
    - include: match-constant-set-normal-list-tail
    - match: '{{symbol}}'
      scope: entity.name.type.clojure
      set: pop-protocol-list-tail
    - include: set-normal-list-tail

  pop-protocol-list-tail:
    - match: \)
      scope: punctuation.section.parens.end.clojure
      pop: 1
    - match: \(
      scope: punctuation.section.parens.begin.clojure
      push: pop-declare-def-list-tail
    - include: match-expr

###[ LISTS / INTERFACE LISTS ]#################################################

  pop-declare-interface-list-tail:
    - include: match-constant-set-normal-list-tail
    - match: '{{symbol}}'
      scope: entity.name.type.clojure
      set: pop-interface-list-tail
    - include: set-normal-list-tail

  pop-interface-list-tail:
    - match: \)
      scope: punctuation.section.parens.end.clojure
      pop: 1
    - match: \(
      scope: punctuation.section.parens.begin.clojure
      push: pop-fn-list-tail
    - include: match-expr

###[ LISTS / TYPE LISTS ]######################################################

  pop-declare-type-list-tail:
    - include: match-constant-set-normal-list-tail
    - match: '{{symbol}}'
      scope: entity.name.type.clojure
      set: pop-type-list-tail
    - include: set-normal-list-tail

  pop-type-list-tail:
    - match: \)
      scope: punctuation.section.parens.end.clojure
      pop: 1
    - match: \(
      scope: punctuation.section.parens.begin.clojure
      push: pop-fn-list-tail
    - include: match-symbol-implemented-or-extended
    - include: match-expr

  pop-declare-def-list-tail:
    - include: match-constant-set-normal-list-tail
    - match: '{{symbol}}'
      scope: entity.name.function.clojure
      set: pop-list-tail
    - include: set-normal-list-tail

  pop-fn-list-tail:
    - include: match-constant-set-normal-list-tail
    - match: '{{symbol}}'
      scope: entity.name.function.fn.clojure
      set: pop-list-tail
    - include: set-normal-list-tail

  pop-declare-list-tail:
    - include: match-constant-set-normal-list-tail
    - match: '{{symbol}}'
      scope: entity.name.function.forward-decl.clojure
      set: pop-list-tail
    - include: set-normal-list-tail

  pop-invoke-list-tail:
    - include: match-constant-set-normal-list-tail
    - match: '{{symbol}}'
      scope: variable.function.clojure
      set: pop-list-tail
    - include: set-normal-list-tail

  match-constant-set-normal-list-tail:
    - include: match-noise
    - match: '{{constant}}'
      scope: constant.language.clojure
      set: pop-list-tail

  match-symbol-implemented-or-extended:
    - match: '{{constant}}'
      scope: constant.language.clojure
    - match: '{{symbol}}'
      scope: entity.other.inherited-class.clojure

  set-normal-list-tail:
    - match: (?=\S)
      set: pop-list-tail

###[ VARIABLES ]###############################################################

variables:
  shebang_language: (?:\bclojure\b)

  non_symbol_chars: \s,;\(\)\[\]{}\"`~@\^\\
  non_symbol_start_chars: '{{non_symbol_chars}}\d#'':'
  non_number_chars: '{{non_symbol_chars}}#'''
  non_char_chars: '{{non_symbol_chars}}#'''
  atom: '[^{{non_symbol_chars}}]+'
  symbol: (?:/|[^{{non_symbol_start_chars}}][^{{non_symbol_chars}}]*)
  # Slightly too permissive
  keyword: (:):?[^:{{non_symbol_chars}}][^{{non_symbol_chars}}]*
  constant: (?:nil|true|false)(?=[{{non_symbol_chars}}])
  evil_octal: '[-+]?0\d+N?(?=[{{non_symbol_chars}}])'

  # Similar to the number regexps in the Clojure reader.
  # This doesn't include evil octals and dot-terminated decimals.
  sign: '[-+]?'
  dec_exponent: (?:[eE]{{sign}}\d+)
  dec_integer: ({{sign}})(\d+)(N?)(?=[{{non_number_chars}}])
  hex_integer: ({{sign}})(0[Xx])(\h+)(N?)(?=[{{non_number_chars}}])
  other_integer: ({{sign}})((?:[2-9]|[1-9]\d+)[Rr])([0-9A-Za-z]+)(?=[{{non_number_chars}}])
  rational: ({{sign}})(\d+)(/)(\d+)(?=[{{non_number_chars}}])
  float: ({{sign}})(\d+)(?:((\.)\d+{{dec_exponent}}?|{{dec_exponent}})(M)?|(M))(?=[{{non_number_chars}}])

  # no odd number of backslashes behind (`\` or `\\\`)
  # note:
  #  1. For use in `escape` commands only !!
  #  2. ST's Regex Compatibility Check marks it as incompatible
  #     as the real usage of the variable is not checked.
  #     It's a false positive as long as (1.) is respected.
  no_escape_behind: '(?<![^\\]\\)(?<![^\\][\\]{3})'
