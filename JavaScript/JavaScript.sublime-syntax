%YAML 1.2
---
# Derived from JavaScript Next: https://github.com/Benvie/JavaScriptNext.tmLanguage
name: JavaScript
file_extensions:
  - js
  - htc
first_line_match: ^#!\s*/.*\b(node|js)\b
scope: source.js
variables:
  identifier_start: '[_$\p{L}\p{Nl}]'
  identifier_part: '[_$\p{L}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\x{200C}\x{200D}]'
  identifier_break: (?!{{identifier_part}})

  identifier: '{{identifier_start}}{{identifier_part}}*{{identifier_break}}'
  constant_identifier: '[[:upper:]]{{identifier_part}}*{{identifier_break}}'
  dollar_only_identifier: '\${{identifier_break}}'
  dollar_identifier: '(\$){{identifier_part}}*{{identifier_break}}+'
  func_lookahead: '\s*(async\s+)?function{{identifier_break}}'
  arrow_func_lookahead: '\s*(async\s*)?({{identifier}}|\(([^()]|\([^()]*\))*\))\s*=>'
  either_func_lookahead: (?:{{func_lookahead}}|{{arrow_func_lookahead}})
  binding_pattern_lookahead: (?:{{identifier}}|\[|\{)
  left_expression_end_lookahead: '(?!\s*[.\[\(])'

  property_name: >-
    (?x)(?:
      {{identifier}}
      | '(?:[^\\']|\\.)*'
      | "(?:[^\\"]|\\.)*"
      | \[ .* \]
    )

  class_element_name: |-
    (?x)(?:
      {{property_name}}
      | \#{{identifier}}
    )

  method_lookahead: |-
    (?x)(?=
      (?: get|set|async ){{identifier_break}}
      | \*
      | {{property_name}} \s* \(
    )

  line_continuation_lookahead: >-
    (?x)
    (?! \+\+ | -- )
    (?=
      != |
      [ -+*/% ><= &|^ \[( ;,.:? ]
    )

contexts:
  main:
    - include: comments
    - include: comments-top-level
    - include: statements

  prototype:
    - include: comments

  comments:
    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.begin.js
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.documentation.js
        - match: \*/
          scope: punctuation.definition.comment.end.js
          pop: true
    - match: /\*
      scope: punctuation.definition.comment.begin.js
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.js
        - match: \*/
          scope: punctuation.definition.comment.end.js
          pop: true
    - match: //
      scope: punctuation.definition.comment.js
      push:
        - meta_include_prototype: false
        - meta_scope: comment.line.double-slash.js
        - match: \n
          pop: true

  comments-top-level:
    - match: ^(#!).*$\n?
      scope: comment.line.shebang.js
      captures:
        1: punctuation.definition.comment.js

  else-pop:
    - match: (?=\S)
      pop: true

  immediately-pop:
    - match: ''
      pop: true

  comma-separator:
    - match: ','
      scope: punctuation.separator.comma.js

  import-export:
    - match: import{{identifier_break}}(?!\s*\.)
      scope: keyword.control.import-export.js
      set:
        - meta_scope: meta.import.js
        - match: (?=\.) # Recovery for import.meta
          set:
            - expression-statement-end
            - import-meta-expression-dot
        - match: (?=\S)
          set:
            - import-meta
            - expect-semicolon
            - import-string-or-items

    - match: export{{identifier_break}}
      scope: keyword.control.import-export.js
      set:
        - export-meta
        - export-extended

  import-meta:
    - meta_scope: meta.import.js
    - include: immediately-pop

  import-export-alias:
    - match: as{{identifier_break}}
      scope: keyword.control.import-export.js
      set:
        - match: default{{identifier_break}}
          scope: keyword.control.import-export.js
          pop: true
        - match: '{{identifier}}'
          scope: variable.other.readwrite.js
          pop: true
        - include: else-pop
    - include: else-pop

  import-export-from:
    - match: 'from{{identifier_break}}'
      scope: keyword.control.import-export.js
      set: literal-string
    - include: else-pop

  import-string-or-items:
    - include: literal-string
    - match: (?=\S)
      set:
        - import-export-from
        - import-list
        - import-export-alias
        - import-item

  import-list:
    - match: ','
      scope: punctuation.separator.comma.js
      push:
        - import-export-alias
        - import-item
    - include: else-pop

  import-item:
    - match: '\{'
      scope: punctuation.section.block.begin.js
      set: import-brace
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js
      pop: true
    - match: '\*'
      scope: constant.other.js
      pop: true
    - include: else-pop

  import-brace:
    - meta_scope: meta.block.js
    - include: comma-separator
    - match: '\}'
      scope: punctuation.section.block.end.js
      pop: true
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js
      push: import-export-alias
    - match: '\*'
      scope: constant.other.js
      push: import-export-alias
    - include: else-pop

  export-meta:
    - meta_scope: meta.export.js
    - include: immediately-pop

  export-extended:
    - include: variable-declaration
    - include: function-or-class-declaration

    - match: 'default{{identifier_break}}'
      scope: keyword.control.import-export.js
      set:
        - include: function-or-class-declaration
        - match: (?=\S)
          set: expression-statement

    - match: (?=\S)
      set:
        - expect-semicolon
        - import-export-from
        - export-list
        - import-export-alias
        - export-item

  export-list:
    - match: ','
      scope: punctuation.separator.comma.js
      push:
        - import-export-alias
        - export-item
    - include: else-pop

  export-item:
    - match: '\{'
      scope: punctuation.section.block.begin.js
      set: export-brace
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js
      pop: true
    - match: '\*'
      scope: constant.other.js
      pop: true
    - include: else-pop

  export-brace:
    - meta_scope: meta.block.js
    - include: comma-separator
    - match: '\}'
      scope: punctuation.section.block.end.js
      pop: true
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js
      push: import-export-alias
    - match: '\*'
      scope: constant.other.js
      push: import-export-alias
    - include: else-pop

  statements:
    - match: '\)|\}|\]'
      scope: invalid.illegal.stray-bracket-end.js
      pop: true

    - match: (?=\S)
      push: statement

  statement:
    - match: \;
      scope: punctuation.terminator.statement.empty.js
      pop: true

    - include: import-export
    - include: conditional
    - include: block
    - include: label
    - include: variable-declaration

    - match: throw{{identifier_break}}
      scope: keyword.control.trycatch.js
      set: restricted-production

    - match: (?:break|continue|goto){{identifier_break}}
      scope: keyword.control.loop.js
      set: expect-semicolon

    - match: return{{identifier_break}}
      scope: keyword.control.flow.js
      set: restricted-production

    - match: debugger{{identifier_break}}
      scope: keyword.other.debugger.js
      set: expect-semicolon

    - include: function-or-class-declaration

    - match: (?=\S)
      set: expression-statement

  expect-semicolon:
    - match: \;
      scope: punctuation.terminator.statement.js
      pop: true
    - include: else-pop

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.js
      push:
        - meta_scope: meta.block.js
        - match: '\}'
          scope: punctuation.section.block.end.js
          pop: true
        - include: statements

  variable-binding-pattern:
    - include: variable-binding-name
    - include: variable-binding-array-destructuring
    - include: variable-binding-object-destructuring
    - include: else-pop

  variable-binding-name:
    - match: (?={{identifier}})
      set:
        - meta_scope: meta.binding.name.js
        - include: literal-variable

  variable-binding-array-destructuring:
    - match: '\['
      scope: punctuation.section.brackets.begin.js
      set:
        - meta_scope: meta.binding.destructuring.sequence.js
        - match: '\]'
          scope: punctuation.section.brackets.end.js
          pop: true
        - include: variable-binding-spread
        - include: variable-binding-list

  variable-binding-object-destructuring:
    - match: '\{'
      scope: punctuation.section.block.begin.js
      set:
        - meta_scope: meta.binding.destructuring.mapping.js
        - match: '\}'
          scope: punctuation.section.block.end.js
          pop: true
        - include: variable-binding-spread
        - match: (?={{identifier}})
          push:
            - initializer
            - variable-binding-object-alias
            - object-literal-meta-key
            - variable-binding-object-key
        - include: comma-separator

  variable-binding-object-alias:
    - match: ':'
      scope: punctuation.separator.key-value.js
      set: variable-binding-pattern
    - include: else-pop

  variable-binding-object-key:
    - match: '{{identifier}}(?=\s*:)'
      pop: true
    - include: variable-binding-name
    - include: else-pop

  variable-binding-spread:
    - match: '\.\.\.'
      scope: keyword.operator.spread.js
      push: variable-binding-pattern

  variable-binding-list:
    - include: comma-separator
    - match: (?={{binding_pattern_lookahead}})
      push:
        - initializer
        - variable-binding-pattern
    - include: else-pop

  variable-binding-top:
    - include: function-assignment
    - match: (?={{binding_pattern_lookahead}})
      set:
        - initializer
        - variable-binding-pattern
    - match: \n
      set:
        - match: '{{line_continuation_lookahead}}'
          set: variable-binding-top
        - include: else-pop
    - include: else-pop

  variable-binding-list-top:
    - match: ','
      scope: punctuation.separator.comma.js
      push: variable-binding-top
    - include: else-pop

  variable-declaration:
    - match: (?:const|let|var){{identifier_break}}
      scope: storage.type.js
      set:
        - expect-semicolon
        - variable-binding-list-top
        - variable-binding-top

  function-parameter-binding-pattern:
    - include: function-parameter-binding-name
    - include: function-parameter-binding-array-destructuring
    - include: function-parameter-binding-object-destructuring
    - include: else-pop

  function-parameter-binding-name:
    - match: '{{identifier}}'
      scope: meta.binding.name.js variable.parameter.function.js

  function-parameter-binding-array-destructuring:
    - match: '\['
      scope: punctuation.section.brackets.begin.js
      set:
        - meta_scope: meta.binding.destructuring.sequence.js
        - match: '\]'
          scope: punctuation.section.brackets.end.js
          pop: true
        - include: function-parameter-binding-list

  function-parameter-binding-object-destructuring:
    - match: '\{'
      scope: punctuation.section.block.begin.js
      set:
        - meta_scope: meta.binding.destructuring.mapping.js
        - match: ','
          scope: punctuation.separator.parameter.function.js
        - match: '\}'
          scope: punctuation.section.block.end.js
          pop: true
        - include: function-parameter-binding-spread
        - match: (?={{identifier}})
          push:
            - initializer
            - function-parameter-binding-object-alias
            - object-literal-meta-key
            - function-parameter-binding-object-key

  function-parameter-binding-object-alias:
    - match: ':'
      scope: punctuation.separator.key-value.js
      set: function-parameter-binding-pattern
    - include: else-pop

  function-parameter-binding-object-key:
    - match: '{{identifier}}(?=\s*:)'
      pop: true
    - include: function-parameter-binding-name
    - include: else-pop

  function-parameter-binding-spread:
    - match: '\.\.\.'
      scope: keyword.operator.spread.js
      push: function-parameter-binding-pattern

  function-parameter-binding-list:
    - match: ','
      scope: punctuation.separator.parameter.function.js
    - include: function-parameter-binding-spread
    - match: (?={{binding_pattern_lookahead}})
      push:
        - initializer
        - function-parameter-binding-pattern
    - include: else-pop

  function-or-class-declaration:
    - match: (?=class{{identifier_break}})
      set: class

    - match: (?={{func_lookahead}})
      set: function-declaration

  initializer:
    - match: '='
      scope: keyword.operator.assignment.js
      set: expression-no-comma
    - include: else-pop

  function-initializer:
    - meta_scope: meta.function.declaration.js
    - match: '='
      scope: keyword.operator.assignment.js
      set:
        - meta_content_scope: meta.function.declaration.js
        - include: expression-no-comma

    - include: else-pop

  expression-statement:
    - match: (?=\S)
      set:
        - expect-semicolon
        - expression-statement-end
        - expression-begin

  expression-statement-end:
    - match: \n
      set:
        - match: '{{line_continuation_lookahead}}'
          set: expression-statement-end
        - include: else-pop
    - include: expression-end

  restricted-production:
    - match: \n
      pop: true
    - match: (?=\S)
      set: expression-statement

  expect-case-colon:
    - match: ':'
      scope: punctuation.separator.js
      pop: true
    - include: else-pop

  conditional:
    - match: switch{{identifier_break}}
      scope: keyword.control.switch.js
      set:
        - switch-meta
        - switch-block
        - parenthesized-expression

    - match: do{{identifier_break}}
      scope: keyword.control.loop.js
      set:
        - do-while-meta
        - do-while-condition
        - block-scope

    - match: for{{identifier_break}}
      scope: keyword.control.loop.js
      set:
        - for-meta
        - block-scope
        - for-condition
        - for-await

    - match: while{{identifier_break}}
      scope: keyword.control.loop.js
      set:
        - while-meta
        - block-scope
        - parenthesized-expression

    - match: with{{identifier_break}}
      scope: keyword.control.with.js
      set:
        - with-meta
        - block-scope
        - parenthesized-expression

    - match: (?:else\s+if|if){{identifier_break}}
      scope: keyword.control.conditional.js
      set:
        - conditional-meta
        - block-scope
        - parenthesized-expression

    - match: else{{identifier_break}}
      scope: keyword.control.conditional.js
      set:
        - conditional-meta
        - block-scope

    - match: try{{identifier_break}}
      scope: keyword.control.trycatch.js
      set:
        - try-meta
        - block-scope

    - match: finally{{identifier_break}}
      scope: keyword.control.trycatch.js
      set:
        - finally-meta
        - block-scope

    - match: catch{{identifier_break}}
      scope: keyword.control.trycatch.js
      set:
        - catch-meta
        - block-scope
        - parenthesized-expression

  switch-meta:
    - meta_scope: meta.switch.js
    - include: immediately-pop

  do-while-meta:
    - meta_scope: meta.do-while.js
    - include: immediately-pop

  for-meta:
    - meta_scope: meta.for.js
    - include: immediately-pop

  while-meta:
    - meta_scope: meta.while.js
    - include: immediately-pop

  with-meta:
    - meta_scope: meta.with.js
    - include: immediately-pop

  conditional-meta:
    - meta_scope: meta.conditional.js
    - include: immediately-pop

  try-meta:
    - meta_scope: meta.try.js
    - include: immediately-pop

  finally-meta:
    - meta_scope: meta.finally.js
    - include: immediately-pop

  catch-meta:
    - meta_scope: meta.catch.js
    - include: immediately-pop

  for-await:
    - match: await{{identifier_break}}
      scope: keyword.control.loop.js
      pop: true
    - include: else-pop

  for-condition:
    - match: '\('
      scope: punctuation.section.group.js
      set:
        - for-condition-end
        - for-condition-contents
    - include: else-pop

  for-condition-end:
    - meta_scope: meta.group.js

    - match: '\)'
      scope: punctuation.section.group.js
      pop: true

  for-condition-contents:
    # This could be either type of for loop.
    - match: (?:const|let|var){{identifier_break}}
      scope: storage.type.js
      set:
        - - match: (?:of|in){{identifier_break}}
            scope: keyword.operator.word.js
            set: expression
          - match: (?=\S)
            set:
              - statements-in-parens
              - variable-binding-list
              - initializer
        - variable-binding-pattern

    - match: (?=\S)
      set: statements-in-parens

  statements-in-parens:
    - match: (?=\))
      pop: true
    - include: statements

  block-scope:
    - include: block
    - include: else-pop

  block-meta:
    - meta_scope: meta.block.js
    - include: immediately-pop

  switch-block:
    - match: '\{'
      scope: punctuation.section.block.begin.js
      set: switch-block-contents
    - include: else-pop

  switch-block-contents:
    - meta_scope: meta.block.js

    - match: '\}'
      scope: punctuation.section.block.end.js
      pop: true

    - match: case{{identifier_break}}
      scope: keyword.control.switch.js
      push:
        - expect-case-colon
        - expression

    - match: default{{identifier_break}}
      scope: keyword.control.switch.js
      push:
        - expect-case-colon

    - include: statements

  do-while-condition:
    - match: while{{identifier_break}}
      scope: keyword.control.loop.js
      set: parenthesized-expression
    - include: else-pop

  expression-break:
    - match: (?=[;})\]])
      pop: true

  expression:
    - match: (?=\S)
      set: [ expression-end, expression-begin ]

  expression-no-comma:
    - match: (?=\S)
      set: [ expression-end-no-comma, expression-begin ]

  expression-list:
    - include: expression-break
    - include: comma-separator
    - match: (?=\S)
      push: expression-no-comma

  left-expression-end:
    - include: expression-break

    - include: property-access
    - include: literal-string-template

    - match: (?=\()
      push: function-call-arguments

    - include: fallthrough

    - include: else-pop

  expression-end:
    - include: postfix-operators
    - include: binary-operators
    - include: ternary-operator

    - include: left-expression-end

  expression-end-no-comma:
    - match: (?=,)
      pop: true
    - include: expression-end

  expression-begin:
    - include: expression-break

    - include: literal-prototype

    - include: regexp-complete
    - include: literal-string
    - include: tagged-template
    - include: literal-string-template
    - include: constructor
    - include: prefix-operators
    - include: yield-expression
    - include: await-expression
    - include: import-meta-expression

    - include: class
    - include: constants
    - include: function-assignment
    - include: either-function-declaration
    - include: object-literal

    - include: parenthesized-expression
    - include: array-literal

    - include: literal-number
    - include: literal-call
    - include: literal-variable

    - include: else-pop

  fallthrough:
    # If an arrow function has the ( and ) on different lines, we won't have matched
    - match: =>
      scope: storage.type.function.arrow.js
      push: arrow-function-expect-body

  literal-string:
    - match: "'"
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.js
        - match: (')|(\n)
          captures:
            1: punctuation.definition.string.end.js
            2: invalid.illegal.newline.js
          pop: true
        - include: string-content
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.js
        - match: (")|(\n)
          captures:
            1: punctuation.definition.string.end.js
            2: invalid.illegal.newline.js
          pop: true
        - include: string-content

  tagged-template:
    - match: '{{identifier}}(?=\s*`)'
      scope: variable.function.tagged-template.js
      set:
        - include: literal-string-template
        - include: else-pop

  literal-string-template:
    - match: '`'
      scope: punctuation.definition.string.template.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: string.template.js
        - match: "`"
          scope: punctuation.definition.string.template.end.js
          pop: true
        - match: '\$\{'
          captures:
            0: punctuation.definition.template-expression.begin.js
          push:
            - clear_scopes: 1
            - meta_scope: meta.template.expression.js
            - meta_content_scope: source.js.embedded.expression
            - match: '\}'
              scope: punctuation.definition.template-expression.end.js
              pop: true
            - match: (?=\S)
              push: expression
        - include: string-content

  string-content:
    - match: \\\s*\n
      scope: constant.character.escape.newline.js
    - match: '\\(x[\da-fA-F][\da-fA-F]|u[\da-fA-F][\da-fA-F][\da-fA-F][\da-fA-F]|.)'
      scope: constant.character.escape.js

  regexp-complete:
    - match: '/'
      scope: punctuation.definition.string.begin.js
      set: regexp

  regexp:
      - meta_include_prototype: false
      - meta_scope: string.regexp.js
      - match: "/"
        scope: punctuation.definition.string.end.js
        set:
          - meta_include_prototype: false
          - meta_content_scope: string.regexp.js
          - match: '[gimyus]'
            scope: keyword.other.js
          - match: '[A-Za-z0-9]' # Ignore unknown flags for future-compatibility
          - include: immediately-pop
      - match: '(?=.|\n)'
        push:
          - meta_include_prototype: false
          - match: '(?=/)'
            pop: true
          - include: scope:source.regexp.js

  constructor:
    - match: new{{identifier_break}}(?=\s*\.)
      scope: keyword.operator.word.new.js
      set: new-target

    - match: 'new{{identifier_break}}'
      scope: keyword.operator.word.new.js
      set:
        - meta_scope: meta.instance.constructor.js meta.function-call.constructor.js
        - match: (?=\s*\.)
          set: new-target
        - match: (?=\s*\S)
          set:
            - constructor-meta
            - constructor-body-expect-arguments
            - constructor-body-expect-class-end
            - constructor-body-expect-class-begin

  constructor-meta:
    - meta_scope: meta.instance.constructor.js meta.function-call.constructor.js
    - include: immediately-pop

  constructor-body-expect-arguments:
    - include: function-call-arguments
    - include: else-pop

  constructor-body-expect-class-end:
    - include: property-access
    - include: else-pop

  constructor-body-expect-class-begin:
    - include: well-known-identifiers

    - match: (?={{identifier}}\s*\()
      set:
        - match: '{{dollar_only_identifier}}'
          scope: variable.type.dollar.only.js punctuation.dollar.js
          pop: true
        - match: '{{dollar_identifier}}'
          scope: variable.type.dollar.js
          captures:
            1: punctuation.dollar.js
          pop: true
        - match: '{{identifier}}'
          scope: variable.type.js
          pop: true
        - include: else-pop

    - include: expression-begin

  new-target:
    - match: \.
      scope: punctuation.accessor.dot.js
      set:
        - match: \btarget\b
          scope: variable.language.target.js
          pop: true
        - include: else-pop

    - include: else-pop

  prefix-operators:
    - match: '~'
      scope: keyword.operator.bitwise.js
    - match: '!(?!=)'
      scope: keyword.operator.logical.js
    - match: '--'
      scope: keyword.operator.arithmetic.js
    - match: '\+\+'
      scope: keyword.operator.arithmetic.js
    - match: \.\.\.
      scope: keyword.operator.spread.js
    - match: \+|\-
      scope: keyword.operator.arithmetic.js
    - match: new{{identifier_break}}
      scope: keyword.operator.word.new.js
    - match: (?:delete|typeof|void){{identifier_break}}
      scope: keyword.operator.js

  binary-operators:
    - match: instanceof{{identifier_break}}
      scope: keyword.operator.js
      push: expression-begin
    - match: in{{identifier_break}}
      scope: keyword.operator.js
      push: expression-begin
    - match: '&&|\|\|'
      scope: keyword.operator.logical.js
      push: expression-begin
    - match: '=(?![=>])'
      scope: keyword.operator.assignment.js
      push: expression-begin
    - match: |-
        (?x)
        %=   | # assignment      right-to-left   both
        &=   | # assignment      right-to-left   both
        \*=  | # assignment      right-to-left   both
        \+=  | # assignment      right-to-left   both
        -=   | # assignment      right-to-left   both
        /=   | # assignment      right-to-left   both
        \^=  | # assignment      right-to-left   both
        \|=  | # assignment      right-to-left   both
        <<=  | # assignment      right-to-left   both
        >>=  | # assignment      right-to-left   both
        >>>=   # assignment      right-to-left   both
      scope: keyword.operator.assignment.augmented.js
      push: expression-begin
    - match: |-
        (?x)
        <<   | # bitwise-shift   left-to-right   both
        >>>  | # bitwise-shift   left-to-right   both
        >>   | # bitwise-shift   left-to-right   both
        &    | # bitwise-and     left-to-right   both
        \^   | # bitwise-xor     left-to-right   both
        \|     # bitwise-or      left-to-right   both
      scope: keyword.operator.bitwise.js
      push: expression-begin
    - match: |-
        (?x)
        <=   | # relational      left-to-right   both
        >=   | # relational      left-to-right   both
        <    | # relational      left-to-right   both
        >      # relational      left-to-right   both
      scope: keyword.operator.relational.js
      push: expression-begin
    - match: |-
        (?x)
        ===  | # equality        left-to-right   both
        !==  | # equality        left-to-right   both
        ==   | # equality        left-to-right   both
        !=     # equality        left-to-right   both
      scope: keyword.operator.comparison.js
      push: expression-begin
    - match: |-
        (?x)
        /    | # division        left-to-right   both
        %    | # modulus         left-to-right   both
        \*   | # multiplication  left-to-right   both
        \+   | # addition        left-to-right   both
        -      # subtraction     left-to-right   both
      scope: keyword.operator.arithmetic.js
      push: expression-begin
    - match: ','
      scope: punctuation.separator.comma.js # TODO: Change to keyword.operator.comma.js ?
      push: expression-begin

  ternary-operator:
    - match: '\?'
      scope: keyword.operator.ternary.js
      set:
        - ternary-operator-expect-colon
        - expression-no-comma

  ternary-operator-expect-colon:
    - match: ':'
      scope: keyword.operator.ternary.js
      set: expression-no-comma
    - include: else-pop

  postfix-operators:
    - match: '--'
      scope: keyword.operator.arithmetic.js
    - match: '\+\+'
      scope: keyword.operator.arithmetic.js

  yield-expression:
    - match: yield{{identifier_break}}
      scope: keyword.control.flow.js
      set:
        - match: $
          pop: true
        - match: \*
          scope: keyword.generator.asterisk.js
          set: expression-begin
        - match: (?=\S)
          set: expression-begin

  await-expression:
    - match: await{{identifier_break}}
      scope: keyword.control.flow.js

  class:
    - match: class{{identifier_break}}
      scope: storage.type.class.js
      set:
        - class-meta
        - class-body
        - class-extends
        - class-name

  class-meta:
    - meta_scope: meta.class.js
    - include: immediately-pop

  class-body:
    - match: '\{'
      scope: punctuation.section.block.begin.js
      set: class-body-contents

    - include: else-pop

  class-body-contents:
    - meta_scope: meta.block.js

    - match: '\}'
      scope: punctuation.section.block.end.js
      pop: true

    - match: \;
      scope: punctuation.terminator.statement.js

    - match: constructor{{identifier_break}}
      scope: entity.name.function.constructor.js
      push:
        - function-declaration-expect-body
        - function-declaration-meta
        - function-declaration-expect-parameters

    - match: static{{identifier_break}}
      scope: storage.modifier.js
      push: class-field

    - match: (?={{class_element_name}})
      push: class-field

  class-extends:
    - match: extends{{identifier_break}}
      scope: storage.modifier.extends.js
      set:
        - inherited-class-expression-end
        - inherited-class-expression-begin
    - include: else-pop

  inherited-class-name:
    - match: '{{identifier}}{{left_expression_end_lookahead}}'
      scope: entity.other.inherited-class.js
      pop: true

  inherited-class-expression-end:
    - match: \.
      scope: punctuation.accessor.js
      push:
        - include: inherited-class-name
        - include: object-property

    - include: left-expression-end

  inherited-class-expression-begin:
    - include: inherited-class-name
    - include: expression-begin

  class-name:
    - match: '{{identifier}}'
      scope: entity.name.class.js
      pop: true
    - include: else-pop

  class-field:
    - match: '{{method_lookahead}}'
      set: method-declaration

    - match: (?={{property_name}})
      set:
        - field-initializer-or-method-declaration
        - field-name

    - match: (?=#{{identifier}})
      set:
        - class-field-rest
        - initializer
        - field-name

    - include: else-pop

  class-field-rest:
    - match: ','
      scope: punctuation.separator.js
      push:
        - initializer
        - field-name
    - include: else-pop

  field-initializer-or-method-declaration:
    - match: (?=\()
      set:
        - function-declaration-expect-body
        - function-declaration-meta
        - function-declaration-expect-parameters
    - match: (?=\S)
      set:
        - class-field-rest
        - initializer

  constants:
    - match: true{{identifier_break}}
      scope: constant.language.boolean.true.js
      pop: true
    - match: false{{identifier_break}}
      scope: constant.language.boolean.false.js
      pop: true
    - match: null{{identifier_break}}
      scope: constant.language.null.js
      pop: true
    - match: undefined{{identifier_break}}
      scope: constant.language.undefined.js
      pop: true
    - match: NaN{{identifier_break}}
      scope: constant.language.nan.js
      pop: true

  literal-prototype:
    - match: |-
        (?x)
          ({{identifier}})
          \s*(\.)\s*
          (prototype)
          (?=\s*=\s*{{either_func_lookahead}})
      scope: meta.prototype.declaration.js
      captures:
        1: support.class.js
        2: punctuation.accessor.js
        3: support.constant.prototype.js
      set:
        - function-initializer
    - match: |-
        (?x)
          ({{identifier}})
          \s*(\.)\s*
          (prototype)\s*(\.)\s*
          (?={{identifier}}\s*=\s*{{either_func_lookahead}})
      captures:
        1: support.class.js
        2: punctuation.accessor.js
        3: support.constant.prototype.js
        4: punctuation.accessor.js
      set:
        - function-initializer
        - function-declaration-single-identifier
    - match: '({{identifier}})(\.)(prototype){{identifier_break}}'
      scope: meta.prototype.access.js
      captures:
        1: support.class.js
        2: punctuation.accessor.js
        3: support.constant.prototype.js
      pop: true

  function-assignment:
    - match: |-
        (?x)(?=
          ({{identifier}} \s* \. \s*)*
          {{identifier}}
          \s* = \s*
          {{either_func_lookahead}}
        )
      set:
        - function-initializer
        - function-declaration-identifiers

  function-declaration-identifiers:
    - match: '(?={{identifier}}\s*\.)'
      push:
        - expect-dot-accessor
        - function-declaration-identifiers-expect-class
    - include: function-declaration-single-identifier

  expect-dot-accessor:
    - match: '\.'
      scope: punctuation.accessor.js
      pop: true
    - include: else-pop

  function-declaration-identifiers-expect-class:
    - match: 'prototype{{identifier_break}}'
      scope: support.constant.prototype.js
      pop: true
    - include: language-identifiers
    - match: '{{dollar_only_identifier}}'
      scope: support.class.dollar.only.js punctuation.dollar.js
      pop: true
    - match: '{{dollar_identifier}}'
      scope: support.class.dollar.js
      captures:
        1: punctuation.dollar.js
      pop: true
    - match: '{{identifier}}'
      scope: support.class.js
      pop: true
    - include: else-pop

  function-declaration-final-identifier:
    - match: '{{dollar_only_identifier}}'
      scope: meta.property.object.dollar.only.js punctuation.dollar.js entity.name.function.js
      pop: true
    - match: '{{dollar_identifier}}'
      scope: meta.property.object.dollar.js entity.name.function.js
      captures:
        1: punctuation.dollar.js
      pop: true
    - match: '{{constant_identifier}}'
      scope: meta.property.object.constant.js entity.name.function.js
      pop: true
    - match: '{{identifier}}'
      scope: meta.property.object.readwrite.js entity.name.function.js
      pop: true
    - include: else-pop

  function-declaration-single-identifier:
    - match: '{{dollar_only_identifier}}'
      scope: variable.other.dollar.only.js punctuation.dollar.js entity.name.function.js
      pop: true
    - match: '{{dollar_identifier}}'
      scope: variable.other.dollar.js entity.name.function.js
      captures:
        1: punctuation.dollar.js
      pop: true
    - match: '{{constant_identifier}}'
      scope: variable.other.constant.js entity.name.function.js
      pop: true
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js entity.name.function.js
      pop: true
    - include: else-pop

  either-function-declaration:
    - match: '(?={{func_lookahead}})'
      set: function-declaration
    - match: '(?={{arrow_func_lookahead}})'
      set: arrow-function-declaration

  function-declaration:
    - match: ''
      set:
        - function-declaration-expect-body
        - function-declaration-meta
        - function-declaration-expect-parameters
        - function-declaration-expect-name
        - function-declaration-expect-generator-star
        - function-declaration-expect-function-keyword
        - function-declaration-expect-async

  function-declaration-expect-body:
    - match: (?=\S)
      set: function-block

  function-declaration-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function.declaration.js
    - include: immediately-pop

  function-declaration-expect-parameters:
    - include: function-declaration-parameters
    - include: else-pop

  function-declaration-expect-name:
    - match: '{{identifier}}'
      scope: entity.name.function.js
      pop: true
    - include: else-pop

  function-declaration-expect-generator-star:
    - match: \*
      scope: keyword.generator.asterisk.js
      pop: true
    - include: else-pop

  function-declaration-expect-function-keyword:
    - match: function{{identifier_break}}
      scope: storage.type.function.js
      pop: true
    - include: else-pop

  function-declaration-expect-async:
    - match: 'async{{identifier_break}}'
      scope: storage.type.js
      pop: true
    - include: else-pop

  arrow-function-declaration:
    - match: ''
      set:
        - arrow-function-expect-body
        - function-declaration-meta
        - arrow-function-expect-arrow
        - arrow-function-expect-parameters
        - function-declaration-expect-async

  arrow-function-expect-body:
    - match: (?=\{)
      set: function-block
    - match: (?=\S)
      set:
        - block-meta
        - expression-no-comma

  arrow-function-expect-arrow:
    - match: '=>'
      scope: storage.type.function.arrow.js
      pop: true
    - include: else-pop

  arrow-function-expect-parameters:
    - match: '{{identifier}}'
      scope: variable.parameter.function.js
      pop: true
    - include: function-declaration-parameters
    - include: else-pop

  function-block:
    - meta_scope: meta.block.js
    - match: '\}'
      scope: punctuation.section.block.end.js
      pop: true
    - match: '\{'
      scope: punctuation.section.block.begin.js
      push:
        - match: '(?=\})'
          pop: true
        - include: statements
    - include: else-pop

  function-declaration-parameters:
    - match: \(
      scope: punctuation.section.group.begin.js
      set:
        - match: \)
          scope: punctuation.section.group.end.js
          pop: true
        - include: function-parameter-binding-list

  label:
    - match: '({{identifier}})\s*(:)'
      captures:
        1: entity.name.label.js
        2: punctuation.separator.js

  object-literal:
    - match: '\{'
      scope: punctuation.section.block.begin.js
      set: object-literal-contents

  object-literal-contents:
    - meta_scope: meta.object-literal.js

    - match: '\}'
      scope: punctuation.section.block.end.js
      pop: true

    - match: \.\.\.
      scope: keyword.operator.spread.js
      push: expression-no-comma

    - match: >-
        (?x)(?=
          {{property_name}}\s*:
          (?: {{either_func_lookahead}} )
        )
      push:
        - either-function-declaration
        - function-declaration-meta
        - object-literal-expect-colon
        - object-literal-meta-key
        - method-name

    - match: '{{method_lookahead}}'
      push: method-declaration

    - match: '{{identifier}}(?=\s*(?:[},]|$|//|/\*))'
      scope: variable.other.readwrite.js
    - match: (?=\[)
      push: computed-property-name
    - match: "(?=\"|')"
      push:
        - object-literal-meta-key
        - literal-string
    - include: bare-property-name
    - match: (?=[-+]?(?:\.[0-9]|0[bxo]|\d))
      push:
        - meta_scope: meta.object-literal.key.js
        - include: literal-number

    - include: comma-separator
    - match: ':'
      scope: punctuation.separator.key-value.js
      push: expression-no-comma

  bare-property-name:
    - match: '{{dollar_only_identifier}}'
      scope: meta.object-literal.key.dollar.only.js punctuation.dollar.js
    - match: '{{dollar_identifier}}'
      scope: meta.object-literal.key.dollar.js
      captures:
        1: punctuation.dollar.js
    - match: '{{identifier}}'
      scope: meta.object-literal.key.js

  computed-property-name:
    - match: \[
      scope: punctuation.section.brackets.begin.js
      set:
        - match: \]
          scope: punctuation.section.brackets.end.js
          pop: true
        - match: (?=\S)
          push: expression
    - include: else-pop

  object-literal-meta-key:
    - meta_scope: meta.object-literal.key.js
    - include: else-pop

  object-literal-expect-colon:
    - match: ':'
      scope: punctuation.separator.key-value.js
    - include: else-pop

  method-name:
    - match: '{{dollar_identifier}}'
      scope: meta.object-literal.key.dollar.js entity.name.function.js
      captures:
        1: punctuation.dollar.js
      pop: true
    - match: '{{identifier}}'
      scope: entity.name.function.js
      pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.js
        - meta_content_scope: entity.name.function.js
        - match: (')|(\n)
          captures:
            1: punctuation.definition.string.end.js
            2: invalid.illegal.newline.js
          pop: true
        - include: string-content
    - match: '"'
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.js
        - meta_content_scope: entity.name.function.js
        - match: (")|(\n)
          captures:
            1: punctuation.definition.string.end.js
            2: invalid.illegal.newline.js
          pop: true
        - include: string-content

    - match: (?=\[)
      push: computed-property-name

    - include: else-pop

  field-name:
    - match: '{{dollar_identifier}}'
      scope: meta.object-literal.key.dollar.js variable.other.readwrite.js
      captures:
        1: punctuation.dollar.js
      pop: true
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js
      pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.js
        - meta_content_scope: variable.other.readwrite.js
        - match: (')|(\n)
          captures:
            1: punctuation.definition.string.end.js
            2: invalid.illegal.newline.js
          pop: true
        - include: string-content
    - match: '"'
      scope: punctuation.definition.string.begin.js
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.js
        - meta_content_scope: variable.other.readwrite.js
        - match: (")|(\n)
          captures:
            1: punctuation.definition.string.end.js
            2: invalid.illegal.newline.js
          pop: true
        - include: string-content
    - match: (#)({{identifier}})
      captures:
        1: punctuation.definition.variable.js
        2: variable.other.readwrite.js

    - match: (?=\[)
      push: computed-property-name

    - include: else-pop

  method-declaration:
    - match: ''
      set:
        - function-declaration-expect-body
        - function-declaration-meta
        - function-declaration-expect-parameters
        - method-name
        - method-declaration-expect-prefix
        - function-declaration-expect-async

  method-declaration-expect-prefix:
    - match: \*
      scope: keyword.generator.asterisk.js
    - match: (?:get|set){{identifier_break}}(?!\s*\()
      scope: storage.type.accessor.js
    - include: else-pop

  parenthesized-expression:
    - match: \(
      scope: punctuation.section.group.begin.js
      set:
        - meta_scope: meta.group.js
        - match: \)
          scope: punctuation.section.group.end.js
          pop: true
        - match: (?=\S)
          push: expression

  function-call-arguments:
    - match: \(
      scope: punctuation.section.group.begin.js
      set:
        - meta_scope: meta.group.js
        - match: \)
          scope: punctuation.section.group.end.js
          pop: true
        - include: expression-list

  array-literal:
    - match: '\['
      scope: punctuation.section.brackets.begin.js
      set:
        - meta_scope: meta.sequence.js
        - match: '\]'
          scope: punctuation.section.brackets.end.js
          pop: true
        - include: expression-list

  property-access:
    - match: '\['
      scope: punctuation.section.brackets.begin.js
      push:
        - meta_scope: meta.brackets.js
        - match: '\]'
          scope: punctuation.section.brackets.end.js
          pop: true
        - match: (?=\S)
          push: expression

    - match: \.
      scope: punctuation.accessor.js
      push: object-property

  literal-number:
    - match: '[+-]?0[0-9]+{{identifier_break}}'
      scope: constant.numeric.octal.js invalid.deprecated.numeric.octal.js
      pop: true

    - match: '[+-]?(0[Xx])[0-9a-fA-F_]*(n)?{{identifier_break}}'
      scope: constant.numeric.hexadecimal.js
      captures:
        1: punctuation.definition.numeric.hexadecimal.js
        2: storage.type.numeric.bigint.js
      pop: true

    - match: '[+-]?(0[Oo])[0-7_]*(n)?{{identifier_break}}'
      scope: constant.numeric.octal.js
      captures:
        1: punctuation.definition.numeric.octal.js
        2: storage.type.numeric.bigint.js
      pop: true

    - match: '[+-]?(0[Bb])[0-1_]*(n)?{{identifier_break}}'
      scope: constant.numeric.binary.js
      captures:
        1: punctuation.definition.numeric.binary.js
        2: storage.type.numeric.bigint.js
      pop: true

    - match: '[+-]?(?:0|[1-9][0-9_]*)(n){{identifier_break}}'
      scope: constant.numeric.decimal.js
      captures:
        1: storage.type.numeric.bigint.js
      pop: true

    - match: |-
        (?x)
        [-+]?
        (
          (0|[1-9][0-9_]*)
          (\.[0-9_]*|(?!\.))
          |
          \.[0-9_]+
        )
        ([Ee]([+-]|(?![-+]))[0-9_]*)?
        {{identifier_break}}
      scope: constant.numeric.decimal.js
      pop: true

    - match: '[+-]?(Infinity){{identifier_break}}'
      scope: constant.language.infinity.js
      pop: true

    - match: '[+-]?(0[Xx]){{identifier_part}}+{{identifier_break}}'
      scope: invalid.illegal.numeric.hexadecimal.js
      pop: true

    - match: '[+-]?(0[Oo]){{identifier_part}}+{{identifier_break}}'
      scope: invalid.illegal.numeric.octal.js
      pop: true

    - match: '[+-]?(0[Bb]){{identifier_part}}+{{identifier_break}}'
      scope: invalid.illegal.numeric.binary.js
      pop: true

    - match: '[+-]?(0){{identifier_part}}+{{identifier_break}}'
      scope: invalid.illegal.numeric.octal.js
      pop: true

    - match: '[+-]?([1-9]){{identifier_part}}+{{identifier_break}}(?:\.{{identifier_part}}*{{identifier_break}})?'
      scope: invalid.illegal.numeric.decimal.js
      pop: true

  literal-call:
    - match: '(?={{identifier}}\s*\()'
      set:
        - call-expression-meta
        - function-call-arguments
        - call-expression-function-name
    - match: '(?={{identifier}}\s*\.\s*{{identifier}}\s*\()'
      set:
        - match: (console)(?:(\.)(warn|info|log|error|time|timeEnd|assert|count|dir|group|groupCollapsed|groupEnd|profile|profileEnd|table|trace|timeStamp))?{{identifier_break}}
          captures:
            1: support.type.object.console.js
            2: punctuation.accessor.js
            3: support.function.console.js
          set:
            - call-expression-method-meta
            - function-call-arguments
        - match: (process)(?:(\.)(abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?{{identifier_break}}
          captures:
            1: support.type.object.process.js
            2: punctuation.accessor.js
            3: support.function.process.js
          set:
            - call-expression-method-meta
            - function-call-arguments
        - match: '(?={{identifier}}\s*\.)'
          push:
            - include: well-known-identifiers
            - include: language-identifiers
            - match: '{{dollar_only_identifier}}'
              scope: variable.other.object.dollar.only.js punctuation.dollar.js
            - match: '{{dollar_identifier}}'
              scope: variable.other.object.dollar.js
              captures:
                1: punctuation.dollar.js
            - match: '{{identifier}}'
              scope: variable.other.object.js
            - match: \.
              scope: punctuation.accessor.js
              pop: true
        - match: \.
          scope: punctuation.accessor.js
        - include: method-call
        - match: '(?=[^ ])'
          pop: true

  call-expression-meta:
    - meta_scope: meta.function-call.js
    - include: else-pop

  call-expression-method-meta:
    - meta_scope: meta.function-call.method.js
    - include: else-pop

  call-expression-function-name:
    - match: (?:clearTimeout|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|setTimeout|super|unescape){{identifier_break}}(?=\()
      scope: support.function.js
      pop: true
    - match: '{{dollar_only_identifier}}'
      scope: variable.function.js variable.other.dollar.only.js punctuation.dollar.js
      pop: true
    - match: '{{identifier}}'
      scope: variable.function.js
      pop: true
    - include: else-pop

  method-call:
    - match: (?:shift|sort|splice|unshift|pop|push|reverse|copyWithin|fill){{identifier_break}}(?=\()
      scope: support.function.mutator.js
      set:
        - call-expression-method-meta
        - function-call-arguments
    - match: (s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur){{identifier_break}}(?=\()
      scope: support.function.dom.js
      set:
        - call-expression-method-meta
        - function-call-arguments
    - match: '({{identifier}})\s*(?=\()'
      scope: variable.function.js
      set:
        - call-expression-method-meta
        - function-call-arguments

  literal-variable:
    - include: well-known-identifiers
    - include: language-identifiers
    - include: dollar-identifiers
    - include: support
    - match: '{{constant_identifier}}(?=\s*[\[.])'
      scope: support.class.js
      pop: true
    - match: '{{identifier}}(?=\s*[\[.])'
      scope: variable.other.object.js
      pop: true
    - include: simple-identifiers

  well-known-identifiers:
    - match: (Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap|XMLHttpRequest){{identifier_break}}
      scope: support.class.builtin.js
      pop: true
    - match: ((Eval|Range|Reference|Syntax|Type|URI)?Error){{identifier_break}}
      scope: support.class.error.js
      pop: true
    - match: (document|window|navigator){{identifier_break}}
      scope: support.type.object.dom.js
      pop: true
    - match: (Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip){{identifier_break}}
      scope: support.class.node.js
      pop: true

  language-identifiers:
    - match: arguments{{identifier_break}}
      scope: variable.language.arguments.js
      pop: true
    - match: super{{identifier_break}}
      scope: variable.language.super.js
      pop: true
    - match: this{{identifier_break}}
      scope: variable.language.this.js
      pop: true
    - match: self{{identifier_break}}
      scope: variable.language.self.js
      pop: true

  dollar-identifiers:
    - match: '{{dollar_only_identifier}}'
      scope: variable.other.dollar.only.js punctuation.dollar.js
      pop: true
    - match: '{{dollar_identifier}}'
      scope: variable.other.dollar.js
      captures:
        1: punctuation.dollar.js
      pop: true

  simple-identifiers:
    - match: '{{constant_identifier}}'
      scope: variable.other.constant.js
      pop: true
    - match: '{{identifier}}'
      scope: variable.other.readwrite.js
      pop: true
    - match: (#)({{identifier}})
      captures:
        1: punctuation.definition.variable.js
        2: variable.other.readwrite.js

  support:
    - match: |-
        (?x)
        (
          ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|
          DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|
          WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR
        ){{identifier_break}}
      scope: support.constant.dom.js
      pop: true
    - match: (assert|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib){{identifier_break}}
      scope: support.module.node.js
      pop: true
    - match: (process)(?:(\.)(arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions))?{{identifier_break}}
      captures:
        1: support.type.object.process.js
        2: punctuation.accessor.js
        3: support.type.object.process.js
      pop: true
    - match: (exports|module(?:(\.)(exports|id|filename|loaded|parent|children))?){{identifier_break}}
      captures:
        1: support.type.object.module.js
        2: punctuation.accessor.js
        3: support.type.object.module.js
      pop: true
    - match: (global|GLOBAL|root|__dirname|__filename){{identifier_break}}
      scope: support.type.object.node.js
      pop: true

  object-property:
    - match: |-
        (?x)(?=
          {{identifier}}
          \s* = \s*
          {{either_func_lookahead}}
        )
      set:
        - function-initializer
        - function-declaration-final-identifier
    - match: '(?={{identifier}}\s*\()'
      set:
        - include: method-call
        - include: else-pop
    - match: __proto__{{identifier_break}}
      scope: variable.language.proto.js
      pop: true
    - match: constructor{{identifier_break}}
      scope: variable.language.constructor.js
      pop: true
    - match: prototype{{identifier_break}}
      scope: variable.language.prototype.js
      pop: true
    - match: '{{dollar_only_identifier}}'
      scope: meta.property.object.dollar.only.js punctuation.dollar.js
      pop: true
    - match: '{{dollar_identifier}}'
      scope: meta.property.object.dollar.js
      captures:
        1: punctuation.dollar.js
      pop: true
    - match: (s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor)){{identifier_break}}
      scope: support.constant.dom.js
      pop: true
    - match: '{{identifier}}'
      scope: meta.property.object.js
      pop: true
    - match: '{{identifier_part}}+{{identifier_break}}'
      scope: invalid.illegal.illegal-identifier.js
      pop: true
    - include: else-pop

  import-meta-expression:
    - match: import{{identifier_break}}
      scope: variable.language.import.js
      set: import-meta-expression-dot

  import-meta-expression-dot:
    - match: \.
      scope: punctuation.accessor.js
      set:
        - match: meta{{identifier_break}}
          scope: variable.language.import.js
          pop: true
        - include: object-property
    - include: else-pop
