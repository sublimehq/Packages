%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: D
comment: D language
file_extensions:
  - d
  - di
first_line_match: ^#!.*\bg?dmd\b.
scope: source.d
variables:
  name: '[[:alpha:]_][[:alnum:]_]*'
  identifier: '{{name}}(?:\.{{name}})*'
  std_identifier: '(?:std|core)\.{{identifier}}'
  identifier_ref: '(\b|\.){{identifier}}\b'
  string_postfix: '[cwd]?'
  escape_sequence: '\\([''"?\\0abfnrtv]|x{{hex_char}}{2}|[0-7]{1,3}|u{{hex_char}}{4}|U{{hex_char}}{8}|&\w+;)'
  hex_char: '[0-9a-fA-F]'
  hex_or_under: '(?:{{hex_char}}|_)'

  type_look_ahead: '(?={{identifier_ref}})'

  number_lookahead: '(?=(\b|\.)[0-9])'
  integer_lookahead: '(?=\b[0-9])'
  integer_suffix: 'L[uU]|[uU]L|[LuU]'
  integer_float_suffix: '[fF]i?|i'
  float_suffix: '[fFL]i?|i'
  float_exponent: '[eE][+\-]?[0-9]+'
  character_lookahead: (?=')
  string_lookahead: '(?=`|[rxq]?"|q{)'

  definitely_value_lookahead: '(?=(!|~|\+|\-|\*|&|\bcast\b|\bdelete\b|\bnew\b|\bimport\b|\bmixin\b|\bis\b|\b__traits\b|\bfunction\b|\bdelegate\b|[0-9]|\[|\(|{{string_lookahead}}|\b({{language_constant}})\b|\b({{language_variable}})\b))'
  definitely_declaration_lookahead: '(?=({{name}}|\]|\))(\s+{{name}})|\b({{type_qualifier}})\b)'

  type_qualifier: 'const|immutable|inout|shared'
  type_qualifier_lookahead: '(?=\b({{type_qualifier}})\b)'
  attribute_lookahead: '(?=@|\b({{attributes}}|extern|align|deprecated|pragma|private|protected|public|export|package)\b)'
  attributes: 'static|abstract|final|override|synchronized|scope|__gshared|nothrow|pure|ref|return|auto'
  at_attributes: 'disable|nogc|property|safe|system|trusted'
  parameter_attribute_lookahead: '(?=\b({{parameter_attribute}})\b)'
  parameter_attribute: 'in|lazy|out|alias'

  construction_lookahead: '(?=~?\s*this\s*\()'

  keyword: 'else|enum|export|extern|debug|default|delegate|delete|deprecated|do|body|break|case|cast|catch|class|const|continue|abstract|alias|align|asm|assert|auto|final|finally|for|foreach|foreach_reverse|function|goto|if|immutable|import|in|inout|interface|invariant|is|lazy|macro|mixin|module|new|nothrow|out|override|package|pragma|private|protected|public|pure|ref|return|scope|shared|static|struct|switch|synchronized|template|throw|try|typeid|typeof|union|unittest|version|while|with|__gshared|__traits|__vector|__parameters'
  basic_type: 'bool|byte|cdouble|cent|cfloat|char|creal|dchar|double|float|idouble|ifloat|int|ireal|long|real|short|ubyte|ucent|uint|ulong|ushort|void|wchar|string|dstring|wstring'
  language_constant: 'null|true|false|__FILE__|__FILE_FULL_PATH__|__MODULE__|__LINE__|__FUNCTION__|__PRETTY_FUNCTION__|__DATE__|__EOF__|__TIME__|__TIMESTAMP__|__VENDOR__|__VERSION__|__ctfe'
  language_variable: 'this|super'
  reserved: '{{keyword}}|{{basic_type}}|{{language_constant}}|{{language_variable}}'

  operator_overloads: 'opNeg|opCom|opPostInc|opPostDec|opCast|opAdd|opSub|opSub_r|opMul|opDiv|opDiv_r|opMod|opMod_r|opAnd|opOr|opXor|opShl|opShl_r|opShr|opShr_r|opUShr|opUShr_r|opCat|opCat_r|opEquals|opEquals|opCmp|opCmp|opCmp|opCmp|opAddAssign|opSubAssign|opMulAssign|opDivAssign|opModAssign|opAndAssign|opOrAssign|opXorAssign|opShlAssign|opShrAssign|opUShrAssign|opCatAssign|opIndex|opIndexAssign|opCall|opSlice|opSliceAssign|opPos|opAdd_r|opMul_r|opAnd_r|opOr_r|opXor_r'

  type_specialization_keyword: '__vector|function|delegate|super|return|__parameters'
  type_specialization_storage: 'struct|union|class|interface|enum'

  block_statement_loohahead: '(?={)'

contexts:
  prototype:
    - include: comment-in

  main:
    - meta_include_prototype: false
    - match: '^#!.*$'
      scope: comment.line.shebang.d
      set: main-after-shebang-in
    - match: '(?=.)'
      set: main-after-shebang-in
  main-after-shebang-in:
    - include: attribute-specifier-in
    - match: '\b(module)\s+({{identifier}})(;)'
      scope: meta.module.d
      captures:
        1: keyword.control.module.d
        2: entity.name.namespace.d
        3: punctuation.terminator.d
      set: statement-list-in
    - match: '\s'
    - match: (?=.)
      set: statement-list-in
  statement-list-in:
    - include: import-in
    - include: alias-in
    - include: class-in
    - include: interface-in
    - include: struct-in
    - include: union-in
    - include: enum-in
    - include: specification-in
    - include: conditional-declaration-in
    - include: static-foreach-in
    - include: static-assert-in
    - include: constructions-in
    - include: invariant-in
    - include: unittest-in
    - include: template-in
    - include: mixin-in
    - include: block-statement-in
    - include: conditional-in
    - include: loop-in
    - include: flow-statement-in
    - include: with-in
    - include: synchronized-in
    - include: try-in
    - include: throw-in
    - include: scope-in
    - include: asm-in
    - include: switch-in
    - include: attribute-specifier-in
    - include: statement-label-in
    - include: end-of-line-in
    - include: value-or-declaration-in
  block-statement-in:
    - match: '{{block_statement_loohahead}}'
      push: block-statement
  block-statement:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - include: statement-list-in
    - include: not-whitespace-illegal
  optional-block-statement:
    - match: '{{block_statement_loohahead}}'
      set: block-statement
    - match: '(?=[^\s])'
      pop: true
  optional-block-statement-or-label:
    - match: ':'
      scope: punctuation.separator.d
      pop: true
    - include: optional-block-statement
  comment-in:
    - match: /\*\*?
      scope: punctuation.definition.comment.d
      push:
        - meta_scope: comment.block.d
        - match: \*/
          scope: punctuation.definition.comment.d
          pop: true
    - match: (///?).*$
      scope: comment.line.double-slash.d
      captures:
        1: punctuation.definition.comment.d
    - include: nested-comment
  nested-comment:
    - match: /\+\+?
      scope: punctuation.definition.comment.d
      push:
        - meta_scope: comment.block.nested.d
        - match: \+/
          scope: punctuation.definition.comment.d
          pop: true
        - include: nested-comment
  number-in:
    - match: '{{number_lookahead}}'
      push: number
  number-opt:
    - include: floating-point-opt
    - include: integer-opt
  number:
    - include: number-opt
    - include: not-whitespace-illegal
  integer:
    - include: integer-opt
    - include: not-whitespace-illegal
  integer-opt:
    - match: '\b(0|[1-9][0-9_]*)({{integer_suffix}})?\b'
      captures:
        1: constant.numeric.integer.d
        2: storage.type.integer.d
      pop: true
    - match: '\b(0[bB])([01][01_]*)({{integer_suffix}})?\b'
      captures:
        1: storage.modifier.d
        2: constant.numeric.binary.d
        3: storage.type.integer.d
      pop: true
    - match: '\b(0[xX])({{hex_char}}(?:_|{{hex_char}})*)({{integer_suffix}})?\b'
      captures:
        1: storage.modifier.d
        2: constant.numeric.hex.d
        3: storage.type.integer.d
      pop: true
  floating-point:
    - include: floating-point-opt
    - include: not-whitespace-illegal
  floating-point-opt:
    - match: '\b(0[xX])({{hex_or_under}}*\.?{{hex_or_under}}+)([pP][+\-]?[0-9]+)({{float_suffix}})?\b'
      captures:
        1: storage.modifier.d
        2: constant.numeric.float.d
        3: constant.numeric.float.d
        4: storage.type.float.d
      pop: true
    - match: '\b(0|[1-9][0-9_]*)({{integer_float_suffix}})\b'
      captures:
        1: constant.numeric.float.d
        2: storage.type.float.d
      pop: true
    - match: '\b(0[bB])([01][01_]*)({{integer_float_suffix}})\b'
      captures:
        1: storage.modifier.d
        2: constant.numeric.float.d
        3: storage.type.float.d
      pop: true
    - match: '\b(0[xX])({{hex_char}}{{hex_or_under}}*)({{integer_float_suffix}})\b'
      captures:
        1: storage.modifier.d
        2: constant.numeric.float.d
        3: storage.type.float.d
      pop: true
    - match: '\b([0-9][0-9_]*\.[0-9][0-9_]*)({{float_exponent}})?({{float_suffix}})?\b'
      captures:
        1: constant.numeric.float.d
        2: constant.numeric.float.d
        3: storage.type.float.d
      pop: true
    - match: '\b([0-9][0-9_]*\.(?!\.|\s*[a-zA-Z]))({{float_suffix}})?'
      captures:
        1: constant.numeric.float.d
        2: storage.type.float.d
      pop: true
    - match: '(\.[0-9][0-9_]*)({{float_exponent}})?({{float_suffix}})?\b'
      captures:
        1: constant.numeric.float.d
        2: constant.numeric.float.d
        3: storage.type.float.d
      pop: true
    - match: '\b([0-9][0-9_]*)({{float_exponent}})({{float_suffix}})?\b'
      captures:
        1: constant.numeric.float.d
        2: constant.numeric.float.d
        3: storage.type.float.d
      pop: true
  character-in:
    - match: '{{character_lookahead}}'
      push: character
  character:
    - match: \'(?:({{escape_sequence}})|[^\\'])\'
      scope: string.quoted.single.d
      captures:
        1: constant.character.escape.d
      pop: true
    - match: \'[^']*\'
      scope: invalid.illegal.d
      pop: true
    - include: not-whitespace-illegal-pop
  string-in:
    - match: '{{string_lookahead}}'
      push: string
  string:
    - include: string-opt
    - include: not-whitespace-illegal
  string-opt:
    # Regular string
    - match: '"'
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.d
        - match: '(")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
        - match: '{{escape_sequence}}'
          scope: constant.character.escape.d
        - match: \\.
          scope: invalid.illegal.unknown-escape.d
    # Wysiwyg string
    - match: r"
      scope:  punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    # Alternate Wysiwyg string
    - match: "`"
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.backtick.d
        - match: '(`)({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    # Deprecated Hex string
    - match: x"
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
        - match: '{{hex_char}}\s*{{hex_char}}'
          scope: constant.character.escape.d
        - match: '[^\s]'
          scope: invalid.illegal.unknown-escape.d
    # Deliminated string with custom identifier
    - match: 'q"({{name}})(.*)$'
      scope: punctuation.definition.string.begin.d
      captures:
        2: invalid.illegal.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(^\1")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    # Nested Deliminated string
    - match: 'q"\['
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(\]")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    - match: 'q"\('
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(\)")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    - match: 'q"<'
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(>")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    - match: 'q"{'
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(}")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    # Other deliminated string
    - match: 'q"(.)'
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(\1"|\1(.))({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: invalid.illegal.d
            3: storage.type.string.d
          pop: true
    # Token string
    - match: 'q{'
      scope: string.unquoted.embedded.d punctuation.definition.string.begin.d
      set:
        - match: '}'
          scope: string.unquoted.embedded.d punctuation.definition.string.end.d
          pop: true
        - include: tokens-in
  # Purely a set of un-verified tokens, for use in token string
  tokens-in:
    - match: '\b({{keyword}})\b'
      scope: keyword.d
    - match: '\b({{basic_type}})\b'
      scope: storage.type.d
    - match: '\b({{language_constant}})\b'
      scope: constant.language.d
    - match: '\b({{language_variable}})\b'
      scope: variable.language.d
    - include: character-in
    - include: string-in
    - include: number-in
    - match: '{{name}}'
    - match: '(/|&|\||-|\+|<<|<>|>>|>>>||\*|%|\^|\^\^|~)='
      scope: keyword.operator.assignment.d
    - match: '(/|<=|>=|==|!<>=|!<=|!>=|\.\.\.|\.\.|&|&&|\||\|\||-|--|\+|\+\+|<|<<|<>|>|>>|>>>|!|!<>|!<|!>|\?|,|:|\$|\*|%|\^|\^\^|~|@|=>|#)'
      scope: keyword.operator.d
    - match: ';'
      scope: punctuation.terminator.d
    - match: '\.'
      scope: keyword.operator.d
    - match: '\('
      scope: punctuation.section.parens.begin.d
      push:
        - match: '\)'
          scope: punctuation.section.parens.end.d
          pop: true
        - include: tokens-in
    - match: '\['
      scope: punctuation.section.brackets.begin.d
      push:
        - match: '\]'
          scope: punctuation.section.brackets.end.d
          pop: true
        - include: tokens-in
    - match: '\{'
      scope: punctuation.section.braces.begin.d
      push:
        - match: '\}'
          scope: punctuation.section.braces.end.d
          pop: true
        - include: tokens-in
    - include: not-whitespace-illegal
  attribute-specifier-in:
    - match: '{{attribute_lookahead}}'
      push: [attribute-specifier-after, attribute]
    - match: '\b({{type_qualifier}})\b(?!\s*\()'
      scope: storage.modifier.d
      push: attribute-specifier-after
  attribute-specifier-after:
    - match: ':'
      scope: punctuation.separator.d
      pop: true
    - include: end-of-line
    - match: '{{block_statement_loohahead}}'
      set: block-statement
    - match: '{{attribute_lookahead}}'
      push: attribute
    - match: '\b({{type_qualifier}})\b(?!\s*\()'
      scope: storage.modifier.d
    - match: '(?=\b({{reserved}})\b)'
      pop: true
    - match: '{{construction_lookahead}}'
      set: construction
    - match: '(?=\b{{name}}\b\s*[,=\()])'
      set: [function-or-variable-after-type]
    - match: '(?=[^\s])'
      set: [function-or-variable-after-type, type]
  parameter-attribute-in:
    - match: '{{attribute_lookahead}}'
      push: [parameter-attribute-after, attribute]
    - match: '\b({{parameter_attribute}})\b'
      scope: storage.modifier.d
      push: parameter-attribute-after
    - match: '\b({{type_qualifier}})\b(?!\s*\()'
      scope: storage.modifier.d
      push: parameter-attribute-after
  parameter-attribute-after:
    - match: '{{attribute_lookahead}}'
      set: [parameter-attribute-after, attribute]
    - match: '\b({{parameter_attribute}})\b'
      scope: storage.modifier.d
      set: parameter-attribute-after
    - match: '\b({{type_qualifier}})\b(?!\s*\()'
      scope: storage.modifier.d
      set: parameter-attribute-after
    - match: '(?=[^\s])'
      pop: true
  function-attribute-in:
    - include: attribute-in
    - match: '\b({{type_qualifier}})\b'
      scope: storage.modifier.d
  attribute-in:
    - match: '{{attribute_lookahead}}'
      push: attribute
  attribute:
    - match: '\b({{attributes}})\b'
      scope: storage.modifier.d
      pop: true
    - match: '(@)'
      scope: punctuation.definition.annotation.begin.d
      set: at-attribute
    - match: '\b(extern)\s*(\()'
      captures:
        1: keyword.other.external.d
        2: punctuation.definition.annotation.begin.d
      set: extern-attribute
    - match: '\b(align)\b'
      scope: keyword.other.alignment.d
      set:
        - match: '\('
          scope: punctuation.definition.annotation.begin.d
          set: [align-attribute-after, value]
        - match: '(?=[^\s])'
          pop: true
    - match: '\b(deprecated)\b'
      scope: keyword.other.deprecated.d
      set:
        - match: '\('
          scope: punctuation.definition.annotation.begin.d
          set: [deprecated-attribute-after, value]
        - match: '(?=[^\s])'
          pop: true
    - match: '\b(private|protected|public|export)\b'
      scope: storage.modifier.access-control.d
      pop: true
    - match: '\b(package)\s*(\()'
      captures:
        1: storage.modifier.access-control.d
        2: punctuation.definition.annotation.begin.d
      set:
        - match: '{{identifier}}'
          scope: variable.other.constant.d
        - match: '\)'
          scope: punctuation.definition.annotation.end.d
          pop: true
        - include: not-whitespace-illegal
    - match: '\b(package)\b'
      scope: storage.modifier.access-control.d
      pop: true
    - match: '\b(pragma)\b'
      scope: keyword.other.pragma.d
      set:
        - match: '\('
          scope: punctuation.definition.annotation.begin.d
          set: pragma-attribute
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal-pop
  at-attribute:
    - match: '({{at_attributes}})\b'
      scope: storage.attribute.d
      pop: true
    - match: '\('
      scope: punctuation.definition.annotation.begin.d
      set: [uda-after, value-list]
    - match: '({{name}})\s*(\()'
      captures:
        1: storage.type.d
        2: punctuation.definition.annotation.begin.d
      set: [uda-after, value-list]
    - match: '({{name}})\b'
      scope: storage.type.d
      pop: true
  uda-after:
    - match: '\)'
      scope: punctuation.definition.annotation.end.d
      pop: true
    - include: not-whitespace-illegal
  extern-attribute:
    - match: '(C\+\+|C|D|Windows|System|Objective-C)'
      scope: string.other.d
    - match: '{{identifier}}'
      scope: string.other.d
    - match: ','
      scope: punctuation.separator.sequence.d
    - match: '\)'
      scope: punctuation.definition.annotation.end.d
      pop: true
    - include: not-whitespace-illegal
  align-attribute-after:
    - match: '\)'
      scope: punctuation.definition.annotation.end.d
      pop: true
  deprecated-attribute-after:
    - match: '\)'
      scope: punctuation.definition.annotation.end.d
      pop: true
  pragma-attribute:
    - match: '\b({{name}})\b'
      scope: variable.function.d
      set:
        - match: '\)'
          scope: punctuation.definition.annotation.end.d
          pop: true
        - match: ','
          scope: punctuation.separator.sequence.d
          set: [pragma-attribute-after, value-list]
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal-pop
  pragma-attribute-after:
    - match: '\)'
      scope: punctuation.definition.annotation.end.d
      pop: true
    - include: not-whitespace-illegal-pop
  import-in:
    - match: '\b(import)(?!\s*\()\b'
      scope: keyword.control.import.d
      push: import-list
  import-list:
    - match: '\b(?:({{std_identifier}})|({{identifier}}))\b'
      captures:
        1: support.module.d
        2: variable.other.constant.d
      set:
        - match: ':'
          scope: punctuation.separator.import-binding.d
          set: import-binding-list
        - match: ';'
          scope: punctuation.terminator.d
          pop: true
        - match: ','
          scope: punctuation.separator.sequence.d
          set: import-list
        - match: '='
          scope: keyword.operator.assignment.d
          set:
            - match: '\b(?:({{std_identifier}})|({{identifier}}))\b'
              captures:
                1: support.module.d
                2: variable.other.constant.d
              set:
                - match: ';'
                  scope: punctuation.terminator.d
                  pop: true
                - match: ','
                  scope: punctuation.separator.sequence.d
                  set: import-list

                - include: not-whitespace-illegal
            - include: not-whitespace-illegal
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  import-binding-list:
    - match: '\b({{identifier}})\b'
      scope: variable.other.constant.d
      set:
        - match: ';'
          scope: punctuation.terminator.d
          pop: true
        - match: ','
          scope: punctuation.separator.sequence.d
          set: import-binding-list
        - match: '='
          scope: keyword.operator.assignment.d
          set:
            - match: '\b({{identifier}})\b'
              scope: variable.other.constant.d
              set:
                - match: ';'
                  scope: punctuation.terminator.d
                  pop: true
                - match: ','
                  scope: punctuation.separator.sequence.d
                  set: import-binding-list

                - include: not-whitespace-illegal
            - include: not-whitespace-illegal
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  type:
    - match: '\b({{type_qualifier}})\b'
      scope: storage.modifier.d
      set:
        - match: '\('
          scope: punctuation.section.group.begin.d
          set: [basic-type2, type-storage-modifier-end, type]
        - match: '(?=[^\s])'
          set: type
    - match: '(?=[^\s])'
      set: basic-type
  type-storage-modifier-end:
    - match: '\)'
      scope: punctuation.section.group.end.d
      pop: true
    - include: not-whitespace-illegal
    # - match: '(?=[^\s])'
    #   scope: invalid.illegal.d
  basic-type:
    - match: '\btypeof\b'
      scope: keyword.other.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [basic-type2, basic-type2-after-parens, typeof-value]
    - match: '\bauto\b'
      scope: keyword.other.d
      pop: true
    - match: '{{identifier_ref}}'
      scope: storage.type.d
      set: basic-type2
    # TODO: More basic types
    - match: '(?=[^\s])'
      pop: true
  basic-type2:
    - match: '\*'
      scope: keyword.operator.pointer.d
    - match: '\['
      scope: punctuation.section.brackets.begin.d
      push: [basic-type2-after-brackets, value-list]
    - match: '\b(delegate|function)\b'
      scope: keyword.other.d
      set: [basic-type2, function-type]
    - match: '!'
      scope: keyword.operator.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [basic-type2, basic-type2-after-parens, value-list]
        - match: '(?=[^\s])'
          set: value
    - match: '\.(?!\.\.)'
      scope: storage.type.d
      set:
        - match: '\b({{name}})\b'
          scope: storage.type.d
          set: basic-type2
    - match: '(?=[^\s])'
      pop: true
  basic-type2-after-brackets:
    - match: '\]'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal-pop
  basic-type2-after-parens:
    - match: '\)'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal-pop
  typeof-value:
    - match: '\breturn\b'
      scope: keyword.other.d
      pop: true
    - include: value

  function-type:
    - match: (?=\()
      set: [function-type-after, function-type-argument-definition-list]
    - include: not-whitespace-illegal-pop
  function-type-after:
    - include: function-attribute-in
    - match: '(?=[^\s])'
      pop: true
  # Function type arguments are slightly different to regular function
  # arguments. With regular arguments a standalone "name" is asssumed to be a
  # template argument, but with function types they must be a type.
  function-type-argument-definition-list:
    - match: '\('
      scope: punctuation.section.group.begin.d
      set:
        - match: '\)'
          scope: punctuation.section.group.end.d
          pop: true
        - match: '(?=[^\s])'
          set: [function-type-argument, function-type-argument-type]
    - include: not-whitespace-illegal
  function-type-argument-type:
    - include: parameter-attribute-in
    - match: '\.\.\.'
      scope: keyword.operator.d
      pop: true
    - include: type
  function-type-argument:
    - match: '\b{{name}}\b'
      scope: variable.parameter.d
      set:
        - match: '\.\.\.'
          scope: keyword.operator.d
        - match: ','
          scope: punctuation.separator.sequence.d
          set: [function-type-argument, function-type-argument-type]
        - match: '='
          scope: keyword.operator.assignment.d
          push: value
        - match: ':'
          scope: keyword.operator.assignment.d
          push: value
        - match: '\)'
          scope: punctuation.section.group.end.d
          pop: true
        - include: not-whitespace-illegal
    - match: ','
      scope: punctuation.separator.sequence.d
      push: function-type-argument-type
    - match: '\)'
      scope: punctuation.section.group.end.d
      pop: true
    - include: not-whitespace-illegal

  function-or-variable-after-type:
    - match: '\b({{operator_overloads}})\s*(?=\(|$)'
      captures:
        1: keyword.operator.overload.d
      set: function-definition-begin
    - match: '\b({{name}})\s*(?=\(|$)'
      captures:
        1: entity.name.function.d
      set: function-definition-begin
    - match: '(?=[^\s])'
      set: variable-definition-begin
  function-definition-begin:
    - match: '(?=\()'
      set: [function-definition-after-first-argument-list, function-argument-definition-list]
    - include: not-whitespace-illegal
  function-definition-after-first-argument-list:
    - match: '='
      scope: keyword.operator.assignment.d
      set: [expect-end-of-line, value]
    - match: '(?=\()'
      set: [function-definition-after-arguments, function-argument-definition-list]
    - include: function-definition-after-arguments
  function-definition-after-arguments:
    - include: function-attribute-in
    - match: '\bif\b'
      scope: keyword.control.conditional.d
      set: [function-definition-after-condition, condition]
    - match: '(?=[^\s])'
      set: function-definition-after-condition
  function-definition-after-condition:
    - match: '\b(in|out)\b'
      scope: keyword.control.conditional.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [function-contract-after-value, value]
        - match: '{{block_statement_loohahead}}'
          set: [function-definition-after-condition, block-statement]
        - include: not-whitespace-illegal
    - match: '\bdo\b'
      scope: keyword.other.d
      set: block-statement
    - match: '{{block_statement_loohahead}}'
      set: block-statement
    - include: expect-end-of-line
  function-contract-after-value:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: function-definition-after-condition
    - include: not-whitespace-illegal
  function-argument-definition-list:
    - match: '\('
      scope: punctuation.section.group.begin.d
      set: function-argument-definition-list-content
    - include: not-whitespace-illegal
  function-argument-definition-list-content:
    - match: '\)'
      scope: punctuation.section.group.end.d
      pop: true
    - match: '(?=[^\s])'
      set: [function-argument, function-argument-or-type]
  function-argument-or-type:
    - include: parameter-attribute-in
    - match: '\.\.\.'
      scope: keyword.operator.d
      pop: true
    - match: '(?={{name}}\s*([,=:\)]|\.\.\.))'
      pop: true
    - include: type
  function-argument:
    - match: '\b{{name}}\b'
      scope: variable.parameter.d
      set:
        - match: '\.\.\.'
          scope: keyword.operator.d
        - match: ','
          scope: punctuation.separator.sequence.d
          set: [function-argument, function-argument-or-type]
        - match: '='
          scope: keyword.operator.assignment.d
          push: value
        - match: ':'
          scope: keyword.operator.assignment.d
          push: value
        - match: '\)'
          scope: punctuation.section.group.end.d
          pop: true
        - include: not-whitespace-illegal
    - match: ','
      scope: punctuation.separator.sequence.d
      push: type
    - match: '\)'
      scope: punctuation.section.group.end.d
      pop: true
    - include: not-whitespace-illegal
  optional-template-body-block:
    - match: '{{block_statement_loohahead}}'
      set: block-statement
    - match: '\bif\b'
      scope: keyword.control.conditional.d
      set: [block-statement, condition]
    - include: end-of-line
    - include: not-whitespace-illegal
  variable-definition-begin:
    - match: '\b{{name}}\b'
      scope: variable.other.d
      set:
        - match: '(?=,)'
          set: variable-definition-after
        - match: '='
          scope: keyword.operator.assignment.d
          set: [variable-definition-after, value]
        - include: expect-end-of-line
    - include: not-whitespace-illegal-pop
  variable-definition-after:
    - match: ','
      scope: punctuation.separator.sequence.d
      set: variable-definition-begin
    - include: expect-end-of-line
  value-or-declaration-in:
    - match: '\s'
    - match: '{{definitely_value_lookahead}}'
      push: [maybe-end-of-line, value-list]
    - match: '{{definitely_declaration_lookahead}}'
      push: [function-or-variable-after-type, type]
    - match: '(?=[^\s])'
      push: [maybe-end-of-line, first-value]
  value-or-declaration:
    - match: '\s'
    - match: '{{definitely_value_lookahead}}'
      set: value-list
    - match: '{{definitely_declaration_lookahead}}'
      set: [function-or-variable-after-type, type]
    - match: '(?=[^\s])'
      set: first-value
  # The first value in an expression ending with a * is always a function/variable definition, otherwise it could be either
  # We highlight as if it were a value, but switch to a definition if it turns out to be one
  first-value:
    - match: '\btypeof\b'
      scope: keyword.other.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [first-value-parens-after, typeof-value]
    - match: '\b({{basic_type}})\b'
      scope: storage.type.d
      set: first-value-after
    # Check for simple function call to highlight the identifier correctly
    - match: '(?={{identifier_ref}}\s*\()'
      set: [value-list-after, value]
    - match: '{{identifier_ref}}'
      scope: variable.other.d
      set: first-value-after
    - match: '(?=[^\s])'
      set: value
  first-value-after:
    - match: '\.'
      scope: punctuation.accessor.dot.d
      set:
        - match: '{{identifier}}'
          scope: variable.other.d
          set: first-value-after
    - match: '!(?!=)'
      scope: keyword.operator.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [first-value-parens-after, value-list]
        - match: '(?=[^\s])'
          set: first-value
    - match: '\['
      scope: punctuation.section.brackets.begin.d
      set: [first-value-bracket-after, value-list]
    - match: ','
      scope: punctuation.separator.sequence.d
      set: value-list
    - match: '(?=\*(?!=)(?!{{name}}\s*[^,=\(]))'
      set: [function-or-variable-after-type, basic-type2]
    - match: '(?=\b(function|delegate)\b)'
      set: [value-list-after, value]
      scope: keyword.other.d
    - match: '(?={{name}}\s*([;=\(,]|$))'
      set: function-or-variable-after-type
    - match: '(?=[^\s])'
      set: [value-list-after, value-after]
  first-value-bracket-after:
    - match: '\]'
      scope: punctuation.section.brackets.end.d
      set: first-value-after
    - include: not-whitespace-illegal
  first-value-parens-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: first-value-after
    - include: not-whitespace-illegal
  value:
    - include: attribute-in
    - match: '!'
      scope: keyword.operator.logical.d
      set: value
    - match: '~'
      scope: keyword.operator.bitwise.d
      set: value
    - match: '(\+\+|--|\+|-)'
      scope: keyword.operator.arithmetic.d
      set: value
    - match: '(\*|&)'
      scope: keyword.operator.bitwise.d
      set: value
    - match: '\bcast\b'
      scope: keyword.operator.word.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [cast-after, type]
        - include: not-whitespace-illegal
    - match: '\bdelete\b'
      scope: keyword.operator.word.d
      set: value
    - match: '\bnew\b'
      scope: keyword.operator.word.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [new-after-parens, value-list]
        - match: '(?=[^\s])'
          set: new-after
    - match: '\bimport\b'
      scope: keyword.declaration.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [value-parens-after, value]
        - include: not-whitespace-illegal
    - match: '\bmixin\b'
      scope: keyword.control.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [value-parens-after, value-list]
        - include: not-whitespace-illegal
    - match: '\bis\b'
      scope: keyword.other.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [value-after, is-after-type, type]
        - include: not-whitespace-illegal-pop
    - match: '\btypeof\b'
      scope: keyword.other.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [value-parens-after, typeof-value]
    - match: '\b__traits\b'
      scope: keyword.other.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set:
            - match: '\b{{name}}\b'
              scope: variable.function.d
              set:
                - match: ','
                  scope: punctuation.separator.sequence.d
                  set: [value-parens-after, value-list]
    - match: '\b(function|delegate)\b'
      scope: keyword.other.d
      set:
        - match: '(?=\()'
          set: [value-after, function-definition-begin]
        - match: '(?=[^\s])'
          set: [value-after, function-definition-begin, type]
    - match: '(\()\s*(\))'
      captures:
        1: punctuation.section.parens.begin.d
        2: punctuation.section.parens.end.d
      set:
        - include: function-attribute-in
        - match: '=>'
          scope: keyword.operator.lambda.d
          set: value
        - match: '(?={)'
          set: [value-after, block-statement]
        - include: not-whitespace-illegal-pop
    - match: '\('
      scope: punctuation.section.group.begin.d
      set:
        - match: '{{parameter_attribute_lookahead}}'
          set: [value-group-after-parens, function-argument, function-argument-or-type]
        - match: '(?=[^\s])'
          set: [value-group-after, value]
    - match: '(?={)'
      set: [value-after, block-statement]
    - match: '\['
      scope: punctuation.section.brackets.begin.d
      set: [value-bracket-after, value-array-list]
    - match: '{{type_qualifier_lookahead}}'
      set: [value-after, type]
    - match: '{{number_lookahead}}'
      set: [value-after, number]
    - match: '{{character_lookahead}}'
      set: [value-after, character]
    - match: '{{string_lookahead}}'
      set: [value-after, string]
    - match: '\b({{language_constant}})\b'
      scope: constant.language.d
      set: value-after
    - match: '\b({{language_variable}})\b'
      scope: variable.language.d
      set: value-after
    - match: '\$'
      scope: variable.language.d
      set: value-after
    - match: '\b({{basic_type}})\b'
      scope: storage.type.d
      set: value-after
    - match: '\b({{name}})\s*(=>)'
      captures:
        1: variable.parameter.d
        2: keyword.operator.lambda.d
      set: value
    - match: '{{identifier_ref}}(?=\s*\()'
      scope: variable.function.d
      set: value-after
    - match: '{{identifier_ref}}'
      scope: variable.other.d
      set: value-after
    - include: not-whitespace-illegal
  cast-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: value
    - include: not-whitespace-illegal
  new-after-parens:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: new-after
    - include: not-whitespace-illegal
  new-after:
    - match: '\bclass\b'
      scope: storage.type.class.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [new-anonymous-after-args, value-list]
        - match: '(?={)'
          set: optional-template-body-block
        - match: '(?=[^\s])'
          set: [optional-template-body-block, base-class-list]
    - match: (?=[^\s])
      set: [new-after-named, type]
    - include: not-whitespace-illegal
  new-after-named:
    - match: '\('
      scope: punctuation.section.parens.begin.d
      set: [value-parens-after, value-list]
    - match: (?=[^\s])
      set: value-after
  new-anonymous-after-args:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set:
        - match: '(?={)'
          set: optional-template-body-block
        - match: '(?=[^\s])'
          set: [optional-template-body-block, base-class-list]
    - include: not-whitespace-illegal
  is-after-type:
    - match: '\b({{name}})\b'
      scope: variable.parameter.d
    - match: '\)'
      scope: punctuation.section.parens.end.d
      pop: true
    - match: '\=\=|:'
      scope: keyword.operator.logical.d
      set: [is-after, type-specialization]
  is-after:
    - match: ','
      scope: punctuation.separator.sequence.d
      set: function-argument-definition-list-content
    - match: '\)'
      scope: punctuation.section.parens.end.d
      pop: true
    - include: not-whitespace-illegal
  type-specialization:
    - match: '\b(?:({{type_specialization_storage}})|({{type_specialization_keyword}}))\b'
      captures:
        1: storage.type.d
        2: keyword.d
      set:
        - match: '(?=\))'
          pop: true
        - include: type-specialization
    - match: '(?=[^\s])'
      set: type
    - include: not-whitespace-illegal-pop
  value-group-after:
    - match: '\b(function|delegate)\b'
      scope: keyword.other.d
      set: [value-group-after, basic-type2, function-type]
    - match: '\)'
      scope: punctuation.section.group.end.d
      set: value-group-after-parens
    - match: '\b({{name}})\b'
      scope: variable.parameter.d
      set: value-group-after
    - match: ','
      scope: punctuation.separator.sequence.d
      set: [value-group-after-parens, function-argument, function-argument-or-type]
    - match: '\.\.\.'
      scope: keyword.operator.d
    - include: not-whitespace-illegal
  value-group-after-parens:
    - include: function-attribute-in
    - match: (?={)
      set: [value-after, block-statement]
    - match: '=>'
      scope: keyword.operator.lambda.d
      set: value
    - match: (?=[^\s])
      set: value-after
  value-after:
    - match: '\.\.(?!\.)'
      scope: keyword.operator.d
      set: value
    - match: '\.(?!\.\.)'
      scope: punctuation.accessor.dot.d
      set:
        - match: '{{identifier}}'
          scope: variable.other.d
          set: value-after
    - match: '\('
      scope: punctuation.section.parens.begin.d
      set: [value-parens-after, value-list]
    - match: '\['
      scope: punctuation.section.brackets.begin.d
      set: [value-bracket-after, value-list]
    - match: '(\+\+|--)'
      scope: keyword.operator.arithmetic.d
      set: value-after
    - match: '(&&|\|\|)'
      scope: keyword.operator.logical.d
      set: value
    - match: '(\+|-|/|%|\*|&|\||\^\^|\^|~|<<|>>>|>>)='
      scope: keyword.operator.assignment.d
      set: value
    - match: '(\+|\-|~|/|%|\^\^)'
      scope: keyword.operator.arithmetic.d
      set: value
    - match: '(<<|>>>|>>|\||\^|&)'
      scope: keyword.operator.bitwise.d
      set: value
    - match: '(==|!=|\bis\b|!is\b|<=|<|>=|>|\bin\b|!in\b)'
      scope: keyword.operator.comparison.d
      set: value
    - match: '='
      scope: keyword.operator.assignment.d
      set: value
    - match: '!'
      scope: keyword.operator.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [value-parens-after, value-list]
        - match: '(?=[^\s])'
          set: value
    # This can also be a pointer in some situations
    - match: \*
      scope: keyword.operator.arithmetic.d
      set:
        - match: '(?=\)|,|;)'
          pop: true
        - match: '(?=[^\s])'
          set: value
    - match: '\?'
      scope: keyword.operator.logical.d
      set: [value-condition-after, value]
    - match: '(?=function|delegate)'
      set: [value-after, basic-type2]
    - match: '(?=[^\s])'
      pop: true
  value-condition-after:
    - match: ':'
      scope: keyword.operator.logical.d
      set: value
    - include: not-whitespace-illegal
  value-parens-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: value-after
    - include: not-whitespace-illegal
  value-bracket-after:
    - match: '\]'
      scope: punctuation.section.brackets.end.d
      set: value-after
    - include: not-whitespace-illegal
  value-list:
    - match: '(?=\)|}|]|;)'
      pop: true
    - match: '(?=[^\s])'
      set: [value-list-after, value]
  value-list-after:
    - match: '(?=\)|}|]|;)'
      pop: true
    - match: ','
      scope: punctuation.separator.sequence.d
      set: value-list
    - include: not-whitespace-illegal
  value-array-list:
    - match: '(?=\])'
      pop: true
    - match: '(?=[^\s])'
      set: [value-array-list-after, value]
  value-array-list-after:
    - match: ':'
      scope: punctuation.separator.mapping.key-value.d
      set: [value-array-list-after-value, value]
    - include: value-array-list-after-value
  value-array-list-after-value:
    - match: '(?=\])'
      pop: true
    - match: ','
      scope: punctuation.separator.sequence.d
      set: value-array-list
    - include: not-whitespace-illegal
  alias-in:
    - match: '\b(alias)\s+({{identifier}})\s+(this)(;)'
      captures:
        1: keyword.control.alias.d
        2: variable.d
        3: keyword.control.alias.d
        4: punctuation.terminator.d
    - match: '\b(alias)\b'
      scope: keyword.control.alias.d
      push:
        - match: '{{attribute_lookahead}}'
          set: [alias-old, type]
        - match: '\b({{name}})\s*(?=\(|=)'
          captures:
            1: entity.name.type.d
          set: alias-new
        - match: '{{type_look_ahead}}'
          set: [alias-old, type]
        - include: not-whitespace-illegal
  alias-old:
    - match: '\b({{name}})\b'
      scope: entity.name.type.d
      set:
        - match: ','
          scope: punctuation.separator.sequence.d
          set: alias-old
        - include: end-of-line
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  alias-new:
    - match: '(?=\()'
      push: function-argument-definition-list
    - match: '(?==)'
      set: alias-new-assign
    - include: not-whitespace-illegal
  alias-new-assign:
    - match: '='
      scope: keyword.operator.assignment.d
      set: [alias-new-after-type, value]
    - include: not-whitespace-illegal
  alias-new-after-type:
    - include: end-of-line
    - match: ','
      scope: punctuation.separator.sequence.d
      set:
        - match: '\b{{name}}\b'
          scope: entity.name.type.d
          set: alias-new
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  # TODO: Templated aggregates!!
  class-in:
    - match: '\b(class)\b'
      scope: storage.type.class.d
      push:
        - match: '\b({{name}})\b'
          scope: entity.name.class.d
          set:
            - match: '(?=\()'
              set: [class-after, function-argument-definition-list]
            - match: '(?=[^\s])'
              set: class-after
        - include: not-whitespace-illegal
  class-after:
    - include: end-of-line
    - match: ':'
      scope: punctuation.separator.mapping.d
      set: [optional-template-body-block, base-class-list]
    - match: '(?=[^\s])'
      set: optional-template-body-block
  base-class-list:
    - match: '{{type_look_ahead}}'
      set: [base-class-list-after, basic-type]
    - include: not-whitespace-illegal
  base-class-list-after:
    - match: ','
      scope: punctuation.separator.sequence.d
      set: base-class-list
    - match: '(?={)'
      pop: true
    - include: not-whitespace-illegal
  interface-in:
    - match: '\b(interface)\b'
      scope: storage.type.interface.d
      push:
        - match: '\b({{name}})\b'
          scope: entity.name.interface.d
          set:
            - match: '(?=\()'
              set: [interface-after, function-argument-definition-list]
            - match: '(?=[^\s])'
              set: interface-after
        - include: not-whitespace-illegal
  interface-after:
    - include: end-of-line
    - match: ':'
      scope: punctuation.separator.mapping.d
      set: [optional-template-body-block, base-class-list]
    - match: '(?={)'
      set: optional-template-body-block
    - include: not-whitespace-illegal
  struct-in:
    - match: '\b(struct)\b'
      scope: storage.type.struct.d
      push:
        - match: '\b({{name}})\b'
          scope: entity.name.struct.d
          set:
            - match: '(?=\()'
              set: [optional-template-body-block, function-argument-definition-list]
            - match: '(?=[^\s])'
              set: optional-template-body-block
        - match: '(?={)'
          set: optional-template-body-block
        - include: not-whitespace-illegal
  union-in:
    - match: '\b(union)\b'
      scope: storage.type.union.d
      push:
        - match: '\b({{name}})\b'
          scope: entity.name.union.d
          set:
            - match: '(?=\()'
              set: [optional-template-body-block, function-argument-definition-list]
            - match: '(?=[^\s])'
              set: optional-template-body-block
        - match: '(?={)'
          set: optional-template-body-block
        - include: not-whitespace-illegal
  enum-in:
    - match: '\b(enum)\b'
      scope: storage.type.enum.d
      push:
        - match: '(?=\b({{basic_type}})\b)'
          push: type
        - match: '{{type_qualifier_lookahead}}'
          push: type
        - match: '\b({{name}})(?=\s*({|:|=|\(|;|$))\b'
          scope: entity.name.enum.d
          set: enum-after
        - match: ':'
          scope: punctuation.separator.mapping.d
          set: [enum-body, type]
        - match: '(?={)'
          set: anonymous-enum-body
        - match: '(?=[^\s])'
          push: type
  enum-after:
    - include: end-of-line
    - match: '(?={)'
      set: enum-body
    - match: ':'
      scope: punctuation.separator.mapping.d
      set: [enum-body, type]
    - match: '(?==|\()'
      set: enum-assignment
    - match: '\b({{name}})\b'
      scope: entity.name.enum.d
    - include: expect-end-of-line
  enum-body:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - match: '(?=\b({{name}})\b)'
          push: enum-member
    - include: not-whitespace-illegal
  enum-assignment:
    - match: '='
      scope: keyword.operator.assignment.d
      set: [enum-assignment-after, value]
    - match: '(?=\()'
      push: function-argument-definition-list
    - include: not-whitespace-illegal-pop
  enum-assignment-after:
    - include: end-of-line
    - match: ','
      scope: punctuation.separator.sequence.d
      set:
        - match: '\b({{name}})\b'
          scope: entity.name.enum.d
          set: enum-assignment
        - include: not-whitespace-illegal-pop
    - include: not-whitespace-illegal-pop
  anonymous-enum-body:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - include: attribute-in
        - match: '(?=\b({{name}})\s*(=|,|}|$))'
          push: enum-member
        - match: '{{type_look_ahead}}'
          push: [enum-member, type]
    - include: not-whitespace-illegal
  enum-member:
    - match: '\b({{name}})\b'
      scope: entity.name.constant.d
      set:
        - match: '='
          scope: keyword.operator.assignment.d
          set: [enum-member-after, value]
        - match: ','
          scope: punctuation.separator.sequence.d
          pop: true
        - match: '(?=})'
          pop: true
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  enum-member-after:
    - match: ','
      scope: punctuation.separator.sequence.d
      pop: true
    - match: '(?=})'
      pop: true
    - include: not-whitespace-illegal-pop
  conditional-declaration-in:
    - match: '\b(version)\b'
      scope: keyword.control.conditional.d
      push: [optional-block-statement-or-label, version-condition]
    - match: '\b(debug)\b'
      scope: keyword.control.conditional.d
      push: [optional-block-statement-or-label, debug-condition]
  version-condition:
    - match: '\('
      scope: punctuation.section.brackets.begin.d
      set:
        - match: '\b(unittest|assert)\b'
          scope: keyword.d
          set: version-condition-end
        - match: '\b({{name}})\b'
          scope: constant.other.d
          set: version-condition-end
        - match: '{{integer_lookahead}}'
          set: [version-condition-end, integer]
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  version-condition-end:
    - match: '\)'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal
  debug-condition:
    - match: '\('
      scope: punctuation.section.brackets.begin.d
      set:
        - match: '\b({{name}})\b'
          scope: constant.other.d
          set: version-condition-end
        - match: '{{integer_lookahead}}'
          set: [version-condition-end, integer]
        - include: not-whitespace-illegal
    - match: '(?=[^\s])'
      pop: true
  static-foreach-in:
    - match: '\b(static)\s+(foreach|foreach_reverse)\b'
      captures:
        1: keyword.control.flow.d
        2: keyword.control.flow.d
      push: [optional-block-statement, foreach-arguments]
  static-assert-in:
    - match: '\b(static)\s+(assert)\b'
      captures:
        1: keyword.control.conditional.d
        2: keyword.control.conditional.d
      push: [expect-end-of-line, assert-arguments]
  constructions-in:
    - match: '{{construction_lookahead}}'
      push: construction
  construction:
    # Post-blit constructor
    - match: '\b(this)\s*(\()\s*(this)\s*(\))'
      captures:
        1: entity.name.function.post-blit.d
        2: punctuation.section.group.begin.d
        3: variable.language.d
        4: punctuation.section.group.end.d
      set: function-definition-after-arguments
    - match: '\b(this)\s*(?=\(|$)'
      captures:
        1: entity.name.function.constructor.d
        2: punctuation.section.group.begin.d
      set: constructor-argument-list
    - match: '(~\s*this)\s*(\()\s*(\))'
      captures:
        1: entity.name.function.destructor.d
        2: punctuation.section.group.begin.d
        3: punctuation.section.group.end.d
      set: function-definition-after-arguments
    - include: not-whitespace-illegal-pop
  # This could either be function/template parameters or arguments. Assume
  # arguments and switch to parameters when possible
  constructor-argument-list:
    - match: '\('
      scope: punctuation.section.group.begin.d
      set:
        - match: '\)'
          scope: punctuation.section.group.end.d
          set: function-definition-after-first-argument-list
        - match: '{{parameter_attribute_lookahead}}'
          set: [function-definition-after-first-argument-list, function-argument-definition-list-content]
        - match: '(?=[^\s])'
          set: [constructor-argument-list-after-value, value]
    - include: not-whitespace-illegal-pop
  constructor-argument-list-after-value:
    - match: ','
      scope: punctuation.separator.sequence.d
      set: [constructor-argument-list-after-value, value]
    - match: '\)'
      scope: punctuation.section.group.end.d
      set: function-definition-after-first-argument-list
    - match: '(?=[^\s])'
      set: [function-definition-after-first-argument-list, function-argument]
  invariant-in:
    - match: '\b(invariant)\b'
      scope: keyword.control.flow.d
      push:
        - match: '(?=\()'
          set: [invariant-block, assert-arguments]
        - match: '(?={)'
          set: invariant-block
        - include: not-whitespace-illegal
  invariant-block:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
      - match: '}'
        scope: punctuation.section.block.end.d
        pop: true
      - include: statement-list-in
    - match: ';'
      scope: punctuation.terminator.d
      pop: true
    - include: not-whitespace-illegal
  unittest-in:
    - match: '\b(unittest)\b'
      scope: keyword.control.conditional.d
      push:
        - match: '{'
          scope: punctuation.section.block.begin.d
          set:
            - match: '}'
              scope: punctuation.section.block.end.d
              pop: true
            - include: statement-list-in
        - include: not-whitespace-illegal
  specification-in:
    - match: '\b(version|debug)\s*(=)'
      captures:
        1: keyword.control.conditional.d
        2: keyword.operator.assignment.d
      push:
        - match: '\b{{name}}\b'
          scope: entity.name.constant.d
          set: expect-end-of-line
        - match: '{{integer_lookahead}}'
          set: [expect-end-of-line, integer]
        - include: not-whitespace-illegal
  template-in:
    - match: '\b(template)\b'
      scope: storage.type.d
      push: template
  template:
    - match: '\b({{name}})\b'
      scope: entity.name.template.d
      set: template-definition-begin
    - include: not-whitespace-illegal
  template-definition-begin:
    - match: '(?=\()'
      set: [optional-template-body-block, function-argument-definition-list]
    - include: not-whitespace-illegal
  mixin-in:
    - match: '\b(mixin)\s+(template)\b'
      captures:
        1: keyword.control.d
        2: storage.type.d
      push: template
    - match: '\b(mixin)(?!\s*\()'
      scope: keyword.control.d
      push: [mixin-after, value]
  mixin-after:
    - match: '\b({{name}})\b'
      scope: variable.other.d
      set: expect-end-of-line
    - include: expect-end-of-line
  statement-label-in:
    - match: '\b({{name}})\s*(:)'
      captures:
        1: entity.name.label.d
        2: punctuation.separator.d
  conditional-in:
    - match: '\bif\b'
      scope: keyword.control.conditional.d
      push: [optional-block-statement-or-label, condition]
    - match: '\belse\b'
      scope: keyword.control.conditional.d
      push: optional-block-statement-or-label
  loop-in:
    - match: '\bwhile\b'
      scope: keyword.control.flow.d
      push: [optional-block-statement, condition]
    - match: '\bdo\b'
      scope: keyword.control.flow.d
      push: optional-block-statement
    - match: '\bfor\b'
      scope: keyword.control.flow.d
      push: [optional-block-statement, for-arguments]
    - match: '\b(foreach|foreach_reverse)\b'
      scope: keyword.control.flow.d
      push: [optional-block-statement, foreach-arguments]
  flow-statement-in:
    - match: '\b(continue|break)\b'
      scope: keyword.control.flow.d
      push:
        - match: \b{{name}}\b
          scope: variable.other.constant.d
          set: expect-end-of-line
        - include: expect-end-of-line
    - match: '\breturn\b'
      scope: keyword.control.flow.d
      push:
        - include: end-of-line
        - match: '(?=[^\s])'
          set: [expect-end-of-line, value]
    - match: '\bgoto\b'
      scope: keyword.control.flow.d
      push:
        - match: '\bdefault\b'
          scope: keyword.control.flow.d
          set: expect-end-of-line
        - match: '\bcase\b'
          scope: keyword.control.flow.d
          set:
            - include: end-of-line
            - match: '(?=[^\s])'
              set: [expect-end-of-line, value]
        - match: '\b{{name}}\b'
          scope: variable.other.constant.d
          set: expect-end-of-line
        - include: not-whitespace-illegal
  with-in:
    - match: '\bwith\b'
      scope: keyword.other.with.d
      push:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [with-after, value]
        - include: not-whitespace-illegal-pop
  with-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: optional-block-statement
    - include: not-whitespace-illegal-pop
  synchronized-in:
    - match: '\bsynchronized\b'
      scope: keyword.other.synchronized.d
      push:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [synchronized-after, value]
        - match: '(?=[^\s])'
          set: optional-block-statement
  synchronized-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: optional-block-statement
    - include: not-whitespace-illegal-pop
  try-in:
    - match: '\btry\b'
      scope: keyword.control.flow.d
      push: optional-block-statement
    - match: '\bcatch\b'
      scope: keyword.control.flow.d
      push: [optional-block-statement, catch-arguments]
    - match: '\bfinally\b'
      scope: keyword.control.flow.d
      push: optional-block-statement
  catch-arguments:
    - match: '\('
      scope: punctuation.section.parens.begin.d
      set: [catch-arguments-after, type]
    - include: not-whitespace-illegal
  catch-arguments-after:
    - match: '\b{{name}}\b'
      scope: variable.parameter.d
      set:
        - match: '\)'
          scope: punctuation.section.parens.end.d
          pop: true
        - include: not-whitespace-illegal
    - match: '\)'
      scope: punctuation.section.parens.end.d
      pop: true
    - include: not-whitespace-illegal
  throw-in:
    - match: '\bthrow\b'
      scope: keyword.control.flow.d
      push: [expect-end-of-line, value]
  scope-in:
    - match: '\b(scope)\s*(\()\s*(exit|success|failure)\s*(\))'
      captures:
        1: keyword.control.flow.d
        2: punctuation.section.parens.begin.d
        3: keyword.control.flow.d
        4: punctuation.section.parens.end.d
      push: optional-block-statement
  asm-in:
    - match: '\basm\b'
      scope: keyword.declaration.asm.d
      push:
        - include: attribute-in
        - match: '{'
          scope: punctuation.section.block.begin.d
          set:
            - match: '}'
              scope: punctuation.section.block.end.d
              pop: true
            - include: tokens-in
        - include: not-whitespace-illegal
  switch-in:
    - match: '\bswitch\b'
      scope: keyword.control.flow.d
      push:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [switch-after, value]
    - match: '\bcase\b'
      scope: keyword.control.flow.d
      push: [case-after, value]
    - match: '\bdefault\b'
      scope: keyword.control.flow.d
      push:
        - match: ':'
          scope: punctuation.section.block.begin.d
          pop: true
        - include: not-whitespace-illegal-pop
  switch-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: block-statement
    - include: not-whitespace-illegal-pop
  case-after:
    - match: ':'
      scope: punctuation.section.block.begin.d
      set:
        - match: '\.\.(?!\.)'
          scope: keyword.operator.d
          set:
            - match: '\bcase\b'
              scope: keyword.control.flow.d
              set: [case-after, value]
            - include: not-whitespace-illegal-pop
        - match: '(?=[^\s])'
          pop: true
    - include: not-whitespace-illegal-pop

  for-arguments:
    - match: '\('
      scope: punctuation.section.parens.begin.d
      set:
        - match: '\)'
          scope: punctuation.section.parens.end.d
          pop: true
        - include: statement-list-in
    - include: not-whitespace-illegal-pop
  foreach-arguments:
    - match: '\('
      scope: punctuation.section.brackets.begin.d
      set: [foreach-arguments-end, foreach-parameter-list]
    - include: not-whitespace-illegal
  foreach-parameter-list:
    - match: '(?=;)'
      pop: true
    - match: '(?=\b{{name}}\s*[;,])'
      set: foreach-parameter-after-type
    - include: parameter-attribute-in
    - match: '(?=[^\s])'
      set: [foreach-parameter-after-type, type]
  foreach-parameter-after-type:
    - match: '\b({{name}})\b'
      scope: variable.parameter.d
      set:
        - match: ','
          scope: punctuation.separator.sequence.d
          set: foreach-parameter-list
        - match: '(?=;)'
          pop: true
        - include: not-whitespace-illegal-pop
    - include: not-whitespace-illegal-pop
  foreach-arguments-end:
    - match: ';'
      scope: punctuation.separator.sequence.d
      set: [foreach-arguments-after, value]
    - include: not-whitespace-illegal-pop
  foreach-arguments-after:
    - match: '\)'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal-pop

  assert-arguments:
    - match: '\('
      scope: punctuation.section.brackets.begin.d
      set: [assert-arguments-after, value-list]
    - include: not-whitespace-illegal
  assert-arguments-after:
    - match: '\)'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal-pop

  condition:
    - match: '\('
      scope: punctuation.section.brackets.begin.d
      set: [condition-after, value]
    - include: not-whitespace-illegal-pop
  condition-after:
    - match: '\)'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal-pop
  not-whitespace-illegal:
    - match: '[^\s]'
      scope: invalid.illegal.d
  not-whitespace-illegal-pop:
    - match: '[^\s]'
      scope: invalid.illegal.d
      pop: true
  end-of-line-in:
    - match: ';'
      scope: punctuation.terminator.d
  end-of-line:
    - match: ';'
      scope: punctuation.terminator.d
      pop: true
  expect-end-of-line:
    - include: end-of-line
    - include: not-whitespace-illegal-pop
  maybe-end-of-line:
    - include: end-of-line
    - match: '(?=[^\s])'
      pop: true
