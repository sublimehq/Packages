%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: D
comment: D language
file_extensions:
  - d
  - di
first_line_match: ^#!.*\bg?dmd\b.
scope: source.d
variables:
  name: '[[:alpha:]_][[:alnum:]_]*'
  identifier: '{{name}}(?:\.{{name}})*'
  std_identifier: '(?:std|core)\.{{identifier}}'
  identifier_ref: '\.?{{identifier}}'
  string_postfix: '[cwd]?'
  escape_sequence: '\\([''"?\\0abfnrtv]|x{{hex_char}}{2}|[0-7]{1,3}|u{{hex_char}}{4}|U{{hex_char}}{8}|&\w+;)'
  hex_char: '[0-9a-fA-F]'
  hex_or_under: '(?:{{hex_char}}|_)'

  type_ctor: 'const|immutable|inout|shared'
  type_look_ahead: '(?=\b({{identifier_ref}}))'

  number_lookahead: '(?=(\b|\.)[0-9])'
  integer_lookahead: '(?=\b[0-9])'
  integer_suffix: 'L[uU]|[uU]L|[LuU]'
  integer_float_suffix: '[fF]i?|i'
  float_suffix: '[fFL]i?|i'
  float_exponent: '[eE][+\-]?[0-9]+'
  character_lookahead: (?=')
  string_lookahead: '(?=`|[rxq]?"|q{)'

  attribute_lookahead: '(?={{attributes}}|@)'
  attributes: 'static|abstract|final|override|synchronized|auto|scope|const|immutable|inout|shared|__gshared|nothrow|pure|ref|return'
  at_attributes: 'disable|nogc|property|safe|system|trusted'

  keyword: 'else|enum|export|extern|debug|default|delegate|delete|deprecated|do|body|break|case|cast|catch|class|const|continue|abstract|alias|align|asm|assert|auto|final|finally|for|foreach|foreach_reverse|function|goto|if|immutable|import|in|inout|interface|invariant|is|lazy|macro|mixin|module|new|nothrow|out|override|package|pragma|private|protected|public|pure|ref|return|scope|shared|static|struct|switch|synchronized|template|throw|try|typeid|typeof|union|unittest|version|while|with|__gshared|__traits|__vector|__parameters'
  basic_type: 'bool|byte|cdouble|cent|cfloat|char|creal|dchar|double|float|idouble|ifloat|int|ireal|long|real|short|ubyte|ucent|uint|ulong|ushort|void|wchar|string|dstring|wstring'
  language_constant: 'null|true|false|__FILE__|__FILE_FULL_PATH__|__MODULE__|__LINE__|__FUNCTION__|__PRETTY_FUNCTION__|__DATE__|__EOF__|__TIME__|__TIMESTAMP__|__VENDOR__|__VERSION__'
  language_variable: 'this|super'
  reserved: '{{keyword}}|{{basic_type}}|{{language_constant}}|{{language_variable}}'

  block_statement_loohahead: '(?={)'

contexts:
  prototype:
    - include: comment-in

  main:
    - meta_include_prototype: false
    - match: '^#!.*$'
      scope: comment.line.shebang.d
      set: main-after-shebang-in
    - match: '(?=.)'
      set: main-after-shebang-in
  main-after-shebang-in:
    - include: attribute-specifier-in
    - match: '\b(module)\s+({{identifier}})(;)'
      scope: meta.module.d
      captures:
        1: keyword.control.module.d
        2: entity.name.namespace.d
        3: punctuation.terminator.d
      set: statement-list-in
    - match: '\s'
    - match: (?=.)
      set: statement-list-in
  statement-list-in:
    - include: import-in
    - include: alias-in
    - include: class-in
    - include: interface-in
    - include: struct-in
    - include: union-in
    - include: enum-in
    - include: specification-in
    - include: conditional-declaration-in
    - include: static-foreach-in
    - include: static-assert-in
    - include: constructor-in
    - include: destructor-in
    - include: invariant-in
    - include: unittest-in
    - include: template-in
    - include: mixin-in
    - include: block-statement-in
    - include: statement-label-in
    - include: conditional-in
    - include: loop-in
    - include: flow-statement-in
    - include: with-in
    - include: synchronized-in
    - include: try-in
    - include: throw-in
    - include: scope-in
    - include: asm-in
    - include: attribute-specifier-in
    - include: end-of-line-in
    - include: value-or-declaration-in
  block-statement-in:
    - match: '{{block_statement_loohahead}}'
      push: block-statement
  block-statement:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - include: statement-list-in
    - include: not-whitespace-illegal
  optional-block-statement:
    - match: '{{block_statement_loohahead}}'
      set: block-statement
    - match: '(?=[^\s])'
      pop: true
  module-context-in:
    # TODO
    - match: \b(opNeg|opCom|opPostInc|opPostDec|opCast|opAdd|opSub|opSub_r|opMul|opDiv|opDiv_r|opMod|opMod_r|opAnd|opOr|opXor|opShl|opShl_r|opShr|opShr_r|opUShr|opUShr_r|opCat|opCat_r|opEquals|opEquals|opCmp|opCmp|opCmp|opCmp|opAddAssign|opSubAssign|opMulAssign|opDivAssign|opModAssign|opAndAssign|opOrAssign|opXorAssign|opShlAssign|opShrAssign|opUShrAssign|opCatAssign|opIndex|opIndexAssign|opCall|opSlice|opSliceAssign|opPos|opAdd_r|opMul_r|opAnd_r|opOr_r|opXor_r)\b
      scope: keyword.operator.overload.d
    - match: \b(new|delete|typeof|typeid|cast|align|is)\b
      scope: keyword.other.d
  all-types-in:
    - include: support-type-built-ins-in
    - include: support-type-in
    - include: storage-type-d-in
  constant_placeholder-in:
    - match: '(?i:%(\([a-z_]+\))?#?0?\-?[ ]?\+?([0-9]*|\*)(\.([0-9]*|\*))?[hL]?[a-z%])'
      scope: constant.other.placeholder.d
  function_assertions-in:
    - match: '(in|out)\s*(?=\{)'
      captures:
        1: keyword.control.statement.d
      push:
        - match: '\{' # Push onto the stack for blocks so that } pops functions/methods/classes properly
          push:
            - meta_scope: meta.block.d
            - match: '\}'
              pop: true
            - include: $top_level_main
        - match: (in|out)
          scope: keyword.control.statement.d
        - match: (?=body|do)
          pop: true
    - match: '(?<=\})'
      pop: true
  statement-remainder-in:
    - match: \(
      push:
        - meta_scope: meta.definition.param-list.d
        - match: (?=\))
          pop: true
        - include: all-types-in
    - match: (throws)
      captures:
        1: keyword.other.class-fns.d
      push:
        - meta_scope: meta.definition.throws.d
        - match: "(?={)"
          captures:
            1: keyword.other.class-fns.d
          pop: true
        - include: all-types-in
  storage-type-d-in:
    - match: '\b(void|byte|short|char|int|long|float|double|boolean|([a-z]\w+\.)*[A-Z]\w+(?![\(\.]))\b'
      scope: storage.type.d

  comment-in:
    # - match: /\*\*/
    #   scope: comment.block.empty.d punctuation.definition.comment.d
    # - include: scope:text.html.javadoc
    - match: /\*\*?
      scope: punctuation.definition.comment.d
      push:
        - meta_scope: comment.block.d
        - match: \*/
          scope: punctuation.definition.comment.d
          pop: true
    - match: (///?).*$
      scope: comment.line.double-slash.d
      captures:
        1: punctuation.definition.comment.d
    - include: nested-comment
  nested-comment:
    - match: /\+\+?
      scope: punctuation.definition.comment.d
      push:
        - meta_scope: comment.block.nested.d
        - match: \+/
          scope: punctuation.definition.comment.d
          pop: true
        - include: nested-comment
  number-in:
    - match: '{{number_lookahead}}'
      push: number
  number-opt:
    - include: floating-point-opt
    - include: integer-opt
  number:
    - include: number-opt
    - include: not-whitespace-illegal
  integer:
    - include: integer-opt
    - include: not-whitespace-illegal
  integer-opt:
    - match: '\b(0|[1-9][0-9_]*)({{integer_suffix}})?\b'
      captures:
        1: constant.numeric.integer.d
        2: storage.type.integer.d
      pop: true
    - match: '\b(0[bB])([01][01_]*)({{integer_suffix}})?\b'
      captures:
        1: storage.modifier.d
        2: constant.numeric.binary.d
        3: storage.type.integer.d
      pop: true
    - match: '\b(0[xX])({{hex_char}}(?:_|{{hex_char}})*)({{integer_suffix}})?\b'
      captures:
        1: storage.modifier.d
        2: constant.numeric.hex.d
        3: storage.type.integer.d
      pop: true
  floating-point:
    - include: floating-point-opt
    - include: not-whitespace-illegal
  floating-point-opt:
    - match: '\b(0[xX])({{hex_or_under}}*\.?{{hex_or_under}}+)([pP][+\-]?[0-9]+)({{float_suffix}})?\b'
      captures:
        1: storage.modifier.d
        2: constant.numeric.float.d
        3: constant.numeric.float.d
        4: storage.type.float.d
      pop: true
    - match: '\b(0|[1-9][0-9_]*)({{integer_float_suffix}})\b'
      captures:
        1: constant.numeric.float.d
        2: storage.type.float.d
      pop: true
    - match: '\b(0[bB])([01][01_]*)({{integer_float_suffix}})\b'
      captures:
        1: storage.modifier.d
        2: constant.numeric.float.d
        3: storage.type.float.d
      pop: true
    - match: '\b(0[xX])({{hex_char}}{{hex_or_under}}*)({{integer_float_suffix}})\b'
      captures:
        1: storage.modifier.d
        2: constant.numeric.float.d
        3: storage.type.float.d
      pop: true
    - match: '\b([0-9][0-9_]*\.[0-9][0-9_]*)({{float_exponent}})?({{float_suffix}})?\b'
      captures:
        1: constant.numeric.float.d
        2: constant.numeric.float.d
        3: storage.type.float.d
      pop: true
    - match: '\b([0-9][0-9_]*\.(?!\.))({{float_suffix}})?'
      captures:
        1: constant.numeric.float.d
        2: storage.type.float.d
      pop: true
    - match: '(\.[0-9][0-9_]*)({{float_exponent}})?({{float_suffix}})?\b'
      captures:
        1: constant.numeric.float.d
        2: constant.numeric.float.d
        3: storage.type.float.d
      pop: true
    - match: '\b([0-9][0-9_]*)({{float_exponent}})({{float_suffix}})?\b'
      captures:
        1: constant.numeric.float.d
        2: constant.numeric.float.d
        3: storage.type.float.d
      pop: true
  character-in:
    - match: '{{character_lookahead}}'
      push: character
  character:
    - match: \'(?:({{escape_sequence}})|[^\\'])\'
      scope: string.quoted.single.d
      captures:
        1: constant.character.escape.d
      pop: true
    - match: \'[^']*\'
      scope: invalid.illegal.d
      pop: true
    - include: not-whitespace-illegal-pop
  string-in:
    - match: '{{string_lookahead}}'
      push: string
  string:
    - include: string-opt
    - include: not-whitespace-illegal
  string-opt:
    # Regular string
    - match: '"'
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.d
        - match: '(")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
        - match: '{{escape_sequence}}'
          scope: constant.character.escape.d
        - match: \\.
          scope: invalid.illegal.unknown-escape.d
    # Wysiwyg string
    - match: r"
      scope:  punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    # Alternate Wysiwyg string
    - match: "`"
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.backtick.d
        - match: '(`)({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    # Deprecated Hex string
    - match: x"
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
        - match: '{{hex_char}}\s*{{hex_char}}'
          scope: constant.character.escape.d
        - match: '[^\s]'
          scope: invalid.illegal.unknown-escape.d
    # Deliminated string with custom identifier
    - match: 'q"({{name}})(.*)$'
      scope: punctuation.definition.string.begin.d
      captures:
        2: invalid.illegal.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(^\1")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    # Nested Deliminated string
    - match: 'q"\['
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(\]")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    - match: 'q"\('
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(\)")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    - match: 'q"<'
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(>")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    - match: 'q"{'
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(}")({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: storage.type.string.d
          pop: true
    # Other deliminated string
    - match: 'q"(.)'
      scope: punctuation.definition.string.begin.d
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.d
        - match: '(\1"|\1(.))({{string_postfix}})'
          captures:
            1: punctuation.definition.string.end.d
            2: invalid.illegal.d
            3: storage.type.string.d
          pop: true
    # Token string
    - match: 'q{'
      scope: string.unquoted.embedded.d punctuation.definition.string.begin.d
      set:
        - match: '}'
          scope: string.unquoted.embedded.d punctuation.definition.string.end.d
          pop: true
        - include: tokens-in
  tokens-in: # Purely a set of un-verified tokens, for use in token string
    - match: '\b({{keyword}})\b'
      scope: keyword.d
    - match: '\b({{basic_type}})\b'
      scope: storage.type.d
    - match: '\b({{language_constant}})\b'
      scope: constant.language.d
    - match: '\b({{language_variable}})\b'
      scope: variable.language.d
    - include: character-in
    - include: string-in
    - include: number-in
    - match: '{{name}}'
    - match: '(/|&|\||-|\+|<<|<>|>>|>>>||\*|%|\^|\^\^|~)='
      scope: keyword.operator.assignment.d
    - match: '(/|<=|>=|==|!<>=|!<=|!>=|\.\.\.|\.\.|&|&&|\||\|\||-|--|\+|\+\+|<|<<|<>|>|>>|>>>|!|!<>|!<|!>|\(|\)|\[|\]|{|}|\?|,|:|\$|\*|%|\^|\^\^|~|@|=>|#)'
      scope: keyword.operator.d
    - match: ';'
      scope: punctuation.terminator.d
    - match: '\.'
      scope: keyword.operator.d
    - include: not-whitespace-illegal
  attribute-specifier-in:
    - include: attribute-in
    - match: ':'
      scope: punctuation.separator.d
  attribute-in:
    - match: '\b({{attributes}})\b'
      scope: storage.modifier.d
    - match: '(@)'
      scope: punctuation.definition.annotation.begin.d
      push: at-attribute
    - match: '\b(extern)\s*(\()'
      captures:
        1: keyword.other.external.d
        2: punctuation.definition.annotation.begin.d
      push: extern-attribute
    - match: '\b(align)\b'
      scope: keyword.other.alignment.d
      push:
        - match: '\('
          scope: punctuation.definition.annotation.begin.d
          set: [align-attribute-after, value]
        - match: '(?=[^\s])'
          pop: true
    - match: '\b(deprecated)\b'
      scope: keyword.other.deprecated.d
      push:
        - match: '\('
          scope: punctuation.definition.annotation.begin.d
          set: [deprecated-attribute-after, value]
        - match: '(?=[^\s])'
          pop: true
    - include: visibility-attributes
    - match: '\b(pragma)\b'
      scope: keyword.other.pragma.d
      push:
        - match: '\('
          scope: punctuation.definition.annotation.begin.d
          set: pragma-attribute
        - include: not-whitespace-illegal
  at-attribute:
    - match: '({{at_attributes}})\b'
      scope: storage.attribute.d
      pop: true
    - match: '\('
      scope: punctuation.definition.annotation.begin.d
      set: [uda-after, value-list]
    - match: '({{name}})\s*(\()'
      captures:
        1: variable.function.d
        2: punctuation.definition.annotation.begin.d
      set: [uda-after, value-list]
    - match: '({{name}})\b'
      scope:  variable.other.constant.d
      pop: true
  uda-after:
    - match: '\)'
      scope: punctuation.definition.annotation.end.d
      pop: true
    - include: not-whitespace-illegal
  extern-attribute:
    - match: '(C\+\+|C|D|Windows|System|Objective-C)'
      scope: string.other.d
    - match: '{{identifier}}'
      scope: string.other.d
    - match: ','
      scope: punctuation.separator.sequence.d
    - match: '\)'
      scope: punctuation.definition.annotation.end.d
      pop: true
    - include: not-whitespace-illegal
  align-attribute-after:
    - match: '\)'
      scope: punctuation.definition.annotation.end.d
      pop: true
  deprecated-attribute-after:
    - match: '\)'
      scope: punctuation.definition.annotation.end.d
      pop: true
  visibility-attributes:
    - match: '\b(private|protected|public|export)\b'
      scope: storage.modifier.access-control.d
    - match: '\b(package)\s*(\()'
      captures:
        1: storage.modifier.access-control.d
        2: punctuation.definition.annotation.begin.d
      push:
        - match: '{{identifier}}'
          scope: variable.other.constant.d
        - match: '\)'
          scope: punctuation.definition.annotation.end.d
          pop: true
        - include: not-whitespace-illegal
    - match: '\b(package)\b'
      scope: storage.modifier.access-control.d
  pragma-attribute:
    - match: '\b({{name}})\b'
      scope: variable.function.d
      set:
        - match: '\)'
          scope: punctuation.definition.annotation.end.d
          pop: true
        - match: ','
          scope: punctuation.separator.sequence.d
          set: [pragma-attribute-after, value-list]
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal-pop
  pragma-attribute-after:
    - match: '\)'
      scope: punctuation.definition.annotation.end.d
      pop: true
    - include: not-whitespace-illegal-pop
  import-in:
    - match: '\b(import)(?!\s*\()\b'
      scope: keyword.control.import.d
      push: import-list
  import-list:
    - match: '\b(?:({{std_identifier}})|({{identifier}}))\b'
      captures:
        1: support.module.d
        2: variable.other.constant.d
      set:
        - match: ':'
          scope: punctuation.separator.import-binding.d
          set: import-binding-list
        - match: ';'
          scope: punctuation.terminator.d
          pop: true
        - match: ','
          scope: punctuation.separator.sequence.d
          set: import-list
        - match: '='
          scope: keyword.operator.assignment.d
          set:
            - match: '\b(?:({{std_identifier}})|({{identifier}}))\b'
              captures:
                1: support.module.d
                2: variable.other.constant.d
              set:
                - match: ';'
                  scope: punctuation.terminator.d
                  pop: true
                - match: ','
                  scope: punctuation.separator.sequence.d
                  set: import-list

                - include: not-whitespace-illegal
            - include: not-whitespace-illegal
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  import-binding-list:
    - match: '\b({{identifier}})\b'
      scope: variable.other.constant.d
      set:
        - match: ';'
          scope: punctuation.terminator.d
          pop: true
        - match: ','
          scope: punctuation.separator.sequence.d
          set: import-binding-list
        - match: '='
          scope: keyword.operator.assignment.d
          set:
            - match: '\b({{identifier}})\b'
              scope: variable.other.constant.d
              set:
                - match: ';'
                  scope: punctuation.terminator.d
                  pop: true
                - match: ','
                  scope: punctuation.separator.sequence.d
                  set: import-binding-list

                - include: not-whitespace-illegal
            - include: not-whitespace-illegal
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  type:
    - match: '\b({{type_ctor}})\b'
      scope: storage.modifier.d
      set:
        - match: '\('
          scope: punctuation.section.group.begin.d
          set: [basic-type2, type-storage-modifier-end, type]
        - match: '(?=[^\s])'
          set: type
    - match: '(?=[^\s])'
      set: basic-type
  type-storage-modifier-end:
    - match: '\)'
      scope: punctuation.section.group.end.d
      pop: true
    - include: not-whitespace-illegal
    # - match: '(?=[^\s])'
    #   scope: invalid.illegal.d
  basic-type:
    - match: '\b({{identifier_ref}})\b'
      scope: storage.type.d
      set: basic-type2
    # TODO: More basic types
    - match: '(?=[^\s])'
      pop: true
  basic-type2:
    - match: '\*'
      scope: keyword.operator.pointer.d
    - match: '\['
      scope: punctuation.section.brackets.begin.d
      push: [basic-type2-after-brackets, value-list]
    - match: '\b(delegate|function)\b'
      scope: keyword.other.d
      push: function-pointer-type
    - match: '!'
      scope: keyword.operator.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [basic-type2-after-parens, value-list]
        - match: '(?=[^\s])'
          set: value
    - match: '(?=[^\s])'
      pop: true
  basic-type2-after-brackets:
    - match: '\]'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal-pop
  basic-type2-after-parens:
    - match: '\)'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal-pop

  function-pointer-type:
    # TODO
    - match: '.'
      pop: true
  function-or-variable-after-type:
    - match: '\b({{name}})\s*(?=\(|$)'
      captures:
        1: entity.name.function.d
      set: function-definition-begin
    - match: '(?=[^\s])'
      set: variable-definition-begin
  function-definition-begin:
    - match: '(?=\()'
      set: [function-definition-after-argument-list1, function-argument-definition-list]
    - include: not-whitespace-illegal
  function-definition-after-argument-list1:
    - match: '(?=\()'
      set: [function-definition-after-argument-list2, function-argument-definition-list]
    - include: function-definition-after-argument-list2
  function-definition-after-argument-list2:
    - include: attribute-specifier-in
    - match: '(?={|;)'
      set: function-definition
    - include: not-whitespace-illegal
  function-argument-definition-list:
    - match: '\('
      scope: punctuation.section.group.begin.d
      set:
        - match: '{{type_look_ahead}}'
          set: [function-argument, type]
        - match: '\)'
          scope: punctuation.section.group.end.d
          pop: true
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  function-argument:
    - match: '\b{{name}}\b'
      scope: variable.parameter.d
      set:
        - match: ','
          scope: punctuation.separator.sequence.d
          set: [function-argument, type]
        - match: '='
          # TODO
        - match: '\)'
          scope: punctuation.section.group.end.d
          pop: true
        - include: not-whitespace-illegal
    # - match: '\.\.\.' # TODO
    - match: ','
      scope: punctuation.separator.sequence.d
      push: type
    - match: '\)'
      scope: punctuation.section.group.end.d
      pop: true
    - include: not-whitespace-illegal
  function-definition:
    - meta_scope: meta.function.d
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - meta_scope: meta.function.d
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - include: statement-list-in
    - include: end-of-line
    - include: not-whitespace-illegal
  variable-definition-begin:
    - match: '\b{{name}}\b'
      scope: variable.other.d
      set:
        - match: '(?=,)'
          set: variable-definition-after
        - match: '='
          scope: keyword.operator.assignment.d
          set: [variable-definition-after, value]
        - include: expect-end-of-line
    - include: not-whitespace-illegal-pop
  variable-definition-after:
    - match: ','
      scope: punctuation.separator.sequence.d
      set: variable-definition-begin
    - include: expect-end-of-line
  value-or-declaration-in:
    - match: '\s'
    - match: '(?=(!|~|\+|\-|\*|&|cast|delete|new|import|mixin|[0-9]|\[|\(|{{name}}\s*\(|{{string_lookahead}}|{{language_constant}}|{{language_variable}}))'
      push: [maybe-end-of-line, value-list]
    - match: '(?=({{name}}|\]|\))(\s+{{name}}))'
      push: [function-or-variable-after-type, type]
    - match: '(?=[^\s])'
      push: [maybe-end-of-line, first-value]
  value-or-declaration:
    - match: '\s'
    - match: '(?=(!|~|\+|\-|\*|&|cast|delete|new|import|mixin|[0-9]|\[|\(|{{name}}\s*\(|{{string_lookahead}}|{{language_constant}}|{{language_variable}}))'
      set: value-list
    - match: '(?=({{name}}|\]|\))(\s+{{name}}))'
      set: [function-or-variable-after-type, type]
    - match: '(?=[^\s])'
      set: first-value
  # The first value in an expression ending with a * is always a function/variable definition, otherwise it could be either
  # We highlight as if it were a value, but switch to a definition if it turns out to be one
  first-value:
    - meta_scope: first-value
    - match: '\b({{basic_type}})\b'
      scope: storage.type.d
      set: first-value-after
    - match: '\b({{name}})\b'
      scope: variable.other.d
      set: first-value-after
    - include: not-whitespace-illegal
  first-value-after:
    - meta_scope: first-value-after
    - match: '\.'
      scope: punctuation.accessor.dot.d
      set:
        - match: '{{identifier}}'
          scope: variable.other.d
          set: first-value-after
    - match: '!'
      scope: keyword.operator.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [first-value-parens-after, value-list]
        - match: '(?=[^\s])'
          set: value
    - match: '\['
      scope: punctuation.section.brackets.begin.d
      set: [first-value-bracket-after, value-list]
    - match: ','
      scope: punctuation.separator.sequence.d
      set: value-list
    - match: '(?=\*)'
      set: [function-or-variable-after-type, basic-type2]
    - match: '(?={{name}}\s*([;=\(]|$))'
      set: function-or-variable-after-type
    - match: '(?=[^\s])'
      set: [value-list-after, value-after]
  first-value-bracket-after:
    - match: '\]'
      scope: punctuation.section.brackets.end.d
      set: first-value-after
    - include: not-whitespace-illegal
  first-value-parens-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: first-value-after
    - include: not-whitespace-illegal
  value:
    - meta_scope: value
    - match: '!'
      scope: keyword.operator.logical.d
      set: value
    - match: '~'
      scope: keyword.operator.bitwise.d
      set: value
    - match: '(\+\+|--|\+|-)'
      scope: keyword.operator.arithmetic.d
      set: value
    - match: '(\*|&)'
      scope: keyword.operator.bitwise.d
      set: value
    - match: '\bcast\b'
      scope: keyword.operator.word.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [cast-after, type]
        - include: not-whitespace-illegal
    - match: '\bdelete\b'
      scope: keyword.operator.word.d
      set: value
    - match: '\bnew\b'
      scope: keyword.operator.word.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [new-after-parens, value-list]
        - match: '(?=[^\s])'
          set: new-after
    - match: '\bimport\b'
      scope: keyword.declaration.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [new-after-parens, value]
        - include: not-whitespace-illegal
    - match: '\bmixin\b'
      scope: keyword.other.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [new-after-parens, value-list]
        - include: not-whitespace-illegal
    - match: '\('
      scope: punctuation.section.parens.begin.d
      set: [new-after-parens, value]
    - match: '(?={)'
      set: [value-after, block-statement]
    - match: '\['
      scope: punctuation.section.brackets.begin.d
      set: [value-bracket-after, value-array-list]
    - match: '{{number_lookahead}}'
      set: [value-after, number]
    - match: '{{character_lookahead}}'
      set: [value-after, character]
    - match: '{{string_lookahead}}'
      set: [value-after, string]
    - match: '\b({{language_constant}})\b'
      scope: constant.language.d
      set: value-after
    - match: '\b({{language_variable}})\b'
      scope: variable.language.d
      set: value-after
    - match: '\$'
      scope: variable.language.d
      set: value-after
    - match: '\b({{basic_type}})\b'
      scope: storage.type.d
      set: value-after
    - match: '\b({{name}})\b'
      scope: variable.other.d
      set: value-after
    - include: not-whitespace-illegal
  cast-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: value
    - include: not-whitespace-illegal
  new-after-parens:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: new-after
    - include: not-whitespace-illegal
  new-after:
    - match: '\bclass\b'
      scope: storage.type.class.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [new-anonymous-after-args, value-list]
        - match: '(?={)'
          set: class-body
        - match: '(?=[^\s])'
          set: [class-body, base-class-list]
    - match: (?=[^\s])
      set: [new-after-named, type]
    - include: not-whitespace-illegal
  new-after-named:
    - match: '\('
      scope: punctuation.section.parens.begin.d
      set: [value-parens-after, value-list]
    - match: (?=[^\s])
      set: value-after
  new-anonymous-after-args:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set:
        - match: '(?={)'
          set: class-body
        - match: '(?=[^\s])'
          set: [class-body, base-class-list]
    - include: not-whitespace-illegal
  value-after:
    - meta_scope: value-after
    - match: '\.\.'
      scope: keyword.operator.d
      set: value
    - match: '\.'
      scope: punctuation.accessor.dot.d
      set:
        - match: '{{identifier}}'
          scope: variable.other.d
          set: value-after
    - match: '!'
      scope: keyword.operator.d
      set:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [value-parens-after, value-list]
        - match: '(?=[^\s])'
          set: value
    - match: '\('
      scope: punctuation.section.parens.begin.d
      set: [value-parens-after, value-list]
    - match: '\['
      scope: punctuation.section.brackets.begin.d
      set: [value-bracket-after, value-list]
    - match: '(\+\+|--)'
      scope: keyword.operator.arithmetic.d
      set: value-after
    - match: '(==|!=|is|!is|<|<=|>|>=|in|!in)'
      scope: keyword.operator.comparison.d
      set: value
    - match: '(\+|-|\*|/|%|&|\||\^\^|\^|~|<<|>>>|>>)?='
      scope: keyword.operator.assignment.d
      set: value
    - match: '(&&|\|\|)'
      scope: keyword.operator.logical.d
      set: value
    - match: '(\+|\-|~|\*|/|%|\^\^)'
      scope: keyword.operator.arithmetic.d
      set: value
    - match: '(<<|>>>|>>|\||\^|&)'
      scope: keyword.operator.bitwise.d
      set: value
    - match: '\?'
      scope: keyword.operator.logical.d
      set: [value-condition-after, value]
    - match: '(?=[^\s])'
      pop: true
  value-condition-after:
    - match: ':'
      scope: keyword.operator.logical.d
      set: value
    - include: not-whitespace-illegal
  value-parens-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: value-after
    - include: not-whitespace-illegal
  value-bracket-after:
    - match: '\]'
      scope: punctuation.section.brackets.end.d
      set: value-after
    - include: not-whitespace-illegal
  value-list:
    - meta_scope: value-list
    - match: '(?=\)|}|]|;)'
      pop: true
    - match: '(?=[^\s])'
      set: [value-list-after, value]
  value-list-after:
    - match: '(?=\)|}|]|;)'
      pop: true
    - match: ','
      scope: punctuation.separator.sequence.d
      set: value-list
    - include: not-whitespace-illegal
  value-array-list:
    - match: '(?=\])'
      pop: true
    - match: '(?=[^\s])'
      set: [value-array-list-after, value]
  value-array-list-after:
    - match: ':'
      scope: punctuation.separator.mapping.key-value.d
      set: [value-array-list-after-value, value]
    - include: value-array-list-after-value
  value-array-list-after-value:
    - match: '(?=\])'
      pop: true
    - match: ','
      scope: punctuation.separator.sequence.d
      set: value-array-list
    - include: not-whitespace-illegal
  alias-in:
    - match: '\b(alias)\s+({{identifier}})\s+(this)(;)'
      captures:
        1: keyword.control.alias.d
        2: variable.d
        3: keyword.control.alias.d
        4: punctuation.terminator.d
    - match: '\b(alias)\b'
      scope: keyword.control.alias.d
      push:
        - match: '{{attribute_lookahead}}'
          set: [alias-old, type]
        - match: '\b({{name}})\s*(?=\(|=)'
          captures:
            1: entity.name.type.d
          set: alias-new
        - match: '{{type_look_ahead}}'
          set: [alias-old, type]
        - include: not-whitespace-illegal
  alias-old:
    - match: '\b({{name}})\b'
      scope: entity.name.type.d
      set:
        - match: ','
          scope: punctuation.separator.sequence.d
          set: alias-old
        - include: end-of-line
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  alias-new:
    - match: '\('
      # TODO: template aliases
      pop: true
    - match: '(?==)'
      set: alias-new-assign
    - include: not-whitespace-illegal
  alias-new-assign:
    - match: '='
      scope: keyword.operator.assignment.d
      set: [alias-new-after-type, type]
    - include: not-whitespace-illegal
  alias-new-after-type:
    - include: end-of-line
    - match: ','
      scope: punctuation.separator.sequence.d
      set:
        - match: '\b{{name}}\b'
          scope: entity.name.type.d
          set: alias-new
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  # TODO: Templated aggregates!!
  class-in:
    - match: '\b(class)\b'
      scope: storage.type.class.d
      push:
        - match: '\b({{name}})\b'
          scope: entity.name.class.d
          set:
            - match: '(?=\()'
              set: [class-after, function-argument-definition-list]
            - match: '(?=[^\s])'
              set: class-after
        - include: not-whitespace-illegal
  class-after:
    - include: end-of-line
    - match: ':'
      scope: punctuation.separator.mapping.d
      set: [class-body, base-class-list]
    - match: '(?={)'
      set: class-body
    - include: not-whitespace-illegal
  base-class-list:
    - match: '{{type_look_ahead}}'
      set: [base-class-list-after, basic-type]
    - include: not-whitespace-illegal
  base-class-list-after:
    - match: ','
      scope: punctuation.separator.sequence.d
      set: base-class-list
    - match: '(?={)'
      pop: true
    - include: not-whitespace-illegal
  class-body:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - include: statement-list-in
    - include: not-whitespace-illegal
  interface-in:
    - match: '\b(interface)\b'
      scope: storage.type.interface.d
      push:
        - match: '\b({{name}})\b'
          scope: entity.name.interface.d
          set:
            - match: '(?=\()'
              set: [interface-after, function-argument-definition-list]
            - match: '(?=[^\s])'
              set: interface-after
        - include: not-whitespace-illegal
  interface-after:
    - include: end-of-line
    - match: ':'
      scope: punctuation.separator.mapping.d
      set: [interface-body, base-class-list]
    - match: '(?={)'
      set: interface-body
    - include: not-whitespace-illegal
  interface-body:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - include: statement-list-in
    - include: not-whitespace-illegal
  struct-in:
    - match: '\b(struct)\b'
      scope: storage.type.struct.d
      push:
        - match: '\b({{name}})\b'
          scope: entity.name.struct.d
          set:
            - match: '(?=\()'
              set: [struct-after, function-argument-definition-list]
            - match: '(?=[^\s])'
              set: struct-after
        - match: '(?={)'
          set: struct-body
        - include: not-whitespace-illegal
  struct-after:
    - include: end-of-line
    - match: '(?={)'
      set: struct-body
    - include: not-whitespace-illegal
  struct-body:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - include: statement-list-in
    - include: not-whitespace-illegal
  union-in:
    - match: '\b(union)\b'
      scope: storage.type.union.d
      push:
        - match: '\b({{name}})\b'
          scope: entity.name.union.d
          set:
            - match: '(?=\()'
              set: [union-after, function-argument-definition-list]
            - match: '(?=[^\s])'
              set: union-after
        - match: '(?={)'
          set: union-body
        - include: not-whitespace-illegal
  union-after:
    - include: end-of-line
    - match: '(?={)'
      set: union-body
    - include: not-whitespace-illegal
  union-body:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - include: statement-list-in
    - include: not-whitespace-illegal
  enum-in:
    - match: '\b(enum)\b'
      scope: storage.type.enum.d
      push:
        - match: '\b({{name}})\b'
          scope: entity.name.enum.d
          set:
            - include: end-of-line
            - match: '(?={)'
              set: enum-body
            - match: ':'
              scope: punctuation.separator.mapping.d
              set: [enum-body, type]
            - include: not-whitespace-illegal
        - match: ':'
          scope: punctuation.separator.mapping.d
          set: [enum-body, type]
        - match: '(?={)'
          set: anonymous-enum-body
        - include: not-whitespace-illegal
  enum-body:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - match: '(?=\b({{name}})\b)'
          push: enum-member
    - include: not-whitespace-illegal
  anonymous-enum-body:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - include: attribute-in
        - match: '(?=\b({{name}})\s*(=|,|}|$))'
          push: enum-member
        - match: '{{type_look_ahead}}'
          push: [enum-member, type]
    - include: not-whitespace-illegal
  enum-member:
    - match: '\b({{name}})\b'
      scope: entity.name.constant.d
      set:
        - match: '='
          scope: keyword.operator.assignment.d
          set: [enum-member-after, value]
        - match: ','
          scope: punctuation.separator.sequence.d
          pop: true
        - match: '(?=})'
          pop: true
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  enum-member-after:
    - match: ','
      scope: punctuation.separator.sequence.d
      pop: true
    - match: '(?=})'
      pop: true
    - include: not-whitespace-illegal-pop
  conditional-declaration-in:
    - match: '\b(static)\s+(if)\b'
      captures:
        1: keyword.control.conditional.d
        2: keyword.control.conditional.d
      push: [conditional-declaration-body, condition]
    - match: '\b(version)\b'
      scope: keyword.control.conditional.d
      push: [conditional-declaration-body, version-condition]
    - match: '\b(debug)\b'
      scope: keyword.control.conditional.d
      push: [conditional-declaration-body, debug-condition]
  conditional-declaration-body:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          set:
            - match: '\b(else)\b'
              scope: keyword.control.conditional.d
              set:
                - match: '{'
                  scope: punctuation.section.block.begin.d
                  set:
                    - match: '}'
                      scope: punctuation.section.block.end.d
                      pop: true
                    - include: statement-list-in
                - match: ':'
                  scope: punctuation.section.block.begin.d
                  pop: true
                - match: '(?=[^\s])'
                  pop: true
            - match: '(?=[^\s])'
              pop: true
        - include: statement-list-in
    - match: ':'
      scope: punctuation.section.block.begin.d
      pop: true
    - include: not-whitespace-illegal
  version-condition:
    - match: '\('
      scope: punctuation.section.brackets.begin.d
      set:
        - match: '\b(unittest|assert)\b'
          scope: keyword.d
          set: version-condition-end
        - match: '\b({{name}})\b'
          scope: constant.other.d
          set: version-condition-end
        - match: '{{integer_lookahead}}'
          set: [version-condition-end, integer]
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  version-condition-end:
    - match: '\)'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal
  debug-condition:
    - match: '\('
      scope: punctuation.section.brackets.begin.d
      set:
        - match: '\b({{name}})\b'
          scope: constant.other.d
          set: version-condition-end
        - match: '{{integer_lookahead}}'
          set: [version-condition-end, integer]
        - include: not-whitespace-illegal
    - match: '(?={|:)'
      pop: true
    - include: not-whitespace-illegal
  static-foreach-in:
    - match: '\b(static)\s+(foreach|foreach_reverse)\b'
      captures:
        1: keyword.control.flow.d
        2: keyword.control.flow.d
      push: [block-statement, foreach-arguments]
  static-assert-in:
    - match: '\b(static)\s+(assert)\b'
      captures:
        1: keyword.control.conditional.d
        2: keyword.control.conditional.d
      push: [expect-end-of-line, assert-arguments]
  constructor-in:
    - match: '\b(this)\s*(?=\(|$)'
      captures:
        1: entity.name.function.constructor.d
      push: function-definition-begin
  destructor-in:
    - match: '(~)\s*(this)\s*(?=\(|$)'
      captures:
        1: entity.name.function.destructor.d
        2: entity.name.function.destructor.d
      push: function-definition-begin
  invariant-in:
    - match: '\b(invariant)\b'
      scope: keyword.control.flow.d
      push:
        - match: '(?=\()'
          set: [invariant-block, assert-arguments]
        - match: '(?={)'
          set: invariant-block
        - include: not-whitespace-illegal
  invariant-block:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
      - match: '}'
        scope: punctuation.section.block.end.d
        pop: true
      - include: statement-list-in
    - match: ';'
      scope: punctuation.terminator.d
      pop: true
    - include: not-whitespace-illegal
  unittest-in:
    - match: '\b(unittest)\b'
      scope: keyword.control.conditional.d
      push:
        - match: '{'
          scope: punctuation.section.block.begin.d
          set:
            - match: '}'
              scope: punctuation.section.block.end.d
              pop: true
            - include: statement-list-in
        - include: not-whitespace-illegal
  specification-in:
    - match: '\b(version|debug)\s*(=)'
      captures:
        1: keyword.control.conditional.d
        2: keyword.operator.assignment.d
      push:
        - match: '\b{{name}}\b'
          scope: entity.name.constant.d
          set: expect-end-of-line
        - match: '{{integer_lookahead}}'
          set: [expect-end-of-line, integer]
        - include: not-whitespace-illegal
  template-in:
    - match: '\b(template)\b'
      scope: storage.type.d
      push: template
  template:
    - match: '\b({{name}})\b'
      scope: entity.name.template.d
      set: template-definition-begin
    - include: not-whitespace-illegal
  template-definition-begin:
    - match: '(?=\()'
      set: [template-definition-after-argument-list, function-argument-definition-list]
    - include: not-whitespace-illegal
  template-definition-after-argument-list:
    - match: '{'
      scope: punctuation.section.block.begin.d
      set:
        - match: '}'
          scope: punctuation.section.block.end.d
          pop: true
        - include: statement-list-in
    - include: not-whitespace-illegal
  mixin-in:
    - match: '\b(mixin)\s+(template)\b'
      captures:
        1: keyword.control.d
        2: storage.type.d
      push: template
  statement-label-in:
    - match: '\b({{name}})\s*(:)'
      captures:
        1: entity.name.label.d
        2: punctuation.separator.d
  conditional-in:
    - match: '\bif\b'
      scope: keyword.control.conditional.d
      push: [conditional-else, optional-block-statement, condition]
    - match: '\belse\b'
      scope: keyword.control.conditional.d
      push: optional-block-statement
  conditional-else:
    - match: '\b(else)\b'
      scope: keyword.control.conditional.d
      set: optional-block-statement
    - match: '(?=[^\s])'
      pop: true
  loop-in:
    - match: '\bwhile\b'
      scope: keyword.control.flow.d
      push: [optional-block-statement, condition]
    - match: '\bdo\b'
      scope: keyword.control.flow.d
      push: optional-block-statement
    - match: '\bfor\b'
      scope: keyword.control.flow.d
      push: [optional-block-statement, for-arguments]
    - match: '\b(foreach|foreach_reverse)\b'
      scope: keyword.control.flow.d
      push: [optional-block-statement, foreach-arguments]
  flow-statement-in:
    - match: '\b(continue|break)\b'
      scope: keyword.control.flow.d
      push:
        - match: \b{{name}}\b
          scope: variable.other.constant.d
          set: expect-end-of-line
        - include: expect-end-of-line
    - match: '\breturn\b'
      scope: keyword.control.flow.d
      push:
        - include: end-of-line
        - match: '(?=[^\s])'
          set: [expect-end-of-line, value]
    - match: '\bgoto\b'
      scope: keyword.control.flow.d
      push:
        - match: '\bdefault\b'
          scope: keyword.control.flow.d
          set: expect-end-of-line
        - match: '\bcase\b'
          scope: keyword.control.flow.d
          set:
            - include: end-of-line
            - match: '(?=[^\s])'
              set: [expect-end-of-line, value]
        - match: '\b{{name}}\b'
          scope: variable.other.constant.d
          set: expect-end-of-line
        - include: not-whitespace-illegal
  with-in:
    - match: '\bwith\b'
      scope: keyword.other.with.d
      push:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [with-after, value]
        - include: not-whitespace-illegal-pop
  with-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: optional-block-statement
    - include: not-whitespace-illegal-pop
  synchronized-in:
    - match: '\bsynchronized\b'
      scope: keyword.other.synchronized.d
      push:
        - match: '\('
          scope: punctuation.section.parens.begin.d
          set: [synchronized-after, value]
        - match: '(?=[^\s])'
          set: optional-block-statement
  synchronized-after:
    - match: '\)'
      scope: punctuation.section.parens.end.d
      set: optional-block-statement
    - include: not-whitespace-illegal-pop
  try-in:
    - match: '\btry\b'
      scope: keyword.control.flow.d
      push: optional-block-statement
    - match: '\bcatch\b'
      scope: keyword.control.flow.d
      push: [optional-block-statement, catch-arguments]
    - match: '\bfinally\b'
      scope: keyword.control.flow.d
      push: optional-block-statement
  catch-arguments:
    - match: '\('
      scope: punctuation.section.parens.begin.d
      set: [catch-arguments-after, type]
    - include: not-whitespace-illegal
  catch-arguments-after:
    - match: '\b{{name}}\b'
      scope: variable.parameter.d
      set:
        - match: '\)'
          scope: punctuation.section.parens.end.d
          pop: true
        - include: not-whitespace-illegal
    - include: not-whitespace-illegal
  throw-in:
    - match: '\bthrow\b'
      scope: keyword.control.flow.d
      push: [expect-end-of-line, value]
  scope-in:
    - match: '\b(scope)\s*(\()\s*(exit|success|failure)\s*(\))'
      captures:
        1: keyword.control.flow.d
        2: punctuation.section.parens.begin.d
        3: keyword.control.flow.d
        4: punctuation.section.parens.end.d
      push: optional-block-statement
  asm-in:
    - match: '\basm\b'
      scope: keyword.declaration.asm.d
      push:
        - include: attribute-in
        - match: '{'
          scope: punctuation.section.block.begin.d
          set:
            - match: '}'
              scope: punctuation.section.block.end.d
              pop: true
            - include: tokens-in
        - include: not-whitespace-illegal

  for-arguments:
    - match: '\('
      scope: punctuation.section.parens.begin.d
      set:
        - match: '\)'
          scope: punctuation.section.parens.end.d
          pop: true
        - include: statement-list-in
    - include: not-whitespace-illegal-pop
  foreach-arguments:
    - match: '\('
      scope: punctuation.section.brackets.begin.d
      set: [foreach-arguments-end, foreach-parameter-list]
    - include: not-whitespace-illegal
  foreach-parameter-list:
    - match: '(?=;)'
      pop: true
    - match: '(?=\b{{name}}\s*[;,])'
      set: foreach-parameter-after-type
    - include: attribute-in
    - match: '(?=[^\s])'
      set: [foreach-parameter-after-type, type]
  foreach-parameter-after-type:
    - match: '\b({{name}})\b'
      scope: variable.parameter.d
      set:
        - match: ','
          scope: punctuation.separator.sequence.d
          set: foreach-parameter-list
        - match: '(?=;)'
          pop: true
        - include: not-whitespace-illegal-pop
    - include: not-whitespace-illegal-pop
  foreach-arguments-end:
    - match: ';'
      scope: punctuation.separator.sequence.d
      set: [foreach-arguments-after, value]
    - include: not-whitespace-illegal-pop
  foreach-arguments-after:
    - match: '\)'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal-pop

  assert-arguments:
    - match: '\('
      scope: punctuation.section.brackets.begin.d
      set: [assert-arguments-after, value-list]
    - include: not-whitespace-illegal
  assert-arguments-after:
    - match: '\)'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal-pop

  condition:
    - match: '\('
      scope: punctuation.section.brackets.begin.d
      set: [condition-after, value]
    - include: not-whitespace-illegal-pop
  condition-after:
    - match: '\)'
      scope: punctuation.section.brackets.end.d
      pop: true
    - include: not-whitespace-illegal-pop
  not-whitespace-illegal:
    - match: '[^\s]'
      scope: invalid.illegal.d
  not-whitespace-illegal-pop:
    - match: '[^\s]'
      scope: invalid.illegal.d
      pop: true
  end-of-line-in:
    - match: ';'
      scope: punctuation.terminator.d
  end-of-line:
    - match: ';'
      scope: punctuation.terminator.d
      pop: true
  expect-end-of-line:
    - include: end-of-line
    - include: not-whitespace-illegal-pop
  maybe-end-of-line:
    - include: end-of-line
    - match: '(?=[^\s])'
      pop: true
  support-type-built-ins-classes-in:
    - match: \b(AbstractServer|ArchiveMember|ArgParser|Barrier|BomSniffer|Buffer|BufferInput|BufferOutput|BufferSlice|BufferedFile|BufferedStream|BzipInput|BzipOutput|CFile|CacheInvalidatee|CacheInvalidator|CacheServer|CacheThread|Certificate|CertificateStore|CertificateStoreCtx|ChunkInput|ChunkOutput|ClassInfo|Cluster|ClusterCache|ClusterQueue|ClusterThread|CmdParser|ComObject|Compress|Condition|Conduit|Cookie|CookieParser|CookieStack|CounterInput|CounterOutput|DataFileInput|DataFileOutput|DataInput|DataOutput|Database|DatagramConduit|DeviceConduit|DigestInput|DigestOutput|DocPrinter|Document|DummyInputStream|DummyOutputStream|EndianInput|EndianOutput|EndianProtocol|EndianStream|EventSeekInputStream|EventSeekOutputStream|FTPConnection|Fiber|Field|File|FileConduit|FileFolder|FileGroup|FileInput|FileOutput|FilePath|FileScan|FilterStream|Foo|FormatOutput|GreedyInput|GreedyOutput|Gregorian|GrowBuffer|HeapCopy|HeapSlice|Hierarchy|HttpClient|HttpCookies|HttpCookiesView|HttpGet|HttpHeaders|HttpHeadersView|HttpParams|HttpPost|HttpStack|HttpTokens|HttpTriplet|IPv4Address|IUnknown|InputFilter|InternetAddress|InternetHost|Layout|LineInput|LineIterator|LinkedFolder|Log|MapInput|MapOutput|MappedBuffer|Md2|Md4|MemoryQueue|MemoryStream|MmFile|MmFileStream|ModuleInfo|MulticastConduit|Mutex|NativeProtocol|NetCall|NetHost|NetworkAlert|NetworkCache|NetworkCall|NetworkClient|NetworkCombo|NetworkMessage|NetworkQueue|NetworkRegistry|NetworkTask|NotImplemented|Object|Observer|OutBuffer|OutputFilter|PersistQueue|Pipe|PipeConduit|Print|PrivateKey|Process|Properties|Protocol|ProtocolReader|ProtocolWriter|PublicKey|PullParser|QueueFile|QueueServer|QueueThread|QueuedCache|QuoteIterator|Random|Range|ReadWriteMutex|Reader|Record|RegExp|RegExpT|RegexIterator|RollCall|SSLCtx|SSLServerSocket|SSLSocketConduit|SaxParser|SelectionKey|Semaphore|ServerSocket|ServerThread|Service|SimpleIterator|SliceInputStream|SliceSeekInputStream|SliceSeekOutputStream|SliceStream|SnoopInput|SnoopOutput|Socket|SocketConduit|SocketListener|SocketSet|SocketStream|Sprint|Stream|StreamIterator|TArrayStream|TaskServer|TaskThread|TcpSocket|Telnet|TempFile|Text|TextFileInput|TextFileOutput|TextView|Thread|ThreadGroup|ThreadLocal|ThreadPool|Token|TypeInfo|TypeInfo_AC|TypeInfo_Aa|TypeInfo_Ab|TypeInfo_Ac|TypeInfo_Ad|TypeInfo_Ae|TypeInfo_Af|TypeInfo_Ag|TypeInfo_Ah|TypeInfo_Ai|TypeInfo_Aj|TypeInfo_Ak|TypeInfo_Al|TypeInfo_Am|TypeInfo_Ao|TypeInfo_Ap|TypeInfo_Aq|TypeInfo_Ar|TypeInfo_Array|TypeInfo_As|TypeInfo_AssociativeArray|TypeInfo_At|TypeInfo_Au|TypeInfo_Av|TypeInfo_Aw|TypeInfo_C|TypeInfo_Class|TypeInfo_D|TypeInfo_Delegate|TypeInfo_Enum|TypeInfo_Function|TypeInfo_Interface|TypeInfo_P|TypeInfo_Pointer|TypeInfo_StaticArray|TypeInfo_Struct|TypeInfo_Tuple|TypeInfo_Typedef|TypeInfo_a|TypeInfo_b|TypeInfo_c|TypeInfo_d|TypeInfo_e|TypeInfo_f|TypeInfo_g|TypeInfo_h|TypeInfo_i|TypeInfo_j|TypeInfo_k|TypeInfo_l|TypeInfo_m|TypeInfo_o|TypeInfo_p|TypeInfo_q|TypeInfo_r|TypeInfo_s|TypeInfo_t|TypeInfo_u|TypeInfo_v|TypeInfo_w|TypedInput|TypedOutput|URIerror|UdpSocket|UnCompress|UniText|UnicodeBom|UnicodeFile|UnknownAddress|Uri|UtfInput|UtfOutput|VirtualFolder|WrapSeekInputStream|WrapSeekOutputStream|Writer|XmlPrinter|ZipArchive|ZipBlockReader|ZipBlockWriter|ZipEntry|ZipEntryVerifier|ZipFile|ZipFileGroup|ZipFolder|ZipSubFolder|ZipSubFolderEntry|ZipSubFolderGroup|ZlibInput|ZlibOutput)\b
      scope: support.type.built-ins.classes.d
  support-type-built-ins-in:
    - include: support-type-built-ins-exceptions-in
    - include: support-type-built-ins-classes-in
    - include: support-type-built-ins-interfaces-in
    - include: support-type-built-ins-structs-in
  support-type-built-ins-exceptions-in:
    - match: \b(AddressException|ArrayBoundsError|ArrayBoundsException|AssertError|AssertException|Base64CharException|Base64Exception|BzipClosedException|BzipException|ClusterEmptyException|ClusterFullException|ConvError|ConvOverflowError|ConversionException|CorruptedIteratorException|DatabaseException|DateParseError|Exception|FTPException|FiberException|FileException|FinalizeException|FormatError|HostException|IOException|IllegalArgumentException|IllegalElementException|InvalidKeyException|InvalidTypeException|LocaleException|ModuleCtorError|NoSuchElementException|OpenException|OpenRJException|OutOfMemoryException|PlatformException|ProcessCreateException|ProcessException|ProcessForkException|ProcessKillException|ProcessWaitException|ReadException|RegExpException|RegexException|RegistryException|SeekException|SharedLibException|SocketAcceptException|SocketException|StdioException|StreamException|StreamFileException|StringException|SwitchError|SwitchException|SyncException|TextException|ThreadError|ThreadException|UnboxException|UnicodeException|UtfException|VariantTypeMismatchException|Win32Exception|WriteException|XmlException|ZipChecksumException|ZipException|ZipExhaustedException|ZipNotSupportedException|ZlibClosedException|ZlibException|OurUnwindException|SysError)\b
      scope: support.type.built-ins.exceptions.d
  support-type-built-ins-interfaces-in:
    - match: \b(Buffered|HttpParamsView|ICache|IChannel|IClassFactory|ICluster|IConduit|IConsumer|IEvent|IHierarchy|ILevel|IListener|IMessage|IMessageLoader|IOStream|IReadable|ISelectable|ISelectionSet|ISelector|IServer|IUnknown|IWritable|IXmlPrinter|InputStream|OutputStream|PathView|VfsFile|VfsFiles|VfsFolder|VfsFolderEntry|VfsFolders|VfsHost|VfsSync|ZipReader|ZipWriter)\b
      scope: support.type.built-ins.interfaces.d
  support-type-built-ins-structs-in:
    - match: \b(ABC|ABCFLOAT|ACCEL|ACCESSTIMEOUT|ACCESS_ALLOWED_ACE|ACCESS_DENIED_ACE|ACE_HEADER|ACL|ACL_REVISION_INFORMATION|ACL_SIZE_INFORMATION|ACTION_HEADER|ADAPTER_STATUS|ADDJOB_INFO_1|ANIMATIONINFO|APPBARDATA|Argument|Atomic|Attribute|BITMAP|BITMAPCOREHEADER|BITMAPCOREINFO|BITMAPINFO|BITMAPINFOHEADER|BITMAPV4HEADER|BLOB|BROWSEINFO|BY_HANDLE_FILE_INFORMATION|Bar|Baz|BitArray|Box|BracketResult|ByteSwap|CANDIDATEFORM|CANDIDATELIST|CBTACTIVATESTRUCT|CBT_CREATEWND|CHARFORMAT|CHARRANGE|CHARSET|CHARSETINFO|CHAR_INFO|CIDA|CIEXYZ|CIEXYZTRIPLE|CLIENTCREATESTRUCT|CMINVOKECOMMANDINFO|COLORADJUSTMENT|COLORMAP|COMMCONFIG|COMMPROP|COMMTIMEOUTS|COMPAREITEMSTRUCT|COMPCOLOR|COMPOSITIONFORM|COMSTAT|CONNECTDLGSTRUCT|CONSOLE_CURSOR_INFO|CONTEXT|CONVCONTEXT|CONVINFO|COORD|COPYDATASTRUCT|CPINFO|CPLINFO|CREATESTRUCT|CREATE_PROCESS_DEBUG_INFO|CREATE_THREAD_DEBUG_INFO|CRITICAL_SECTION|CRITICAL_SECTION_DEBUG|CURRENCYFMT|CURSORSHAPE|CWPRETSTRUCT|CWPSTRUCT|CharClass|CharRange|Clock|CodePage|Console|DATATYPES_INFO_1|DCB|DDEACK|DDEADVISE|DDEDATA|DDELN|DDEML_MSG_HOOK_DATA|DDEPOKE|DDEUP|DEBUGHOOKINFO|DEBUG_EVENT|DELETEITEMSTRUCT|DEVMODE|DEVNAMES|DEV_BROADCAST_HDR|DEV_BROADCAST_OEM|DEV_BROADCAST_PORT|DEV_BROADCAST_VOLUME|DIBSECTION|DIR|DISCDLGSTRUCT|DISK_GEOMETRY|DISK_PERFORMANCE|DOCINFO|DOC_INFO_1|DOC_INFO_2|DRAGLISTINFO|DRAWITEMSTRUCT|DRAWTEXTPARAMS|DRIVER_INFO_1|DRIVER_INFO_2|DRIVER_INFO_3|DRIVE_LAYOUT_INFORMATION|Date|DateParse|DateTime|DirEntry|DynArg|EDITSTREAM|EMPTYRECORD|EMR|EMRABORTPATH|EMRANGLEARC|EMRARC|EMRBITBLT|EMRCREATEBRUSHINDIRECT|EMRCREATECOLORSPACE|EMRCREATEDIBPATTERNBRUSHPT|EMRCREATEMONOBRUSH|EMRCREATEPALETTE|EMRCREATEPEN|EMRELLIPSE|EMREOF|EMREXCLUDECLIPRECT|EMREXTCREATEFONTINDIRECTW|EMREXTCREATEPEN|EMREXTFLOODFILL|EMREXTSELECTCLIPRGN|EMREXTTEXTOUTA|EMRFILLPATH|EMRFILLRGN|EMRFORMAT|EMRFRAMERGN|EMRGDICOMMENT|EMRINVERTRGN|EMRLINETO|EMRMASKBLT|EMRMODIFYWORLDTRANSFORM|EMROFFSETCLIPRGN|EMRPLGBLT|EMRPOLYDRAW|EMRPOLYDRAW16|EMRPOLYLINE|EMRPOLYLINE16|EMRPOLYPOLYLINE|EMRPOLYPOLYLINE16|EMRPOLYTEXTOUTA|EMRRESIZEPALETTE|EMRRESTOREDC|EMRROUNDRECT|EMRSCALEVIEWPORTEXTEX|EMRSELECTCLIPPATH|EMRSELECTCOLORSPACE|EMRSELECTOBJECT|EMRSELECTPALETTE|EMRSETARCDIRECTION|EMRSETBKCOLOR|EMRSETCOLORADJUSTMENT|EMRSETDIBITSTODEVICE|EMRSETMAPPERFLAGS|EMRSETMITERLIMIT|EMRSETPALETTEENTRIES|EMRSETPIXELV|EMRSETVIEWPORTEXTEX|EMRSETVIEWPORTORGEX|EMRSETWORLDTRANSFORM|EMRSTRETCHBLT|EMRSTRETCHDIBITS|EMRTEXT|ENCORRECTTEXT|ENDROPFILES|ENHMETAHEADER|ENHMETARECORD|ENOLEOPFAILED|ENPROTECTED|ENSAVECLIPBOARD|ENUMLOGFONT|ENUMLOGFONTEX|ENUM_SERVICE_STATUS|EVENTLOGRECORD|EVENTMSG|EXCEPTION_DEBUG_INFO|EXCEPTION_POINTERS|EXCEPTION_RECORD|EXIT_PROCESS_DEBUG_INFO|EXIT_THREAD_DEBUG_INFO|EXTLOGFONT|EXTLOGPEN|EXT_BUTTON|EmptySlot|EndOfCDRecord|Environment|FILETIME|FILTERKEYS|FINDREPLACE|FINDTEXTEX|FIND_NAME_BUFFER|FIND_NAME_HEADER|FIXED|FLOATING_SAVE_AREA|FMS_GETDRIVEINFO|FMS_GETFILESEL|FMS_LOAD|FMS_TOOLBARLOAD|FOCUS_EVENT_RECORD|FONTSIGNATURE|FORMATRANGE|FORMAT_PARAMETERS|FORM_INFO_1|FileConst|FileHeader|FileRoots|FileSystem|FoldingCaseData|Foo|FtpConnectionDetail|FtpFeature|FtpFileInfo|FtpResponse|GC|GCP_RESULTS|GCStats|GENERIC_MAPPING|GLYPHMETRICS|GLYPHMETRICSFLOAT|GROUP_INFO_2|GUID|HANDLETABLE|HD_HITTESTINFO|HD_ITEM|HD_LAYOUT|HD_NOTIFY|HELPINFO|HELPWININFO|HIGHCONTRAST|HSZPAIR|HeaderElement|HttpConst|HttpHeader|HttpHeaderName|HttpResponses|HttpStatus|HttpToken|ICONINFO|ICONMETRICS|IMAGEINFO|IMAGE_DOS_HEADER|INPUT_RECORD|ITEMIDLIST|IeeeFlags|Interface|JOB_INFO_1|JOB_INFO_2|KERNINGPAIR|LANA_ENUM|LAYERPLANEDESCRIPTOR|LDT_ENTRY|LIST_ENTRY|LOAD_DLL_DEBUG_INFO|LOCALESIGNATURE|LOCALGROUP_INFO_0|LOCALGROUP_MEMBERS_INFO_0|LOCALGROUP_MEMBERS_INFO_3|LOGBRUSH|LOGCOLORSPACE|LOGFONT|LOGFONTA|LOGFONTW|LOGPALETTE|LOGPEN|LUID_AND_ATTRIBUTES|LV_COLUMN|LV_DISPINFO|LV_FINDINFO|LV_HITTESTINFO|LV_ITEM|LV_KEYDOWN|LocalFileHeader|MAT2|MD5_CTX|MDICREATESTRUCT|MEASUREITEMSTRUCT|MEMORYSTATUS|MEMORY_BASIC_INFORMATION|MENUEX_TEMPLATE_HEADER|MENUEX_TEMPLATE_ITEM|MENUITEMINFO|MENUITEMTEMPLATE|MENUITEMTEMPLATEHEADER|MENUTEMPLATE|MENU_EVENT_RECORD|METAFILEPICT|METARECORD|MINIMIZEDMETRICS|MINMAXINFO|MODEMDEVCAPS|MODEMSETTINGS|MONCBSTRUCT|MONCONVSTRUCT|MONERRSTRUCT|MONHSZSTRUCT|MONITOR_INFO_1|MONITOR_INFO_2|MONLINKSTRUCT|MONMSGSTRUCT|MOUSEHOOKSTRUCT|MOUSEKEYS|MOUSE_EVENT_RECORD|MSG|MSGBOXPARAMS|MSGFILTER|MULTIKEYHELP|NAME_BUFFER|NCB|NCCALCSIZE_PARAMS|NDDESHAREINFO|NETCONNECTINFOSTRUCT|NETINFOSTRUCT|NETRESOURCE|NEWCPLINFO|NEWTEXTMETRIC|NEWTEXTMETRICEX|NMHDR|NM_LISTVIEW|NM_TREEVIEW|NM_UPDOWNW|NONCLIENTMETRICS|NS_SERVICE_INFO|NUMBERFMT|OFNOTIFY|OFSTRUCT|OPENFILENAME|OPENFILENAMEA|OPENFILENAMEW|OSVERSIONINFO|OUTLINETEXTMETRIC|OUTPUT_DEBUG_STRING_INFO|OVERLAPPED|OffsetTypeInfo|PAINTSTRUCT|PALETTEENTRY|PANOSE|PARAFORMAT|PARTITION_INFORMATION|PERF_COUNTER_BLOCK|PERF_COUNTER_DEFINITION|PERF_DATA_BLOCK|PERF_INSTANCE_DEFINITION|PERF_OBJECT_TYPE|PIXELFORMATDESCRIPTOR|POINT|POINTFLOAT|POINTFX|POINTL|POINTS|POLYTEXT|PORT_INFO_1|PORT_INFO_2|PREVENT_MEDIA_REMOVAL|PRINTER_DEFAULTS|PRINTER_INFO_1|PRINTER_INFO_2|PRINTER_INFO_3|PRINTER_INFO_4|PRINTER_INFO_5|PRINTER_NOTIFY_INFO|PRINTER_NOTIFY_INFO_DATA|PRINTER_NOTIFY_OPTIONS|PRINTER_NOTIFY_OPTIONS_TYPE|PRINTPROCESSOR_INFO_1|PRIVILEGE_SET|PROCESS_HEAPENTRY|PROCESS_INFORMATION|PROPSHEETHEADER|PROPSHEETHEADER_U1|PROPSHEETHEADER_U2|PROPSHEETHEADER_U3|PROPSHEETPAGE|PROPSHEETPAGE_U1|PROPSHEETPAGE_U2|PROTOCOL_INFO|PROVIDOR_INFO_1|PSHNOTIFY|PUNCTUATION|PassByCopy|PassByRef|Phase1Info|PropertyConfigurator|QUERY_SERVICE_CONFIG|QUERY_SERVICE_LOCK_STATUS|RASAMB|RASCONN|RASCONNSTATUS|RASDIALEXTENSIONS|RASDIALPARAMS|RASENTRYNAME|RASPPPIP|RASPPPIPX|RASPPPNBF|RASTERIZER_STATUS|REASSIGN_BLOCKS|RECT|RECTL|REMOTE_NAME_INFO|REPASTESPECIAL|REQRESIZE|RGBQUAD|RGBTRIPLE|RGNDATA|RGNDATAHEADER|RIP_INFO|Runtime|SCROLLINFO|SECURITY_ATTRIBUTES|SECURITY_DESCRIPTOR|SECURITY_QUALITY_OF_SERVICE|SELCHANGE|SERIALKEYS|SERVICE_ADDRESS|SERVICE_ADDRESSES|SERVICE_INFO|SERVICE_STATUS|SERVICE_TABLE_ENTRY|SERVICE_TYPE_INFO_ABS|SERVICE_TYPE_VALUE_ABS|SESSION_BUFFER|SESSION_HEADER|SET_PARTITION_INFORMATION|SHFILEINFO|SHFILEOPSTRUCT|SHITEMID|SHNAMEMAPPING|SID|SID_AND_ATTRIBUTES|SID_IDENTIFIER_AUTHORITY|SINGLE_LIST_ENTRY|SIZE|SMALL_RECT|SOUNDSENTRY|STARTUPINFO|STICKYKEYS|STRRET|STYLEBUF|STYLESTRUCT|SYSTEMTIME|SYSTEM_AUDIT_ACE|SYSTEM_INFO|SYSTEM_INFO_U|SYSTEM_POWER_STATUS|Signal|SjLj_Function_Context|SpecialCaseData|TAPE_ERASE|TAPE_GET_DRIVE_PARAMETERS|TAPE_GET_MEDIA_PARAMETERS|TAPE_GET_POSITION|TAPE_PREPARE|TAPE_SET_DRIVE_PARAMETERS|TAPE_SET_MEDIA_PARAMETERS|TAPE_SET_POSITION|TAPE_WRITE_MARKS|TBADDBITMAP|TBBUTTON|TBNOTIFY|TBSAVEPARAMS|TCHOOSECOLOR|TCHOOSEFONT|TC_HITTESTINFO|TC_ITEM|TC_ITEMHEADER|TC_KEYDOWN|TEXTMETRIC|TEXTMETRICA|TEXTRANGE|TFINDTEXT|TIME_ZONE_INFORMATION|TOGGLEKEYS|TOKEN_CONTROL|TOKEN_DEFAULT_DACL|TOKEN_GROUPS|TOKEN_OWNER|TOKEN_PRIMARY_GROUP|TOKEN_PRIVILEGES|TOKEN_SOURCE|TOKEN_STATISTICS|TOKEN_USER|TOOLINFO|TOOLTIPTEXT|TPAGESETUPDLG|TPMPARAMS|TRANSMIT_FILE_BUFFERS|TREEITEM|TSMALLPOINT|TTHITTESTINFO|TTPOLYCURVE|TTPOLYGONHEADER|TVARIANT|TV_DISPINFO|TV_HITTESTINFO|TV_INSERTSTRUCT|TV_ITEM|TV_KEYDOWN|TV_SORTCB|Time|TimeOfDay|TimeSpan|Tuple|UDACCEL|ULARGE_INTEGER|UNIVERSAL_NAME_INFO|UNLOAD_DLL_DEBUG_INFO|USEROBJECTFLAGS|USER_INFO_0|USER_INFO_2|USER_INFO_3|UnicodeData|VALENT|VA_LIST|VERIFY_INFORMATION|VS_FIXEDFILEINFO|Variant|VfsFilterInfo|WIN32_FILE_ATTRIBUTE_DATA|WIN32_FIND_DATA|WIN32_FIND_DATAW|WIN32_STREAM_ID|WINDOWINFO|WINDOWPLACEMENT|WINDOWPOS|WINDOW_BUFFER_SIZE_RECORD|WNDCLASS|WNDCLASSA|WNDCLASSEX|WNDCLASSEXA|WSADATA|WallClock|XFORM|ZipEntryInfo)\b
      scope: support.type.built-ins.structs.d
  support-type-in:
    - match: '\b((?:tango|std)\.[\w\.]+)\b'
      scope: support.type.d
