%YAML 1.2
---
# This definition aims to meet CommonMark specifications
#   http://spec.commonmark.org/
# with GitHub Formatted Markdown extensions
#   https://github.github.com/gfm/
# and has a few extras like Markdown Extra's footnotes
#   https://michelf.ca/projects/php-markdown/extra/#footnotes
#
# The scope suffix should indicate which flavor of Markdown the feature came from,
# to help make this syntax definition easier to maintain.
name: Markdown
scope: text.html.markdown

file_extensions:
  - md
  - mdown
  - markdown
  - markdn

variables:
    atx_heading: (?:[ ]{,3}[#]{1,6}(?:[ \t]|$))         # between 0 and 3 spaces, followed 1 to 6 hashes, followed by at least one space or tab or by end of the line
    atx_heading_space: (?:(?=[ \t]+#+[ \t]*$)|[ \t]+|$) # consume spaces only if heading is not empty to ensure `atx_heading_end` can fully match closing hashes
    atx_heading_end: (?:[ \t]+(#+))?[ \t]*($\n?)        # \n is optional so ## is matched as end punctuation in new document (at eof)
    setext_escape: ^(?=[ ]{,3}(?:=+|-+)\s*$)            # between 0 and 3 spaces, followed by at least one hyphon or equal sign (setext underline can be of any length)

    block_quote: (?:[ ]{,3}(>)[ ]?)                     # between 0 and 3 spaces, followed by a greater than sign, (followed by any character or the end of the line = "only care about optional space!")
    indented_code_block: (?:[ ]{4}|\t)                  # 4 spaces or a tab
    list_item: (?:[ ]{,3}(?:\d+[.)]|[*+-])\s)           # between 0 and 3 spaces, followed by either: at least one integer and a full stop or a parenthesis, or (a star, plus or dash), followed by whitespace
    thematic_break: |-
      (?x:
        [ ]{,3}                    # between 0 to 3 spaces
        (?:                        # followed by one of the following:
          [-](?:[ ]{,2}[-]){2,}    # - a dash,        followed by the following at least twice: between 0 to 2 spaces followed by a dash
        | [*](?:[ ]{,2}[*]){2,}    # - a star,        followed by the following at least twice: between 0 to 2 spaces followed by a star
        | [_](?:[ ]{,2}[_]){2,}    # - an underscore, followed by the following at least twice: between 0 to 2 spaces followed by an underscore
        )
        [ \t]*$                    # followed by any number of tabs or spaces, followed by the end of the line
      )

    backticks: |-
      (?x:
        (`{4})(?![\s`])(?:[^`]+(?=`)|(?!`{4})`+(?!`))+(`{4})(?!`)  # 4 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 4 backticks, or at least one non backtick character) at least once, followed by exactly 4 backticks
      | (`{3})(?![\s`])(?:[^`]+(?=`)|(?!`{3})`+(?!`))+(`{3})(?!`)  # 3 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 3 backticks, or at least one non backtick character) at least once, followed by exactly 3 backticks
      | (`{2})(?![\s`])(?:[^`]+(?=`)|(?!`{2})`+(?!`))+(`{2})(?!`)  # 2 backticks, followed by at least one non whitespace, non backtick character, followed by (less than 2 backticks, or at least one non backtick character) at least once, followed by exactly 2 backticks
      | (`{1})(?![\s`])(?:[^`]+(?=`)|(?!`{1})`+(?!`))+(`{1})(?!`)  # 1 backtick,  followed by at least one non whitespace, non backtick character, followed by (                          at least one non backtick character) at least once, followed by exactly 1 backtick
      )
    escape: \\[-`*_#+.!(){}\[\]\\>|~<]

    balance_square_brackets: |-
      (?x:
        (?:
          {{escape}}+                       # escape characters
        | [^\[\]`\\]+(?=[\[\]`\\]|$)        # anything that isn't a square bracket or a backtick or the start of an escape character
        | {{backticks}}                     # inline code
        | \[(?:                             # nested square brackets (one level deep)
            [^\[\]`]+(?=[\[\]`])            #  anything that isn't a square bracket or a backtick
            {{backticks}}?                  #  balanced backticks
          )*\]                              #  closing square bracket
        )+
      )
    balance_square_brackets_and_emphasis: |-
      (?x:
        (?:
          {{escape}}+                       # escape characters
        | [^\[\]`\\_*]+(?=[\[\]`\\_*]|$)    # anything that isn't a square bracket, a backtick, the start of an escape character, or an emphasis character
        | {{backticks}}                     # inline code
        | \[(?:                             # nested square brackets (one level deep)
            [^\[\]`]+(?=[\[\]`])            #  anything that isn't a square bracket or a backtick
            {{backticks}}?                  #  balanced backticks
          )*\]                              #  closing square bracket
        )+                                  # at least one character
      )
    balance_square_brackets_pipes_and_emphasis: |-
      (?x:
        (?:
          {{escape}}+                       # escape characters
        | [^\[\]`\\_*|]+(?=[\[\]`\\_*|]|$)  # anything that isn't a square bracket, a backtick, the start of an escape character, or an emphasis character
        | {{backticks}}                     # inline code
        | \[(?:                             # nested square brackets (one level deep)
            [^\[\]`]+(?=[\[\]`])            #  anything that isn't a square bracket or a backtick
            {{backticks}}?                  #  balanced backticks
          )*\]                              #  closing square bracket
        )+                                  # at least one character
      )
    balanced_emphasis: |-
      (?x:
        \*  (?!\*){{balance_square_brackets_and_emphasis}}+\*  (?!\*)
      | \*\*      {{balance_square_brackets_and_emphasis}}+\*\*
      | _   (?!_) {{balance_square_brackets_and_emphasis}}+_   (?!_)
      | __        {{balance_square_brackets_and_emphasis}}+__
      )

    table_cell: |-
      (?x:
        # Pipes inside other inline spans (such as emphasis, code, etc.) will not break a cell,
        # emphasis in table cells can't span multiple lines
        (?:
          {{balance_square_brackets_pipes_and_emphasis}}
        | {{balanced_emphasis}}
        )+  # at least one character
      )
    table_first_row: |-
      (?x:
        # at least 2 non-escaped pipe chars on the line
        (?:{{table_cell}}?\|){2}

        # something other than whitespace followed by a pipe char or hyphon,
        # followed by something other than whitespace and the end of the line
      | (?! \s*\-\s+ | \s+\|){{table_cell}}\|(?!\s+$)
      )

    fenced_code_block_start: |-
      (?x:
        ([ \t]*)
        (
          (`){3,}      #   3 or more backticks
          (?![^`]*`)   #   not followed by any more backticks on the same line
        |              # or
          (~){3,}      #   3 or more tildas
          (?![^~]*~)   #   not followed by any more tildas on the same line
        )
        \s*            # allow for whitespace between code block start and info string
      )
    fenced_code_block_language: |-
      (?x:             # first word of an infostring is used as language specifier
        (
          [[:alpha:]]  # starts with a letter to make sure not to hit any attribute annotation
          [^`\s]*      # optionally followed by any nonwhitespace character (except backticks)
        )
      )
    fenced_code_block_trailing_infostring_characters: |-
      (?x:
        (
          \s*          # any whitespace, or ..
        |
          \s[^`]*      # any characters (except backticks), separated by whitespace ...
        )
        $\n?           # ... until EOL
      )
    fenced_code_block_end: |-
      (?x:
        [ \t]*
        (
          \2           # the backtick/tilde combination that opened the code fence
          (?:\3|\4)*   # plus optional additional closing characters
        )
        \s*$           # any amount of whitespace until EOL
      )
    fenced_code_block_escape: ^{{fenced_code_block_end}}

    # https://spec.commonmark.org/0.30/#email-autolink
    email_domain_commonmark: '[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?'
    email_user_commonmark: '[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+'

    # https://spec.commonmark.org/0.30/#html-blocks
    html_block_comment: <!--
    html_block_cdata: <!\[CDATA\[
    html_block_decl: <![a-zA-Z]
    html_block_preprocessor: <\?
    html_block_open_tag: |-
      (?xi:
        <
        [a-z]             # A tag name consists of an ASCII letter
        [a-z0-9-]*        # followed by zero or more ASCII letters, digits, or hyphens (-)
        (?:               # An attribute consists of whitespace, an attribute name, and an optional attribute value specification
          \s+
          [a-z_:]         # An attribute name consists of an ASCII letter, _, or :
          [a-z0-9_.:-]*   # followed by zero or more ASCII letters, digits, _, ., :, or -
          (?:             # An attribute value specification consists of optional whitespace, a = character, optional whitespace, and an attribute value
            \s*
            =
            \s*
            (?:
              [^ @'=<>`]+ # An unquoted attribute value is a nonempty string of characters not including spaces, ", ', =, <, >, or `
            | '[^']*'     # A single-quoted attribute value consists of ', zero or more characters not including ', and a final '
            | "[^"]*"     # A double-quoted attribute value consists of ", zero or more characters not including ", and a final "
            )
          )?
        )*
        \s*
        /?
        >
        \s*$
      )
    html_block_close_tag: |-
      (?xi:
        </
        [a-z]             # A tag name consists of an ASCII letter
        [a-z0-9-]*        # followed by zero or more ASCII letters, digits, or hyphens (-)
        \s*
        >
        \s*$
      )
    html_tag_block_end_at_close_tag: |-
      <(?xi: pre | script | style | textarea ){{html_tag_break_char}}
    html_tag_block_end_at_blank_line: |-
      <(?xi:
        address | article | aside | base | basefont | blockquote | body | caption
      | c enter | col | colgroup | dd | details | dialog | dir | div | dl | dt
      | fieldset | figcaption | figure | footer | form | frame | frameset | h1 | h2
      | h3 | h4 | h5 | h6 | head | header | hr | html | iframe | legend | li | link
      | main | menu | menuitem | nav | noframes | ol | optgroup | option | p | param
      | section | source | summary | table | tbody | td | tfoot | th
      | thead | title | tr | track | ul
      ){{html_tag_maybe_selfclosing_break_char}}
    html_tag_break_char: (?:[ \t>]|$)
    html_tag_maybe_selfclosing_break_char: (?:[ \t]|/?>|$)

    html_entity: '&([a-zA-Z0-9]+|#\d+|#x\h+);'

    ascii_space: '\t\n\f '
    tag_attribute_name_start: (?=[^{{ascii_space}}=/>}])
    tag_attribute_name_break: (?=[{{ascii_space}}=/>}])
    tag_unquoted_attribute_start: (?=[^{{ascii_space}}=/>}])
    tag_unquoted_attribute_break: (?=[{{ascii_space}}}]|/?>)

    footnote_name: (?:\^(?:\\\]|[^]])+)
    reference_name: (?:(?:\\\]|[^]])+)

##############################################################################

contexts:

  main:
    - include: frontmatter
    - match: ''
      set: markdown

  frontmatter:
    - match: (---)\s*(?i:(json)\s*)\n
      captures:
        0: meta.frontmatter.markdown
        1: punctuation.section.block.begin.frontmatter.markdown
        2: constant.other.language-name.markdown
      embed: scope:source.json
      embed_scope: meta.frontmatter.markdown source.json.embedded.markdown
      escape: ^(---|\.{3})\s*\n # pandoc requires the remainder of the line to be blank
      escape_captures:
        0: meta.frontmatter.markdown
        1: punctuation.section.block.end.frontmatter.markdown
    - match: (---)\s*(?i:(yaml)\s*)?\n
      captures:
        0: meta.frontmatter.markdown
        1: punctuation.section.block.begin.frontmatter.markdown
        2: constant.other.language-name.markdown
      embed: scope:source.yaml
      embed_scope: meta.frontmatter.markdown source.yaml.embedded.markdown
      escape: ^(---|\.{3})\s*\n  # pandoc requires the remainder of the line to be blank
      escape_captures:
        0: meta.frontmatter.markdown
        1: punctuation.section.block.end.frontmatter.markdown

  markdown:
    - include: indented-code-blocks
    - include: thematic-breaks
    - include: block-quotes
    - include: list-blocks
    - include: tables
    - include: fenced-code-blocks
    - include: html-blocks
    - include: reference-definitions
    - include: atx-headings
    - include: setext-headings-or-paragraphs

###[ CONTAINER BLOCKS: BLOCK QUOTES ]#########################################

  block-quotes:
    # https://spec.commonmark.org/0.30/#block-quotes
    - match: '{{block_quote}}'
      comment: |-
        We terminate the block quote when seeing an empty line, a
        separator or a line with leading > characters. The latter is
        to “reset” the quote level for quoted lines.
        The idea here is to match block level elements first, then once
        we have confirmed there are no block level elements left, move to
        matching inline markdown. This prevents block level elements being
        detected when they shouldn't be.
      captures:
        1: punctuation.definition.blockquote.markdown
      push:
        - block-quote-meta
        - block-quote-content

  block-quote-nested:
    - match: '{{block_quote}}'
      captures:
        1: punctuation.definition.blockquote.markdown
      set:
        - block-quote-meta
        - block-quote-content

  block-quote-meta:
    - meta_include_prototype: false
    - meta_scope: markup.quote.markdown
    - include: immediately-pop

  block-quote-content:
    - include: block-quote-nested
    - include: block-quote-code-block
    - include: block-quote-list-item
    - include: atx-headings
    - include: indented-code-blocks
    - include: thematic-breaks
    - match: ''
      set: block-quote-text

  block-quote-code-block:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          {{fenced_code_block_language}}?
          .*$\n?       # all characters until EOL
      captures:
        0: meta.code-fence.definition.begin.text.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      set: block-quote-code-block-content

  block-quote-code-block-content:
    - match: ^(?!\s*{{block_quote}})
      pop: true
    - match: '{{fenced_code_block_end}}'
      captures:
        0: meta.code-fence.definition.end.text.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown
      pop: true
    - match: '{{block_quote}}'
      captures:
        1: punctuation.definition.blockquote.markdown
    - match: ''
      push: block-quote-code-block-text

  block-quote-code-block-text:
    - meta_include_prototype: false
    - meta_content_scope: markup.raw.code-fence.markdown-gfm
    - match: ^
      pop: true

  block-quote-list-item:
    - match: ([ ]{,3})(\d+([.)]))(\s)
      captures:
        1: markup.list.numbered.markdown
        2: markup.list.numbered.bullet.markdown
        3: punctuation.definition.list_item.markdown
        4: markup.list.numbered.markdown
      set:
        - block-quote-ordered-list-content
        - list-content
    - match: ([ ]{,3})([*+-])((?:[ ](\[)([ xX])(\]))?\s)
      captures:
        1: markup.list.unnumbered.markdown
        2: markup.list.unnumbered.bullet.markdown punctuation.definition.list_item.markdown
        3: markup.list.unnumbered.markdown
        4: markup.checkbox.begin.markdown-gfm punctuation.definition.checkbox.begin.markdown-gfm
        5: markup.checkbox.mark.markdown-gfm
        6: markup.checkbox.end.markdown-gfm punctuation.definition.checkbox.end.markdown-gfm
      set:
        - block-quote-unordered-list-content
        - list-content

  block-quote-ordered-list-content:
    - meta_content_scope: markup.list.numbered.markdown meta.paragraph.list.markdown
    - include: block-quote-text

  block-quote-unordered-list-content:
    - meta_content_scope: markup.list.unnumbered.markdown meta.paragraph.list.markdown
    - include: block-quote-text

  block-quote-text:
    - match: |-
        (?x)
        ^
        (?= \s*$
        |   {{atx_heading}}
        |   {{block_quote}}
        |   {{fenced_code_block_start}}
        |   {{list_item}}
        |   {{thematic_break}}
        )
      pop: true
    - include: inlines

###[ CONTAINER BLOCKS: LISTS ]################################################

  list-blocks:
    - match: ^([ ]{,3})([*+-])( (\[)([ xX])(\]))?(?=\s)
      captures:
        1: markup.list.unnumbered.markdown
        2: markup.list.unnumbered.bullet.markdown punctuation.definition.list_item.markdown
        3: markup.list.unnumbered.markdown
        4: markup.checkbox.begin.markdown-gfm punctuation.definition.checkbox.begin.markdown-gfm
        5: markup.checkbox.mark.markdown-gfm
        6: markup.checkbox.end.markdown-gfm punctuation.definition.checkbox.end.markdown-gfm
      push: unordered-list-paragraph
    - match: ^([ ]{,3})(\d+([.)]))(?=\s)
      captures:
        1: markup.list.numbered.markdown
        2: markup.list.numbered.bullet.markdown
        3: punctuation.definition.list_item.markdown
      push: ordered-list-paragraph

  unordered-list-paragraph:
    - meta_content_scope: markup.list.unnumbered.markdown
    - include: list-paragraph

  ordered-list-paragraph:
    - meta_content_scope: markup.list.numbered.markdown
    - include: list-paragraph

  list-paragraph:
    - match: ^(?=\S|{{atx_heading}})
      pop: true
    - include: list-indended-code-blocks
    - include: block-quotes
    - include: fenced-code-blocks
    - include: html-blocks
    - include: reference-definitions
    - include: thematic-breaks
    - match: (?=\S)
      push: list-items

  list-indended-code-blocks:
    # at least 8 chars / 2 tabs
    - match: ^{{indented_code_block}}{2,}[^>+*\s-].*$\n?
      scope: markup.raw.block.markdown

  list-items:
    - match: ^(?=\s*$|{{atx_heading}})
      pop: true
    - match: ([ ]*)([*+-])((?:[ ](\[)([ xX])(\]))?\s)
      captures:
        1: markup.list.unnumbered.markdown
        2: markup.list.unnumbered.bullet.markdown punctuation.definition.list_item.markdown
        3: markup.list.unnumbered.markdown
        4: markup.checkbox.begin.markdown-gfm punctuation.definition.checkbox.begin.markdown-gfm
        5: markup.checkbox.mark.markdown-gfm
        6: markup.checkbox.end.markdown-gfm punctuation.definition.checkbox.end.markdown-gfm
      push: unordered-list-content
    - match: ([ ]*)(\d+([.)]))(?=\s)
      captures:
        1: markup.list.numbered.markdown
        2: markup.list.numbered.bullet.markdown
        3: punctuation.definition.list_item.markdown
      push: ordered-list-content
    - match: \s+
      scope: meta.paragraph.list.markdown
    - match: (?=\S)
      push: list-content

  unordered-list-content:
    - clear_scopes: 1
    - meta_content_scope: markup.list.unnumbered.markdown meta.paragraph.list.markdown
    - include: list-content

  ordered-list-content:
    - clear_scopes: 1
    - meta_content_scope: markup.list.numbered.markdown meta.paragraph.list.markdown
    - include: list-content

  list-content:
    - meta_content_scope: meta.paragraph.list.markdown
    - include: block-quotes
    - include: fenced-code-blocks
    - include: html-blocks
    - include: reference-definitions
    - include: thematic-breaks
    - match: ^
      pop: true
    - match: (?=\S)
      push: list-text

  list-text:
    - include: inlines
    - match: $
      pop: true
    - match: (?={{list_item}})
      pop: true

###[ LEAF BLOCKS: ATX HEADINGS ]##############################################

  atx-headings:
    # https://spec.commonmark.org/0.30/#atx-headings
    # Note:
    #   Consume spaces and tabs after opening hashes so entity.name
    #   starts with first non-whitespace character,
    #   but don't do so if directly followed by closing hashes
    #   as terminator pattern requires them to match then.
    - match: '[ ]{,3}(#{1}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading1-content
    - match: '[ ]{,3}(#{2}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading2-content
    - match: '[ ]{,3}(#{3}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading3-content
    - match: '[ ]{,3}(#{4}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading4-content
    - match: '[ ]{,3}(#{5}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading5-content
    - match: '[ ]{,3}(#{6}){{atx_heading_space}}'
      captures:
        1: punctuation.definition.heading.begin.markdown
      push: atx-heading6-content

  atx-heading1-content:
    - meta_scope: markup.heading.1.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading2-content:
    - meta_scope: markup.heading.2.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading3-content:
    - meta_scope: markup.heading.3.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading4-content:
    - meta_scope: markup.heading.4.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading5-content:
    - meta_scope: markup.heading.5.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading6-content:
    - meta_scope: markup.heading.6.markdown
    - meta_content_scope: entity.name.section.markdown
    - include: atx-heading-content

  atx-heading-content:
    - match: '{{atx_heading_end}}'
      captures:
        1: punctuation.definition.heading.end.markdown
        2: meta.whitespace.newline.markdown
      pop: true
    - include: emphasis
    - include: images
    - include: literals
    - include: links

###[ LEAF BLOCKS: SETEXT HEADINGS OR PARAGRAPH ]##############################

  setext-headings-or-paragraphs:
    # A paragraph may start with a line of equal signs which must not be matched
    # as heading underline. This is achieved by consuming them here, which also
    # applies `meta.paragraph` scope as expected.
    # A line of dashes is already matched as thematic break and thus ignored.
    - match: ^[ ]{,3}(?:=+|(?=\S))
      branch_point: setext-headings-or-paragraphs
      branch:
        - paragraph
        - setext-heading2
        - setext-heading1

  setext-heading1:
    # https://spec.commonmark.org/0.30/#setext-headings
    - meta_scope: markup.heading.1.markdown
    - meta_content_scope: entity.name.section.markdown
    - match: ^[ ]{,3}(=+)[ \t]*$(\n?)
      captures:
        1: punctuation.definition.heading.setext.markdown
        2: meta.whitespace.newline.markdown
      pop: true
    - include: setext-heading-content

  setext-heading2:
    # https://spec.commonmark.org/0.30/#setext-headings
    - meta_scope: markup.heading.2.markdown
    - meta_content_scope: entity.name.section.markdown
    - match: ^[ ]{,3}(-+)[ \t]*$(\n?)
      captures:
        1: punctuation.definition.heading.setext.markdown
        2: meta.whitespace.newline.markdown
      pop: true
    - include: setext-heading-content

  setext-heading-content:
    - match: '{{setext_escape}}'
      fail: setext-headings-or-paragraphs
    - include: emphasis
    - include: images
    - include: literals
    - include: links
    - include: markups

  paragraph:
    # https://spec.commonmark.org/0.30/#paragraphs
    - meta_scope: meta.paragraph.markdown
    - match: '{{setext_escape}}'
      fail: setext-headings-or-paragraphs
    - include: paragraph-end
    - include: inlines

  paragraph-end:
    - match: |-
        (?x)
        ^(?= # pop out of this context if one of the following conditions are met:
            \s*$                        # the line is blank (or only contains whitespace)
          | {{atx_heading}}             # an ATX heading begins the line
          | {{block_quote}}             # a blockquote begins the line
          | {{fenced_code_block_start}} # a fenced codeblock begins the line
          | {{thematic_break}}          # line is a thematic beak
          | [ ]{,3}
            (?:
              1[.)]\s                   # an ordered list item with number "1" begins the line
            | [*+-]\s                   # an unordered list item begins the line
            | {{html_tag_block_end_at_close_tag}}  # html block type 1
            | {{html_tag_block_end_at_blank_line}} # html block type 6
            | {{html_block_open_tag}}              # html block type 7
            | {{html_block_close_tag}}             # html block type 7
            | {{html_block_comment}}               # html block type 2
            | {{html_block_decl}}                  # html block type 4
            | {{html_block_cdata}}                 # html block type 5
            | {{html_block_preprocessor}}          # html block type 3
            )
          )
      pop: true

###[ LEAF BLOCKS: INDENTED CODE BLOCKS ]######################################

  indented-code-blocks:
    # https://spec.commonmark.org/0.30/#indented-code-blocks
    - match: '{{indented_code_block}}.*$\n?'
      scope: markup.raw.block.markdown

###[ LEAF BLOCKS: FENCED CODE BLOCKS ]########################################

  fenced-code-blocks:
    # https://spec.commonmark.org/0.30/#fenced-code-blocks
    - match: ^(?={{fenced_code_block_start}})
      push: fenced-code-block-content

  fenced-code-block-content:
    - match: $
      pop: true
    - include: fenced-syntaxes
    - include: fenced-raw

  fenced-syntaxes:
    - include: fenced-actionscript
    - include: fenced-applescript
    - include: fenced-clojure
    - include: fenced-c
    - include: fenced-cpp
    - include: fenced-csharp
    - include: fenced-css
    - include: fenced-diff
    - include: fenced-dosbatch
    - include: fenced-erlang
    - include: fenced-graphviz
    - include: fenced-golang
    - include: fenced-haskell
    - include: fenced-html-php
    - include: fenced-html
    - include: fenced-java
    - include: fenced-javascript
    - include: fenced-jsonc
    - include: fenced-jspx
    - include: fenced-jsx
    - include: fenced-lisp
    - include: fenced-lua
    - include: fenced-matlab
    - include: fenced-objc
    - include: fenced-objcpp
    - include: fenced-ocaml
    - include: fenced-perl
    - include: fenced-php
    - include: fenced-python
    - include: fenced-regexp
    - include: fenced-rscript
    - include: fenced-ruby
    - include: fenced-rust
    - include: fenced-scala
    - include: fenced-shell-script
    - include: fenced-sql
    - include: fenced-tsx
    - include: fenced-typescript
    - include: fenced-xml
    - include: fenced-yaml

  fenced-actionscript:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:actionscript|as))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.actionscript.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.actionscript.2
      embed_scope: markup.raw.code-fence.actionscript.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.actionscript.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-applescript:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:applescript|osascript))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.applescript.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.applescript
      embed_scope: markup.raw.code-fence.applescript.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.applescript.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-clojure:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:clojure|clj))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.clojure.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.clojure
      embed_scope: markup.raw.code-fence.clojure.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.clojure.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-c:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:c|h))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.c.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.c
      embed_scope: markup.raw.code-fence.c.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.c.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-cpp:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:c\+\+|cc|cpp|cxx|h\+\+|hpp|hxx))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.c++.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.c++
      embed_scope: markup.raw.code-fence.c++.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.c++.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-csharp:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:csharp|c\#|cs))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.csharp.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.cs
      embed_scope: markup.raw.code-fence.csharp.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.csharp.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-css:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:css))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.css.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.css
      embed_scope: markup.raw.code-fence.css.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.css.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-diff:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:diff|patch))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.diff.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.diff
      embed_scope: markup.raw.code-fence.diff.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.diff.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-dosbatch:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:bat|cmd|dos))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.dosbatch.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.dosbatch
      embed_scope: markup.raw.code-fence.dosbatch.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.dosbatch.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-erlang:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:erlang|escript))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.erlang.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.erlang
      embed_scope: markup.raw.code-fence.erlang.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.erlang.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-graphviz:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:graphviz))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.graphviz.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.dot
      embed_scope: markup.raw.code-fence.graphviz.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.graphviz.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-golang:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:go(?:lang)?))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.go.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.go
      embed_scope: markup.raw.code-fence.go.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.go.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-haskell:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:haskell))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.haskell.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.haskell
      embed_scope: markup.raw.code-fence.haskell.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.haskell.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-html-php:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:html\+php))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.html-php.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:embedding.php
      embed_scope: markup.raw.code-fence.html-php.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.html-php.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-html:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:html))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.html.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:text.html.basic
      embed_scope: markup.raw.code-fence.html.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.html.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-java:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:java))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.java.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.java
      embed_scope: markup.raw.code-fence.java.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.java.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-javascript:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:javascript|js))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.javascript.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.js
      embed_scope: markup.raw.code-fence.javascript.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.javascript.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-jsonc:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:jsonc?))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.json.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.json
      embed_scope: markup.raw.code-fence.json.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.json.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-jspx:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:jspx?))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.jsp.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:text.html.jsp
      embed_scope: markup.raw.code-fence.jsp.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.jsp.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-jsx:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:jsx))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.jsx.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.jsx
      embed_scope: markup.raw.code-fence.jsx.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.jsx.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-lisp:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:lisp))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.lisp.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.lisp
      embed_scope: markup.raw.code-fence.lisp.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.lisp.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-lua:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:lua))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.lua.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.lua
      embed_scope: markup.raw.code-fence.lua.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.lua.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-matlab:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:matlab))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.matlab.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.matlab
      embed_scope: markup.raw.code-fence.matlab.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.matlab.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-objc:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:objc|obj-c|objectivec|objective-c))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.objc.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.objc
      embed_scope: markup.raw.code-fence.objc.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.objc.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-objcpp:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:objc\+\+|obj-c\+\+|objectivec\+\+|objective-c\+\+))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.objc++.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.objc++
      embed_scope: markup.raw.code-fence.objc++.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.objc++.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-ocaml:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:ocaml))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.ocaml.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.ocaml
      embed_scope: markup.raw.code-fence.ocaml.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.ocaml.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-perl:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:perl))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.perl.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.perl
      embed_scope: markup.raw.code-fence.perl.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.perl.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-php:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:php|inc))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.php.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.php
      embed_scope: markup.raw.code-fence.php.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.php.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-python:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:python|py))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.python.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.python
      embed_scope: markup.raw.code-fence.python.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.python.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-regexp:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:regexp?))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.regexp.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.regexp
      embed_scope: markup.raw.code-fence.regexp.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.regexp.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-rscript:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:rscript|r|splus))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.r.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.r
      embed_scope: markup.raw.code-fence.r.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.r.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-ruby:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:ruby|rb|rbx))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.ruby.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.ruby
      embed_scope: markup.raw.code-fence.ruby.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.ruby.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-rust:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:rust|rs))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.rust.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.rust
      embed_scope: markup.raw.code-fence.rust.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.rust.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-scala:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:scala))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.scala.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.scala
      embed_scope: markup.raw.code-fence.scala.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.scala.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-shell-script:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:console|shell(?:-script)?|sh|bash|zsh))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.shell-script.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.shell.bash
      embed_scope: markup.raw.code-fence.shell-script.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.shell-script.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-sql:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:sql))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.sql.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.sql
      embed_scope: markup.raw.code-fence.sql.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.sql.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-tsx:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:tsx))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.tsx.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.tsx
      embed_scope: markup.raw.code-fence.tsx.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.tsx.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-typescript:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:typescript|ts))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.typescript.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.ts
      embed_scope: markup.raw.code-fence.typescript.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.typescript.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-xml:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:atom|plist|svg|xjb|xml|xsd|xsl))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.xml.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:text.xml
      embed_scope: markup.raw.code-fence.xml.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.xml.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-yaml:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          ((?i:yaml))
          {{fenced_code_block_trailing_infostring_characters}}
      captures:
        0: meta.code-fence.definition.begin.yaml.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      embed: scope:source.yaml
      embed_scope: markup.raw.code-fence.yaml.markdown-gfm
      escape: '{{fenced_code_block_escape}}'
      escape_captures:
        0: meta.code-fence.definition.end.yaml.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown

  fenced-raw:
    - match: |-
         (?x)
          {{fenced_code_block_start}}
          {{fenced_code_block_language}}?
          .*$\n?       # all characters until EOL
      captures:
        0: meta.code-fence.definition.begin.text.markdown-gfm
        2: punctuation.definition.raw.code-fence.begin.markdown
        5: constant.other.language-name.markdown
      push: fenced-raw-content

  fenced-raw-content:
    - meta_content_scope: markup.raw.code-fence.markdown-gfm
    - match: '{{fenced_code_block_escape}}'
      captures:
        0: meta.code-fence.definition.end.text.markdown-gfm
        1: punctuation.definition.raw.code-fence.end.markdown
      pop: true

###[ LEAF BLOCKS: HTML BLOCKS ]###############################################

  # https://spec.commonmark.org/0.30/#html-blocks
  html-blocks:
    # Markdown formatting is disabled inside block-level tags.
    - match: ^[ ]*(?=<((?i:pre|textarea)){{html_tag_break_char}})
      push:
        - html-block-pop-at-eol
        - html-block-type-1a
    # Markdown formatting is disabled inside block-level tags.
    - match: ^[ ]*(?=<((?i:script|style)){{html_tag_break_char}})
      push:
        - html-block-pop-at-eol
        - html-block-type-1b
    # Markdown formatting is disabled inside block level tags and if a complete HTML tag is the only thing on the line.
    - match: ^[ ]*(?={{html_tag_block_end_at_blank_line}}|{{html_block_open_tag}}|{{html_block_close_tag}})
      push: html-block-type-6
    # Markdown formatting is disabled inside comments.
    - match: ^[ ]*(?={{html_block_comment}})
      push:
        - html-block-pop-at-eol
        - html-block-type-2
    # Markdown formatting is disabled inside preprocessor instructions.
    - match: ^[ ]*(?={{html_block_preprocessor}})
      push:
        - html-block-pop-at-eol
        - html-block-type-3
    # Markdown formatting is disabled inside doctype declarations.
    - match: ^[ ]*(?={{html_block_decl}})
      push:
        - html-block-pop-at-eol
        - html-block-type-4
    # Markdown formatting is disabled inside CDATA.
    - match: ^[ ]*(?={{html_block_cdata}})
      push:
        - html-block-pop-at-eol
        - html-block-type-5

  html-block-type-1a:
    - match: (</)(\1)(>)
      captures:
        0: meta.tag.block.any.html
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.any.html
        3: punctuation.definition.tag.end.html
      pop: true
    - include: html-content

  html-block-type-1b:
    - match: (?!</?\1>)
      pop: true
    - include: html-content

  html-block-type-2:
    - match: (?!{{html_block_comment}})
      pop: true
    - include: html-content

  html-block-type-3:
    - match: \?>
      pop: true

  html-block-type-4:
    - match: (?!{{html_block_decl}})
      pop: true
    - include: html-content
    - match: '{{html_block_decl}}'
      set: html-block-type-4-other

  html-block-type-4-other:
    - match: '>'
      pop: true

  html-block-type-5:
    - match: (?!{{html_block_cdata}})
      pop: true
    - include: html-content

  html-block-type-6:
    - meta_scope: meta.disable-markdown
    - match: ^\s*\n
      pop: true
    - include: html-content

  html-block-pop-at-eol:
    - meta_scope: meta.disable-markdown
    - match: $\n?
      pop: true
    - include: html-content

  html-content:
    - include: scope:text.html.basic

###[ LEAF BLOCKS: LINK REFERENCE DEFINITIONS ]################################

  reference-definitions:
    # https://spec.commonmark.org/0.30/#link-reference-definitions
    - include: footnote-definitions
    - include: link-definitions

  footnote-definitions:
    # Mardown Extras Footnotes
    - match: '[ ]{,3}(\[)({{footnote_name}})(\])(:)'
      captures:
        1: punctuation.definition.reference.begin.markdown
        2: entity.name.reference.link.markdown
        3: punctuation.definition.reference.end.markdown
        4: punctuation.separator.key-value.markdown
      push: footnote-def-body

  footnote-def-body:
    - meta_scope: meta.link.reference.def.footnote.markdown-extra
    - match: ^(?![ ]{4}|$)
      pop: true
    - include: emphasis
    - include: images
    - include: literals
    - include: links

  link-definitions:
    # https://spec.commonmark.org/0.30/#link-reference-definition
    - match: '[ ]{,3}(\[)({{reference_name}})(\])(:)'
      captures:
        1: punctuation.definition.reference.begin.markdown
        2: entity.name.reference.link.markdown
        3: punctuation.definition.reference.end.markdown
        4: punctuation.separator.key-value.markdown
      push:
        - link-def-end
        - link-title
        - link-def-url

  link-def-end:
    - meta_scope: meta.link.reference.def.markdown
    - include: eol-pop
    - match: \s*\S+
      scope: invalid.illegal.expected-eol.markdown

  link-def-url:
    - match: <
      scope: punctuation.definition.link.begin.markdown
      set: link-def-url-angled
    - match: (?=\S)
      set: link-def-url-unquoted
    - include: eol-pop

  link-def-url-angled:
    - meta_content_scope: markup.underline.link.markdown
    - match: \>
      scope: punctuation.definition.link.end.markdown
      pop: true
    - include: link-def-url-common

  link-def-url-unquoted:
    - meta_scope: markup.underline.link.markdown
    - include: link-def-url-common

  link-def-url-common:
    # URLs are terminated by whitespace or newline in reference definitions
    # Note: \s includes \n
    - match: (?=\s)
      pop: true
    - include: link-url-common

###[ LEAF BLOCKS: TABLES ]####################################################

  tables:
    - match: ^(?={{table_first_row}})
      push: table-header

  table-header:
    - meta_content_scope: meta.table.header.markdown-gfm
    - match: \n
      set: table-header-separator-begin
    - include: table-cell-content

  table-header-separator-begin:
    - match: ^(?=[-|:\s]+$)
      set: table-header-separator
    - match: ^
      pop: true

  table-header-separator:
    - meta_content_scope: meta.table.header-separator.markdown-gfm
    - match: \n
      set: table-body
    - match: -+
      scope: punctuation.section.table-header.markdown
    - match: ':'
      scope: punctuation.definition.table-cell-alignment.markdown
    - include: table-cell-separators

  table-body:
    - meta_content_scope: meta.table.markdown-gfm
    - include: table-end
    - include: table-cell-content

  table-end:
    # The table is broken at the first empty line, or beginning of another block-level structure
    - match: |-
          (?x)^
          (?= \s*$
          |   {{atx_heading}}
          |   {{block_quote}}
          |   {{fenced_code_block_start}}
          |   {{indented_code_block}}
          |   {{thematic_break}}
          )
      pop: true

  table-cell-content:
    - match: (?={{balanced_emphasis}})
      push: table-cell-emphasis
    - match: (?!{{backticks}})`+
      scope: invalid.deprecated.unescaped-backticks.markdown
    - include: table-cell-separators
    - include: images
    - include: literals
    - include: links
    - include: markups

  table-cell-emphasis:
    - include: emphasis
    - include: immediately-pop

  table-cell-separators:
    - match: \|
      scope: punctuation.separator.table-cell.markdown

###[ LEAF BLOCKS: THEMATIC BREAKS ]###########################################

  thematic-breaks:
    # https://spec.commonmark.org/0.30/#thematic-breaks
    - match: (?={{thematic_break}})
      push: thematic-break-body

  thematic-break-body:
    - meta_scope: meta.separator.thematic-break.markdown
    - match: '[-_*]+'
      scope: punctuation.definition.thematic-break.markdown
    - match: \n
      pop: true

###[ INLINE ]#################################################################

  inlines:
    - include: hard-line-breaks
    - include: emphasis
    - include: images
    - include: literals
    - include: links
    - include: markups

  emphasis:
    - include: bold
    - include: italic
    - include: strikethrough

  images:
    - include: image-inline
    - include: image-ref

  literals:
    - include: code-spans
    - include: critics
    - include: escapes

  links:
    - include: autolink-email
    - include: autolink-inet
    - include: link-ref-wiki
    - include: link-ref-footnote
    - include: link-ref-literal
    - include: link-inline
    - include: link-ref

  markups:
    # Markdown will convert this for us. We match it so that the
    # HTML grammar will not mark it up as invalid.
    - match: '[<>](-+|=+)[<>]?'
    - match: '[<>]?(-+|=+)[<>]'
    - match: '<<+|<>|>>+'
    - match: <(?![A-Za-z/?!])
    - match: (?!{{html_entity}})&
    - include: html-content

###[ INLINE: CODE SPANS ]#####################################################

  code-spans:
    # https://spec.commonmark.org/0.30/#code-spans
    - match: (`+)(?!`)
      scope: punctuation.definition.raw.begin.markdown
      push: code-span-body

  code-span-body:
    - meta_scope: markup.raw.inline.markdown
    - match: \1(?!`)
      scope: punctuation.definition.raw.end.markdown
      pop: true
    - match: '`+'
    - match: ^\s*$\n?
      scope: invalid.illegal.non-terminated.raw.markdown
      pop: true
    - include: paragraph-end

###[ INLINE: EMPHASIS ]#######################################################

  bold:
    # https://spec.commonmark.org/0.30/#emphasis-and-strong-emphasis
    - match: (\*\*)(\*)(?=\S)(?!\*)
      captures:
        1: punctuation.definition.bold.begin.markdown
        2: markup.italic.markdown punctuation.definition.italic.begin.markdown
      push: bold-italic-asterisk
    - match: \*\*(?=\S)(?!\*\*|\*\s)
      scope: punctuation.definition.bold.begin.markdown
      push: bold-asterisk
    - match: \b(__)(_)(?=\S)(?!_)
      captures:
        1: punctuation.definition.bold.begin.markdown
        2: markup.italic.markdown punctuation.definition.italic.begin.markdown
      push: bold-italic-underscore
    - match: \b__(?=\S)(?!_[_\s])
      scope: punctuation.definition.bold.begin.markdown
      push: bold-underscore

  bold-asterisk:
    - meta_scope: markup.bold.markdown
    - match: |-
        (?x)
            [ \t]*\*{4,}     # if there are more than 3 its not applicable to be bold or italic
        |   [ \t]+\*\*+      # whitespace followed by 2 or more is also not applicable
        |   ^\*\*            # emphasis can't be closed at the start of the line
    - match: (?:_)?(\*\*)
      captures:
        1: punctuation.definition.bold.end.markdown
      pop: true
    # Consume the underscore that has no corresponding underscore before the closing bold
    # punctuation on the same line, as it won't be treated as italic by CommonMark
    - match: \b_(?=[^\s_])(?=[^*_]*\*\*)
    - include: bold-common

  bold-underscore:
    - meta_scope: markup.bold.markdown
    - match: |-
          (?x)
              [ \t]*_{4,}    # if there are more than 3 its not applicable to be bold or italic
          |   [ \t]+__+      # whitespace followed by 2 or more is also not applicable
          |   ^__            # emphasis can't be closed at the start of the line
    - match: (?:\*)?(__\b)
      captures:
        1: punctuation.definition.bold.end.markdown
      pop: true
    # Consume the asterisk that has no corresponding asterisk before the closing bold
    # punctuation on the same line, as it won't be treated as italic by CommonMark
    - match: \*(?=[^\s*])(?=[^*_]*__\b)
    - include: bold-common

  bold-italic-asterisk:
    - meta_scope: markup.bold.markdown
    - meta_content_scope: markup.italic.markdown
    - match: |-
        (?x)
            [ \t]*\*{4,}    # if there are more than 3 its not applicable to be bold or italic
        |   [ \t]+\*(?!\*)  # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
        |   ^\*(?!\*)       # emphasis can't be closed at the start of the line
    - match: (\*)(\*\*)
      captures:
        1: markup.italic.markdown punctuation.definition.italic.end.markdown
        2: punctuation.definition.bold.end.markdown
      pop: true
    - match: \*\*
      scope: punctuation.definition.bold.end.markdown
      set: italic-after-bold-italic-asterisk
    - match: \*
      scope: punctuation.definition.italic.end.markdown
      set: bold-after-bold-italic-asterisk
    - include: emphasis-common
    - include: strikethrough

  bold-after-bold-italic-asterisk:
    - meta_content_scope: markup.bold.markdown
    - match: |-
        (?x)
            [ \t]*\*{3,}    # if there are more than 3 its not applicable to be bold or italic
        |   [ \t]+\*\*+     # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
        |   ^\*\*           # emphasis can't be closed at the start of the line
    - match: \*\*
      scope: markup.bold.markdown punctuation.definition.bold.end.markdown
      pop: true
    - include: bold-common

  italic-after-bold-italic-asterisk:
    - meta_content_scope: markup.italic.markdown
    - match: |-
        (?x)
            [ \t]*\*{3,}    # if there are more than 3 its not applicable to be bold or italic
        |   [ \t]+\*\*+     # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
        |   ^\*\*           # emphasis can't be closed at the start of the line
    - match: \*
      scope: markup.italic.markdown punctuation.definition.italic.end.markdown
      pop: true
    - include: italic-common

  bold-italic-underscore:
    - meta_scope: markup.bold.markdown
    - meta_content_scope: markup.italic.markdown
    - match: |-
        (?x)
            [ \t]*_{4,}   # if there are more than 3 its not applicable to be bold or italic
        |   [ \t]+_(?!_)  # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
        |   ^_(?!_)       # emphasis can't be closed at the start of the line
    - match: (_)(__)\b
      captures:
        1: markup.italic.markdown punctuation.definition.italic.end.markdown
        2: punctuation.definition.bold.end.markdown
      pop: true
    - match: _\b
      scope: punctuation.definition.italic.end.markdown
      set: bold-after-bold-italic-underscore
    - match: __\b
      scope: punctuation.definition.bold.end.markdown
      set: italic-after-bold-italic-underscore
    - include: emphasis-common
    - include: strikethrough

  bold-after-bold-italic-underscore:
    - meta_content_scope: markup.bold.markdown
    - match: |-
          (?x)
              [ \t]*_{3,}   # if there are more than 3 its not applicable to be bold or italic
          |   [ \t]+__+     # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
          |   ^__           # emphasis can't be closed at the start of the line
    - match: __\b
      scope: markup.bold.markdown punctuation.definition.bold.end.markdown
      pop: true
    - include: bold-common

  italic-after-bold-italic-underscore:
    - meta_content_scope: markup.italic.markdown
    - match: |-
          (?x)
              [ \t]*_{3,}   # if there are more than 3 its not applicable to be bold or italic
          |   [ \t]+__+     # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
          |   ^__           # emphasis can't be closed at the start of the line
    - match: _\b
      scope: markup.italic.markdown punctuation.definition.italic.end.markdown
      pop: true
    - include: italic-common

  bold-common:
    - include: emphasis-common
    - include: italic
    - include: strikethrough

  italic:
    - match: \*(?=\S)(?!\*)
      scope: punctuation.definition.italic.begin.markdown
      push: italic-asterisk
    - match: \b_(?=\S)(?!_)
      scope: punctuation.definition.italic.begin.markdown
      push: italic-underscore
    - match: '[*_]+'

  italic-asterisk:
    - meta_scope: markup.italic.markdown
    - match: |-
          (?x)
              [ \t]*\*{4,}   # if there are more than 3 its not applicable to be bold or italic
          |   [ \t]+\*(?!\*) # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
          |   ^\*(?!\*)      # emphasis can't be closed at the start of the line
    - match: \*(?!\*[^*])
      scope: punctuation.definition.italic.end.markdown
      pop: true
    - match: \*+
    - include: italic-common

  italic-underscore:
    - meta_scope: markup.italic.markdown
    - match: |-
          (?x)
              [ \t]*_{4,}   # if there are more than 3 its not applicable to be bold or italic
          |   [ \t]+_(?!_)  # whitespace followed by 1 is also not applicable (but whitespace followed by 2 could be bold punctuation)
          |   ^_(?!_)       # emphasis can't be closed at the start of the line
    - match: _\b
      scope: punctuation.definition.italic.end.markdown
      pop: true
    - include: italic-common

  italic-common:
    - include: emphasis-common
    - include: bold
    - include: strikethrough

  strikethrough:
    - match: (?:~(?!~}|>|\s))+  # any number of ~ up to ~> or ~~} critic markers
      scope: punctuation.definition.strikethrough.begin.markdown
      push: strikethrough-content

  strikethrough-content:
    - meta_scope: markup.strikethrough.markdown-gfm
    - match: (?:~(?!~}|>))+     # any number of ~ up to ~> or ~~} critic markers
      scope: punctuation.definition.strikethrough.end.markdown
      pop: true
    - include: emphasis-common
    - include: bold
    - include: italic

  emphasis-common:
    - match: '{{setext_escape}}'
      pop: true
    - match: ^\s*$\n?
      scope: invalid.illegal.non-terminated.bold-italic.markdown
      pop: true
    - include: paragraph-end
    - include: hard-line-breaks
    - include: images
    - include: literals
    - include: links
    - include: markups

###[ INLINE: IMAGES ]#########################################################

  image-inline:
    - match: \!\[(?={{balance_square_brackets}}?\]\()
      scope: punctuation.definition.image.begin.markdown
      push:
        - image-inline-metadata
        - image-inline-text

  image-inline-text:
    - meta_scope: meta.image.inline.description.markdown
    - match: \]
      scope: punctuation.definition.image.end.markdown
      pop: true
    - include: link-text

  image-inline-metadata:
    - match: \(
      scope: punctuation.definition.metadata.begin.markdown
      set:
        - image-inline-metadata-end
        - link-title
        - image-inline-url
    - include: immediately-pop

  image-inline-metadata-end:
    - meta_scope: meta.image.inline.metadata.markdown
    - match: \)
      scope: punctuation.definition.metadata.end.markdown
      set: image-inline-attr
    - include: else-pop

  image-inline-url:
    - match: <
      scope: punctuation.definition.link.begin.markdown
      set: image-inline-url-angled
    - match: (?=\S)
      set: image-inline-url-unquoted

  image-inline-url-angled:
    - meta_content_scope: markup.underline.link.image.markdown
    - include: link-url-angled

  image-inline-url-unquoted:
    - meta_scope: markup.underline.link.image.markdown
    - include: link-url-unquoted

  image-inline-attr:
    - match: \{(?=[^}]*\})
      scope: punctuation.definition.attributes.begin.markdown
      set: image-inline-attr-body
    - include: immediately-pop

  image-inline-attr-body:
    - meta_scope: meta.image.inline.attributes.markdown
    - include: tag-attributes

  image-ref:
    - match: \!\[(?={{balance_square_brackets}}?\]\[{{reference_name}}\])
      scope: punctuation.definition.image.begin.markdown
      push:
        - image-ref-attr
        - image-ref-metadata
        - image-ref-text

  image-ref-text:
    - meta_scope: meta.image.reference.description.markdown
    - match: \]
      scope: punctuation.definition.image.end.markdown
      pop: true
    - include: link-text

  image-ref-metadata:
    - match: (\[)({{reference_name}})(\])
      scope: meta.image.reference.metadata.markdown
      captures:
        1: punctuation.definition.metadata.begin.markdown
        2: markup.underline.link.markdown
        3: punctuation.definition.metadata.end.markdown
      pop: true
    - include: immediately-pop

  image-ref-attr:
    - match: \{(?=[^}]*\})
      scope: punctuation.definition.attributes.begin.markdown
      set: image-ref-attr-body
    - include: immediately-pop

  image-ref-attr-body:
    - meta_scope: meta.image.reference.markdown
    - include: tag-attributes

###[ INLINE: LINKS ]##########################################################

  link-inline:
    - match: \[(?={{balance_square_brackets}}?\]\()
      scope: punctuation.definition.link.begin.markdown
      push:
        - link-inline-metadata
        - link-inline-text

  link-inline-text:
    - meta_scope: meta.link.inline.description.markdown
    - match: \]
      scope: punctuation.definition.link.end.markdown
      pop: true
    - include: link-text-allow-image

  link-inline-metadata:
    - match: \(
      scope: punctuation.definition.metadata.begin.markdown
      set:
        - link-inline-metadata-end
        - link-title
        - link-inline-url
    - include: immediately-pop

  link-inline-metadata-end:
    - meta_scope: meta.link.inline.metadata.markdown
    - match: \)
      scope: punctuation.definition.metadata.end.markdown
      set: link-inline-attr
    - include: else-pop

  link-inline-url:
    - match: <
      scope: punctuation.definition.link.begin.markdown
      set: link-inline-url-angled
    - match: (?=\S)
      set: link-inline-url-unquoted

  link-inline-url-angled:
    - meta_content_scope: markup.underline.link.markdown
    - include: link-url-angled

  link-inline-url-unquoted:
    - meta_scope: markup.underline.link.markdown
    - include: link-url-unquoted

  link-inline-attr:
    - match: \{(?=[^}]*\})
      scope: punctuation.definition.attributes.begin.markdown
      set: link-inline-attr-body
    - include: immediately-pop

  link-inline-attr-body:
    - meta_scope: meta.link.inline.attributes.markdown
    - include: tag-attributes

  link-ref:
    - match: \[(?={{balance_square_brackets}}?\]\[{{reference_name}}\])
      scope: punctuation.definition.link.begin.markdown
      push:
        - link-ref-attr
        - link-ref-metadata
        - link-ref-link-text
    - match: \[(?={{balance_square_brackets}}?\])
      scope: punctuation.definition.link.begin.markdown
      push: link-ref-link-text

  link-ref-link-text:
    - meta_scope: meta.link.reference.description.markdown
    - match: \]
      scope: punctuation.definition.link.end.markdown
      pop: true
    - include: link-text-allow-image

  link-ref-metadata:
    - match: (\[)({{reference_name}})(\])
      scope: meta.link.reference.metadata.markdown
      captures:
        1: punctuation.definition.metadata.begin.markdown
        2: markup.underline.link.markdown
        3: punctuation.definition.metadata.end.markdown
      pop: true
    - include: immediately-pop

  link-ref-attr:
    - match: \{(?=[^}]*\})
      scope: punctuation.definition.attributes.begin.markdown
      set: link-ref-attr-body
    - include: immediately-pop

  link-ref-attr-body:
    - meta_scope: meta.link.reference.attributes.markdown
    - include: tag-attributes

  link-ref-literal:
    - match: \[(?={{balance_square_brackets}}?\]\[\])
      scope: punctuation.definition.link.begin.markdown
      push:
        - link-ref-literal-attr
        - link-ref-literal-metadata
        - link-ref-literal-link-text

  link-ref-literal-link-text:
    - meta_scope: meta.link.reference.literal.description.markdown
    - match: \]
      scope: punctuation.definition.link.end.markdown
      pop: true
    - include: link-text-allow-image

  link-ref-literal-metadata:
    - match: (\[)(\])
      scope: meta.link.reference.literal.metadata.markdown
      captures:
        1: punctuation.definition.metadata.begin.markdown
        2: punctuation.definition.metadata.end.markdown
      pop: true
    - include: immediately-pop

  link-ref-literal-attr:
    - match: \{(?=[^}]*\})
      scope: punctuation.definition.attributes.begin.markdown
      set: link-ref-literal-attr-body
    - include: immediately-pop

  link-ref-literal-attr-body:
    - meta_scope: meta.link.reference.literal.attributes.markdown
    - include: tag-attributes

  link-ref-footnote:
    - match: (\[)({{footnote_name}})(\])
      captures:
        0: meta.link.reference.footnote.markdown-extra
        1: punctuation.definition.link.begin.markdown
        2: meta.link.reference.literal.footnote-id.markdown
        3: punctuation.definition.link.end.markdown

  link-ref-wiki:
    - match: \[\[(?={{balance_square_brackets}}?\]\])
      scope: punctuation.definition.link.begin.markdown
      push: link-ref-wiki-link-text

  link-ref-wiki-link-text:
    - meta_scope: meta.link.reference.wiki.description.markdown
    - match: \]\]
      scope: punctuation.definition.link.end.markdown
      pop: true
    - include: link-text-allow-image

###[ INLINE: LINK/IMAGE PROTOTYPES ]##########################################

  link-text:
    - match: \[
      push: link-text-nested
    - match: \b__?(?=[^]_]+\]) # eat underscores where there is no pair before the end of the square brackets - it's not a formatting mark
    - match: \b\*\*?(?=[^]*]+\]) # eat asterisks where there is no pair before the end of the square brackets - it's not a formatting mark
    - include: emphasis
    - include: literals
    - include: markups

  link-text-nested:
    - include: link-text
    - match: \]
      pop: true

  link-text-allow-image:
    - include: link-text
    - include: images

  link-title:
    - match: \'
      scope: punctuation.definition.string.begin.markdown
      set: link-title-single-quoted-content
    - match: \"
      scope: punctuation.definition.string.begin.markdown
      set: link-title-double-quoted-content
    - match: \(
      scope: punctuation.definition.string.begin.markdown
      set: link-title-other-quoted-content
    - match: $|(?=\S)
      pop: true

  link-title-double-quoted-content:
    - meta_scope: meta.string.title.markdown string.quoted.double.markdown
    - match: \"
      scope: punctuation.definition.string.end.markdown
      pop: true
    - include: link-title-common

  link-title-single-quoted-content:
    - meta_scope: meta.string.title.markdown string.quoted.single.markdown
    - match: \'
      scope: punctuation.definition.string.end.markdown
      pop: true
    - include: link-title-common

  link-title-other-quoted-content:
    - meta_scope: meta.string.title.markdown string.quoted.other.markdown
    - match: \)
      scope: punctuation.definition.string.end.markdown
      pop: true
    - include: link-title-common

  link-title-common:
    - match: ^\s*$\n?
      scope: invalid.illegal.non-terminated.link-title.markdown
      pop: true

  link-url-angled:
    - match: \>
      scope: punctuation.definition.link.end.markdown
      pop: true
    - include: link-url-common

  link-url-unquoted:
    - match: (?=[ \t)])
      pop: true
    - match: \(
      push: link-url-unquoted-parens
    - include: link-url-common

  link-url-unquoted-parens:
    - match: \)
      pop: true
    - include: link-url-unquoted

  link-url-common:
    - include: escapes
    - include: link-url-path-separators
    - include: link-url-scheme-separators
    - include: link-url-escapes
    - include: paragraph-end

  link-url-escapes:
    - match: (%)\h{2}
      scope: constant.character.escape.url.markdown
      captures:
        1: punctuation.definition.escape.markdown

  link-url-path-separators:
    - match: '[/&?#]'
      scope: punctuation.separator.path.markdown

  link-url-scheme-separators:
    - match: ':/{,2}'
      scope: punctuation.separator.path.markdown

  link-url-scheme-separator:
    - match: ':/{,2}'
      scope: punctuation.separator.path.markdown
      pop: true

###[ INLINE: LINK/IMAGE/REFERENCE ATTRIBUTES ]################################

  tag-attributes:
    # https://kramdown.gettalong.org/syntax.html#span-ials
    # https://michelf.ca/projects/php-markdown/extra/
    # https://pandoc.org/MANUAL.html#extension-link_attributes
    - match: \}
      scope: punctuation.definition.attributes.end.markdown
      pop: true
    - match: \,
      scope: punctuation.separator.mapping.pair.markdown
    - match: '{{tag_attribute_name_start}}'
      push: [tag-attr-meta, tag-attr-equals, tag-attr-name]

  tag-attr-name:
    - meta_scope: entity.other.attribute-name.markdown
    - match: '{{tag_attribute_name_break}}'
      pop: true
    - match: '["''`<]'
      scope: invalid.illegal.attribute-name.markdown

  tag-attr-meta:
    - meta_scope: meta.attribute-with-value.markdown
    - include: immediately-pop

  tag-attr-equals:
    - match: =
      scope: punctuation.separator.key-value.markdown
      set: tag-attr-value
    - include: else-pop

  tag-attr-value:
    - match: \"
      scope: punctuation.definition.string.begin.markdown
      set: tag-attr-value-double-quoted
    - match: \'
      scope: punctuation.definition.string.begin.markdown
      set: tag-attr-value-single-quoted
    - match: '{{tag_unquoted_attribute_start}}'
      set: tag-attr-value-unquoted
    - include: else-pop

  tag-attr-value-double-quoted:
    - meta_scope: string.quoted.double.markdown
    - match: \"
      scope: punctuation.definition.string.end.markdown
      pop: true

  tag-attr-value-single-quoted:
    - meta_scope: string.quoted.single.markdown
    - match: \'
      scope: punctuation.definition.string.end.markdown
      pop: true

  tag-attr-value-unquoted:
    - meta_scope: string.unquoted.markdown
    - match: '{{tag_unquoted_attribute_break}}'
      pop: true
    - match: '["''`<]'
      scope: invalid.illegal.attribute-value.markdown

###[ INLINE: AUTOLINKS ]######################################################

  autolink-email:
    # CommonMark
    # https://spec.commonmark.org/0.30/#email-autolink
    - match: |-
        (?x)
        (<)
        (
          (?:mailto(:))?
          {{email_user_commonmark}}
          (@)
          {{email_domain_commonmark}}(?:\.{{email_domain_commonmark}})*
        )
        (>)
      captures:
        0: meta.link.email.markdown
        1: punctuation.definition.link.begin.markdown
        2: markup.underline.link.markdown
        3: punctuation.separator.path.markdown
        4: punctuation.separator.path.markdown
        5: punctuation.definition.link.end.markdown
    # Github Flavoured Markdown
    - match: '[\w.+-]+(@)[\w-]+(?:\.(?:(?![._-][\W])[\w_-])+)+(?![_-])'
      captures:
        0: meta.link.email.markdown markup.underline.link.markdown
        1: punctuation.separator.path.markdown

  autolink-inet:
    # CommonMark
    # https://spec.commonmark.org/0.30/#autolinks
    - match: <(?=[[:alpha:]][[:alnum:].+-]+:)
      scope: punctuation.definition.link.begin.markdown
      push:
        - autolink-inet-angled-content
        - link-url-scheme-separator
    # Github Flavoured Markdown
    # After a valid domain, zero or more non-space non-< characters may follow
    - match: (?:(?:https|http|ftp)(://)|www\.)[\w-]+
      captures:
        1: punctuation.separator.path.markdown
      push: autolink-inet-unquoted-content

  autolink-inet-angled-content:
    - meta_scope: meta.link.inet.markdown
    - meta_content_scope: markup.underline.link.markdown
    - match: \>
      scope: punctuation.definition.link.end.markdown
      pop: true
    # Spaces are not allowed in autolinks
    - match: (?=\s)
      pop: true
    - include: autolink-inet-common

  autolink-inet-unquoted-content:
    - meta_scope: meta.link.inet.markdown markup.underline.link.markdown-gfm
    # 1. When an autolink ends in ), we scan the entire autolink for the total
    #    number of parentheses. If there is a greater number of closing parentheses
    #    than opening ones, we don’t consider the last character part of the
    #    autolink, in order to facilitate including an autolink inside a parenthesis
    # 2. If an autolink ends in a semicolon (;), we check to see if it appears to
    #    resemble an entity reference; if the preceding text is & followed by one
    #    or more alphanumeric characters. If so, it is excluded from the autolink
    # 3. Trailing punctuation (specifically, ?, !, ., ,, :, *, _, and ~) will not
    #    be considered part of the autolink, though they may be included in the
    #    interior # of the link
    - match: (?=(?:\)|(?:{{html_entity}})*)[?!.,:*_~]*[\s<])
      pop: true
    - include: autolink-inet-common

  autolink-inet-group:
    - match: \)
      pop: true
    - match: (?=(?:{{html_entity}})*[?!.,:*_~]*[\s<])
      pop: true
    - include: autolink-inet-common

  autolink-inet-common:
    - match: \(
      push: autolink-inet-group
    - include: link-url-path-separators
    - include: link-url-escapes

###[ INLINE: OTHER ]##########################################################

  escapes:
    - match: '{{escape}}'
      scope: constant.character.escape.markdown

  hard-line-breaks:
    - match: '[ ]{2,}$'
      scope: meta.hard-line-break.markdown punctuation.definition.hard-line-break.markdown
    - match: (\\)\n
      captures:
        0: meta.hard-line-break.markdown
        1: constant.character.escape.markdown

###[ EXTENSIONS: CRITIC MARKUP ]##############################################

  critics:
    # inline critic markup
    # http://criticmarkup.com/spec.php
    - include: critics-additions
    - include: critics-comments
    - include: critics-deletions
    - include: critics-highlights
    - include: critics-substitutions

  critics-additions:
    - match: \{\+\+
      scope: punctuation.definition.critic.begin.markdown
      push: critics-addition-content

  critics-addition-content:
    - meta_scope: markup.critic.addition.markdown
    - meta_content_scope: markup.inserted.critic.markdown
    - match: \+\+\}
      scope: punctuation.definition.critic.end.markdown
      pop: true
    - include: critics-common

  critics-comments:
    - match: '{>>'
      scope: punctuation.definition.critic.begin.markdown
      push: critics-comment-content

  critics-comment-content:
    - meta_scope: markup.critic.comment.markdown
    - meta_content_scope: comment.critic.markdown
    - match: '<<}'
      scope: punctuation.definition.critic.end.markdown
      pop: true
    - include: critics-common

  critics-deletions:
    - match: '{--'
      scope: punctuation.definition.critic.begin.markdown
      push: critics-deletion-content

  critics-deletion-content:
    - meta_scope: markup.critic.deletion.markdown
    - meta_content_scope: markup.deleted.critic.markdown
    - match: '--}'
      scope: punctuation.definition.critic.end.markdown
      pop: true
    - include: critics-common

  critics-highlights:
    - match: '{=='
      scope: punctuation.definition.critic.begin.markdown
      push: critics-highlight-content

  critics-highlight-content:
    - meta_scope: markup.critic.highlight.markdown
    - meta_content_scope: markup.info.critic.markdown
    - match: '==}'
      scope: punctuation.definition.critic.end.markdown
      pop: true
    - include: critics-common

  critics-substitutions:
    - match: '{~~'
      scope: punctuation.definition.critic.begin.markdown
      push: critics-substitution-deleted

  critics-substitution-deleted:
    - meta_scope: markup.critic.substitution.markdown
    - meta_content_scope: markup.deleted.critic.markdown
    - match: (?=~>)
      set:
        - meta_include_prototype: false
        - match: '~>'
          scope: punctuation.separator.critic.markdown
          set: critics-substitution-inserted
    - include: critics-substitution-inserted

  critics-substitution-inserted:
    - meta_scope: markup.critic.substitution.markdown
    - meta_content_scope: markup.inserted.critic.markdown
    - match: '~~}'
      scope: punctuation.definition.critic.end.markdown
      pop: true
    - include: critics-common

  critics-common:
    - match: ^(?=\s*$)
      pop: true
    - include: emphasis
    - include: images
    - include: literals
    - include: links

###[ PROTOTYPES ]#############################################################

  else-pop:
    - match: (?=\S)
      pop: true

  eol-pop:
    - match: $
      pop: true

  immediately-pop:
    - match: ''
      pop: true
