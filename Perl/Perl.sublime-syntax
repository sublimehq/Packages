%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Perl
file_extensions:
  - pl
  - pm
  - pod
  - t
  - PL
first_line_match: |-
  (?x:
    ^\#! .* \bperl\b |                     # shebang
    ^\# \s* -\*- [^*]* [Pp]erl [^*]* -\*-  # editorconfig
  )
scope: source.perl

variables:
  break: \b(?!::)
  identifier: '\b[_[:alpha:]]\w*\b'
  module: '\b[_[:upper:]]\w*\b'
  member: '\b[_[:lower:]]\w*\b'
  pod: '={{identifier}}'
  regexp_delim: '[^\w\s\)\]\}\>]'
  regexp_flags: '[msixpodualngcer]+\b'

  # SEE: https://perldoc.perl.org/index-functions.html
  builtin_functions: |-
    \b(?x:
      abs|accept|alarm|atan2|bind|binmode|bless|chdir|chmod|
      chomp|chop|chown|chr|chroot|close|closedir|connect|cos|crypt|
      dbmclose|dbmopen|defined|delete|each|endgrent|endhostent|
      endnetent|endprotoent|endpwent|endservent|eof|eval|evalbytes|exec|
      exists|exp|fc|fcntl|fileno|flock|fork|formline|getc|
      getgrent|getgrgid|getgrnam|gethostbyaddr|gethostbyname|gethostent|
      getlogin|getnetbyaddr|getnetbyname|getnetent|getpeername|getpgrp|
      getppid|getpriority|getprotobyname|getprotobynumber|getprotoent|
      getpwent|getpwnam|getpwuid|getservbyname|getservbyport|getservent|
      getsockname|getsockopt|glob|gmtime|grep|hex|index|int|ioctl|join|
      keys|kill|lc|lcfirst|length|link|listen|localtime|lock|log|
      lstat|map|mkdir|msgctl|msgget|msgrcv|msgsnd|oct|open|opendir|ord|
      pack|pipe|pop|pos|print|printf|prototype|push|quotemeta|
      rand|read|readdir|readline|readlink|readpipe|recv|ref|rename|
      reset|reverse|rewinddir|rindex|rmdir|say|scalar|seek|seekdir|select|
      semctl|semget|semop|send|setgrent|sethostent|setnetent|setpgrp|
      setpriority|setprotoent|setpwent|setservent|setsockopt|shift|shmctl|
      shmget|shmread|shmwrite|shutdown|sin|sleep|socket|socketpair|sort|
      splice|split|sprintf|sqrt|srand|stat|study|substr|symlink|syscall|
      sysopen|sysread|sysseek|system|syswrite|tell|telldir|tie|tied|time|
      times|truncate|uc|ucfirst|umask|undef|unlink|unpack|unshift|untie|
      utime|values|vec|wait|waitpid|wantarray|warn|write
    ){{break}}

  qualified_reserved_words: (?:CORE::)?{{reserved_words}}

  reserved_words: |-
    \b(?x:
      # control keywords
      default|else|elsif|given|if|unless|when|break|caller|continue|die|
      do|dump|exit|goto|last|next|redo|return|wait|for|foreach|until|while|
      # declaration keywords
      package|require|use|no|sub|format|{{storage_keywords}}|
      # word operators
      {{operator_keywords}}|
      # quoted like functions (are handled like keywords)
      {{quoted_like_keywords}}
    )\b

  # certain classes of keywords
  operator_keywords: and|or|xor|as|cmp|eq|gt|ge|lt|le|ne|not|x
  quoted_like_keywords: m|q|qq|qr|qw|qx|s|tr|y
  storage_keywords: local|my|our|state

contexts:
  main:
    - include: comment-pod
    - include: package
    - include: imports
    - include: declarations
    - include: expressions
    - match: ^
      push:
        - match: (?=/.*[^\\]/)
          set: maybe-regexp-match
        - include: string-quoted-angle-pop
        - include: else-pop

###[ PROTOTYPES ]#############################################################

  immediately-pop:
    - match: ''
      pop: true

  else-pop:
    - match: $|(?=\S)
      pop: true

  eol-pop:
    - match: $|(?=[;#])
      pop: true

  term-pop:
    - match: (?=;)
      pop: true

###[ COMMENTS ]###############################################################

  comment-line:
    - match: \#+
      scope: punctuation.definition.comment.perl
      push:
        - meta_scope: comment.line.number-sign.perl
        - match: \n
          pop: true

  comment-pod:
    # SEE: http://perldoc.perl.org/perlpod.html
    - match: ^{{pod}}
      scope: entity.name.tag.pod.perl
      push:
        - meta_scope: comment.block.documentation.perl
        - meta_content_scope: string.unquoted.perl
        - match: \n
          set: comment-pod-body
        - include: comment-pod-formatting

  comment-pod-body:
    - meta_content_scope: comment.block.documentation.perl
    - match: ^=cut\b
      scope: comment.block.documentation.perl entity.name.tag.pod.perl
      pop: true
    - include: comment-pod-embedded
    - include: comment-pod-keyword
    - include: comment-pod-formatting
    - match: \t+
      scope: invalid.deprecated.perl

  comment-pod-embedded:
    - match: ^=begin\s+
      scope: entity.name.tag.pod.perl
      push:
        # end embedded section
        - match: ^=end\b
          scope: entity.name.tag.pod.perl
          pop: true
        # embedded css
        - match: \bcss\b
          scope: string.unquoted.perl
          embed: scope:source.css
          embed_scope: source.css.embedded.perl
          escape: (?=^{{pod}})
        # embedded html
        - match: \bhtml\b
          scope: string.unquoted.perl
          embed: scope:text.html.basic
          embed_scope: text.html.embedded.perl
          escape: (?=^{{pod}})
        # embedded javascript
        - match: \b(?:js|javascript)\b
          scope: string.unquoted.perl
          embed: scope:source.js
          embed_scope: source.js.embedded.perl
          escape: (?=^{{pod}})
        # embedded json
        - match: \bjson\b
          scope: string.unquoted.perl
          embed: scope:source.json
          embed_scope: source.json.embedded.perl
          escape: (?=^{{pod}})
        # embedded sql
        - match: \bsql\b
          scope: string.unquoted.perl
          embed: scope:source.sql
          embed_scope: source.sql.embedded.perl
          escape: (?=^{{pod}})
        # embedded xml
        - match: \bxml\b
          scope: string.unquoted.perl
          embed: scope:text.xml
          embed_scope: text.xml.embedded.perl
          escape: (?=^{{pod}})
        # unexpected pod command
        - match: ^{{pod}}
          scope: invalid.illegal.end-expected.perl
          pop: true
        - include: else-pop

  comment-pod-keyword:
    - match: ^{{pod}}
      scope: entity.name.tag.pod.perl
      push:
        - meta_content_scope: markup.heading.perl
        - include: eol-pop
        - include: comment-pod-formatting

  comment-pod-formatting:
    # bold text : B<content>
    - match: (B)(<)
      captures:
        1: entity.name.tag.bold.perl
        2: punctuation.definition.tag.begin.perl
      push:
        - meta_content_scope: markup.bold.perl
        - include: comment-pod-format-body
    # inline code : C<code>
    - match: (C)(<)
      captures:
        1: entity.name.tag.code.perl
        2: punctuation.definition.tag.begin.perl
      push:
        - meta_content_scope: markup.quote.perl
        - include: comment-pod-format-body
    # escaped character : E<escaped>
    - match: (E)(<)
      captures:
        1: entity.name.tag.escaped.perl
        2: punctuation.definition.tag.begin.perl
      push:
        - meta_content_scope: constant.character.escape.perl
        - include: comment-pod-format-body
    # italic text : I<italic>
    - match: (I)(<)
      captures:
        1: entity.name.tag.italic.perl
        2: punctuation.definition.tag.begin.perl
      push:
        - meta_content_scope: markup.italic.perl
        - include: comment-pod-format-body
    # filename : F<filename>
    - match: (F)(<)
      captures:
        1: entity.name.tag.filename.perl
        2: punctuation.definition.tag.begin.perl
      push:
        - meta_content_scope: string.unquoted.perl
        - include: comment-pod-format-body
    # hyperlink : L<label|url>
    - match: (L)(<)
      captures:
        1: entity.name.tag.link.perl
        2: punctuation.definition.tag.begin.perl
      push:
        - meta_content_scope: markup.underline.link.perl
        - include: comment-pod-format-body
    # non-breaking spaces : S<content>
    - match: (S)(<)
      captures:
        1: entity.name.tag.none-braeking.perl
        2: punctuation.definition.tag.begin.perl
      push:
        - include: comment-pod-format-body
    # index entry : X<title>
    - match: (X)(<)
      captures:
        1: entity.name.tag.index.perl
        2: punctuation.definition.tag.begin.perl
      push:
        - meta_content_scope: entity.name.label.perl
        - include: comment-pod-format-body

  comment-pod-format-body:
    - match: \>
      scope: punctuation.definition.tag.end.perl
      pop: true
    - include: comment-pod-formatting
    - include: literal-angle-nested

###[ PACKAGE DEFINITION ]#####################################################

  package:
    # https://perldoc.perl.org/functions/package.html
    # package NAMESPACE
    # package NAMESPACE VERSION
    # package NAMESPACE BLOCK
    # package NAMESPACE VERSION BLOCK
    - match: \bpackage{{break}}
      scope: storage.type.namespace.perl
      push: [package-end, package-version, package-namespace]

  package-namespace:
    - include: qualified-namespace
    - include: unqualified-namespace
    - include: comment-line
    - match: (?=\S)
      pop: true

  package-version:
    - match: (")((v?)[\d_](\.)[\d_]+(?:(\.)[\d_]+)?)(")
      scope: string.quoted.double.perl
      captures:
        1: punctuation.definition.string.begin.perl
        2: constant.numeric.version.perl
        3: punctuation.definition.version.perl
        4: punctuation.separator.decimal.perl
        5: punctuation.separator.decimal.perl
        6: punctuation.definition.string.end.perl
      pop: true
    - match: (')((v?)[\d_](\.)[\d_]+(?:(\.)[\d_]+)?)(')
      scope: string.quoted.single.perl
      captures:
        1: punctuation.definition.string.begin.perl
        2: constant.numeric.version.perl
        3: punctuation.definition.version.perl
        4: punctuation.separator.decimal.perl
        5: punctuation.separator.decimal.perl
        6: punctuation.definition.string.end.perl
      pop: true
    - match: (v?)[\d_](\.)[\d_]+(?:(\.)[\d_]+)?\b
      scope: constant.numeric.version.perl
      captures:
        1: punctuation.definition.version.perl
        2: punctuation.separator.decimal.perl
        3: punctuation.separator.decimal.perl
      pop: true
    - include: comment-line
    - match: (?=\S)
      pop: true

  package-end:
    - meta_scope: meta.namespace.perl
    - include: comment-line
    - include: else-pop

  qualified-namespace:
    - match: ({{identifier}})?(::)
      captures:
        1: entity.name.namespace.perl
        2: punctuation.accessor.double-colon.perl
      set:
        - meta_scope: meta.path.perl
        - match: ({{identifier}})(::)
          captures:
            1: entity.name.namespace.perl
            2: punctuation.accessor.double-colon.perl
        - include: unqualified-namespace
        - include: immediately-pop

  unqualified-namespace:
    - match: '{{identifier}}'
      scope: entity.name.namespace.perl
      pop: true

###[ IMPORT STATEMENTS ]######################################################

  imports:
    # https://perldoc.perl.org/functions/require.html
    # require MODULE
    # require EXPR
    - match: \brequire{{break}}
      scope: keyword.control.import.require.perl
      push: [require-end, require-body]
    # https://perldoc.perl.org/functions/use.html
    # use MODULE VERSION LIST
    # use MODULE VERSION
    # use MODULE LIST
    # use MODULE
    # use VERSION
    - match: \buse{{break}}
      scope: keyword.control.import.use.perl
      push:
        - - meta_scope: meta.preprocessor.use.perl
          - include: require-expression
        - expressions-begin
        - package-version
        - package-namespace
    # https://perldoc.perl.org/functions/no.html
    # no MODULE VERSION LIST
    # no MODULE VERSION
    # no MODULE LIST
    # no MODULE
    # no VERSION
    - match: \bno{{break}}
      scope: keyword.control.import.no.perl
      push:
        - - meta_scope: meta.preprocessor.no.perl
          - include: require-expression
        - expressions-begin
        - package-version
        - package-namespace

  require-body:
    - include: require-namespace
    - include: comment-line
    - match: (?=\S)
      set: [require-expression, expressions-begin]

  require-namespace:
    - include: qualified-namespace
    - match: '{{identifier}}(?=\s*(?:[;)}#]|$))'
      scope: entity.name.namespace.perl
      pop: true

  require-expression:
    - match: (?=[;)}])
      pop: true
    - include: expressions
    - match: \S
      scope: string.unquoted.perl

  require-end:
    - meta_scope: meta.preprocessor.require.perl
    - include: comment-line
    - include: else-pop

###[ DECLARATIONS ]###########################################################

  declarations:
    - match: \b(?:{{storage_keywords}}){{break}}
      scope: keyword.declaration.variable.perl

###[ EXPRESSIONS ]############################################################

  expressions:
    - include: blocks
    - include: brackets
    - include: groups
    - include: sub
    - include: quoted-like
    - include: label
    - include: constants
    - include: class
    - include: operators
    - include: control
    - include: variables
    - include: function-call
    - include: comment-line

  expressions-begin:
    # valid at the beginning of expressions only
    - include: string-quoted-angle-pop
    - include: maybe-regexp-match

###[ BLOCKS AND GROUPS ]######################################################

  blocks:
    # can't push into scope due to HEREDOCs!
    - match: \{
      scope: punctuation.section.block.begin.perl
      push: expressions-begin
    - match: \}
      scope: punctuation.section.block.end.perl

  blocks-nested:
    - match: \{
      scope: punctuation.section.block.begin.perl
      push: [blocks-nested-body, expressions-begin]

  blocks-nested-body:
    - match: \}
      scope: punctuation.section.block.end.perl
      pop: true
    - include: expressions

  brackets:
    # can't push into scope due to HEREDOCs!
    - match: \[
      scope: punctuation.section.brackets.begin.perl
      push: expressions-begin
    - match: \]
      scope: punctuation.section.brackets.end.perl

  brackets-nested:
    - match: \[
      scope: punctuation.section.brackets.begin.perl
      push: [brackets-nested-body, expressions-begin]

  brackets-nested-body:
    - match: \]
      scope: punctuation.section.brackets.end.perl
      pop: true
    - include: blocks-nested
    - include: brackets-nested
    - include: expressions

  groups:
    # can't push into scope due to HEREDOCs!
    - match: \(
      scope: punctuation.section.group.begin.perl
      push: expressions-begin
    - match: \)
      scope: punctuation.section.group.end.perl

  groups-nested:
    - match: \(
      scope: punctuation.section.group.begin.perl
      push: [groups-nested-body, expressions-begin]

  groups-nested-body:
    - match: \)
      scope: punctuation.section.group.end.perl
      pop: true
    - include: blocks-nested
    - include: brackets-nested
    - include: groups-nested
    - include: expressions

###[ CONSTANTS ]##############################################################

  constants:
    - include: constants-version
    - include: constants-numbers
    - include: constants-language
    - include: constants-other
    - include: string

  constants-numbers:
    # SEE: http://perldoc.perl.org/perlnumber.html
    # decimal floats
    - match:  |-
        (?ix:
          (") ( [-+]? (?:
          (\.)[\d_]+ (?: e[-+]?[\d_]+ )?  |  # .1 .1e1 .1e-1 .1e+1
              [\d_]+ (?: (\.) (?:
              [\d_]+ (?: e[-+]?[\d_]+ )?  |  # 1.1 1.1e1 1.1e-1 1.1e+1
                         e[-+]?[\d_]+ )?  |  # 1. 1.e1 1.e-1 1.e+1
                         e[-+]?[\d_]+ )      # 1e1 1e-1 1e+1
          ) ) (")
        )
      scope: string.quoted.double.perl
      captures:
        1: punctuation.definition.string.begin.perl
        2: constant.numeric.float.decimal.perl
        3: punctuation.separator.decimal.perl
        4: punctuation.separator.decimal.perl
        5: punctuation.definition.string.end.perl
    - match:  |-
        (?ix:
          (') ( [-+]? (?:
          (\.)[\d_]+ (?: e[-+]?[\d_]+ )?  |  # .1 .1e1 .1e-1 .1e+1
              [\d_]+ (?: (\.) (?:
              [\d_]+ (?: e[-+]?[\d_]+ )?  |  # 1.1 1.1e1 1.1e-1 1.1e+1
                         e[-+]?[\d_]+ )?  |  # 1. 1.e1 1.e-1 1.e+1
                         e[-+]?[\d_]+ )      # 1e1 1e-1 1e+1
          ) ) (')
        )
      scope: string.quoted.single.perl
      captures:
        1: punctuation.definition.string.begin.perl
        2: constant.numeric.float.decimal.perl
        3: punctuation.separator.decimal.perl
        4: punctuation.separator.decimal.perl
        5: punctuation.definition.string.end.perl
    - match: |-
        (?ix:
          (\.)[\d_]+ (?: e[-+]?[\d_]+   )? \b |  # .1 .1e1 .1e-1 .1e+1
            \b[\d_]+ (?: (\.) (?: (?:
              [\d_]+ (?: e[-+]?[\d_]+   )? \b |  # 1.1 1.1e1 1.1e-1 1.1e+1
                         e[-+]?[\d_]+\b )     |  # 1.e1 1.e-1 1.e+1
                         (?=[^.]))            |  # 1. (protect the .. operator)
                         e[-+]?[\d_]+\b )        # 1e1 1e-1 1e+1
        )
      scope: constant.numeric.float.decimal.perl
      captures:
        1: punctuation.separator.decimal.perl
        2: punctuation.separator.decimal.perl
    # decimal integers
    - match: (")([-+]?[\d_]+)(")
      scope: string.quoted.double.perl
      captures:
        1: punctuation.definition.string.begin.perl
        2: constant.numeric.integer.decimal.perl
        3: punctuation.definition.string.end.perl
    - match: (')([-+]?[\d_]+)(')
      scope: string.quoted.single.perl
      captures:
        1: punctuation.definition.string.begin.perl
        2: constant.numeric.integer.decimal.perl
        3: punctuation.definition.string.end.perl
    # binary integers
    - match: \b(0[bB])[01_]+\b
      scope: constant.numeric.integer.binary.perl
      captures:
        1: punctuation.definition.numeric.binary.perl
    # hexadecimal integers
    - match: \b(0[xX])[\h_]+\b
      scope: constant.numeric.integer.hexadecimal.perl
      captures:
        1: punctuation.definition.numeric.hexadecimal.perl
    # octal integers
    - match: \b(0)[0-7_]+\b
      scope: constant.numeric.integer.octal.perl
      captures:
        1: punctuation.definition.numeric.octal.perl
    # decimal integers
    - match: \b[\d_]+\b
      scope: constant.numeric.integer.decimal.perl

  constants-language:
    - match: \b__(?:END|DATA|FILE|LINE|PACKAGE|SUB)__\b
      scope: constant.language.perl
    - match: \b(?:ARGV|ARGVOUT|STDERR|STDIN|STDOUT|DATA|IN|OUT){{break}}
      scope: constant.language.filehandle.perl

  constants-other:
    - match: \b\w+(?=\s*=>)
      scope: constant.other.key.perl
    - match: \b[A-Z0-9_]+{{break}}
      scope: constant.other.perl

  constants-version:
    # SEE: https://perldoc.perl.org/functions/require.html
    - match: (v?)[\d_](\.)[\d_]+(\.)[\d_]+\b
      scope: constant.numeric.version.perl
      captures:
        1: punctuation.definition.version.perl
        2: punctuation.separator.decimal.perl
        3: punctuation.separator.decimal.perl

###[ STRINGS ]################################################################

  string:
    - include: string-quoted-backtick
    - include: string-quoted-double
    - include: string-quoted-single
    - include: string-format
    - include: string-heredoc

  string-quoted-angle-pop:
    # NOTE: match only if...
    # - doesn't look like an operator (`<=>`, `<<`)
    # - closing punctuation `>` found on the same line
    - match: \<(?!<|=>)(?=.*?>)
      scope: punctuation.definition.string.begin.perl
      set:
        - meta_scope: string.quoted.angle.perl
        - match: \>
          scope: punctuation.definition.string.end.perl
          pop: true
        - include: literal-angle-nested
        - include: character-escape

  string-quoted-backtick:
    - match: \`
      scope: punctuation.definition.string.begin.perl
      push:
        - meta_scope: string.quoted.backtick.perl
        - match: \`
          scope: punctuation.definition.string.end.perl
          pop: true
        - include: character-escape

  string-quoted-double:
    - match: \"
      scope: punctuation.definition.string.begin.perl
      push:
        - meta_scope: string.quoted.double.perl
        - match: \"
          scope: punctuation.definition.string.end.perl
          pop: true
        - include: character-escape

  string-quoted-single:
    - match: \'
      scope: punctuation.definition.string.begin.perl
      push:
        - meta_scope: string.quoted.single.perl
        - match: \'
          scope: punctuation.definition.string.end.perl
          pop: true
        - include: character-escape

  string-format:
    # SEE: http://perldoc.perl.org/perlform.html
    - match: ^\s*(format)\s+(\w+)\s*(=)\s*$
      captures:
        1: storage.type.format.perl
        2: variable.other.perl
        3: keyword.operator.assignment.perl
      push:
        - meta_scope: meta.block.format.perl
        - meta_content_scope: string.unquoted.format.perl
        - match: ^\.(?=\s*$)
          scope: punctuation.terminator.format.perl
          pop: true
        - match: \.{3}
          scope: constant.character.escape.perl
        - match: ~{1,2}(?!~)
          scope: constant.character.escape.perl
        - match: '[@\^]\*'
          scope: variable.parameter.multiline-width.perl
        - match: (\@)[0#\.|<>]+
          scope: variable.parameter.regular-field.perl
          captures:
            1: punctuation.definition.placeholder.begin.perl
        - match: (\^)[0#\.|<>]+
          scope: variable.parameter.special-field.perl
          captures:
            1: punctuation.definition.placeholder.begin.perl
        - include: variables

  string-heredoc:
    # SEE: http://www.perlmeme.org/howtos/syntax/here_document.html
    - match: (<<) *(?=['"]? *{{identifier}})
      captures:
        1: keyword.operator.heredoc.perl
      push: [string-heredoc-meta, string-heredoc-body]

  string-heredoc-meta:
    - meta_scope: meta.heredoc.perl
    - include: immediately-pop

  string-heredoc-body:
    # embedded css
    - match: ((['"]?)( *CSS)(\2))
      captures:
        1: string.other.heredoc.perl
        2: punctuation.definition.string.begin.perl
        3: constant.language.heredoc.css.perl
        4: punctuation.definition.string.end.perl
      set: [string-heredoc-css, string-heredoc-expr]
    # embedded html
    - match: ((['"]?)( *HTML)(\2))
      captures:
        1: string.other.heredoc.perl
        2: punctuation.definition.string.begin.perl
        3: constant.language.heredoc.html.perl
        4: punctuation.definition.string.end.perl
      set: [string-heredoc-html, string-heredoc-expr]
    # embedded javascript
    - match: ((['"]?)( *JAVASCRIPT)(\2))
      captures:
        1: string.other.heredoc.perl
        2: punctuation.definition.string.begin.perl
        3: constant.language.heredoc.js.perl
        4: punctuation.definition.string.end.perl
      set: [string-heredoc-javascript, string-heredoc-expr]
    # embedded json
    - match: ((['"]?)( *JSON)(\2))
      captures:
        1: string.other.heredoc.perl
        2: punctuation.definition.string.begin.perl
        3: constant.language.heredoc.json.perl
        4: punctuation.definition.string.end.perl
      set: [string-heredoc-json, string-heredoc-expr]
    # embedded sql
    - match: ((['"]?)( *SQL)(\2))
      captures:
        1: string.other.heredoc.perl
        2: punctuation.definition.string.begin.perl
        3: constant.language.heredoc.sql.perl
        4: punctuation.definition.string.end.perl
      set: [string-heredoc-sql, string-heredoc-expr]
    # embedded xml
    - match: ((['"]?)( *XML)(\2))
      captures:
        1: string.other.heredoc.perl
        2: punctuation.definition.string.begin.perl
        3: constant.language.heredoc.xml.perl
        4: punctuation.definition.string.end.perl
      set: [string-heredoc-xml, string-heredoc-expr]
    # any other tag like (EOD, EOT, FOO, ...) is handled as string
    - match: ((['"]?)( *{{identifier}})(\2))
      captures:
        1: string.other.heredoc.perl
        2: punctuation.definition.string.begin.perl
        3: constant.language.heredoc.plain.perl
        4: punctuation.definition.string.end.perl
      set: [string-heredoc-other, string-heredoc-expr]
    - include: else-pop

  string-heredoc-expr:
    # The rest of the line right after the heredoc tag needs to be handled
    # as ordinary perl. The embedded syntax starts at the next line.
    - clear_scopes: 1  # remove 'string.quoted'
    - match: $
      pop: true
    - include: expressions

  string-heredoc-css:
    - meta_content_scope: source.css.embedded.perl
    # pop off only, if keyword is indented correctly
    - match: ^\3$
      scope: constant.language.heredoc.css.perl
      pop: true
    - match: ''
      embed: scope:source.css
      escape: (?=^ *CSS$)

  string-heredoc-html:
    - meta_content_scope: text.html.embedded.perl
    - match: ^\3$
      scope: constant.language.heredoc.html.perl
      pop: true
    - match: ''
      embed: scope:text.html.basic
      escape: (?=^ *HTML$)

  string-heredoc-javascript:
    - meta_content_scope: source.js.embedded.perl
    - match: ^\3$
      scope: constant.language.heredoc.js.perl
      pop: true
    - match: ''
      embed: scope:source.js
      escape: (?=^ *JAVASCRIPT$)

  string-heredoc-json:
    - meta_content_scope: source.json.embedded.perl
    - match: ^\3$
      scope: constant.language.heredoc.json.perl
      pop: true
    - match: ''
      embed: scope:source.json
      escape: (?=^ *JSON$)

  string-heredoc-sql:
    - meta_content_scope: source.sql.embedded.perl
    - match: ^\3$
      scope: constant.language.heredoc.sql.perl
      pop: true
    - match: ''
      embed: scope:source.sql
      escape: (?=^ *SQL$)

  string-heredoc-xml:
    - meta_content_scope: text.xml.embedded.perl
    - match: ^\3$
      scope: constant.language.heredoc.xml.perl
      pop: true
    - match: ''
      embed: scope:text.xml
      escape: (?=^ *XML$)

  string-heredoc-other:
    - meta_content_scope: string.quoted.other.perl
    - match: ^\3$
      scope: constant.language.heredoc.plain.perl
      pop: true

###[ CLASSES ]################################################################

  class:
    - match: '{{module}}(?=(?:::|\s*[#;]|\s*$))'
      scope: support.class.perl
      push: class-members-pop

  class-members-pop:
    # nested class
    - match: (::)({{module}})
      captures:
        1: punctuation.accessor.double-colon.perl
        2: support.class.perl
      push: maybe-item-access
    # member function
    - match: (::)(({{member}})\s*)(?=\()
      captures:
        1: punctuation.accessor.double-colon.perl
        2: meta.function-call.name.perl
        3: variable.function.member.perl
      set: function-call-arguments
    # member variable
    - match: (::)({{identifier}})
      captures:
        1: punctuation.accessor.double-colon.perl
        2: variable.other.member.perl
      set: maybe-item-access
    - include: else-pop

  object-members-pop:
    # member function
    - match: ({{member}})\s*(?=\()
      scope: meta.function-call.name.perl
      captures:
        1: variable.function.member.perl
      set: function-call-arguments
    # member variable
    - match: '{{identifier}}'
      scope: variable.other.member.perl
      set: maybe-item-access
    # item access like $array->[0]
    - match: (?=[{\[])
      set: maybe-item-access
    - include: else-pop

###[ CONTROL KEYWORDS ]#######################################################

  control:
    # conditional
    - match: \bdefault{{break}}
      scope: keyword.control.conditional.default.perl
      push: expressions-begin
    - match: \belse{{break}}
      scope: keyword.control.conditional.else.perl
      push: expressions-begin
    - match: \belsif{{break}}
      scope: keyword.control.conditional.elseif.perl
      push: expressions-begin
    - match: \bgiven{{break}}
      scope: keyword.control.conditional.given.perl
      push: expressions-begin
    - match: \bif{{break}}
      scope: keyword.control.conditional.if.perl
      push: expressions-begin
    - match: \bunless{{break}}
      scope: keyword.control.conditional.unless.perl
      push: expressions-begin
    - match: \bwhen{{break}}
      scope: keyword.control.conditional.when.perl
      push: expressions-begin
    # flow
    - match: \bbreak{{break}}
      scope: keyword.control.flow.break.perl
      push: expressions-begin
    - match: \bcaller{{break}}
      scope: keyword.control.flow.caller.perl
      push: expressions-begin
    - match: \bcontinue{{break}}
      scope: keyword.control.flow.continue.perl
      push: expressions-begin
    - match: \bdie{{break}}
      scope: keyword.control.flow.die.perl
      push: expressions-begin
    - match: \bdo{{break}}
      scope: keyword.control.flow.do.perl
      push: expressions-begin
    - match: \bdump{{break}}
      scope: keyword.control.flow.dump.perl
      push: expressions-begin
    - match: \bexit{{break}}
      scope: keyword.control.flow.exit.perl
      push: expressions-begin
    - match: \bgoto{{break}}
      scope: keyword.control.flow.goto.perl
      push: expressions-begin
    - match: \blast{{break}}
      scope: keyword.control.flow.last.perl
      push: label-usage
    - match: \bnext{{break}}
      scope: keyword.control.flow.next.perl
      push: label-usage
    - match: \bredo{{break}}
      scope: keyword.control.flow.redo.perl
      push: label-usage
    - match: \breturn{{break}}
      scope: keyword.control.flow.return.perl
      push: expressions-begin
    - match: \bwait{{break}}
      scope: keyword.control.flow.wait.perl
      push: expressions-begin
    # loop
    - match: \bfor{{break}}
      scope: keyword.control.loop.for.perl
      push: expressions-begin
    - match: \bforeach{{break}}
      scope: keyword.control.loop.foreach.perl
      push: expressions-begin
    - match: \buntil{{break}}
      scope: keyword.control.loop.until.perl
      push: expressions-begin
    - match: \bwhile{{break}}
      scope: keyword.control.loop.while.perl
      push: expressions-begin

  label-usage:
    # reserved words indicate an expression like label
    - match: (?={{reserved_words}}|{{builtin_functions}})
      pop: true
    - match: '{{identifier}}'
      scope: variable.label.perl
      pop: true
    - include: expressions-begin

  label:
    - match: ({{identifier}})(:)(?!:)
      captures:
        1: entity.name.label.perl
        2: punctuation.separator.perl
      push: expressions-begin

###[ OPERATORS ]##############################################################

  operators:
    # SEE: https://www.tutorialspoint.com/perl/perl_operators.htm
    - match: ','
      scope: punctuation.separator.sequence.perl
      push: expressions-begin
    - match: ;
      scope: punctuation.terminator.statement.perl
      push: expressions-begin
    - match: -[rwx0RWXOezsfdlpSbctugkTBMAC]\b
      scope: keyword.operator.filetest.perl
      push: expressions-begin
    - match: '->'
      scope: keyword.accessor.arrow.perl
      push: object-members-pop
    - match: '[!~=]~'
      scope: keyword.operator.binary.perl
      push: expressions-begin
    - match: <<|>>
      scope: keyword.operator.bitwise.perl
      push: expressions-begin
    - match: <=>|//|\&\&|\|\||==|!=|>=|<=|[<>:!?]
      scope: keyword.operator.logical.perl
      push: expressions-begin
    - match: '\*\*=|[-+*/%]='
      scope: keyword.operator.assignment.perl
      push: expressions-begin
    - match: '--|\+\+'
      scope: keyword.operator.arithmetic.perl
      push: maybe-regexp-match
    - match: '\*{1,2}|[-+/]'
      scope: keyword.operator.arithmetic.perl
      push: expressions-begin
    - match: '[&|^~]'
      scope: keyword.operator.bitwise.perl
      push: expressions-begin
    - match: =>?
      scope: keyword.operator.assignment.perl
      push: expressions-begin
    - match: \.\.
      scope: keyword.operator.range.perl
      push: expressions-begin
    # string concat
    - match: \.=?
      scope: keyword.operator.concat.perl
      push: expressions-begin
    # string concation
    #  "string" x 10
    - match: \bx{{break}}
      scope: keyword.operator.arithmetic.perl
      push: expressions-begin
    - match: \b(?:{{operator_keywords}}){{break}}
      scope: keyword.operator.logical.perl
      push: expressions-begin

###[ QUOTED LIKE ]############################################################

  quoted-like:
    # SEE: http://perldoc.perl.org/perlop.html#Regexp-Quote-Like-Operators
    - include: quoted-like-match
    - include: quoted-like-replace

  quoted-like-match:
    - match: \bq[qwx]?\b
      scope: support.function.perl
      push:
        - quoted-like-meta
        - quoted-like-args-find-literal
    - match: \b(m|qr)(?=\s*[\(\[\{<])
      scope: support.function.perl
      push:
        - quoted-like-meta
        - quoted-like-flags
        - quoted-like-args-find-rexexp
    - match: \b(m|qr)({{regexp_delim}})
      captures:
        0: meta.function-call.perl
        1: support.function.perl
        2: punctuation.section.generic.begin.perl
      embed_scope: meta.function-call.perl string.regexp.perl
      embed: scope:source.regexp
      escape: (?<!(?<!\\)\\)(\2)({{regexp_flags}})?
      escape_captures:
        0: meta.function-call.perl
        1: punctuation.section.generic.end.perl
        2: constant.language.flags.regexp.perl

  quoted-like-replace:
    - match: \b(s|tr|y)(?=\s*[\(\[\{<])
      scope: support.function.perl
      push:
        - quoted-like-meta
        - quoted-like-flags
        - quoted-like-args-replace
        - quoted-like-args-find-rexexp
    - match: \b(s|tr|y)({{regexp_delim}})
      captures:
        0: meta.function-call.perl
        1: support.function.perl
        2: punctuation.section.generic.begin.perl
      embed_scope: meta.function-call.perl string.regexp.perl
      embed: scope:source.regexp
      escape: ((?<!(?<!\\)\\)\2)(.*?)((?<!(?<!\\)\\)\2)({{regexp_flags}})?
      escape_captures:
        0: meta.function-call.perl
        1: punctuation.separator.sequence.perl
        2: string.unquoted.perl
        3: punctuation.section.generic.end.perl
        4: constant.language.flags.regexp.perl

  quoted-like-meta:
    - meta_scope: meta.function-call.perl
    - include: immediately-pop

  quoted-like-flags:
    - match: '{{regexp_flags}}'
      scope: constant.language.flags.regexp.perl
      pop: true
    - include: immediately-pop

  quoted-like-args-find-rexexp:
    - match: \{
      scope: punctuation.section.braces.begin.perl
      set:
        - meta_scope: meta.braces.perl
        - meta_content_scope: string.regexp.perl
        - match: \}
          scope: punctuation.section.braces.end.perl
          pop: true
        - include: scope:source.regexp#base-literal-extended
    - match: \[
      scope: punctuation.section.brackets.begin.perl
      set:
        - meta_scope: meta.brackets.perl
        - meta_content_scope: string.regexp.perl
        - match: \]
          scope: punctuation.section.brackets.end.perl
          pop: true
        - include: scope:source.regexp#base-literal-extended
    - match: \<
      scope: punctuation.section.generic.begin.perl
      set:
        - meta_scope: meta.generic.perl
        - meta_content_scope: string.regexp.perl
        - match: \>
          scope: punctuation.section.generic.end.perl
          pop: true
        - include: scope:source.regexp#base-literal-extended
    - match: \(
      scope: punctuation.section.parens.begin.perl
      set:
        - meta_scope: meta.parens.perl
        - meta_content_scope: string.regexp.perl
        - match: \)
          scope: punctuation.section.parens.end.perl
          pop: true
        - include: scope:source.regexp#base-literal-extended
    - include: else-pop

  quoted-like-args-find-literal:
    - include: literal-braces-pop
    - include: literal-brackets-pop
    - include: literal-angle-pop
    - include: literal-parens-pop
    - include: literal-generic-pop
    - include: else-pop

  quoted-like-args-replace:
    - include: literal-braces-pop
    - include: literal-brackets-pop
    - include: literal-angle-pop
    - include: literal-parens-pop
    - include: else-pop

  literal-braces-pop:
    - match: \{
      scope: punctuation.section.braces.begin.perl
      set:
        - meta_scope: meta.braces.perl
        - meta_content_scope: string.unquoted.perl
        - match: \}
          scope: punctuation.section.braces.end.perl
          pop: true
        - include: literal-braces-nested
        - include: character-escape

  literal-braces-nested:
    - match: \{
      push:
        - match: \}
          pop: true
        - include: literal-braces-nested
        - include: character-escape

  literal-brackets-pop:
    - match: \[
      scope: punctuation.section.brackets.begin.perl
      set:
        - meta_scope: meta.brackets.perl
        - meta_content_scope: string.unquoted.perl
        - match: \]
          scope: punctuation.section.brackets.end.perl
          pop: true
        - include: literal-brackets-nested
        - include: character-escape

  literal-brackets-nested:
    - match: \[
      push:
        - match: \]
          pop: true
        - include: literal-brackets-nested
        - include: character-escape

  literal-angle-pop:
    - match: \<
      scope: punctuation.section.generic.begin.perl
      set:
        - meta_scope: meta.generic.perl
        - meta_content_scope: string.unquoted.perl
        - match: \>
          scope: punctuation.section.generic.end.perl
          pop: true
        - include: literal-angle-nested
        - include: character-escape

  literal-angle-nested:
    - match: \<
      push:
        - match: \>
          pop: true
        - include: literal-angle-nested
        - include: character-escape

  literal-parens-pop:
    - match: \(
      scope: punctuation.section.parens.begin.perl
      set:
        - meta_scope: meta.parens.perl
        - meta_content_scope: string.unquoted.perl
        - match: \)
          scope: punctuation.section.parens.end.perl
          pop: true
        - include: literal-parens-nested
        - include: character-escape

  literal-parens-nested:
    - match: \(
      push:
        - match: \)
          pop: true
        - include: literal-parens-nested
        - include: character-escape

  literal-generic-pop:
    - match: ({{regexp_delim}})
      scope: punctuation.section.generic.begin.perl
      set:
        - meta_scope: meta.generic.perl
        - meta_content_scope: string.unquoted.perl
        - match: \1
          scope: punctuation.section.generic.end.perl
          pop: true
        - include: character-escape

  character-escape:
    - match: \\.
      scope: constant.character.escape.perl

###[ REGEXP ]#################################################################

  maybe-regexp-match:
    # /<pattern>/<flags>
    - match: /
      scope: punctuation.section.generic.begin.perl
      embed_scope: string.regexp.perl
      embed: scope:source.regexp
      escape: (?<!(?<!\\)\\)(/)({{regexp_flags}})?
      escape_captures:
        1: punctuation.section.generic.end.perl
        2: constant.language.flags.regexp.perl
    - include: else-pop

###[ FUNCTIONS ]##############################################################

  function-call:
    # builtin function calls
    - match: '{{builtin_functions}}'
      scope: support.function.perl
      push: expressions-begin
    # user defined function calls
    - match: \b({{member}})\s*(?=\()
      scope: meta.function-call.name.perl
      captures:
        1: variable.function.perl
      push: function-call-arguments

  function-call-arguments:
    - match: \(
      scope: punctuation.section.arguments.begin.perl
      set:
        - - meta_scope: meta.function-call.arguments.perl
          - match: \)
            scope: punctuation.section.arguments.end.perl
            pop: true
          - include: main
        - expressions-begin

###[ SUB ]####################################################################

  sub:
    - match: \bsub\b
      scope: storage.type.function.perl
      push: sub-name
    # special functions which are executed at compile time
    # SEE: https://perldoc.perl.org/perlmod.html#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END
    - match: \b(BEGIN|CHECK|END|INIT|UNITCHECK){{break}}
      scope: meta.function.perl entity.name.function.prepocessor.perl
      push: sub-expect-parameters

  sub-name:
    - meta_scope: meta.function.perl
    # callback hook to auto load or destroy objects/functions
    - match: \b(AUTOLOAD|DESTROY){{break}}
      scope: entity.name.function.callback.perl
      set: sub-expect-parameters
    # special functions which are executed at compile time
    - match: \b(BEGIN|CHECK|END|INIT|UNITCHECK){{break}}
      scope: entity.name.function.prepocessor.perl
      set: sub-expect-parameters
    # ordinary function identifier
    - match: '{{identifier}}'
      scope: entity.name.function.perl
      set: sub-expect-parameters
    - include: sub-expect-block

  sub-expect-parameters:
    - meta_content_scope: meta.function.perl
    - match: (?=\()
      set: sub-parameters
    - include: sub-expect-block
    - match: \S
      scope: invalid.illegal.function-name.perl

  sub-parameters:
    - match: \(
      scope: punctuation.section.group.begin.perl
      set:
        - meta_scope: meta.function.parameters.perl
        - match: \)
          scope: punctuation.section.group.end.perl
          set: sub-expect-block
        - match: '[\$\@\*;][^\s,\)]*'
          scope: variable.parameter.perl
        - include: expressions

  sub-expect-block:
    - meta_content_scope: meta.function.perl
    - include: comment-line
    - include: term-pop
    - match: $|(?=\{)
      set:
        - match: \{
          scope: punctuation.section.block.begin.perl
          set: [sub-block-body, expressions-begin]
        - include: comment-line
        - include: comment-pod
        - match: (?=\S)
          pop: true

  sub-block-body:
    - meta_scope: meta.function.perl meta.block.perl
    - match: \}
      scope: punctuation.section.block.end.perl
      pop: true
    - include: main

###[ VARIABLES ]##############################################################

  variables:
    # SEE: http://perldoc.perl.org/perlvar.html
    - match: (\$)&(?!\w)
      scope: variable.other.regexp.match.perl
      captures:
        1: punctuation.definition.variable.perl
      push: maybe-item-access
    - match: (\$)`(?!\w)
      scope: variable.other.regexp.pre-match.perl
      captures:
        1: punctuation.definition.variable.perl
      push: maybe-item-access
    - match: (\$)\'(?!\w)
      scope: variable.other.regexp.post-match.perl
      captures:
        1: punctuation.definition.variable.perl
      push: maybe-item-access
    - match: (\$)\+(?!\w)
      scope: variable.other.regexp.last-paren-match.perl
      captures:
        1: punctuation.definition.variable.perl
      push: maybe-item-access
    - match: (\$)\"(?!\w)
      scope: variable.other.readwrite.list-separator.perl
      captures:
        1: punctuation.definition.variable.perl
      push: maybe-item-access
    - match: (\$)0\b
      scope: variable.other.predefined.program-name.perl
      captures:
        1: punctuation.definition.variable.perl
      push: maybe-item-access
    - match: (\$)[0-9]+\b
      scope: variable.other.subpattern.perl
      captures:
        1: punctuation.definition.variable.perl
      push: maybe-item-access
    # $Module::SubModule::member
    # $::SubModule::member
    - match: ([\$\@\%]#?)({{module}})?(?=::)
      captures:
        1: punctuation.definition.variable.perl
        2: support.class.perl
      push:
        - - meta_scope: variable.other.readwrite.global.perl
          - include: immediately-pop
        - class-members-pop
    - match: (\$)(\^[A-Z]|[_ab\*\.\/\|,\\;#%=\-~^:?!\$<>\(\)\[\]@])(?!\w)
      scope: variable.other.predefined.perl
      captures:
        1: punctuation.definition.variable.perl
      push: maybe-item-access
    - match: ([\$\@\%]#?)\w+\b
      scope: variable.other.readwrite.global.perl
      captures:
        1: punctuation.definition.variable.perl
      push: maybe-item-access
    - match: ([\$\@\%])(\{)
      scope: punctuation.definition.variable.begin.perl
      push: [maybe-item-access, variable-body, expressions-begin]

  variable-body:
    - meta_scope: meta.variable.perl
    - match: \}
      scope: punctuation.definition.variable.end.perl
      pop: true
    - include: blocks-nested
    - include: brackets-nested
    - include: groups-nested
    - include: expressions

  maybe-item-access:
    # SEE: https://perldoc.perl.org/perllol.html
    - match: \[
      scope: punctuation.section.item-access.begin.perl
      push:
        - - meta_scope: meta.item-access.perl
          - match: \]
            scope: punctuation.section.item-access.end.perl
            pop: true
          - include: blocks-nested
          - include: brackets-nested
          - include: groups-nested
          - include: expressions
        - expressions-begin
    - match: (\{)\s*({{identifier}})\s*(\})
      scope: meta.item-access.perl
      captures:
        1: punctuation.section.item-access.begin.perl
        2: string.unquoted.perl
        3: punctuation.section.item-access.end.perl
    - match: \{
      scope: punctuation.section.item-access.begin.perl
      push:
        - - meta_scope: meta.item-access.perl
          - match: \}
            scope: punctuation.section.item-access.end.perl
            pop: true
          - include: blocks-nested
          - include: brackets-nested
          - include: groups-nested
          - include: expressions
        - expressions-begin
    - include: immediately-pop
