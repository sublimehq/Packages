%YAML 1.2
---
# https://toml.io/en/
# http://www.sublimetext.com/docs/syntax.html
name: TOML
scope: source.toml
version: 2

file_extensions:
  - toml
  - tml
  - Cargo.lock
  - Gopkg.lock
  - Pipfile
  - pdm.lock
  - poetry.lock
  - uv.lock

contexts:
  main:
    - include: comments
    - include: sections
    - include: keys
    - include: values

###[ COMMENTS ]################################################################

  comments:
    # https://toml.io/en/v1.0.0#comment
    - match: \#
      scope: punctuation.definition.comment.toml
      push: comment-body

  comment-body:
    - meta_scope: comment.line.number-sign.toml
    - match: $\n?
      pop: 1

###[ SECTIONS ]################################################################

  sections:
    # https://toml.io/en/v1.0.0#array-of-tables
    - match: \[\[
      scope: meta.section.toml punctuation.definition.section.begin.toml
      push: array-section-name-body
    # https://toml.io/en/v1.0.0#table
    - match: \[
      scope: meta.section.toml punctuation.definition.section.begin.toml
      push: single-section-name-body

  array-section-name-body:
    - meta_content_scope: meta.section.toml entity.name.section.toml
    - match: \]\]
      scope: meta.section.toml punctuation.definition.section.end.toml
      set: expect-eol
    - include: name-content
    - include: illegal-eol-pop

  single-section-name-body:
    - meta_content_scope: meta.section.toml entity.name.section.toml
    - match: \]
      scope: meta.section.toml punctuation.definition.section.end.toml
      set: expect-eol
    - include: name-content
    - include: illegal-eol-pop

###[ KEYS ]####################################################################

  keys:
    # https://toml.io/en/v1.0.0#keys
    - match: '{{key_begin}}'
      push: key-body

  key-body:
    - meta_scope: meta.mapping.key.toml entity.name.key.toml
    - match: (?=[ \t]*(?:$|[#=]))
      pop: 1
    - include: name-content

  name-content:
    - match: \.
      scope: punctuation.accessor.toml
    - match: \"
      scope: punctuation.definition.quoted.begin.toml
      push: double-quoted-name-body
    - match: \'
      scope: punctuation.definition.quoted.begin.toml
      push: single-quoted-name-body
    - include: name-prototype
    - match: '[^ \t0-9A-Za-z_-]'
      scope: invalid.illegal.toml

  double-quoted-name-body:
    - match: \"
      scope: punctuation.definition.quoted.end.toml
      pop: 1
    - include: illegal-eol-pop
    - include: string-escapes
    - include: name-prototype

  single-quoted-name-body:
    - match: \'
      scope: punctuation.definition.quoted.end.toml
      pop: 1
    - include: illegal-eol-pop
    - include: name-prototype

  name-prototype: []

###[ VALUES ]##################################################################

  values:
    - match: '[ \t]*(=)[ \t]*'
      scope: meta.mapping.toml
      captures:
         1: punctuation.separator.key-value.toml
      push: [value-meta, value]
    - match: (?=\S)
      push: [value-meta, value]

  value-meta:
    - meta_content_scope: meta.mapping.value.toml
    - include: expect-eol

  value:
    - include: array
    - include: mapping
    - include: boolean
    - include: datetime
    - include: number
    - include: basic-multiline-string
    - include: basic-string
    - include: literal-multiline-string
    - include: literal-string
    - include: immediately-pop

###[ ARRAYS ]##################################################################

  array:
    # https://toml.io/en/v1.0.0#array
    - match: \[
      scope: punctuation.section.sequence.begin.toml
      push: array-body

  array-body:
    - meta_scope: meta.sequence.array.toml
    - match: \]
      scope: punctuation.section.sequence.end.toml
      pop: 2
    - match: ','
      scope: punctuation.separator.sequence.toml
    - include: comments
    - match: (?=\S)
      push: value

###[ INLINE TABLES ]###########################################################

  mapping:
    # https://toml.io/en/v1.0.0#inline-table
    - match: \{
      scope: punctuation.section.mapping.begin.toml
      push: mapping-body

  mapping-body:
    - meta_scope: meta.mapping.toml
    - match: \}
      scope: punctuation.section.mapping.end.toml
      pop: 2
    - match: ','
      scope: punctuation.separator.sequence.toml
    - match: '='
      scope: punctuation.separator.key-value.toml
      push:
        # value can start on next line
        - match: (?=\S)
          set: mapping-value-body
    - match: '{{key_begin}}'
      push: mapping-key-body
    - include: comments
    - match: (?=\S)
      push: mapping-value-body

  mapping-key-body:
    - clear_scopes: 1
    - meta_scope: meta.mapping.key.toml entity.name.key.toml
    - match: (?=[ \t]*[#=}])
      pop: 1
    - include: name-content

  mapping-value-body:
    - clear_scopes: 1
    - meta_scope: meta.mapping.value.toml
    - include: value

###[ CONSTANT VALUES ]#########################################################

  boolean:
    # https://toml.io/en/v1.0.0#boolean
    - match: false{{ident_break}}
      scope: constant.language.boolean.false.toml
      pop: 1
    - match: true{{ident_break}}
      scope: constant.language.boolean.true.toml
      pop: 1

  datetime:
    # https://toml.io/en/v1.0.0#offset-date-time
    # https://datatracker.ietf.org/doc/html/rfc3339
    - match: '{{date_time}}'
      scope: constant.other.datetime.toml
      captures:
        1: punctuation.separator.date.toml
        2: punctuation.separator.date.toml
        3: punctuation.separator.datetime.toml
        4: punctuation.separator.time.toml
        5: punctuation.separator.time.toml
        6: punctuation.separator.decimal.toml
        7: storage.modifier.timezone.toml
        8: keyword.operator.arithmetic.toml
        9: punctuation.separator.time.toml
      pop: 1
    - match: '{{date}}'
      scope: constant.other.date.toml
      captures:
        1: punctuation.separator.date.toml
        2: punctuation.separator.date.toml
      pop: 1
    - match: '{{time}}'
      scope: constant.other.time.toml
      captures:
        1: punctuation.separator.time.toml
        2: punctuation.separator.time.toml
        3: punctuation.separator.decimal.toml
      pop: 1

  number:
    # https://toml.io/en/v1.0.0#float
    - match: ([-+])?(inf|nan){{ident_break}}
      scope: meta.number.float.other.toml
      captures:
        1: keyword.operator.arithmetic.toml
        2: constant.numeric.value.toml
      pop: 1
    - match: ([-+]?)({{dec_digits}}(?:(\.){{zero_dec_digits}}{{exponent}}?|{{exponent}})){{ident_break}}
      scope: meta.number.float.decimal.toml
      captures:
        1: keyword.operator.arithmetic.toml
        2: constant.numeric.value.toml
        3: punctuation.separator.decimal.toml
      pop: 1
    # https://toml.io/en/v1.0.0#integer
    - match: (0b)([01][01_]*)?{{ident_break}}
      scope: meta.number.integer.binary.toml
      captures:
        1: constant.numeric.base.toml
        2: constant.numeric.value.toml
      pop: 1
    - match: (0o)([0-7][0-7_]*)?{{ident_break}}
      scope: meta.number.integer.octal.toml
      captures:
        1: constant.numeric.base.toml
        2: constant.numeric.value.toml
      pop: 1
    - match: (0x)(\h[\h_]*)?{{ident_break}}
      scope: meta.number.integer.hexadecimal.toml
      captures:
        1: constant.numeric.base.toml
        2: constant.numeric.value.toml
      pop: 1
    - match: ([-+]?)({{dec_digits}}){{ident_break}}
      scope: meta.number.integer.decimal.toml
      captures:
        1: keyword.operator.arithmetic.toml
        2: constant.numeric.value.toml
      pop: 1

###[ STRING VALUES ]###########################################################

  basic-multiline-string:
    - match: '"""'
      scope: punctuation.definition.string.begin.toml
      push: basic-multiline-string-body

  basic-multiline-string-body:
    - meta_scope: meta.string.toml string.quoted.double.block.toml
    - match: '"""'
      scope: punctuation.definition.string.end.toml
      pop: 2
    - include: string-escapes
    - include: string-prototype

  basic-string:
    - match: \"
      scope: punctuation.definition.string.begin.toml
      push: basic-string-body

  basic-string-body:
    - meta_scope: meta.string.toml string.quoted.double.toml
    - match: \"
      scope: punctuation.definition.string.end.toml
      pop: 2
    - include: illegal-eol-pop
    - include: string-escapes
    - include: string-prototype

  literal-multiline-string:
    - match: "'''"
      scope: punctuation.definition.string.begin.toml
      push: literal-multiline-string-body

  literal-multiline-string-body:
    - meta_scope: meta.string.toml string.quoted.single.block.toml
    - match: "'''"
      scope: punctuation.definition.string.end.toml
      pop: 2
    - include: string-prototype

  literal-string:
    - match: \'
      scope: punctuation.definition.string.begin.toml
      push: literal-string-body

  literal-string-body:
    - meta_scope: meta.string.toml string.quoted.single.toml
    - match: \'
      scope: punctuation.definition.string.end.toml
      pop: 2
    - include: illegal-eol-pop
    - include: string-prototype

  string-escapes:
    # https://toml.io/en/v1.0.0#string
    - match: \\[btnfr"\\]
      scope: constant.character.escape.toml
    - match: \\u\h{4}
      scope: constant.character.escape.unicode.16bit.toml
    - match: \\U\h{8}
      scope: constant.character.escape.unicode.32bit.toml
    - match: \\.
      scope: invalid.illegal.string.escape.toml

  string-prototype: []

###[ PROTOTYPES ]##############################################################

  immediately-pop:
    - match: ''
      pop: 1

  eol-pop:
    - match: $|(?=[ \t]*#)
      pop: 1

  expect-eol:
    - include: eol-pop
    - match: '[^#\s]+'
      scope: invalid.illegal.unexpected-token.toml

  illegal-eol-pop:
    - match: $\n?
      scope: invalid.illegal.unexpected-eol.toml
      pop: 1

###############################################################################

variables:
  # maybe quoted identifiers
  key_begin: (?=["'0-9A-Za-z_-])

  # identifier
  ident_begin: (?={{ident_char}})
  ident_break: (?!{{ident_char}})
  ident_char: '[0-9A-Za-z_-]'

  # numbers
  dec_digits: (?:[1-9][0-9_]+|[0-9])
  zero_dec_digits: (?:[0-9][0-9_]*)
  exponent: (?:[eE][-+]?{{zero_dec_digits}})

  # rfc3339 / ISO8601 datetime
  # local-date / offset-date-time / local-date-time
  date_time: '(?x: {{date}} ([ tT]) {{time}} {{time_offset}}? )'

  # rfc3339 / ISO8601 date
  date: '(?x: {{date_year}} (-) {{date_month}} (-) {{date_mday}})'
  # date-fullyear = 4DIGIT
  date_year: '[0-9]{4}'
  # date-month = 2DIGIT   ; 01-12
  date_month: '(?:0[0-9]|1[0-2])'
  # date-mday = 2DIGIT    ; 01-28, 01-29, 01-30, 01-31 based on month/year
  date_mday: '(?:[0-2][0-9]|3[0-1])'

  # rfc3339 / ISO8601 time
  time: '(?x: {{time_hour}} (:) {{time_minute}} (:) {{time_second}} {{time_secfrac}}?)'
  # time-hour = 2DIGIT    ; 00-23
  time_hour: '(?:[01][0-9]|2[0-4])'
  # time-minute = 2DIGIT  ; 00-59
  time_minute: '[0-5][0-9]'
  # time-second = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second rules
  time_second: '(?:[0-6][0-9])'
  # time-secfrac = "." 1*DIGIT
  time_secfrac: '(?:(\.)[0-9]+)'
  # time-offset = "Z" / time-numoffset
  # time-numoffset = ("+" / "-") time-hour ":" time-minute
  time_offset: '(?: ([zZ]) | ([-+]) {{time_hour}} (:) {{time_minute}})'
