%YAML 1.2
---
name: XML
file_extensions:
  - xml
  - xsd
  - xsl
  - xslt
  - tld
  - dtml
  - rss
  - opml
  - svg
first_line_match: |-
    (?x)
    ^(?:
        <\?xml\s
     |  \s*<([\w-]+):Envelope\s+xmlns:\1\s*=\s*"http://schemas.xmlsoap.org/soap/envelope/"\s*>
     )
scope: text.xml
variables:
  # This is the full XML Name production, but should not be used where namespaces
  # are possible. Those locations should use a qualified_name.
  name: '[[:alpha:]:_][[:alnum:]:_.-]*'
  # This is the form that allows a namespace prefix (ns:) followed by a local
  # name. The captures are:
  #  1: namespace prefix name
  #  2: namespace prefix colon
  #  3: local tag name
  qualified_name: '(?:([[:alpha:]_][[:alnum:]_.-]*)(:))?([[:alpha:]_][[:alnum:]_.-]*)'

contexts:
  main:
    - include: comment
    - include: preprocessor
    - include: doctype
    - include: tags
    - include: cdata
    - include: entity
    - include: should-be-entity

  preprocessor:
    # All tags like <?xml...?> without respect of details
    # Examples:
    #   <?xml version="1.0" ?>
    #   <?xml-model href='freb.xsl'?>
    #   <?xml-stylesheet type='text/xsl' href='freb.xsl'?>
    - match: '(<\?)(xml(?:-{{name}})?)(?=\s|\?>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.preprocessor.xml
      push:
        - meta_scope: meta.tag.preprocessor.xml
        - match: '\?>'
          scope: punctuation.definition.tag.end.xml
          pop: true
        - include: tag-attributes
    # All tags like <?...?>
    # meta tag without internal highlighting
    - match: '(<\?)((?![xX][mM][lL]){{name}}).*(\?>)'
      captures:
        0: meta.tag.preprocessor.xml
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
        3: punctuation.definition.tag.end.xml

  comment:
    - match: '<!--'
      scope: punctuation.definition.comment.begin.xml
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.xml
        - match: '-->'
          scope: punctuation.definition.comment.end.xml
          pop: true
        - match: '-{2,}'
          scope: invalid.illegal.double-hyphen-within-comment.xml

  cdata:
    - match: '<!\[CDATA\['
      scope: punctuation.definition.string.begin.xml
      push:
        - meta_scope: string.unquoted.cdata.xml
        - match: ']]>'
          scope: punctuation.definition.string.end.xml
          pop: true
    - match: ']]>'
      scope: invalid.illegal.missing-entity.xml

  # DOCTYPE declaration
  # see: https://www.quackit.com/xml/tutorial/dtd_doctype.cfm
  doctype:
    - match: (<!)(DOCTYPE)
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.doctype.xml
      push: doctype-root-name
      with_prototype:
        - include: comment

  doctype-root-name:
    - meta_scope: meta.tag.declaration.doctype.xml
    - match: '{{name}}'
      scope: variable.documentroot.xml
      set: doctype-content
    - include: doctype-end

  doctype-content:
    - meta_content_scope: meta.tag.declaration.doctype.xml
    - match: (?=\[)
      set: doctype-internal-subset
    - match: \b(PUBLIC|SYSTEM)\b
      scope: keyword.content.external.xml
    - include: double-quoted-string
    - include: single-quoted-string
    - include: doctype-end

  doctype-internal-subset:
    - match: \[
      scope: punctuation.section.brackets.begin.xml
      set:
        - meta_scope: meta.tag.declaration.doctype.internal-subset.xml meta.brackets.xml
        - match: \]
          scope: punctuation.section.brackets.end.xml
          set:
            - meta_content_scope: meta.tag.declaration.doctype.xml
            - include: doctype-end
        - include: scope:text.xml.dtd

  doctype-end:
    - match: '>'
      scope: meta.tag.declaration.doctype.xml punctuation.definition.tag.end.xml
      pop: true
    - match: '[^>\s]'
      scope: invalid.illegal.unexpected.xml

  tags:
    # closing tags
    # (?=<) improves overall performance by 8%
    - match: '(?=<)(</)(?:{{qualified_name}})?([^/>\s]*)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.namespace.xml
        3: entity.name.tag.xml punctuation.separator.namespace.xml
        4: entity.name.tag.localname.xml
        5: invalid.illegal.bad-tag-name.xml
      push:
        - meta_scope: meta.tag.xml
        - match: '>'
          scope: punctuation.definition.tag.end.xml
          pop: true
        - match: '[^>\s]+'
          scope: invalid.illegal.unexpected.xml
    # opening maybe self-closing tag
    - match: '(<(?=\w))(?:{{qualified_name}})?([^/>\s]*)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.namespace.xml
        3: entity.name.tag.xml punctuation.separator.namespace.xml
        4: entity.name.tag.localname.xml
        5: invalid.illegal.bad-tag-name.xml
      push:
        - meta_scope: meta.tag.xml
        - match: '/?>'
          scope: punctuation.definition.tag.end.xml
          pop: true
        - include: tag-attributes

  tag-attributes:
    - include: double-quoted-string
    - include: single-quoted-string
    # valid attribute name followed by '='
    - match: '\b{{qualified_name}}\s*(=)'
      captures:
        1: entity.other.attribute-name.namespace.xml
        2: entity.other.attribute-name.xml punctuation.separator.namespace.xml
        3: entity.other.attribute-name.localname.xml
        4: punctuation.separator.key-value.xml
    # everything before '=' not matched by previous pattern
    - match: '(\S+)\s*(=)'
      captures:
        1: invalid.illegal.bad-attribute-name.xml
        2: punctuation.separator.key-value.xml
    # everything unquoted is illegal
    - match: '[^\s=]'
      scope: invalid.illegal.bad-attribute-value.xml

  double-quoted-string:
    - match: '"'
      scope: punctuation.definition.string.begin.xml
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.xml
        - match: '"'
          scope: punctuation.definition.string.end.xml
          pop: true
        - include: entity
        - include: should-be-entity

  single-quoted-string:
    - match: "'"
      scope: punctuation.definition.string.begin.xml
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.xml
        - match: "'"
          scope: punctuation.definition.string.end.xml
          pop: true
        - include: entity
        - include: should-be-entity

  entity:
    - match: '(&)(?:{{name}}|#[0-9]+|#x\h+)(;)'
      scope: constant.character.entity.xml
      captures:
        1: punctuation.definition.constant.xml
        2: punctuation.definition.constant.xml

  should-be-entity:
    - match: '&'
      scope: invalid.illegal.bad-ampersand.xml
    - match: '<'
      scope: invalid.illegal.missing-entity.xml
