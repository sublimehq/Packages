%YAML 1.2
---
name: Lua
scope: source.lua
version: 2

file_extensions:
  - lua

first_line_match: |-
  (?xi:
    ^ \#! .* {{shebang_language}}                                            # shebang
  | {{leading_wspace}} -- .*? -\*- .*? {{shebang_language}} .*? -\*-         # editorconfig
  )

###[ CONTEXTS ]################################################################

contexts:
  prototype:
    - include: comments

  main:
    - meta_include_prototype: false
    - match: ''
      push: [statements, shebang]

###[ COMMENTS ]################################################################

  comments:
    - include: block-comments
    - include: line-comments
    - include: merge-conflict-markers

###[ COMMENTS / BLOCK COMMENTS ]###############################################

  block-comments:
    - match: --\[\[--
      scope: punctuation.definition.comment.begin.lua
      push: block-doc-comment-body
    - match: --\[(=*)\[
      scope: punctuation.definition.comment.begin.lua
      push: block-comment-body

  block-doc-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.documentation.lua
    - match: \]\]
      scope: punctuation.definition.comment.end.lua
      pop: 1
    - match: '{{leading_wspace}}(@section)\s+(.*?\S)\s*(?=\]\]|$)'
      captures:
        1: entity.name.tag.documentation.lua
        2: entity.name.section.lua
    - match: ^\s*(@param)(?:\[[\w=']*\])?\s+({{identifier}})
      captures:
        1: entity.name.tag.documentation.lua
        2: variable.parameter.lua
    - match: '{{leading_wspace}}({{doc_comment_tag}})'
      captures:
        1: entity.name.tag.documentation.lua
    - match: '{{leading_wspace}}({{doc_comment_custom_tag}})'
      captures:
        1: entity.name.tag.documentation.custom.lua

  block-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.lua
    - match: \]\1\]
      scope: punctuation.definition.comment.end.lua
      pop: 1

###[ COMMENTS / LINE COMMENTS ]################################################

  line-comments:
    - match: -{3,}
      scope: comment.line.documentation.lua punctuation.definition.comment.lua
      push: line-doc-comment-body
    - match: --
      scope: punctuation.definition.comment.lua
      push: line-comment-body

  line-doc-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.documentation.lua
    - match: \s*(@section)\s+(.*\S)\s*\n?
      captures:
        1: entity.name.tag.documentation.lua
        2: entity.name.section.lua
      set: maybe-line-doc-comment
    - match: \s*(@param)(?:\[[\w=']*\])?\s+({{identifier}}).*\n?
      captures:
        1: entity.name.tag.documentation.lua
        2: variable.parameter.lua
      set: maybe-line-doc-comment
    - match: \s*({{doc_comment_tag}}).*\n?
      captures:
        1: entity.name.tag.documentation.lua
      set: maybe-line-doc-comment
    - match: \s*({{doc_comment_custom_tag}}).*\n?
      captures:
        1: entity.name.tag.documentation.custom.lua
      set: maybe-line-doc-comment
    - match: .*\n?
      set: maybe-line-doc-comment

  maybe-line-doc-comment:
    - match: '{{leading_wspace}}(?=--(?!\[(=*)\[))'
      set:
        - match: -{2,}
          scope: punctuation.definition.comment.lua
          set: line-doc-comment-body
    - match: ^
      pop: 1

  line-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.lua
    - include: eol-pop

###[ COMMENTS / SHEBANG ]######################################################

  shebang:
    - meta_include_prototype: false
    - match: ^\s*(\#!)
      captures:
        1: punctuation.definition.comment.lua
      set: shebang-body
    - match: ^|(?=\S)
      pop: 1

  shebang-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.shebang.lua
    - match: '{{shebang_language}}'
      scope: constant.language.shebang.lua
    - include: eol-pop

###[ STATEMENTS ]##############################################################

  merge-conflict-markers:
    # see also: Diff.sublime-syntax#conflict-markers
    - match: ^(<{7})(?:\s+(\S.*?))?$\n?
      scope: meta.block.conflict.begin.diff
      captures:
        1: punctuation.section.block.begin.diff
        2: entity.name.section.diff
    - match: ^(>{7})(?:\s+(\S.*?))?$\n?
      scope: meta.block.conflict.end.diff
      captures:
        1: punctuation.section.block.end.diff
        2: entity.name.section.diff
    - match: ^(\|{7}|={7})(?:\s+(\S.*?))?$\n?
      scope: meta.block.conflict.separator.diff
      captures:
        1: punctuation.section.block.diff
        2: entity.name.section.diff

  statements:
    - match: ;
      scope: punctuation.terminator.statement.lua

    - match: function{{identifier_break}}
      scope: keyword.declaration.function.lua
      push:
        - function-meta
        - block-contents
        - function-parameter-list
        - function-name

    - include: control-statements

    - match: break{{identifier_break}}
      scope: keyword.control.break.lua

    - match: return{{identifier_break}}
      scope: keyword.control.return.lua
      push: expression-list

    - match: local{{identifier_break}}
      scope: storage.modifier.lua
      push: expression-list

    - match: end{{identifier_break}}
      scope: invalid.illegal.unexpected-end.lua

    - match: (?=\S)
      push: expression-list

  block-contents:
    - meta_scope: meta.block.lua
    - include: end
    - include: statements

  end:
    - match: end{{identifier_break}}
      scope: keyword.control.end.lua
      pop: 1

###[ FUNCTIONS ]###############################################################

  function-parameter-list:
    - match: \(
      scope: punctuation.section.group.begin.lua
      set:
        - meta_scope: meta.group.lua
        - match: \)
          scope: punctuation.section.group.end.lua
          pop: 1
        - match: ','
          scope: punctuation.separator.comma.lua
        - include: reserved-word-pop
        - match: '{{identifier}}'
          scope: variable.parameter.function.lua
        - match: \.\.\.
          scope: constant.language.lua
    - include: else-pop

  function-name:
    - match: (?=\S)
      set: [ function-name-end, function-name-begin ]

  function-name-end:
    - meta_scope: meta.name.function
    - match: '[.:]'
      scope: punctuation.accessor.lua
      push: function-name-property
    - include: else-pop

  function-name-begin:
    - match: '{{identifier}}(?=\s*[.:])'
      scope: variable.other.lua
      pop: 1
    - match: '{{identifier}}'
      scope: entity.name.function.lua
      pop: 1
    - include: else-pop

  function-name-property:
    - match: '{{identifier}}(?=\s*[.:])'
      scope: meta.property.lua
      pop: 1
    - match: '{{metamethod}}'
      scope: meta.property.lua entity.name.function.lua support.function.metamethod.lua
      pop: 1
    - match: '{{identifier}}'
      scope: meta.property.lua entity.name.function.lua
      pop: 1
    - include: else-pop

###[ CONTROL STATEMENTS ]#####################################################

  control-statements:
    - match: do{{identifier_break}}
      scope: keyword.control.lua
      push: block-contents

    - match: if{{identifier_break}}
      scope: keyword.control.conditional.lua
      push:
        - if-then
        - expression

    - match: while{{identifier_break}}
      scope: keyword.control.loop.lua
      push:
        - - match: do{{identifier_break}}
            scope: keyword.control.lua
            push: block-contents
          - include: else-pop
        - expression

    - match: repeat{{identifier_break}}
      scope: keyword.control.loop.lua
      push:
        - - match: until{{identifier_break}}
            scope: keyword.control.loop.lua
            set: expression
        - - meta_scope: meta.block.lua
          - match: (?=until{{identifier_break}})
            pop: 1
          - include: statements

    - match: for{{identifier_break}}
      scope: keyword.control.loop.lua
      push:
        - - match: do{{identifier_break}}
            scope: keyword.control.lua
            push: block-contents
          - include: else-pop

        - - match: (?==)
            set: expression-list-end

          - match: in{{identifier_break}}
            scope: keyword.control.loop.lua
            set: expression-list

          - include: else-pop

        - expression-list

    - match: '::'
      scope: punctuation.definition.label.begin.lua
      push:
        - match: '{{identifier}}'
          scope: entity.name.label.lua
          set:
            - match: '::'
              scope: punctuation.definition.label.end.lua
              pop: 1
            - include: else-pop
        - include: else-pop

    - match: goto{{identifier_break}}
      scope: keyword.control.goto.lua
      push:
        - match: '{{identifier}}'
          scope: variable.label.lua
          pop: 1
        - include: else-pop

  if-then:
    - match: then{{identifier_break}}
      scope: keyword.control.conditional.lua
      set: if-block
    - include: else-pop

  if-block:
    - meta_scope: meta.block.lua
    - include: end
    - match: elseif{{identifier_break}}
      scope: keyword.control.conditional.lua
      set:
        - if-then
        - expression
    - match: else{{identifier_break}}
      scope: keyword.control.conditional.lua
      set: if-block
    - include: statements

###[ EXPRESSIONS ]#############################################################

  expression:
    - match: ''
      set:
        - expression-end
        - expression-begin

  expression-list:
    - match: ''
      set:
        - expression-list-end
        - expression-begin

  expression-end:
    - match: (?=;)
      pop: 1

    - match: (?=::)
      pop: 1

    - match: (?={{function_args_begin}})
      push:
        - function-arguments-meta
        - function-arguments

    - include: infix-operator
    - include: accessor

    # Safety match for unexpected characters so we don't confuse the syntax by exiting contexts too early
    - match: '[^{{trailing_expression_char}}{{identifier_char}}\s]'
      scope: invalid.illegal.unexpected-character.lua

    - include: else-pop

  expression-list-end:
    - match: ','
      scope: punctuation.separator.comma.lua
      push: expression-begin
    - match: (?=<(?![<=]))
      branch_point: left-angle
      branch:
        - left-angle-is-variable-modifier
        - left-angle-is-less-than
    - include: expression-end

  expression-begin:
    - match: (?=;)
      pop: 1

    - include: prefix-operator
    - include: builtin
    - include: support
    - include: variable
    - include: number
    - include: string
    - include: parenthesized-expression
    - include: table-constructor
    - include: function-literal

    - include: else-pop

  left-angle-is-less-than:
    - match: '<'
      scope: keyword.operator.comparison.lua
      pop: 1

  left-angle-is-variable-modifier:
    - match: '<'
      scope: punctuation.definition.modifier.begin.lua
      set: variable-modifier-body

  variable-modifier-body:
    - meta_scope: meta.modifier.lua
    - match: '>'
      scope: punctuation.definition.modifier.end.lua
      pop: 1
    - match: (?:const|close){{identifier_break}}
      scope: storage.modifier.lua
    - match: (?=\S)
      fail: left-angle

  infix-operator:
    - match: (?:[=<>~]=)
      scope: keyword.operator.comparison.lua
      push: expression-begin
    - match: (?://|[-+*/%^])
      scope: keyword.operator.arithmetic.lua
      push: expression-begin
    - match: (?:>>|<<|[&|~])
      scope: keyword.operator.bitwise.lua
      push: expression-begin
    - match: (?:[<>])
      scope: keyword.operator.comparison.lua
      push: expression-begin
    - match: \.\.
      scope: keyword.operator.concatenation.lua
      push: expression-begin
    - match: =
      scope: keyword.operator.assignment.lua
      push: expression-begin
    - match: (?:and|or){{identifier_break}}
      scope: keyword.operator.logical.lua
      push: expression-begin

  accessor:
    - match: ':'
      scope: punctuation.accessor.lua
      push: property-method

    - match: '\.'
      scope: punctuation.accessor.lua
      push: property

    - match: \[
      scope: punctuation.section.brackets.begin.lua
      push:
        - meta_scope: meta.brackets.lua
        - match: \]
          scope: punctuation.section.brackets.end.lua
          pop: 1
        - include: reserved-word-expression-pop
        - match: (?=\S)
          push: expression

  property:
    - match: '{{metamethod}}{{function_assignment_ahead}}'
      scope: meta.property.lua entity.name.function.lua support.function.metamethod.lua
      pop: 1
    - match: '{{identifier}}{{function_assignment_ahead}}'
      scope: meta.property.lua entity.name.function.lua
      pop: 1
    - match: '{{identifier}}{{function_call_ahead}}'
      scope: meta.property.lua meta.function-call.lua variable.function.lua
      pop: 1
    - match: '{{metaproperty}}'
      scope: meta.property.lua support.other.metaproperty.lua
      pop: 1
    - match: '{{identifier}}'
      scope: meta.property.lua
      pop: 1
    - include: reserved-word-pop
    - include: else-pop

  property-method:
    - match: '(?:find|gmatch|gsub|match){{identifier_break}}'
      scope: meta.property.lua meta.function-call.lua variable.function.lua
      set:
        - match: (?={{function_args_begin}})
          set:
            - function-arguments-meta
            - function-arguments-pattern-at1
        - include: else-pop
    - include: property

  function-arguments-meta:
    - meta_scope: meta.function-call.arguments.lua
    - include: immediately-pop

  function-arguments:
    - include: string
    - include: table-constructor

    - match: \(
      scope: punctuation.section.group.begin.lua
      set:
        - meta_scope: meta.group.lua
        - match: \)
          scope: punctuation.section.group.end.lua
          pop: 1
        - include: reserved-word-expression-pop
        - match: (?=\S)
          push: expression-list

  prefix-operator:
    - match: '#'
      scope: keyword.operator.length.lua
    - match: \-
      scope: keyword.operator.arithmetic.lua
    - match: \~
      scope: keyword.operator.bitwise.lua
    - match: not{{identifier_break}}
      scope: keyword.operator.logical.lua

  reserved-word-pop:
    - match: '{{reserved_word}}'
      scope: invalid.unexpected-keyword.lua
      pop: 1

  reserved-word-expression-pop:
    - match: '{{reserved_word_statement}}'
      scope: invalid.unexpected-keyword.lua
      pop: 1

###[ CONSTANTS ]###############################################################

  builtin:
    - match: false{{identifier_break}}
      scope: constant.language.boolean.false.lua
      pop: 1
    - match: true{{identifier_break}}
      scope: constant.language.boolean.true.lua
      pop: 1
    - match: nil{{identifier_break}}
      scope: constant.language.null.lua
      pop: 1
    - match: \.\.\.
      scope: constant.language.lua
      pop: 1
    - match: self{{identifier_break}}
      scope: variable.language.this.lua
      pop: 1

  support:
    - match: |-
        (?x:_G|_VERSION|_ENV){{identifier_break}}
      scope: support.constant.builtin.lua
      pop: 1

    - match: |-
        (?x:
          assert|collectgarbage|dofile|error|getmetatable|ipairs|load|loadfile
          |next|pairs|pcall|print|rawequal|rawget|rawlen|rawset|select
          |setmetatable|tonumber|tostring|type|xpcall
          |require|getfenv|module|setfenv|unpack|warn
        ){{function_call_ahead}}
      scope: meta.function-call.lua support.function.builtin.lua
      pop: 1

    - include: builtin-modules

###[ VARIABLES ]###############################################################

  variable:
    - match: '{{identifier}}{{function_assignment_ahead}}'
      scope: entity.name.function.lua
      pop: 1

    - match: '{{identifier}}{{function_call_ahead}}'
      scope: meta.function-call.lua variable.function.lua
      pop: 1

    - match: '{{identifier}}'
      scope: variable.other.lua
      pop: 1

###[ LITERALS / NUMBERS ]######################################################

  number:
    - match: (0[Xx])(\h*(?:(\.)\h*{{hex_exponent}}?|{{hex_exponent}}))
      scope: meta.number.float.hexadecimal.lua
      captures:
        1: constant.numeric.base.lua
        2: constant.numeric.value.lua
        3: punctuation.separator.decimal.lua
      pop: 1

    - match: (0[Xx])(\h+)
      scope: meta.number.integer.hexadecimal.lua
      captures:
        1: constant.numeric.base.lua
        2: constant.numeric.value.lua
      pop: 1

    - match: \d+(?:(\.)\d*{{dec_exponent}}?|{{dec_exponent}})|(\.)\d+{{dec_exponent}}?
      scope: meta.number.float.decimal.lua constant.numeric.value.lua
      captures:
        1: punctuation.separator.decimal.lua
        2: punctuation.separator.decimal.lua
      pop: 1

    - match: \d+
      scope: meta.number.integer.decimal.lua constant.numeric.value.lua
      pop: 1

###[ LITERALS / STRINGS ]######################################################

  string:
    - include: single-quoted-string
    - include: double-quoted-string
    - include: multiline-string

  single-quoted-string:
    - match: \'
      scope: punctuation.definition.string.begin.lua
      set: single-quoted-string-body

  single-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.lua string.quoted.single.lua
    - include: string-content
    - match: \'
      scope: punctuation.definition.string.end.lua
      pop: 1

  double-quoted-string:
    - match: \"
      scope: punctuation.definition.string.begin.lua
      set: double-quoted-string-body

  double-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.lua string.quoted.double.lua
    - include: string-content
    - match: \"
      scope: punctuation.definition.string.end.lua
      pop: 1

  multiline-string:
    - match: \[(=*)\[
      scope: punctuation.definition.string.begin.lua
      set: multiline-string-body

  multiline-string-body:
    - meta_scope: meta.string.lua string.quoted.multiline.lua
    - meta_include_prototype: false
    - match: \]\1\]
      scope: punctuation.definition.string.end.lua
      pop: 1

  string-content:
    - match: \\[abfnrtv\\'"\[\]\n]
      scope: constant.character.escape.lua

    - match: \\x\h\h
      scope: constant.character.escape.hexadecimal.lua

    - match: \\\d{1,3}
      scope: constant.character.escape.decimal.lua

    - match: \\u\{\h+\}
      scope: constant.character.escape.unicode.lua

    - match: \\z
      push:
        - meta_scope: constant.character.escape.whitespace.lua
        - include: else-pop

    - match: \n
      scope: invalid.illegal.unclosed-string.lua
      pop: 1
    - match: \\.
      scope: invalid.illegal.invalid-escape.lua

  # pop the context once one escaped character has been matched
  string-escape-pop:
    - match: \\[abfnrtv\\'"\[\]\n]
      scope: constant.character.escape.lua
      pop: 1

    - match: \\x\h\h
      scope: constant.character.escape.hexadecimal.lua
      pop: 1

    - match: \\\d{1,3}
      scope: constant.character.escape.decimal.lua
      pop: 1

    # unicode can make multiple, but that is a bit hard to handle
    - match: \\u\{\h+\}
      scope: constant.character.escape.unicode.lua
      pop: 1

    # \z turns into nothing, so we don't pop
    - match: \\z
      push:
        - meta_scope: constant.character.escape.whitespace.lua
        - include: else-pop

    - match: \n
      scope: invalid.illegal.unclosed-string.lua
      pop: 2
    - match: \\.
      scope: invalid.illegal.invalid-escape.lua
      pop: 1

###[ PARENTHESIZED EXPRESSIONS ]###############################################

  parenthesized-expression:
    - match: \(
      scope: punctuation.section.group.begin.lua
      set:
        - meta_scope: meta.group.lua
        - match: \)
          scope: punctuation.section.group.end.lua
          pop: 1
        - include: reserved-word-expression-pop
        - match: (?="(?:{{string_char_escape}}|[^\\"])*"\s*\)\s*:\s*format{{identifier_break}})
          push: fmtstr-expression
        - match: (?='(?:{{string_char_escape}}|[^\\'])*'\s*\)\s*:\s*format{{identifier_break}})
          push: fmtstr-expression
        - match: (?="(?:{{string_char_escape}}|[^\\"])*"\s*\)\s*:\s*(?:pack|unpack|packsize){{identifier_break}})
          push: packstr-expression
        - match: (?='(?:{{string_char_escape}}|[^\\'])*'\s*\)\s*:\s*(?:pack|unpack|packsize){{identifier_break}})
          push: packstr-expression
        - match: (?=\S)
          push: expression

###[ MAPPINGS ]################################################################

  table-constructor:
    - match: \{
      scope: punctuation.section.block.begin.lua
      set:
        - meta_scope: meta.mapping.lua
        - match: \}
          scope: punctuation.section.block.end.lua
          pop: 1

        - match: '[,;]'
          scope: punctuation.separator.field.lua

        - include: table-constructor-body-brackets
        - include: table-constructor-body-mapping-key
        - include: table-constructor-body-mapping-value

  table-constructor-body-brackets:
    - match: \[(?!=*\[)
      scope: punctuation.section.brackets.begin.lua
      push:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.lua meta.brackets.lua
        - match: \]
          scope: punctuation.section.brackets.end.lua
          pop: 1
        - match: (?=\S)
          push: expression

  table-constructor-body-mapping-key:
    - match: (?={{identifier}}\s*=(?!=))
      push:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.lua
        - match: (?:({{metamethod}})|{{identifier}})(?=\s*=\s*function\b)
          scope: entity.name.function.lua
          captures:
            1: support.function.metamethod.lua
          pop: 1
        - match: '{{metamethod}}'
          scope: entity.name.function.lua support.function.metamethod.lua
          pop: 1
        - match: '{{metaproperty}}'
          scope: string.unquoted.key.lua support.other.metaproperty.lua
          pop: 1
        - match: '{{identifier}}'
          scope: string.unquoted.key.lua
          pop: 1

  table-constructor-body-mapping-value:
    - match: =(?!=)
      scope: meta.mapping.lua punctuation.separator.key-value.lua
      push:
        - - clear_scopes: 1
          - meta_content_scope: meta.mapping.value.lua
          - include: immediately-pop
        - expression
    - match: (?=\S)
      push: expression

###[ FUNCTION DECLARATIONS ]###################################################

  function-literal:
    - match: function{{identifier_break}}
      scope: keyword.declaration.function.lua
      set:
        - function-meta
        - block-contents
        - function-parameter-list
        - function-name

  function-meta:
    - meta_scope: meta.function.lua
    - include: immediately-pop

  function-arguments-pattern-at2:
    - include: string
    - include: table-constructor

    - match: \(
      scope: punctuation.section.group.begin.lua
      set: function-arguments-pattern-at2-body

  function-arguments-pattern-at2-body:
    - meta_scope: meta.group.lua
    - match: \)
      scope: punctuation.section.group.end.lua
      pop: 1
    - include: reserved-word-expression-pop
    - match: (?=\S)
      push:
        - expression-list-end-pattern-next
        - expression-begin

  function-arguments-pattern-at1:
    - include: pattern-string
    - include: table-constructor

    - match: \(
      scope: punctuation.section.group.begin.lua
      set: function-arguments-pattern-at1-body

  function-arguments-pattern-at1-body:
    - meta_scope: meta.group.lua
    - match: \)
      scope: punctuation.section.group.end.lua
      pop: 1
    - include: reserved-word-expression-pop
    - match: (?=\S)
      push:
        - expression-list-end
        - pattern-expression

  function-arguments-fmtstr-at1:
    - include: fmtstr-string
    - include: table-constructor

    - match: \(
      scope: punctuation.section.group.begin.lua
      set: function-arguments-fmtstr-at1-body

  function-arguments-fmtstr-at1-body:
    - meta_scope: meta.group.lua
    - match: \)
      scope: punctuation.section.group.end.lua
      pop: 1
    - include: reserved-word-expression-pop
    - match: (?=\S)
      push:
        - expression-list-end
        - fmtstr-expression

  function-arguments-packstr-at1:
    - include: packstr-string
    - include: table-constructor

    - match: \(
      scope: punctuation.section.group.begin.lua
      set: function-arguments-packstr-at1-body

  function-arguments-packstr-at1-body:
    - meta_scope: meta.group.lua
    - match: \)
      scope: punctuation.section.group.end.lua
      pop: 1
    - include: reserved-word-expression-pop
    - match: (?=\S)
      push:
        - expression-list-end
        - packstr-expression

###[ PATTERNS ]################################################################

  pattern-expression:
    - include: pattern-string
    - include: expression-begin

  expression-list-end-pattern-next:
    - match: ','
      scope: punctuation.separator.comma.lua
      set:
        - expression-list-end
        - pattern-expression
    - include: expression-end

  pattern-shared-charclass:
    - meta_include_prototype: false
    - match: \%(?i:[acdglpsuwxz])
      scope: keyword.control.character-class.lua
    - match: \%f
      scope: keyword.control.anchor.lua

    - match: (\%)(\d)
      captures:
        1: keyword.other.backref-and-recursion.lua
        2: variable.other.backref-and-recursion.lua
      push: pattern-shared-norepetition

    # other alphabetic characters are not defined
    # this skips `f` and `b` as they are special patterns
    - match: \%(?i:[ehijkmnoqrtvy])
      scope: invalid.illegal.invalid-escape.lua

  pattern-shared:
    - meta_include_prototype: false
      # start anchor is handled separately as ^ doesn't match the start of the string
      # It needs to be the end of the string (which $ matches when it is an embedded pattern)
    - match: \$$(?!\n)
      scope: keyword.control.anchor.lua
    - match: '\(\)'
      scope: punctuation.section.brackets.lua
    - match: '[+*?\-]'
      scope: keyword.operator.quantifier.lua
      push: pattern-shared-norepetition
    - match: \.
      scope: keyword.other.any.lua


  pattern-shared-norepetition:
    - meta_include_prototype: false
    - match: '[+*?\-]'
      pop: 1
    - include: immediately-pop

###[ PATTERNS / QUOTED PATTERNS ]##############################################

  # the pattern implementation is split into quoted and unquoted as escapes are only processed
  # in quoted strings.
  pattern-quoted:
    - meta_include_prototype: false
    - include: string-content
    - include: pattern-shared
    - match: '\('
      scope: punctuation.section.group.begin.lua
      push:
        - pattern-shared-norepetition
        - pattern-quoted-nested
        - pattern-shared-norepetition
    - match: '(\[)(\^)?\]?'
      captures:
        1: punctuation.definition.set.begin.lua
        2: keyword.operator.logical.lua
      push: pattern-quoted-set-body
    - include: pattern-quoted-charclass

  pattern-quoted-charclass:
    - meta_include_prototype: false
    - include: pattern-shared-charclass
    - match: \%b
      scope: keyword.control.balanced.lua
      push:
        - pattern-quoted-balanced-char
        - pattern-quoted-balanced-char
    - match: \%[^'"\\]
      scope: constant.character.escape.lua

    # this one is split so that it works with quoted strings
    - match: \%
      scope: constant.character.escape.lua
      push:
        - meta_include_prototype: false
        - match: '[''"]'
          scope: constant.character.escape.lua
          pop: 1
        - include: else-pop

  pattern-quoted-balanced-char:
    - meta_include_prototype: false
    - include: string-escape-pop
    - match: .
      scope: keyword.control.balanced.lua
      pop: 1

  pattern-quoted-nested:
    - meta_include_prototype: false
    - meta_scope: meta.group.lua meta.mode.basic.lua
    - match: '\)'
      scope: punctuation.section.group.end.lua
      pop: 1
    - include: pattern-quoted

  pattern-quoted-set-body:
    - meta_include_prototype: false
    - meta_scope: meta.set.lua
    - match: '\]'
      scope: punctuation.definition.set.end.lua
      pop: 1
    - include: pattern-quoted-set-ranges
    - include: pattern-quoted-charclass
    - include: string-content

  pattern-quoted-set-ranges:
    - meta_include_prototype: false
    # These only work with direct characters. Lua doesn't support percent escapes in sets
    - match: (?=({{string_char_escape}}|[^%\]\-])-({{string_char_escape}}|[^\]]))
      push:
        - pattern-quoted-set-range-end
        - pattern-quoted-set-range-begin

  pattern-quoted-set-range-begin:
    - meta_include_prototype: false
    - match: '-'
      scope: punctuation.separator.sequence.lua
      pop: 1
    - include: string-content

  pattern-quoted-set-range-end:
    - meta_include_prototype: false
    - meta_scope: constant.other.range.lua
    - include: string-escape-pop
    - match: .
      pop: 1

###[ PATTERNS / UNQUOTED PATTERNS ]############################################

  pattern-unquoted:
    - meta_include_prototype: false
    - include: pattern-shared
    - match: '\('
      scope: punctuation.section.group.begin.lua
      push:
        - pattern-shared-norepetition
        - pattern-unquoted-nested
        - pattern-shared-norepetition
    - match: '(\[)(\^)?\]?'
      captures:
        1: punctuation.definition.set.begin.lua
        2: keyword.operator.logical.lua
      push: pattern-unquoted-set-body
    - include: pattern-unquoted-charclass

  pattern-unquoted-charclass:
    - meta_include_prototype: false
    - include: pattern-shared-charclass
    - match: \%b.?.?
      scope: keyword.control.balanced.lua
    - match: \%.?
      scope: constant.character.escape.lua

  pattern-unquoted-nested:
    - meta_include_prototype: false
    - meta_scope: meta.group.lua meta.mode.basic.lua
    - match: '\)'
      scope: punctuation.section.group.end.lua
      pop: 1
    - include: pattern-unquoted

  pattern-unquoted-set-body:
    - meta_include_prototype: false
    - meta_scope: meta.set.lua
    - match: '\]'
      scope: punctuation.definition.set.end.lua
      pop: 1
    - include: pattern-unquoted-set-ranges
    - include: pattern-unquoted-charclass

  pattern-unquoted-set-ranges:
    - meta_include_prototype: false
    # These only work with direct characters. Lua doesn't support percent escapes in sets
    - match: (?=[^%\]\-]-[^\]])
      push:
        - pattern-unquoted-set-range-end
        - pattern-unquoted-set-range-begin

  pattern-unquoted-set-range-begin:
    - meta_include_prototype: false
    - match: '-'
      scope: punctuation.separator.sequence.lua
      pop: 1

  pattern-unquoted-set-range-end:
    - meta_include_prototype: false
    - meta_scope: constant.other.range.lua
    - match: .
      pop: 1

###[ PATTERNS / STRING PATTERNS ]##############################################

  # this gets included in expressions that want to have a pattern string
  pattern-string:
    - match: \[(=*)\[
      scope: punctuation.definition.string.begin.lua
      set:
        - pattern-multiline-string-body
        - pattern-test-first-caret-multiline
    - match: \'
      scope: punctuation.definition.string.begin.lua
      set:
        - pattern-single-quoted-string-body
        - pattern-test-first-caret
    - match: \"
      scope: punctuation.definition.string.begin.lua
      set:
        - pattern-double-quoted-string-body
        - pattern-test-first-caret

  pattern-test-first-caret:
    - meta_include_prototype: false
    - match: (\^)[+*?\-]?
      captures:
        1: keyword.control.anchor.lua
      pop: 1

    # eat these because they can't be a repetition at the start
    - match: '[+*?\-]'
      pop: 1
    # it seems to require this match rather than immediately-pop
    # in order to work with the multiline below
    - match: (?=[^\^])
      pop: 1

  pattern-test-first-caret-multiline:
    - meta_include_prototype: false
    - match: $\n?
      set: pattern-test-first-caret
    - include: pattern-test-first-caret

  pattern-single-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.lua string.quoted.single.lua
    - include: single-quoted-string-body
    - match: \$(?=\')
      scope: keyword.control.anchor.lua
    - match: ''
      push: pattern-quoted
      with_prototype:
        - match: (?=\$?\')
          pop: 1

  pattern-double-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.lua string.quoted.double.lua
    - include: double-quoted-string-body
    - match: \$(?=\")
      scope: keyword.control.anchor.lua
    - match: ''
      push: pattern-quoted
      with_prototype:
        - match: (?=\$?\")
          pop: 1

  pattern-multiline-string-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.lua string.quoted.multiline.lua
    - include: multiline-string-body
    - match: ''
      embed: pattern-unquoted
      # we don't seem to be able to use the capture to get the right one
      # this means that patterns that contain something that matches this
      # will lose their context half way through.
      escape: (?=\]=*\])

###[ PATTERNS / STRING PATTERNS / FMT STRING ]#################################

  fmtstr-expression:
    - include: fmtstr-string
    - include: expression-begin

  fmtstr-string:
    - match: \[(=*)\[
      scope: punctuation.definition.string.begin.lua
      set: multiline-string-body
      with_prototype:
        - include: fmtstr-embed

    - match: \'
      scope: punctuation.definition.string.begin.lua
      set: single-quoted-string-body
      with_prototype:
        - include: fmtstr-embed

    - match: \"
      scope: punctuation.definition.string.begin.lua
      set: double-quoted-string-body
      with_prototype:
        - include: fmtstr-embed

  fmtstr-embed:
    - meta_include_prototype: false
    - match: '%%'
      scope: constant.character.escape.lua

    - match: '%'
      scope: constant.other.placeholder.lua
      push: fmtstr-pattern

  fmtstr-pattern:
    - meta_include_prototype: false
    # these characters never appear in a format pattern so it can be simpler
    - match: (?=[\\\"\'\]])
      pop: 1
    - match: '[-+#0-9. ]'
      scope: constant.other.placeholder.lua
    - match: '[cdiuoxXaAfeEgGpqs]'
      scope: constant.other.placeholder.lua
      pop: 1
    - match: '.'
      scope: invalid.illegal.invalid-format.lua
      pop: 1

###[ PATTERNS / STRING PATTERNS / PACK STR ]###################################

  packstr-expression:
    - include: packstr-string
    - include: expression-begin

  packstr-string:
    - match: \[(=*)\[
      scope: punctuation.definition.string.begin.lua
      set: multiline-string-body
      with_prototype:
        - include: packstr-pattern

    - match: \'
      scope: punctuation.definition.string.begin.lua
      set: single-quoted-string-body
      with_prototype:
        - include: packstr-pattern

    - match: \"
      scope: punctuation.definition.string.begin.lua
      set: double-quoted-string-body
      with_prototype:
        - include: packstr-pattern

  packstr-pattern:
    - meta_include_prototype: false
    - match: '[=<>]|![0-9]*'
      scope: storage.modifier.lua

    - match: '[bBhHlLjJTfdnz]|[Iis][0-9]*|c[0-9]+'
      scope: storage.type.lua

    - match: '[xX]'
      scope: punctuation.separator.padding.lua

    - match: (?:[^\\\"\'\]\s])
      scope: invalid.illegal.invalid-storage.lua

###[ MODULES ]#################################################################

  builtin-modules:
    - match: coroutine{{identifier_break}}
      scope: support.constant.builtin.lua
      set: builtin-module-coroutine-body

    - match: package{{identifier_break}}
      scope: support.constant.builtin.lua
      set: builtin-module-package-body

    - match: string{{identifier_break}}
      scope: support.constant.builtin.lua
      set: builtin-module-string-body

    - match: utf8{{identifier_break}}
      scope: support.constant.builtin.lua
      set: builtin-module-utf8-body

    - match: table{{identifier_break}}
      scope: support.constant.builtin.lua
      set: builtin-module-table-body

    - match: math{{identifier_break}}
      scope: support.constant.builtin.lua
      set: builtin-module-math-body

    - match: io{{identifier_break}}
      scope: support.constant.builtin.lua
      set: builtin-module-io-body

    - match: os{{identifier_break}}
      scope: support.constant.builtin.lua
      set: builtin-module-os-body

    - match: debug{{identifier_break}}
      scope: support.constant.builtin.lua
      set: builtin-module-debug-body

    - match: bit32{{identifier_break}}
      scope: support.constant.builtin.lua
      set: builtin-module-bit32-body

  builtin-module-coroutine-body:
    - match: \.
      scope: punctuation.accessor.lua
      set:
        - match: |-
            (?x:
              create|isyieldable|resume|running|status|wrap|yield|close
            ){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          pop: 1
        - include: property
    - include: else-pop

  builtin-module-package-body:
    - match: \.
      scope: punctuation.accessor.lua
      set:
        - match: |-
            (?x:
              config|cpath|loaded|path|preload|searchers|loaders
            ){{identifier_break}}
          scope: meta.property.lua support.constant.builtin.lua
          pop: 1
        - match: |-
            (?x:
              loadlib|searchpath|seeall
            ){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          pop: 1
        - include: property
    - include: else-pop

  builtin-module-string-body:
    - match: \.
      scope: punctuation.accessor.lua
      set:
        - match: (?:find|gmatch|gsub|match){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          set:
            - match: (?={{function_args_begin}})
              set:
                - function-arguments-meta
                - function-arguments-pattern-at2
            - include: else-pop
        - match: (?:format){{identifier_break}}
          scope: meta.property.lua support.function.builtin.stringy.lua
          set:
            - match: (?={{function_args_begin}})
              set:
                - function-arguments-meta
                - function-arguments-fmtstr-at1
            - include: else-pop
        - match: (?:pack|unpack|packsize){{identifier_break}}
          scope: meta.property.lua support.function.builtin.stringy.lua
          set:
            - match: (?={{function_args_begin}})
              set:
                - function-arguments-meta
                - function-arguments-packstr-at1
            - include: else-pop
        - match: |-
            (?x:
              byte|char|dump|len|lower
              |rep|reverse|sub|upper
            ){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          pop: 1
        - include: property
    - include: else-pop

  builtin-module-utf8-body:
    - match: \.
      scope: punctuation.accessor.lua
      set:
        - match: |-
            (?x:
              charpattern
            ){{identifier_break}}
          scope: meta.property.lua support.constant.builtin.lua
          pop: 1
        - match: |-
            (?x:
              char|codes|codepoint|len|offset
            ){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          pop: 1
        - include: property
    - include: else-pop

  builtin-module-table-body:
    - match: \.
      scope: punctuation.accessor.lua
      set:
        - match: |-
            (?x:
              concat|insert|move|pack|remove|sort|unpack|maxn
            ){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          pop: 1
        - include: property
    - include: else-pop

  builtin-module-math-body:
    - match: \.
      scope: punctuation.accessor.lua
      set:
        - match: |-
            (?x:
              huge|maxinteger|mininteger|pi
            ){{identifier_break}}
          scope: meta.property.lua support.constant.builtin.lua
          pop: 1
        - match: |-
            (?x:
              abs|acos|asin|atan|ceil|cos|deg|exp|floor|fmod|log|max|min
              |modf|rad|random|randomseed|sin|sqrt|tan|tointeger|type|ult
              |atan2|cosh|frexp|ldexp|log10|pow|sinh|tanh
            ){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          pop: 1
        - include: property
    - include: else-pop

  builtin-module-io-body:
    - match: \.
      scope: punctuation.accessor.lua
      set:
        - match: |-
            (?x:
              stderr|stdin|stdout
            ){{identifier_break}}
          scope: meta.property.lua support.constant.builtin.lua
          pop: 1
        - match: |-
            (?x:
              close|flush|input|lines|open|output|popen|read|tmpfile|type|write
            ){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          pop: 1
        - include: property
    - include: else-pop

  builtin-module-os-body:
    - match: \.
      scope: punctuation.accessor.lua
      set:
        - match: |-
            (?x:
              clock|date|difftime|execute|exit|getenv|remove|rename
              |setlocale|time|tmpname
            ){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          pop: 1
        - include: property
    - include: else-pop

  builtin-module-debug-body:
    - match: \.
      scope: punctuation.accessor.lua
      set:
        - match: |-
            (?x:
              debug|gethook|getinfo|getlocal|getmetatable|getregistry
              |getupvalue|getuservalue|sethook|setlocal|setmetatable
              |setupvalue|setuservalue|traceback|upvalueid|upvaluejoin
              |getfenv|setfenv
            ){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          pop: 1
        - include: property
    - include: else-pop

  builtin-module-bit32-body:
    - match: \.
      scope: punctuation.accessor.lua
      set:
        - match: |-
            (?x:
              arshift|band|bnot|bor|btest|bxor|extract|lrotate|lshift
              |replace|rrotate|rshift
            ){{identifier_break}}
          scope: meta.property.lua support.function.builtin.lua
          pop: 1
        - include: property
    - include: else-pop

###[ PROTOTYPES ]##############################################################

  eol-pop:
    - match: '$\n?'
      pop: 1

  else-pop:
    - match: (?=\S)
      pop: 1

  immediately-pop:
    - match: ''
      pop: 1

###[ VARIABLES ]###############################################################

variables:
  shebang_language: (?:\blua\b)
  leading_wspace: (?:^\s*)
  reserved_word: |-
    (?x:(?:
      and|break|do|elseif|else|end|false|for|function|goto|if|in|
      local|nil|not|or|repeat|return|then|true|until|while
    ){{identifier_break}})
  reserved_word_statement: |- # excludes 'not', 'true', 'nil', 'false', 'function'
    (?x:(?:
      and|break|do|elseif|else|end|for|goto|if|in|
      local|or|repeat|return|then|until|while
    ){{identifier_break}})
  metamethod: |- # http://lua-users.org/wiki/MetatableEvents
    (?x:__(?:
      # special
      index|newindex|call|tostring|len|i?pairs|gc|close
      # math operators
      |unm|add|sub|mul|i?div|mod|pow|concat
      # bitwise operators
      |band|bor|bxor|bnot|shl|shr
      # comparison
      |eq|lt|le
    ){{identifier_break}})
  # __metatable and __mode don't use functions
  metaproperty: (?:__(?:metatable|mode|name){{identifier_break}})

  identifier_start: '[A-Za-z_]'
  identifier_char: '[A-Za-z0-9_]'
  identifier_break: (?!{{identifier_char}})
  identifier_raw: (?:{{identifier_start}}{{identifier_char}}*)
  identifier: (?:(?!{{reserved_word}}){{identifier_raw}})

  trailing_expression_char: '[,\]})]'

  function_args_begin: (?:\(|"|'|\[=*\[|\{)
  function_call_ahead: (?=\s*{{function_args_begin}})
  function_assignment_ahead: (?=\s*=\s*function{{identifier_break}})

  dec_exponent: (?:[Ee][-+]?\d*)
  hex_exponent: (?:[Pp][-+]?\d*)

  doc_comment_tag: |-
    (?x:@(?:
      alias|async|author|class|classmod|copyright|deprecated|diagnostic|field
      |fixme|function|generic|language|lfunction|license|local|module|nodiscard
      |overload|param|raise|release|return|script|section|see|submodule|table
      |todo|tparam|treturn|type|usage|vararg|version|warning|within
    )\b)
  doc_comment_custom_tag: (?:@\w+\b)

  string_char_escape: \\(?:[abfnrtv\\'"\[\]\n]|x\h\h|\d{1,3}|u\{\h+\})
