%YAML 1.2
---
name: Lua
file_extensions:
  - lua
scope: source.lua
variables:
  reserved_word: |-
    (?x:(?:
      and|break|do|elseif|else|end|false|for|function|goto|if|in|
      local|nil|not|or|repeat|return|then|true|until|while
    ){{identifier_break}})

  identifier_start: (?:[A-Za-z_])
  identifier_char: (?:[A-Za-z0-9_])
  identifier_break: (?!{{identifier_char}})
  identifier_raw: (?:{{identifier_start}}{{identifier_char}}*)
  identifier: (?:(?!{{reserved_word}}){{identifier_raw}})

  function_args_begin: (?:\(|"|'|\[=*\[)
  function_call_ahead: (?=\s*{{function_args_begin}})

contexts:
  main:
    - include: statements

  else-pop:
    - match: (?=\S)
      pop: true

  immediately-pop:
    - match: ''
      pop: true

  prototype:
    - match: --\[(=*)\[
      scope: punctuation.definition.comment.begin.lua
      push:
        - meta_scope: comment.block.lua
        - match: \]\1\]
          scope: punctuation.definition.comment.end.lua
          pop: true
    - match: (--).*
      scope: comment.line.lua
      captures:
        1: punctuation.definition.comment.lua

  end:
    - match: end{{identifier_break}}
      scope: keyword.control.end.lua
      pop: true

  block-contents:
    - meta_scope: meta.block.lua
    - include: end
    - include: statements

  statements:
    - match: ;
      scope: punctuation.terminator.statement.lua

    - match: function{{identifier_break}}
      scope: storage.type.function.lua
      push:
        - function-meta
        - block-contents
        - function-parameter-list
        - function-name-end
        - function-name-begin

    - include: control-statements

    - match: break{{identifier_break}}
      scope: keyword.control.break.lua

    - match: return{{identifier_break}}
      scope: keyword.control.return.lua
      push: expression-list

    - match: local{{identifier_break}}
      scope: storage.type.lua
      push: expression-list

    - match: (?=\S)
      push: expression

  function-parameter-list:
    - match: \(
      scope: punctuation.section.group.begin.lua
      set:
        - meta_scope: meta.group.lua
        - match: \)
          scope: punctuation.section.group.end.lua
          pop: true
        - match: ','
          scope: punctuation.separator.comma.lua
        - match: '{{identifier}}'
          scope: variable.parameter.function.lua
        - match: \.\.\.
          scope: constant.language.lua
    - include: else-pop

  function-name-end:
    - match: '[.:]'
      scope: punctuation.accessor.lua
      push: function-name-begin
    - include: else-pop

  function-name-begin:
    - match: '{{identifier}}(?=\s*[.:])'
      scope: variable.other.lua
      pop: true
    - match: '{{identifier}}'
      scope: entity.name.function.lua
      pop: true
    - include: else-pop

  control-statements:
    - match: do{{identifier_break}}
      scope: keyword.control.lua
      push: block-contents

    - match: if{{identifier_break}}
      scope: keyword.control.conditional.lua
      push:
        - - include: end
          - match: elseif{{identifier_break}}
            scope: keyword.control.conditional.lua
            push:
              - if-then
              - expression
          - match: else{{identifier_break}}
            scope: keyword.control.conditional.lua
            push: if-block

        - if-then
        - expression

    - match: while{{identifier_break}}
      scope: keyword.control.loop.lua
      push:
        - - match: do{{identifier_break}}
            scope: keyword.control.lua
            push: block-contents
          - include: else-pop
        - expression

    - match: repeat{{identifier_break}}
      scope: keyword.control.loop.lua
      push:
        - - match: until{{identifier_break}}
            scope: keyword.control.loop.lua
            set: expression
        - - meta_scope: meta.block.lua
          - match: (?=until{{identifier_break}})
            pop: true
          - include: statements

    - match: for{{identifier_break}}
      scope: keyword.control.loop.lua
      push:
        - - match: do{{identifier_break}}
            scope: keyword.control.lua
            push: block-contents
          - include: else-pop

        - - match: (?==)
            set: expression-list-end

          - match: in{{identifier_break}}
            scope: keyword.control.loop.lua
            set: expression-list

          - include: else-pop

        - expression-list

    - match: '::'
      scope: punctuation.definition.label.begin.lua
      push:
        - match: '{{identifier}}'
          scope: entity.name.label.lua
          set:
            - match: '::'
              scope: punctuation.definition.label.end.lua
              pop: true
            - include: else-pop
        - include: else-pop

    - match: goto{{identifier_break}}
      scope: keyword.control.goto.lua
      push:
        - match: '{{identifier}}'
          scope: variable.label.lua
          pop: true
        - include: else-pop

  if-then:
    - match: then{{identifier_break}}
      scope: keyword.control.conditional.lua
      set: if-block
    - include: else-pop

  if-block:
    - meta_scope: meta.block.lua
    - match: (?=(?:end|elseif|else){{identifier_break}})
      pop: true
    - include: statements

  expression:
    - match: ''
      set:
        - expression-end
        - expression-begin

  expression-list:
    - match: ''
      set:
        - expression-list-end
        - expression-begin

  expression-end:
    - match: (?=;)
      pop: true

    - match: (?={{function_args_begin}})
      push:
        - function-arguments-meta
        - function-arguments

    - include: infix-operator
    - include: accessor

    - include: else-pop

  expression-list-end:
    - match: ','
      scope: punctuation.separator.comma.lua
      push: expression-begin
    - include: expression-end

  expression-begin:
    - match: (?=;)
      pop: true

    - include: prefix-operator
    - include: builtin
    - include: variable
    - include: number
    - include: string
    - include: parenthesized-expression
    - include: table-constructor
    - include: function-literal

    - include: else-pop

  infix-operator:
    - match: (?:[=<>~]=)
      scope: keyword.operator.comparison.lua
      push: expression-begin
    - match: (?://|[-+*/%^])
      scope: keyword.operator.arithmetic.lua
      push: expression-begin
    - match: (?:>>|<<|[&|~])
      scope: keyword.operator.bitwise.lua
      push: expression-begin
    - match: (?:[<>])
      scope: keyword.operator.comparison.lua
      push: expression-begin
    - match: \.\.
      scope: keyword.operator.concatenation.lua
      push: expression-begin
    - match: =
      scope: keyword.operator.assignment.lua
      push: expression-begin
    - match: (?:and|or){{identifier_break}}
      scope: keyword.operator.logical.lua
      push: expression-begin

  accessor:
    - match: '[.:]'
      scope: punctuation.accessor.lua
      push:
        - match: '{{identifier}}{{function_call_ahead}}'
          scope: meta.property.lua variable.function.lua
          pop: true
        - match: '{{identifier}}'
          scope: meta.property.lua
          pop: true
        - include: else-pop

    - match: \[
      scope: punctuation.section.brackets.begin.lua
      push:
        - meta_scope: meta.brackets.lua
        - match: \]
          scope: punctuation.section.brackets.end.lua
          pop: true
        - match: (?=\S)
          push: expression

  function-arguments-meta:
    - meta_scope: meta.function-call.arguments.lua
    - include: immediately-pop

  function-arguments:
    - include: string

    - match: \(
      scope: punctuation.section.group.begin.lua
      set:
        - meta_scope: meta.group.lua
        - match: \)
          scope: punctuation.section.group.end.lua
          pop: true
        - match: (?=\S)
          push: expression-list

  prefix-operator:
    - match: '#'
      scope: keyword.operator.length.lua
    - match: \-
      scope: keyword.operator.arithmetic.lua
    - match: \~
      scope: keyword.operator.bitwise.lua
    - match: not{{identifier_break}}
      scope: keyword.operator.logical.lua

  builtin:
    - match: true{{identifier_break}}
      scope: constant.language.boolean.true.lua
      pop: true
    - match: false{{identifier_break}}
      scope: constant.language.boolean.true.lua
      pop: true
    - match: nil{{identifier_break}}
      scope: constant.language.null.lua
      pop: true
    - match: \.\.\.
      scope: constant.language.lua
      pop: true

  variable:
    - match: '{{identifier}}{{function_call_ahead}}'
      scope: variable.function.lua
      pop: true

    - match: '{{identifier}}'
      scope: variable.other.lua
      pop: true

  number:
    - match: 0[Xx]\h*(?:\.\h*)?([Pp][-+]?\d*)?
      scope: constant.numeric.hexadecimal.lua
      pop: true

    - match: \d+(?:\.\d*)?([Ee][-+]?\d*)?
      scope: constant.numeric.decimal.lua
      pop: true

  string:
    - match: \'
      scope: punctuation.definition.string.begin.lua
      set:
        - meta_scope: string.quoted.single.lua
        - include: string-content
        - match: \'
          scope: punctuation.definition.string.end.lua
          pop: true

    - match: \"
      scope: punctuation.definition.string.begin.lua
      set:
        - meta_scope: string.quoted.double.lua
        - include: string-content
        - match: \"
          scope: punctuation.definition.string.end.lua
          pop: true

    - match: \[(=*)\[
      scope: punctuation.definition.string.begin.lua
      set:
        - meta_scope: string.quoted.multiline.lua
        - match: \]\1\]
          scope: punctuation.definition.string.end.lua
          pop: true

  string-content:
    - match: \\[abfnrtv\\'"\n]
      scope: constant.character.escape.lua

    - match: \\x\h\h
      scope: constant.character.escape.hexadecimal.lua

    - match: \\d\d{1,3}
      scope: constant.character.escape.decimal.lua

    - match: \\u\{\h+\}
      scope: constant.character.escape.unicode.lua

    - match: \\z
      push:
        - meta_scope: constant.character.escape.whitespace.lua
        - include: else-pop

    - match: \n
      scope: invalid.illegal.newline.lua
    - match: \\.
      scope: invalid.illegal.invalid-escape.lua

  parenthesized-expression:
    - match: \(
      scope: punctuation.section.group.begin.lua
      set:
        - meta_scope: meta.group.lua
        - match: \)
          scope: punctuation.section.group.end.lua
          pop: true
        - match: (?=\S)
          push: expression

  table-constructor:
    - match: \{
      scope: punctuation.section.block.begin.lua
      set:
        - meta_scope: meta.mapping.lua
        - match: \}
          scope: punctuation.section.block.end.lua
          pop: true

        - match: '[,;]'
          scope: punctuation.separator.field.lua

        - match: \[
          scope: punctuation.section.brackets.begin.lua
          push:
            - meta_scope: meta.brackets.lua
            - match: \]
              scope: punctuation.section.brackets.end.lua
              pop: true
            - match: (?=\S)
              push: expression

        - match: '{{identifier}}(?=\s*=)'
          scope: meta.key.lua

        - match: =
          scope: punctuation.separator.key-value.lua
          push: expression

        - match: (?=\S)
          push: expression

  function-literal:
    - match: function{{identifier_break}}
      scope: storage.type.function
      push:
        - function-meta
        - block-contents
        - function-parameter-list

  function-meta:
    - meta_scope: meta.function.lua
    - include: immediately-pop
