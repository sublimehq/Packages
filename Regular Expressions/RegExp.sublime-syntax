%YAML 1.2
---
# Matches PCRE's regexp syntax, used in various languages and in Sublime Text for the Find panels
name: Regular Expression
scope: source.regexp
version: 2

extends: RegExp (Basic).sublime-syntax

file_extensions:
  - re

contexts:
  backtracking-control-verb:
    - match: \(\*(PRUNE|SKIP|THEN|COMMIT|FAIL|F|ACCEPT)\)
      scope: keyword.control.verb.regexp

  groups:
    - meta_prepend: true
    - include: backtracking-control-verb

  groups-extended:
    - meta_prepend: true
    - include: backtracking-control-verb

  group-start:
    - meta_prepend: true
    - match: (\?([+-]?\d+))(\))
      captures:
        1: keyword.other.backref-and-recursion.regexp
        2: variable.other.backref-and-recursion.regexp
        3: punctuation.section.group.end.regexp
      pop: 3
    - match: (\?&([\w-]+))(\))
      captures:
        1: keyword.other.backref-and-recursion.regexp
        2: variable.other.backref-and-recursion.regexp
        3: punctuation.section.group.end.regexp
      pop: 3
    - match: \?(?:(<)([^>]+)(>)|(')([^']+)('))
      scope: keyword.other.named-capture-group.regexp
      captures:
        1: punctuation.definition.capture-group-name.begin.regexp
        2: entity.name.capture-group.regexp
        3: punctuation.definition.capture-group-name.end.regexp
        4: punctuation.definition.capture-group-name.begin.regexp
        5: entity.name.capture-group.regexp
        6: punctuation.definition.capture-group-name.end.regexp
      pop: 1
    - match: \?\((?:(<)([^>]+)(>)|(')([^']+)(')|(\d+)|R(\d*)|R&(\w+))\)
      scope: keyword.other.backref-and-recursion.conditional.regexp
      captures:
        1: punctuation.definition.capture-group-name.begin.regexp
        2: variable.other.backref-and-recursion.regexp
        3: punctuation.definition.capture-group-name.end.regexp
        4: punctuation.definition.capture-group-name.begin.regexp
        5: variable.other.backref-and-recursion.regexp
        6: punctuation.definition.capture-group-name.end.regexp
        7: variable.other.backref-and-recursion.regexp
        8: variable.other.backref-and-recursion.regexp
        9: variable.other.backref-and-recursion.regexp
      pop: 1
    - match: \?\(DEFINE\)
      scope: keyword.other.conditional.definition.regexp
      pop: 1
    - match: \?(?=\(\?)
      scope: keyword.other.conditional.regexp
      pop: 1

  charset-body:
    - meta_prepend: true
    - match: ':(ascii|alnum|alpha|blank|cntrl|digit|graph|lower|print|punct|space|upper|word|xdigit):'
      scope: constant.other.posix-class.regexp
    - match: '&&'
      scope: keyword.operator.intersection.regexp
    - include: charsets

  anchors:
    - meta_prepend: true
    - match: \\[><]
      scope: keyword.control.anchor.regexp
      push: maybe-unexpected-quantifiers

  backrefs:
    - meta_prepend: true
    - match: \\[kg](?:(<)([^>]+)(>)|(')([^']+)(')|(\{)([^}]+)(\})|(-?\d+))
      scope: keyword.other.backref-and-recursion.regexp
      captures:
        1: punctuation.definition.capture-group-name.begin.regexp
        2: variable.other.backref-and-recursion.regexp
        3: punctuation.definition.capture-group-name.end.regexp
        4: punctuation.definition.capture-group-name.begin.regexp
        5: variable.other.backref-and-recursion.regexp
        6: punctuation.definition.capture-group-name.end.regexp
        7: punctuation.definition.capture-group-name.begin.regexp
        8: variable.other.backref-and-recursion.regexp
        9: punctuation.definition.capture-group-name.end.regexp
        10: variable.other.backref-and-recursion.regexp
