%YAML 1.2
---
name: Regular Expression (Basic)
scope: source.regexp.basic
version: 2
hidden: true

variables:
  known_char_escape: '\\(?:[tnrfae]|[0-7]{3}|x\{\h{1,7}\}|x\h\h|c\d+)'
  invalid_char_escape: '\\[xcCM]'
  char_escape: '\\.'
  ranged_quantifier: '\{\d+(,\d*)?\}'
  lazy_or_possessive: '[?+]?'
  character_quantifier: '[?*+]'
  char_class: '\\(?:[wWsSdDhHvVXR]|[pP](?:\{[a-zA-Z_]+\}|(L&|[A-Z][a-z]?)))'
  activate_x_mode: (?:\?[ims]*x[ixms]*(?:-[ims]+)?)
  deactivate_x_mode: (?:\?[ims]*-[ims]*x[imxs]*)
  other_modifiers: \?(?:[ixms]*-)?[ixms]+

contexts:
  main:
    - include: unexpected-quantifiers
    - match: ''
      push: base-literal

  # This is the default context
  base-literal:
    - include: xmode-on
    - include: base
    - include: literals

  # This is the extended context
  #
  # The "-extended" prefixed contexts are necessary
  # to keep the extended mode enabled in subgroups
  # and disable it properly when it is unset (and in sets).
  # Switching happens in the "group-start*" contexts.
  base-literal-extended:
    - include: xmode-off
    - include: base-extended
    - include: literals

  base:
    - include: group-comments
    - include: groups
    - include: base-common

  base-extended:
    - include: group-comments
    - include: groups-extended
    - include: extended-patterns # <- this is where the contexts differ
    - include: base-common

  base-common:
    - include: character-classes
    - include: anchors
    - include: backrefs
    - include: switches
    - include: escaped-chars
    - include: charsets
    - include: operators

  extended-patterns:
    - include: line-comments
    - match: \s+
      scope: meta.ignored-whitespace.regexp

  line-comments:
    - match: \#+
      scope: punctuation.definition.comment.regexp
      push: line-comment-body

  line-comment-body:
    - meta_scope: comment.line.number-sign.regexp
    - match: \n # does not close on `)`!
      pop: 1

  group-comments:
    - match: \(\?#
      scope: punctuation.definition.comment.begin.regexp
      push: group-comment-body

  group-comment-body:
    - meta_scope: meta.group.regexp comment.block.group.regexp
    - match: \)
      scope: punctuation.definition.comment.end.regexp
      pop: 1

  groups:
    - match: \(
      scope: keyword.control.group.regexp
      push: [group-body, maybe-unexpected-quantifiers, group-start]

  groups-extended:
    - match: \(
      scope: keyword.control.group.regexp
      push: [group-body-extended, maybe-unexpected-quantifiers, group-start]

  group-start:
    - match: \?(<[=!]|[>=:!])
      scope: constant.other.assertion.regexp
      pop: 1
    # Groups which activate 'x' mode
    - match: '{{activate_x_mode}}:'
      scope: storage.modifier.mode.regexp
      pop: 3
      set: [group-body-extended, maybe-unexpected-quantifiers]
    # Groups which deactivate 'x' mode
    - match: '{{deactivate_x_mode}}:'
      scope: storage.modifier.mode.regexp
      pop: 3
      set: [group-body, maybe-unexpected-quantifiers]
    # Other modifiers
    - match: '{{other_modifiers}}:'
      scope: storage.modifier.mode.regexp
      pop: 1
    # Other modifiers (must come after other modifier matches)
    - match: ({{other_modifiers}})(\))
      captures:
        1: storage.modifier.mode.regexp
        2: keyword.control.group.regexp
      pop: 3
    - match: ''
      pop: 1

  group-body:
    - meta_scope: meta.group.regexp
    - include: group-end
    - include: ingroup-xmode-on
    - include: base
    - include: literals

  group-body-extended:
    - meta_scope: meta.group.extended.regexp
    - include: group-end
    - include: ingroup-xmode-off
    - include: base-extended
    - include: literals

  group-end:
    - match: \)
      scope: keyword.control.group.regexp
      pop: 1

  ingroup-xmode-on:
    # Activates 'x' mode
    - match: (\()({{activate_x_mode}})(\))
      captures:
        0: meta.group.extended.regexp
        1: keyword.control.group.regexp
        2: storage.modifier.mode.regexp
        3: keyword.control.group.regexp
      pop: 1  # pop `group-body` to avoid overlapping `meta.group`
      push: [group-body-extended, maybe-unexpected-quantifiers]

  ingroup-xmode-off:
    # Deactivates 'x' mode
    - match: (\()({{deactivate_x_mode}})(\))
      captures:
        0: meta.group.regexp
        1: keyword.control.group.regexp
        2: storage.modifier.mode.regexp
        3: keyword.control.group.regexp
      pop: 1  # pop `group-body-extended` to avoid overlapping `meta.group`
      push: [group-body, maybe-unexpected-quantifiers]

  xmode-on:
    # Activates 'x' mode
    - match: (\()({{activate_x_mode}})(\))
      captures:
        0: meta.group.extended.regexp
        1: keyword.control.group.regexp
        2: storage.modifier.mode.regexp
        3: keyword.control.group.regexp
      pop: 1 # pop `base-literal` to avoid overlapping `meta.` (if any)
      push: [base-literal-extended, maybe-unexpected-quantifiers]

  xmode-off:
    # Deactivates 'x' mode
    - match: (\()({{deactivate_x_mode}})(\))
      captures:
        0: meta.group.regexp
        1: keyword.control.group.regexp
        2: storage.modifier.mode.regexp
        3: keyword.control.group.regexp
      pop: 1 # pop `base-literal-extended` to avoid overlapping `meta.` (if any)
      push: [base-literal, maybe-unexpected-quantifiers]

  charsets:
    - match: (\[\^?)\]?
      captures:
        1: keyword.control.set.regexp
      push: charset-body

  charset-body:
    - meta_scope: meta.set.regexp
    - match: \]
      scope: keyword.control.set.regexp
      pop: 1
    - include: charset-ranges
    - include: character-classes
    - include: escaped-chars

  charset-ranges:
    - match: (?=({{known_char_escape}}|{{char_escape}}|(?!\\-)[^\]])-({{known_char_escape}}|{{char_escape}}|[^\]]))
      push: [charset-range-end, charset-range-begin]

  charset-range-begin:
    - match: '-'
      scope: punctuation.separator.sequence.regexp
      pop: 1
    - include: escaped-chars

  charset-range-end:
    - meta_scope: constant.other.range.regexp
    - include: escaped-char
    - match: .
      pop: 1

  character-classes:
    - match: '{{char_class}}'
      scope: keyword.control.character-class.regexp

  escaped-chars:
    - match: '{{known_char_escape}}'
      scope: constant.character.escape.regexp
    - match: '{{invalid_char_escape}}'
      scope: invalid.illegal.character.escape.regexp
    - match: '{{char_escape}}'
      scope: constant.character.escape.regexp

  escaped-char:
    - match: '{{known_char_escape}}'
      scope: constant.character.escape.regexp
      pop: 1
    - match: '{{invalid_char_escape}}'
      scope: invalid.illegal.character.escape.regexp
      pop: 1
    - match: '{{char_escape}}'
      scope: constant.character.escape.regexp
      pop: 1

  anchors:
    - match: \\[bBAZzG]|[\^$]
      scope: keyword.control.anchors.regexp
      push: maybe-unexpected-quantifiers

  backrefs:
    - match: \\([1-9]\d*)
      scope: keyword.other.backref-and-recursion.regexp
      captures:
        1: variable.other.backref-and-recursion.regexp

  switches:
    - match: \\K
      scope: keyword.control.regexp
      push: maybe-unexpected-quantifiers
    - match: \\Q
      scope: keyword.control.regexp
      push: literal-until-backslash-e

  literal-until-backslash-e:
    - meta_content_scope: meta.literal.regexp
    - match: \\E
      scope: keyword.control.regexp
      pop: 1

  quantifiers:
    - match: '{{ranged_quantifier}}{{lazy_or_possessive}}'
      scope: keyword.operator.quantifier.regexp
      push: maybe-unexpected-quantifiers
    - match: '{{character_quantifier}}{{lazy_or_possessive}}'
      scope: keyword.operator.quantifier.regexp
      push: maybe-unexpected-quantifiers

  maybe-unexpected-quantifiers:
    - include: unexpected-quantifiers
    - match: ''
      pop: 1

  unexpected-quantifiers:
    - match: '{{ranged_quantifier}}{{lazy_or_possessive}}'
      scope: invalid.illegal.unexpected-quantifier.regexp
    - match: '{{character_quantifier}}{{lazy_or_possessive}}'
      scope: invalid.illegal.unexpected-quantifier.regexp

  operators:
    - match: \|
      scope: keyword.operator.alternation.regexp
      push: maybe-unexpected-quantifiers

  literals:
    - include: quantifiers
    - match: \.
      scope: keyword.other.any.regexp # https://github.com/sublimehq/Packages/issues/314
    - match: \)
      scope: invalid.illegal.unmatched-brace.regexp
