{
    "scope": "source.ocaml",
    "completions":
    [
        { "trigger": "begin\tbegin", "contents": "begin\n\t$0\nend" },
        { "trigger": "class\tclass", "contents": "class ${1:name} =\n\tobject ${2:(self)}\n\t\t${3:contents}\n\tend" },
        { "trigger": "doc\tDocument", "contents": "(** [$1] $0 *)" },
        { "trigger": "for\tfor loop", "contents": "for ${1:i} = ${2:startval} to ${3:endval} do\n\t$4\ndone\n$0" },
        { "trigger": "fun\tfunction", "contents": "(fun ${1:()} -> ${2:body})" },
        { "trigger": "fun\tfunction alt", "contents": "(function\n\t| ${1:patt1} -> ${2:expr1}\n\t| ${3:patt2} -> ${4:expr2})" },
        { "trigger": "~f\tfunction label", "contents": "~f:(fun ${1:()} -> ${2:body})" },
        { "trigger": "lin\tlet in", "contents": "let ${1:var(s)} = ${2:expr} in ${3:expr2}" },
        { "trigger": "let\tlet", "contents": "let ${1:var(s)} = ${0:expr}" },
        { "trigger": "|\tmatch pattern", "contents": "| ${1:pattern} -> $0" },
        { "trigger": "match\tmatch", "contents": "match ${1:value} with\n| ${2:patt} -> ${3:expr}\n| ${4:_} -> ${5:expr2}" },
        { "trigger": "method\tmethod", "contents": "method ${1:name} = $0" },
        { "trigger": "sig\tmodule signature", "contents": "module ${1:Name} : sig\n\t$0\nend" },
        { "trigger": "mtype\tmodule type", "contents": "module type ${1:Name} = sig\n\t$0\nend" },
        { "trigger": "module\tmodule", "contents": "module ${1:Name} = struct\n\t$0\nend" },
        { "trigger": "try\ttry", "contents": "try\n\t$0\nwith\n| _ -> failwith \"Unknown\"" },
        { "trigger": "type\ttype", "contents": "type ${1:name} = $0" },
        { "trigger": "thread\tuntitled", "contents": "ignore (Thread.create (fun () ->\n\t$0\n) ())" },
        { "trigger": "while\twhile loop", "contents": "while ${1:condition} do\n\t$0\ndone" }
    ]
}
