%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
# Derived from https://github.com/i-akhmadullin/Sublime-CSS3
name: CSS
scope: source.css
version: 2

file_extensions:
  - css
  - css.erb
  - css.liquid

###############################################################################

variables:
  # Many variable names taken directly from https://www.w3.org/TR/css3-selectors/#lex
  unicode: '\\\h{1,6}[ \t\n\f]?'
  escape: '(?:{{unicode}}|\\[^\n\f\h])'
  nonascii: '[\p{L}\p{M}\p{S}\p{N}&&[[:^ascii:]]]'
  nmstart: '(?:[[_a-zA-Z]{{nonascii}}]|{{escape}})'
  nmchar: '(?:[[-\w]{{nonascii}}]|{{escape}})'
  ident: '(?:--{{nmchar}}+|-?{{nmstart}}{{nmchar}}*)'

  # Types
  # https://www.w3.org/TR/css3-values/#numeric-types
  # https://www.w3.org/TR/css-syntax-3/#number-token-diagram
  integer: '([-+]?)(\d+)'
  float: '([-+]?)(\d*(\.)\d+(?:[eE][-+]?\d+)?|\d+[eE][-+]?\d+)'

  # Units
  # https://www.w3.org/TR/css3-values/#lengths
  font_relative_lengths: '(?i:em|ex|ch|rem)'
  viewport_percentage_lengths: '(?i:vw|vh|vmin|vmax)'
  absolute_lengths: '(?i:cm|mm|q|in|pt|pc|px|fr)'
  angle_units: '(?i:deg|grad|rad|turn)'
  duration_units: '(?i:s|ms)'
  frequency_units: '(?i:Hz|kHz)'
  resolution_units: '(?i:dpi|dpcm|dppx)'

  # Combinators
  # https://drafts.csswg.org/selectors-4/#combinators
  combinators: (?:>{1,3}|[~+]|\|{2})

  vendor_prefix: -(?:webkit|moz|ms|o)-

  # https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-core-concepts
  custom_element_chars: |-
    (?x:
        [-_a-z0-9\x{00B7}]
      | [\x{00C0}-\x{00D6}]
      | [\x{00D8}-\x{00F6}]
      | [\x{00F8}-\x{02FF}]
      | [\x{0300}-\x{037D}]
      | [\x{037F}-\x{1FFF}]
      | [\x{200C}-\x{200D}]
      | [\x{203F}-\x{2040}]
      | [\x{2070}-\x{218F}]
      | [\x{2C00}-\x{2FEF}]
      | [\x{3001}-\x{D7FF}]
      | [\x{F900}-\x{FDCF}]
      | [\x{FDF0}-\x{FFFD}]
      | [\x{10000}-\x{EFFFF}]
    )

  html_tag_names:  |-
    \b(?xi:
        a | abbr | acronym | address | applet | area | article | aside | audio
      | b | base | basefont | bdi | bdo | big | blockquote | body | br | button
      | canvas | caption | cite | code | col | colgroup | content | data
      | datalist | dd | del | details | dfn | dir | dialog | div | dl | dt
      | element | em | embed | eventsource | fieldset | figure | figcaption
      | footer | form | frame | frameset | h[1-6] | head | header | hgroup | hr
      | html | i | iframe | img | input | ins | isindex | kbd | keygen | label
      | legend | li | link | main | map | mark | menu | meta | meter | nav
      | noframes | noscript | object | ol | optgroup | option | output | p
      | param | picture | pre | progress | q | rp | rt | rtc | s | samp | script
      | section | select | shadow | small | source | span | strike | strong
      | style | sub | summary | sup | svg | table | tbody | td | template
      | textarea | tfoot | th | thead | time | title | tr | track | tt | u | ul
      | var | video | wbr | xmp | circle | clipPath | defs | ellipse | filter
      | foreignObject | g | glyph | glyphRef | image | line | linearGradient
      | marker | mask | path | pattern | polygon | polyline | radialGradient
      | rect | stop | switch | symbol | text | textPath | tref | tspan | use
    )\b

  # Predefined Color Values (Standard Set)
  # https://www.w3.org/TR/CSS22/syndata.html#color-units
  standard_colors: |-
    \b(?xi:
        aqua | black | blue | fuchsia | gray | green | lime | maroon | navy
      | olive | orange | purple | red | silver | teal | white | yellow
    )\b

  # Predefined Color Values (Extended Set)
  # https://www.w3.org/TR/css3-color/#svg-color
  extended_colors: |-
    \b(?xi:
        aliceblue | antiquewhite | aquamarine | azure | beige | bisque
      | blanchedalmond | blueviolet | brown | burlywood | cadetblue | chartreuse
      | chocolate | coral | cornflowerblue | cornsilk | crimson | cyan | darkblue
      | darkcyan | darkgoldenrod | darkgray | darkgreen | darkgrey | darkkhaki
      | darkmagenta | darkolivegreen | darkorange | darkorchid | darkred
      | darksalmon | darkseagreen | darkslateblue | darkslategray | darkslategrey
      | darkturquoise | darkviolet | deeppink | deepskyblue | dimgray | dimgrey
      | dodgerblue | firebrick | floralwhite | forestgreen | gainsboro
      | ghostwhite | gold | goldenrod | greenyellow | grey | honeydew | hotpink
      | indianred | indigo | ivory | khaki | lavender | lavenderblush | lawngreen
      | lemonchiffon | lightblue | lightcoral | lightcyan | lightgoldenrodyellow
      | lightgray | lightgreen | lightgrey | lightpink | lightsalmon
      | lightseagreen | lightskyblue | lightslategray | lightslategrey
      | lightsteelblue | lightyellow | limegreen | linen | magenta
      | mediumaquamarine | mediumblue | mediumorchid | mediumpurple
      | mediumseagreen | mediumslateblue | mediumspringgreen | mediumturquoise
      | mediumvioletred | midnightblue | mintcream | mistyrose | moccasin
      | navajowhite | oldlace | olivedrab | orangered | orchid | palegoldenrod
      | palegreen | paleturquoise | palevioletred | papayawhip | peachpuff | peru
      | pink | plum | powderblue | rebeccapurple | rosybrown | royalblue
      | saddlebrown | salmon | sandybrown | seagreen | seashell | sienna
      | skyblue | slateblue | slategray | slategrey | snow | springgreen
      | steelblue | tan | thistle | tomato | turquoise | violet | wheat
      | whitesmoke | yellowgreen
    )\b

  # Predefined Counter Styles
  # https://drafts.csswg.org/css-counter-styles-3/#predefined-counters
  counter_styles: |-
    \b(?xi:
        arabic-indic | armenian | bengali | cambodian | circle
      | cjk-decimal | cjk-earthly-branch | cjk-heavenly-stem | decimal-leading-zero
      | decimal | devanagari | disclosure-closed | disclosure-open | disc
      | ethiopic-numeric | georgian | gujarati | gurmukhi | hebrew
      | hiragana-iroha | hiragana | japanese-formal | japanese-informal
      | kannada | katakana-iroha | katakana | khmer
      | korean-hangul-formal | korean-hanja-formal | korean-hanja-informal | lao
      | lower-alpha | lower-armenian | lower-greek | lower-latin | lower-roman
      | malayalam | mongolian | myanmar | oriya | persian
      | simp-chinese-formal | simp-chinese-informal
      | square | tamil | telugu | thai | tibetan
      | trad-chinese-formal | trad-chinese-informal
      | upper-alpha | upper-armenian | upper-latin | upper-roman
    )

  # Property names are sorted by popularity in descending order.
  # Popularity data taken from https://www.chromestatus.com/metrics/css/popularity
  property_names: |-
    \b(?x:
        display | width | background-color | height | position | font-family
      | font-weight | top | opacity | cursor | background-image | right
      | visibility | box-sizing | user-select | left | float | margin-left
      | margin-top | line-height | padding-left | z-index | margin-bottom
      | margin-right | margin | vertical-align | padding-top | white-space
      | border-radius | padding-bottom | padding-right | padding | bottom | clear
      | max-width | box-shadow | content | border-color | min-height | min-width
      | font-style | border-width | border-collapse | background-size
      | text-overflow | max-height | text-transform | text-shadow | text-indent
      | border-style | overflow-y | list-style-type | word-wrap | border-spacing
      | appearance | zoom | overflow-x | border-top-left-radius
      | border-bottom-left-radius | border-top-color | pointer-events
      | border-bottom-color | align-items | justify-content | letter-spacing
      | border-top-right-radius | border-bottom-right-radius | border-right-width
      | font-smoothing | border-bottom-width | border-right-color | direction
      | border-top-width | src | border-left-color | border-left-width
      | tap-highlight-color | table-layout | background-clip | word-break
      | transform-origin | resize | filter | backface-visibility | text-rendering
      | box-orient | transition-property | transition-duration | word-spacing
      | quotes | outline-offset | animation-timing-function | animation-duration
      | animation-name | transition-timing-function | border-bottom-style
      | border-bottom | transition-delay | transition | unicode-bidi
      | border-top-style | border-top | unicode-range | list-style-position
      | orphans | outline-width | line-clamp | order | flex-direction | box-pack
      | animation-fill-mode | outline-color | list-style-image | list-style
      | touch-action | flex-grow | border-left-style | border-left
      | animation-iteration-count | page-break-inside | box-flex | box-align
      | page-break-after | animation-delay | widows | border-right-style
      | border-right | flex-align | outline-style | outline | background-origin
      | animation-direction | fill-opacity | background-attachment | flex-wrap
      | transform-style | overflow-wrap | animation-play-state | animation
      | will-change | box-ordinal-group | image-rendering | mask-image | flex-flow
      | background-position-y | stroke-width | background-position-x
      | background-position | background-blend-mode | flex-shrink | flex-basis
      | flex-order | flex-item-align | flex-line-pack | flex-negative | flex-pack
      | flex-positive | flex-preferred-size | flex | user-drag | font-stretch
      | column-count | empty-cells | align-self | caption-side | mask-size
      | column-gap | mask-repeat | box-direction | font-feature-settings
      | mask-position | align-content | object-fit | columns | text-fill-color
      | clip-path | stop-color | font-kerning | page-break-before
      | stroke-dasharray | size | fill-rule | border-image-slice | column-width
      | break-inside | column-break-before | border-image-width| stroke-dashoffset
      | border-image-repeat | border-image-outset | line-break | stroke-linejoin
      | stroke-linecap | stroke-miterlimit | stroke-opacity | stroke
      | shape-rendering | border-image-source | border-image | border | tab-size
      | writing-mode | perspective-origin-y | perspective-origin-x
      | perspective-origin | perspective | text-align-last | text-align
      | clip-rule | clip | text-anchor | column-rule-color | box-decoration-break
      | column-fill | fill | column-rule-style | mix-blend-mode
      | text-emphasis-color | baseline-shift | dominant-baseline | page
      | alignment-baseline | column-rule-width | column-rule | break-after
      | font-variant-ligatures | transform-origin-y | transform-origin-x
      | transform | object-position | break-before | column-span | isolation
      | shape-outside | all | color-interpolation-filters | marker | marker-end
      | marker-start | marker-mid | color-rendering | color-interpolation
      | background-repeat-x | background-repeat-y | background-repeat
      | background | mask-type | flood-color | flood-opacity | text-orientation
      | mask-composite | text-emphasis-style | paint-order | lighting-color
      | shape-margin | text-emphasis-position | text-emphasis
      | shape-image-threshold | mask-clip | mask-origin | mask | font-variant-caps
      | font-variant-alternates | font-variant-east-asian | font-variant-numeric
      | font-variant-position | font-variant | font-size-adjust | font-size
      | font-language-override | font-display | font-synthesis | font
      | line-box-contain | text-justify | text-decoration-color
      | text-decoration-style | text-decoration-line | text-decoration
      | text-underline-position | grid-template-rows | grid-template-columns
      | grid-template-areas | grid-template | rotate | scale | translate
      | scroll-behavior | grid-column-start | grid-column-end | grid-column-gap
      | grid-row-start | grid-row-end | grid-auto-rows | grid-area
      | grid-auto-flow | grid-auto-columns | image-orientation | hyphens
      | overflow-scrolling | overflow | color-profile | kerning | nbsp-mode
      | color | image-resolution | grid-row-gap | grid-row | grid-column
      | blend-mode | azimuth | pause-after | pause-before | pause | pitch-range
      | pitch | text-height | system | negative | prefix | suffix | range | pad
      | fallback | additive-symbols | symbols | speak-as | speak | grid-gap | grid
    )\b

  property_values: |-
    \b(?x:
        absolute|active|add
      | all(-(petite|small)-caps|-scroll)?
      | alpha(betic)?
      | alternate(-reverse)?
      | always|annotation|antialiased|at
      | auto(hiding-scrollbar|-flow)?
      | avoid(-column|-page|-region)?
      | background(-color|-image|-position|-size)?
      | backwards|balance|baseline|below|bevel|bicubic|bidi-override|blink
      | block(-line-height)?
      | blur
      | bold(er)?
      | border(-bottom|-left|-right|-top)?-(color|radius|width|style)
      | border-(bottom|top)-(left|right)-radius
      | border-image(-outset|-repeat|-slice|-source|-width)?
      | border(-bottom|-left|-right|-top|-collapse|-spacing|-box)?
      | both|bottom
      | box(-shadow)?
      | break-(all|word)
      | brightness
      | butt(on)?
      | capitalize
      | cent(er|ral)
      | char(acter-variant)?
      | cjk-ideographic|clip|clone|close-quote
      | closest-(corner|side)
      | col-resize|collapse
      | color(-stop|-burn|-dodge)?
      | column((-count|-gap|-reverse|-rule(-color|-width)?|-width)|s)?
      | common-ligatures|condensed|consider-shifts|contain
      | content(-box|s)?
      | contextual|contrast|cover
      | crisp(-e|E)dges
      | crop
      | cross(hair)?
      | da(rken|shed)
      | default|dense|diagonal-fractions|difference|disabled
      | discretionary-ligatures|disregard-shifts
      | distribute(-all-lines|-letter|-space)?
      | dotted|double|drop-shadow
      | (nwse|nesw|ns|ew|sw|se|nw|ne|w|s|e|n)-resize
      | ease(-in-out|-in|-out)?
      | element|ellipsis|embed|end|EndColorStr|evenodd
      | exclu(de(-ruby)?|sion)
      | expanded
      | (extra|semi|ultra)-(condensed|expanded)
      | farthest-(corner|side)?
      | fill(-box|-opacity)?
      | filter|first|fixed|flat
      | fit-content
      | flex((-basis|-end|-grow|-shrink|-start)|box)?
      | flip|flood-color
      | font(-size(-adjust)?|-stretch|-weight)?
      | forwards
      | from(-image)?
      | full-width|geometricPrecision|glyphs|gradient|grayscale
      | grid(-height)?
      | groove|hand|hanging|hard-light|height|help|hidden|hide
      | historical-(forms|ligatures)
      | horizontal(-tb)?
      | hue
      | ideograph(-alpha|-numeric|-parenthesis|-space|ic)
      | inactive|include-ruby|infinite|inherit|initial
      | inline(-block|-box|-flex(box)?|-line-height|-table)?
      | inset|inside
      | inter(-ideograph|-word|sect)
      | invert|isolat(e|ion)|italic
      | jis(04|78|83|90)
      | justify(-all)?
      | keep-all
      | large[r]?
      | last|left|letter-spacing
      | light(e[nr]|ing-color)
      | line(-edge|-height|-through)?
      | linear(-gradient|RGB)?
      | lining-nums|list-item|local|loose|lowercase|lr-tb|ltr
      | lumin(osity|ance)|manual
      | margin(-bottom|-box|-left|-right|-top)?
      | marker(-offset|s)?
      | mathematical
      | max-(content|height|lines|size|width)
      | medium|middle
      | min-(content|height|width)
      | miter|mixed|move|multiply|newspaper
      | no-(change|clip|(close|open)-quote|(common|discretionary|historical)-ligatures|contextual|drop|repeat)
      | none|nonzero|normal|not-allowed|nowrap|oblique
      | offset(-after|-before|-end|-start)?
      | oldstyle-nums|opacity|open-quote
      | optimize(Legibility|Precision|Quality|Speed)
      | order|ordinal|ornaments
      | outline(-color|-offset|-width)?
      | outset|outside|over(line|-edge|lay)
      | padding(-bottom|-box|-left|-right|-top)?
      | page|painted|paused
      | perspective-origin
      | petite-caps|pixelated|pointer
      | pre(-line|-wrap)?
      | preserve-3d
      | progid:DXImageTransform.Microsoft.(Alpha|Blur|dropshadow|gradient|Shadow)
      | progress
      | proportional-(nums|width)
      | radial-gradient|recto|region|relative
      | repeat(-[xy])?
      | repeating-(linear|radial)-gradient
      | replaced|reset-size|reverse|ridge|right
      | round
      | row(-resize|-reverse)?
      | run-in
      | ruby(-base|-text)?(-container)?
      | rtl|running|saturat(e|ion)|screen
      | safe
      | scroll(-position|bar)?
      | separate|sepia
      | scale-down
      | shape-(image-threshold|margin|outside)
      | show
      | sideways(-lr|-rl)?
      | simplified
      | slashed-zero|slice
      | small(-caps|er)?
      | smooth|snap|solid|soft-light
      | space(-around|-between|-evenly)?
      | span|sRGB
      | stack(ed-fractions)?
      | start(ColorStr)?
      | static
      | step-(end|start)
      | sticky
      | stop-(color|opacity)
      | stretch|strict
      | stroke(-box|-dash(array|offset)|-miterlimit|-opacity|-width)?
      | style(set)?
      | stylistic
      | sub(grid|pixel-antialiased|tract)?
      | super|swash
      | table(-caption|-cell|(-column|-footer|-header|-row)-group|-column|-row)?
      | tabular-nums|tb-rl
      | text((-bottom|-(decoration|emphasis)-color|-indent|-(over|under|after|before)-edge|-shadow|-size(-adjust)?|-top)|field)?
      | thi(ck|n)
      | titling-ca(ps|se)
      | to[p]?
      | touch|traditional
      | transform(-origin)?
      | under(-edge|line)?
      | unicase|unsafe|unset|uppercase|upright
      | use-(glyph-orientation|script)
      | verso
      | vertical(-align|-ideographic|-lr|-rl|-text)?
      | view-box
      | viewport-fill(-opacity)?
      | visibility
      | visible(Fill|Painted|Stroke)?
      | wait|wavy|weight|whitespace|width|word-spacing
      | wrap(-reverse)?
      | x{1,2}-(large|small)
      | z-index|zero
      | zoom(-in|-out)?
      | ({{counter_styles}})
    )\b

###############################################################################

contexts:

  main:
    - include: comments
    - include: selectors
    - include: at-rules
    - include: property-lists

###[ COMMENTS ]################################################################

  comments:
    # empty block comment
    - match: (/\*+)(\*/)
      scope: comment.block.css
      captures:
         1: punctuation.definition.comment.begin.css
         2: punctuation.definition.comment.end.css
    # normal block comment
    - match: /\*+
      scope: punctuation.definition.comment.begin.css
      push: comments-content

  comments-content:
    - meta_scope: comment.block.css
    - match: \*+/
      scope: punctuation.definition.comment.end.css
      pop: 1
    - match: ^\s*(\*)(?!/)
      captures:
        1: punctuation.definition.comment.css

###[ AT RULES ]################################################################

  at-rules:
    - include: at-charset
    - include: at-counter-style
    - include: at-custom-media
    - include: at-document
    - include: at-font-face
    - include: at-import
    - include: at-keyframes
    - include: at-media
    - include: at-namespace
    - include: at-page
    - include: at-supports

  at-charset:
    - match: (@)charset\b
      scope: keyword.control.at-rule.charset.css
      captures:
        1: punctuation.definition.keyword.css
      push: at-charset-content

  at-charset-content:
    - meta_scope: meta.at-rule.charset.css
    - include: at-rule-end
    - include: quoted-strings

  # @counter-style
  # https://drafts.csswg.org/css-counter-styles-3/#the-counter-style-rule
  at-counter-style:
    - match: ((@)counter-style\b)\s+(?:(?i:(decimal|none))|({{ident}}))?\s*(?=\{|$)
      captures:
        1: keyword.control.at-rule.counter-style.css
        2: punctuation.definition.keyword.css
        3: invalid.illegal.counter-style-name.css
        4: entity.other.counter-style-name.css
      push: at-counter-style-content

  at-counter-style-content:
    - meta_scope: meta.at-rule.counter-style.css
    - include: comments
    - include: rule-list

  at-custom-media:
    - match: (@)custom-media\b
      captures:
        0: keyword.control.at-rule.custom-media.css
        1: punctuation.definition.keyword.css
      push: at-custom-media-content

  at-custom-media-content:
    - meta_scope: meta.at-rule.custom-media.css
    - include: rule-terminator
    - include: comments
    - include: media-query-list

  # @document
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#at-document
  at-document:
    - match: (@)document\b
      captures:
        0: keyword.control.at-rule.document.css
        1: punctuation.definition.keyword.css
      push: at-document-content

  at-document-content:
    - meta_scope: meta.at-rule.document.css
    - include: at-block
    - include: comments
    - include: comma-delimiters
    - include: url-functions
    - include: url-prefix-functions
    - include: domain-functions
    - include: regexp-functions

  at-font-face:
    - match: ((@)font-face)\s*(?=\{|$)
      captures:
        1: keyword.control.at-rule.font-face.css
        2: punctuation.definition.keyword.css
      push: at-font-face-content

  at-font-face-content:
    - meta_scope: meta.at-rule.font-face.css
    - include: comments
    - include: rule-list

  at-import:
    - match: (@)import\b
      captures:
        0: keyword.control.at-rule.import.css
        1: punctuation.definition.keyword.css
      push: at-import-content

  at-import-content:
    - meta_scope: meta.at-rule.import.css
    - include: at-rule-end
    - include: quoted-strings
    - include: url-functions
    - include: media-query-list

  # @keyframes
  # https://drafts.csswg.org/css-animations/#keyframes
  at-keyframes:
    - match: (@)({{vendor_prefix}})?keyframes\b
      captures:
        0: keyword.control.at-rule.keyframe.css
        1: punctuation.definition.keyword.css
        2: support.type.property-vendor.css
      push:
        - meta_scope: meta.at-rule.keyframe.css
        - include: comments
        - include: at-keyframe-block
        - include: at-keyframe-names-list

  at-keyframe-names-list:
    - match: \s*(?=[^{;])
      push:
        - match: \s*(?=[{;])
          pop: 1
        - include: comments
        - include: at-keyframe-names

  # https://drafts.csswg.org/css-animations/#propdef-animation-name
  at-keyframe-names:
    - match: \s*({{ident}})?
      captures:
        1: entity.other.animation-name.css
      push:
        - match: \s*(?:(,)|(?=[{;]))
          captures:
            1: punctuation.separator.sequence.css
          pop: 1

  at-keyframe-block:
    - match: \{
      scope: punctuation.section.block.begin.css
      push:
        - meta_scope: meta.block.css
        - match: \}
          scope: punctuation.section.block.end.css
          pop: 2
        - match: \b(from|to)\b
          scope: keyword.keyframe-selector.css
        - include: comma-delimiters
        - include: numeric-constants
        - include: main

  at-media:
    - match: (@)media\b
      captures:
        0: keyword.control.at-rule.media.css
        1: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.media.css
        - include: comments
        - include: at-block
        - include: media-query-list

  media-query-list:
    - match: \s*(?=[^{;])
      push:
        - match: \s*(?=[{;])
          pop: 1
        - include: media-query

  media-query:
    # Media Types: https://www.w3.org/TR/CSS21/media.html
    - include: comments
    - include: comma-delimiters
    - match: \b(?i:all|aural|braille|embossed|handheld|print|projection|screen|speech|tty|tv)\b
      scope: support.constant.media.css
    - match: \b(?i:and|or|not|only)\b
      scope: keyword.operator.logic.media.css
    - match: \(
      scope: punctuation.section.group.begin.css
      push: media-query-group-content

  media-query-group-content:
    - include: group-end
    - match: |-
        (?x)
        (
          (?:
            (-webkit-|-o-)?
            (?:min-|max-)?
            (-moz-)?
            (?:
              (?:device-)?(?:height|width|aspect-ratio|pixel-ratio)
              |color(?:-index)?|monochrome|resolution
            )
          )
          |grid|scan|orientation
        )\s*(:)?
      captures:
        1: support.type.property-name.media.css
        2: support.type.vendor-prefix.css
        3: support.type.vendor-prefix.css
        4: punctuation.separator.key-value.css
    - match: \b(portrait|landscape|progressive|interlace)\b
      scope: support.constant.property-value.css
    - match: (\d+)(/)(\d+)
      captures:
        1: meta.number.integer.decimal.css constant.numeric.value.css
        2: keyword.operator.arithmetic.css
        3: meta.number.integer.decimal.css constant.numeric.value.css
    - include: numeric-constants

  # @namespace
  # https://www.w3.org/TR/css3-namespace/
  at-namespace:
    - match: ((@)namespace)\s+({{ident}}(?!{{nmchar}}|\())?
      captures:
        1: keyword.control.at-rule.namespace.css
        2: punctuation.definition.keyword.css
        3: entity.other.namespace-prefix.css
      push: at-namespace-content

  at-namespace-content:
    - meta_scope: meta.at-rule.namespace.css
    - include: at-rule-end
    - include: quoted-strings
    - include: url-functions

  # @page
  # https://www.w3.org/TR/CSS2/page.html
  at-page:
    - match: ((@)page)\s*(?:(:)(first|left|right))?\s*(?=\{|$)
      captures:
        1: keyword.control.at-rule.page.css
        2: punctuation.definition.keyword.css
        3: punctuation.definition.entity.css
        4: entity.other.pseudo-class.css
      push: at-page-content

  at-page-content:
    - meta_scope: meta.at-rule.page.css
    - include: comments
    - include: rule-list

  # @supports
  # https://drafts.csswg.org/css-conditional-3/#at-supports
  at-supports:
    - match: (@)supports\b
      captures:
        0: keyword.control.at-rule.supports.css
        1: punctuation.definition.keyword.css
      push: at-supports-content

  at-supports-content:
    - meta_scope: meta.at-rule.supports.css
    - include: comments
    - include: at-block
    - include: at-supports-groups
    - include: at-supports-operators

  at-supports-operators:
    - match: \b(?i:and|or|not)\b
      scope: keyword.operator.logical.css

  at-supports-groups:
    - match: \(
      scope: punctuation.section.group.begin.css
      push:
        - meta_scope: meta.group.css
        - include: group-end
        - include: at-supports-groups
        - include: at-supports-operators
        - include: rule-list-body

  at-block:
    - match: \{
      scope: punctuation.section.block.begin.css
      push:
        - meta_scope: meta.block.css
        - match: \}
          scope: punctuation.section.block.end.css
          pop: 2
        - include: main

  at-rule-end:
    - include: rule-terminator
    - include: eol-pop
    - include: comments

###[ SELECTORS ]###############################################################

  selectors:
    - match: (?=[:.*#a-zA-Z\[])
      push: selector-content

  selector-content:
    - meta_scope: meta.selector.css
    - include: selector-end
    - include: comma-delimiters
    # Custom Elements
    # http://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    - match: \b([a-z](?:{{custom_element_chars}})*-(?:{{custom_element_chars}})*)\b
      scope: entity.name.tag.custom.css
    # Html Tags
    - match: '{{html_tag_names}}'
      scope: entity.name.tag.html.css
    - match: \*
      scope: entity.name.tag.wildcard.css
    # Class and Id Selectors
    # https://drafts.csswg.org/selectors-4/#class-html
    - match: \.
      scope: punctuation.definition.entity.css
      push:
        - meta_scope: entity.other.attribute-name.class.css
        - match: '{{ident}}'
          pop: 1
        - include: immediately-pop
    # https://drafts.csswg.org/selectors-4/#id-selectors
    - match: \#
      scope: punctuation.definition.entity.css
      push:
        - meta_scope: entity.other.attribute-name.id.css
        - match: '{{ident}}'
          pop: 1
        - include: immediately-pop
    # Attribute Selectors
    # https://drafts.csswg.org/selectors-4/#attribute-selectors
    - match: \[
      scope: punctuation.section.attribute-selector.begin.css
      push:
        - attribute-selector-meta
        - attribute-selector-key
    # Pseudo Classes and Elements
    # https://drafts.csswg.org/selectors-4/#pseudo-classes
    # https://drafts.csswg.org/selectors-4/#pseudo-elements
    - match: '::'
      scope: punctuation.accessor.double-colon.css
      push:
        - include: pseudo-element-css2
        - include: pseudo-element-css3
        - include: immediately-pop
    - match: ':'
      scope: punctuation.accessor.colon.css
      push:
        - include: pseudo-element-css2
        - include: pseudo-class
        - include: immediately-pop
    # Combinators
    # https://drafts.csswg.org/selectors-4/#combinators
    # https://drafts.csswg.org/css-scoping/#deep-combinator
    - match: '{{combinators}}(?![>~+|])'
      scope: keyword.operator.combinator.css
    - match: '{{combinators}}{2,}|\|{3,}'
      scope: invalid.illegal.combinator.css

  selector-end:
    - match: (?=\s*[@){}])
      pop: 1
    - include: comments

  attribute-selector-meta:
    - meta_scope: meta.attribute-selector.css
    - include: immediately-pop

  attribute-selector-key:
    - include: qualified-names
    - match: '{{ident}}'
      scope: entity.other.attribute-name.css
      set: attribute-selector-operator
    - include: attribute-selector-operator

  attribute-selector-operator:
    - match: '[~*|^$]?='
      scope: keyword.operator.logical.css
      set:
        - attribute-selector-flag
        - attribute-selector-value
    - include: attribute-selector-flag

  attribute-selector-value:
    - include: comments
    - include: quoted-string
    - match: '[^\s\]\[''"]+'
      scope: meta.string.css string.unquoted.css
      pop: 1
    - include: else-pop

  attribute-selector-flag:
    - match: \b[iI]\b
      scope: keyword.other.css
      set: attribute-selector-end
    - include: attribute-selector-end

  attribute-selector-end:
    - match: \]
      scope: punctuation.section.attribute-selector.end.css
      pop: 1
    - include: selector-end
    - match: \S
      scope: invalid.illegal.css

  # Pseudo Classes
  # https://drafts.csswg.org/selectors-4/#pseudo-classes
  pseudo-class:
    # Functional Pseudo Classes
    # https://drafts.csswg.org/selectors-4/#functional-pseudo-class

    # Functional Pseudo Classes with a single unquoted string
    - match: (dir|lang)\b
      scope: meta.function-call.identifier.css entity.other.pseudo-class.css
      set:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: unquoted-strings
        - include: immediately-pop

    # Functional Pseudo Classes with selector list
    - match: (matches|not|has)\b
      scope: meta.function-call.identifier.css entity.other.pseudo-class.css
      set:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: selectors
        - include: immediately-pop

    # Special :drop() pseudo-class
    - match: drop\b
      scope: meta.function-call.identifier.css entity.other.pseudo-class.css
      set:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - match: \b(active|valid|invalid)\b
              scope: keyword.other.pseudo-class.css
            - include: var-functions
        - include: immediately-pop

    # Functional Pseudo Classes with `An+B` param
    # An+B Notation: https://drafts.csswg.org/css-syntax/#anb
    # nth-last-child(), nth-child(), nth-last-of-type(), nth-of-type()
    - match: (nth-last-child|nth-child|nth-last-of-type|nth-of-type)\b
      scope: meta.function-call.identifier.css entity.other.pseudo-class.css
      set:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - match: \b(even|odd)\b
              scope: keyword.other.pseudo-class.css
            - match: (([-+]?)(\d*)(n))\s*(([-+])(\s*\d+))?
              captures:
                1: meta.number.integer.decimal.css
                2: keyword.operator.arithmetic.css
                3: constant.numeric.value.css
                4: constant.numeric.suffix.css
                5: meta.number.integer.decimal.css
                6: keyword.operator.arithmetic.css
                7: constant.numeric.value.css
            - match: '[-+]\s+\d+n?|[-+]?\d+\s+n'
              scope: invalid.illegal.numeric.css
            - include: var-functions
            - include: scalar-integer-constants
        - include: immediately-pop

    # Regular Pseudo Classes
    - match: '{{ident}}'
      scope: entity.other.pseudo-class.css
      pop: 1

  # Pseudo Elements
  # https://drafts.csswg.org/selectors-4/#pseudo-elements
  pseudo-element-css2:
    # CSS1 & CSS2 require : or ::
    - match: (before|after|first-line|first-letter)\b
      scope: entity.other.pseudo-element.css
      pop: 1

  pseudo-element-css3:
    # CSS3 requires ::
    - match: ({{vendor_prefix}})?{{ident}}\b
      captures:
        0: entity.other.pseudo-element.css
        1: support.type.vendor-prefix.css
      pop: 1

  # Qualified Name
  # https://drafts.csswg.org/css-namespaces-3/#css-qnames
  qualified-names:
    - match: (?:({{ident}})|(\*))?(\|)(?!=)
      captures:
        1: entity.other.namespace-prefix.css
        2: entity.name.namespace.wildcard.css
        3: punctuation.separator.namespace.css

  vendor-prefixes:
    - match: '{{vendor_prefix}}'
      scope: support.type.vendor-prefix.css

###[ PROPERTY LISTS ]##########################################################

  property-lists:
    - match: \{
      scope: punctuation.section.block.begin.css
      push: property-list-content

  property-list-content:
    - meta_scope: meta.property-list.css meta.block.css
    - match: \}
      scope: punctuation.section.block.end.css
      pop: 1
    - include: rule-list-body

  rule-list:
    - match: \{
      scope: punctuation.section.block.begin.css
      push: rule-list-content

  rule-list-content:
    - meta_scope: meta.property-list.css meta.block.css
    - match: \}
      scope: punctuation.section.block.end.css
      pop: 2
    - include: rule-list-body

  rule-list-body:
    # Note: This context is used by HTML.sublime-syntax
    - include: comments
    - include: property-identifiers
    - include: property-values

###[ PROPERTY IDENTIFIERS ]####################################################

  property-identifiers:
    - match: (?=[-a-z])
      push: property-identifier-content

  property-identifier-content:
    - meta_scope: meta.property-name.css
    - include: vendor-prefixes
    - include: font-property
    - include: counter-property
    - include: other-property
    - include: custom-property
    - include: deprecated-property
    - include: immediately-pop

  counter-property:
    # https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters
    - match: \bcounter-(increment|reset|set)(?!-)\b
      scope: support.type.property-name.css
      set: counter-property-value

  # Custom Properties
  # https://drafts.csswg.org/css-variables/#typedef-custom-property
  custom-property:
    # custom property definition
    - match: (--){{nmchar}}+
      scope: entity.other.custom-property.css
      captures:
        1: punctuation.definition.custom-property.css
      pop: 1

  deprecated-property:
    - match: \b(var-)({{ident}})(?=\s)
      scope: invalid.deprecated.custom-property.css
      captures:
        1: entity.other.custom-property.prefix.css
        2: entity.other.custom-property.name.css
      pop: 1

  font-property:
    - match: \bfont(-family)?(?!-)\b
      scope: support.type.property-name.css
      set: font-property-value

  other-property:
    - match: '{{property_names}}'
      scope: support.type.property-name.css
      pop: 1

###[ PROPERTY VALUES ]#########################################################

  counter-property-value:
    - match: ':'
      scope: punctuation.separator.key-value.css
      set:
        - property-value-content
        - counter-property-identifier
    - include: immediately-pop

  counter-property-identifier:
    - match: '{{ident}}'
      scope: entity.other.counter-name.css
      pop: 1
    - include: comments
    - include: else-pop

  font-property-value:
    - match: ':'
      scope: punctuation.separator.key-value.css
      set: font-property-value-content
    - include: immediately-pop

  font-property-value-content:
    - meta_content_scope: meta.property-value.css
    - include: property-value-content
    - include: unquoted-name-strings

  property-values:
    - match: ':'
      scope: punctuation.separator.key-value.css
      push: property-value-content

  property-value-content:
    - meta_content_scope: meta.property-value.css
    - include: property-value-end
    - include: comments
    - include: comma-delimiters
    - include: vendor-prefixes
    - include: builtin-functions
    - include: line-names
    - include: unicode-ranges
    - include: color-values
    - include: numeric-constants
    - include: common-constants
    - include: quoted-strings
    - match: \!\s*important
      scope: keyword.other.important.css
    - match: /
      scope: keyword.operator.arithmetic.css

  property-value-end:
    - match: ;
      scope: punctuation.terminator.rule.css
      pop: 1
    - match: (?=[})])
      pop: 1

  # When including `color-values` and `color-adjuster-functions`, make sure it is
  # included after the color adjustors to prevent `color-values` from consuming
  # conflicting function names & color constants such as `red`, `green`, or `blue`.
  color-values:
    - include: color-functions
    - include: color-constants

  # https://drafts.csswg.org/css-images-3/#typedef-image
  image-values:
    - include: cross-fade-functions
    - include: gradient-functions
    - include: image-functions
    - include: image-set-functions
    - include: url-functions

###[ BUILTIN FUNCTIONS ]#######################################################

  builtin-functions:
    - include: attr-functions
    - include: calc-functions
    - include: cross-fade-functions
    - include: filter-functions
    - include: gradient-functions
    - include: image-functions
    - include: image-set-functions
    - include: minmax-functions
    - include: url-functions
    - include: var-functions
    - include: color-adjuster-functions

    # filter()
    # https://drafts.fxtf.org/filters/#funcdef-filter
    - match: \b(filter)(?=\()
      scope: meta.function-call.identifier.css support.function.filter.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: filter-functions
            - include: image-values
            - include: quoted-strings

    # counter()
    # https://drafts.csswg.org/css-lists-3/#funcdef-counter
    # counters()
    # https://drafts.csswg.org/css-lists-3/#funcdef-counters
    - match: \b(counters|counter)(?=\()
      scope: meta.function-call.identifier.css support.function.counter.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - - meta_scope: meta.function-call.arguments.css meta.group.css
              - include: group-end
              - include: comma-delimiters
              - match: \b({{counter_styles}}|none)\b
                scope: support.constant.property-value.counter-style.css
              - include: var-functions
              - include: quoted-strings
              - include: unquoted-strings
            - counter-property-identifier

    # symbols()
    # https://drafts.csswg.org/css-counter-styles-3/#symbols-function
    - match: \b(symbols)(?=\()
      scope: meta.function-call.identifier.css support.function.counter.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - match: \b(cyclic|numeric|alphabetic|symbolic|fixed)\b
              scope: support.constant.symbol-type.css
            - include: var-functions
            - include: image-values
            - include: quoted-strings

    # format()
    # https://drafts.csswg.org/css-fonts-3/#descdef-src
    # format() is also mentioned in `issue 2` at https://drafts.csswg.org/css-images-3/#issues-index
    # but does not seem to be implemented in any manner
    - match: \b(format)(?=\()
      scope: meta.function-call.identifier.css support.function.font-face.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: quoted-strings

    # local()
    # https://drafts.csswg.org/css-fonts-3/#descdef-src
    - match: \b(local)(?=\()
      scope: meta.function-call.identifier.css support.function.font-face.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: quoted-strings
            - include: unquoted-strings

    # Transform Functions
    # https://www.w3.org/TR/css-transforms-1/#transform-functions

    # transform functions with comma separated <number> types
    # matrix(), scale(), matrix3d(), scale3d()
    - match: \b(matrix3d|scale3d|matrix|scale)(?=\()
      scope: meta.function-call.identifier.css support.function.transform.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: scalar-constants

    # transform functions with comma separated <number> or <length> types
    # translate(), translate3d()
    - match: \b(translate(3d)?)(?=\()
      scope: meta.function-call.identifier.css support.function.transform.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: percentage-constants
            - include: length-constants
            - include: scalar-constants

    # transform functions with a single <number> or <length> type
    # translateX(), translateY()
    - match: \b(translate[XY])(?=\()
      scope: meta.function-call.identifier.css support.function.transform.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: percentage-constants
            - include: length-constants
            - include: scalar-constants

    # transform functions with a single <angle> type
    # rotate(), skewX(), skewY(), rotateX(), rotateY(), rotateZ()
    - match: \b(rotate[XYZ]?|skew[XY])(?=\()
      scope: meta.function-call.identifier.css support.function.transform.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: angle-constants

    # transform functions with comma separated <angle> types
    # skew()
    - match: \b(skew)(?=\()
      scope: meta.function-call.identifier.css support.function.transform.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: angle-constants

    # transform functions with a single <length> type
    # translateZ(), perspective()
    - match: \b(translateZ|perspective)(?=\()
      scope: meta.function-call.identifier.css support.function.transform.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: length-constants

    # transform functions with a comma separated <number> or <angle> types
    # rotate3d()
    - match: \b(rotate3d)(?=\()
      scope: meta.function-call.identifier.css support.function.transform.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: angle-constants
            - include: scalar-constants

    # transform functions with a single <number> type
    # scaleX(), scaleY(), scaleZ()
    - match: \b(scale[XYZ])(?=\()
      scope: meta.function-call.identifier.css support.function.transform.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: scalar-constants

    # Timing Functions
    # https://www.w3.org/TR/web-animations-1/#timing-functions

    # cubic-bezier()
    # https://www.w3.org/TR/web-animations-1/#cubic-bzier-timing-function
    - match: \b(cubic-bezier)(?=\()
      scope: meta.function-call.identifier.css support.function.timing.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: scalar-constants

    # steps()
    # https://www.w3.org/TR/web-animations-1/#step-timing-function
    - match: \b(steps)(?=\()
      scope: meta.function-call.identifier.css support.function.timing.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - match: \b(end|middle|start)\b
              scope: support.keyword.timing-direction.css
            - include: var-functions
            - include: scalar-integer-constants

    # Shape Functions
    # https://www.w3.org/TR/css-shapes-1/#typedef-basic-shape

    # rect() - Deprecated
    # https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect
    - match: \b(rect)(?=\()
      scope: meta.function-call.identifier.css support.function.shape.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - match: \bauto\b
              scope: support.constant.property-value.css
            - include: var-functions
            - include: length-constants

    # inset()
    # https://www.w3.org/TR/css-shapes-1/#funcdef-inset
    - match: \b(inset)(?=\()
      scope: meta.function-call.identifier.css support.function.shape.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - match: \bround\b
              scope: keyword.other.css
            - include: var-functions
            - include: length-constants
            - include: percentage-constants

    # circle()
    # https://www.w3.org/TR/css-shapes-1/#funcdef-circle
    # ellipse()
    # https://www.w3.org/TR/css-shapes-1/#funcdef-ellipse
    - match: \b(circle|ellipse)(?=\()
      scope: meta.function-call.identifier.css support.function.shape.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - match: \bat\b
              scope: keyword.other.css
            - match: \b(top|right|bottom|left|center|closest-side|farthest-side)\b
              scope: support.constant.property-value.css
            - include: var-functions
            - include: length-constants
            - include: percentage-constants

    # polygon()
    # https://www.w3.org/TR/css-shapes-1/#funcdef-polygon
    - match: \b(polygon)(?=\()
      scope: meta.function-call.identifier.css support.function.shape.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - match: \b(nonzero|evenodd)\b
              scope: support.constant.property-value.css
            - include: calc-functions
            - include: var-functions
            - include: length-constants
            - include: percentage-constants

    # toggle()
    # https://www.w3.org/TR/css3-values/#toggle-notation
    - match: \b(toggle)(?=\()
      scope: meta.function-call.identifier.css support.function.toggle.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: vendor-prefixes
            - include: color-values
            - include: common-constants
            - include: numeric-constants
            - include: quoted-strings

    # repeat()
    # https://drafts.csswg.org/css-grid/#funcdef-repeat
    - match: \b(repeat)(?=\()
      scope: meta.function-call.identifier.css support.function.grid.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - match: \b(auto-fill|auto-fit)\b
              scope: support.keyword.repetitions.css
            - match: \b(max-content|min-content|auto)\b
              scope: support.constant.property-value.css
            - include: minmax-functions
            - include: var-functions
            - include: length-constants
            - include: percentage-constants
            - include: scalar-integer-constants
            - include: line-names

  # var()
  # https://drafts.csswg.org/css-variables/#funcdef-var
  var-functions:
    - match: \b(var)(?=\()
      scope: meta.function-call.identifier.css support.function.var.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: custom-properties
            - match: (?=,)
              push:
                - include: property-value-content

  # Filter Functions
  # https://drafts.fxtf.org/filters/#typedef-filter-function
  filter-functions:
    # blur()
    # https://drafts.fxtf.org/filters/#funcdef-filter-blur
    - match: \b(blur)(?=\()
      scope: meta.function-call.identifier.css support.function.filter.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: length-constants

    # brightness(), contrast(), grayscale(), invert(), opacity(), saturate(), sepia()
    # https://drafts.fxtf.org/filters/#funcdef-filter-brightness
    - match: \b(brightness|contrast|grayscale|invert|opacity|saturate|sepia)(?=\()
      scope: meta.function-call.identifier.css support.function.filter.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: percentage-constants
            - include: scalar-constants

    # drop-shadow()
    # https://drafts.fxtf.org/filters/#funcdef-filter-drop-shadow
    - match: \b(drop-shadow)(?=\()
      scope: meta.function-call.identifier.css support.function.filter.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: color-values
            - include: length-constants

    # hue-rotate()
    # https://drafts.fxtf.org/filters/#funcdef-filter-hue-rotate
    - match: \b(hue-rotate)(?=\()
      scope: meta.function-call.identifier.css support.function.filter.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: angle-constants

  # calc()
  # https://www.w3.org/TR/css3-values/#funcdef-calc
  calc-functions:
    - match: \b(calc)(?=\()
      scope: meta.function-call.identifier.css support.function.calc.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: calc-function-arguments-content

  calc-function-arguments-content:
    - meta_scope: meta.group.css
    - match: \)
      scope: punctuation.section.group.end.css
      set: maybe-illegal-operator
    - include: comments
    - include: attr-functions
    - include: calc-functions
    - include: var-functions
    - include: numeric-constants
    - match: '[-+*/]'
      scope: keyword.operator.arithmetic.css
    - match: \(
      scope: punctuation.section.group.begin.css
      push: calc-function-arguments-content

  # attr()
  # https://www.w3.org/TR/css3-values/#funcdef-attr
  attr-functions:
    - match: \b(attr)(?=\()
      scope: meta.function-call.identifier.css support.function.attr.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - attr-function-arguments-value
            - attr-function-arguments-identifier

  attr-function-arguments-identifier:
    - match: (?=\S)
      set:
        - include: qualified-names
        - include: quoted-string
        - include: var-functions
        - match: '{{ident}}'
          scope: entity.other.attribute-name.css
          pop: 1
        - include: immediately-pop

  attr-function-arguments-value:
    - meta_scope: meta.function-call.arguments.css meta.group.css
    - include: group-end
    - include: comma-delimiters
    - match: |-
        \b(?x:
            {{font_relative_lengths}}
          | {{viewport_percentage_lengths}}
          | {{absolute_lengths}}
          | {{angle_units}}
          | {{duration_units}}
          | {{frequency_units}}
          | {{resolution_units}}
        )\b
      scope: keyword.other.unit.css
    - include: var-functions
    - include: color-values
    - include: common-constants
    - include: numeric-constants

  # url()
  # https://drafts.csswg.org/css-images-3/#url-notation
  url-functions:
    - match: \b(url)(?=\()
      scope: meta.function-call.identifier.css support.function.url.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: quoted-strings
            - include: unquoted-strings

  # url-prefix()
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#url-prefix
  url-prefix-functions:
    - match: \b(url-prefix)(?=\()
      scope: meta.function-call.identifier.css support.function.url-prefix.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: quoted-strings
            - include: unquoted-strings

  # domain()
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#url-domain
  domain-functions:
    - match: \b(domain)(?=\()
      scope: meta.function-call.identifier.css support.function.domain.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: quoted-strings
            - include: unquoted-strings

  # regexp()
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#url-regexp
  regexp-functions:
    - match: \b(regexp)(?=\()
      scope: meta.function-call.identifier.css support.function.regexp.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: quoted-strings

  # image()
  # https://drafts.csswg.org/css-images-3/#funcdef-image
  image-functions:
    - match: \b(image)(?=\()
      scope: meta.function-call.identifier.css support.function.image.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: color-values
            - include: image-values
            - include: quoted-strings
            - include: unquoted-strings

  # image-set()
  # https://drafts.csswg.org/css-images-3/#funcdef-image-set
  image-set-functions:
    - match: \b(image-set)(?=\()
      scope: meta.function-call.identifier.css support.function.image.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: color-values
            - include: image-values
            - include: resolution-constants
            - match: ([0-9]+)(x)
              scope: meta.number.integer.decimal.css
              captures:
                1: constant.numeric.value.css
                2: constant.numeric.suffix.css
            - include: quoted-strings
            - include: unquoted-strings

  # Gradient Functions
  # https://drafts.csswg.org/css-images-3/#gradients
  gradient-functions:
    # linear-gradient()
    # https://drafts.csswg.org/css-images-3/#linear-gradients
    # repeating-linear-gradient()
    # https://drafts.csswg.org/css-images-3/#funcdef-repeating-linear-gradient
    - match: \b((?:repeating-)?linear-gradient)(?=\()
      scope: meta.function-call.identifier.css support.function.gradient.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - match: \bto\b
              scope: keyword.other.css
            - match: \b(top|right|bottom|left)\b
              scope: support.constant.property-value.css
            - include: var-functions
            - include: color-values
            - include: angle-constants
            - include: length-constants
            - include: percentage-constants

    # radial-gradient()
    # https://drafts.csswg.org/css-images-3/#radial-gradients
    # repeating-radial-gradient()
    # https://drafts.csswg.org/css-images-3/#funcdef-repeating-radial-gradient
    - match: \b((?:repeating-)?radial-gradient)(?=\()
      scope: meta.function-call.identifier.css support.function.gradient.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - match: \b(at|circle|ellipse)\b
              scope: keyword.other.css
            - match: \b(left|center|right|top|bottom|(closest|farthest)-(corner|side))\b
              scope: support.constant.property-value.css
            - include: var-functions
            - include: color-values
            - include: length-constants
            - include: percentage-constants

  # cross-fade()
  # https://drafts.csswg.org/css-images-3/#cross-fade-functions
  cross-fade-functions:
    - match: \b(cross-fade)(?=\()
      scope: meta.function-call.identifier.css support.function.image.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: color-values
            - include: image-values
            - include: percentage-constants
            - include: quoted-strings
            - include: unquoted-strings

  # minmax()
  # https://drafts.csswg.org/css-grid/#valdef-grid-template-columns-minmax
  minmax-functions:
    - match: \b(minmax)(?=\()
      scope: meta.function-call.identifier.css support.function.grid.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - match: \b(auto|max-content|min-content)\b
              scope: support.constant.property-value.css
            - include: var-functions
            - include: length-constants
            - include: percentage-constants

  # Color Functions
  # https://drafts.csswg.org/css-color
  color-functions:
    # rgb(), rgba()
    # https://drafts.csswg.org/css-color/#rgb-functions
    - match: \b(rgba?)(?=\()
      scope: meta.function-call.identifier.css support.function.color.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: percentage-constants
            - include: scalar-constants

    # hsl(), hsla()
    # https://drafts.csswg.org/css-color/#the-hsl-notation
    # hwb() - Not yet implemented by browsers
    # https://drafts.csswg.org/css-color/#funcdef-hwb
    - match: \b(hsla?|hwb)(?=\()
      scope: meta.function-call.identifier.css support.function.color.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: angle-constants
            - include: percentage-constants
            - include: scalar-constants

    # gray() - Not yet implemented by browsers
    # https://drafts.csswg.org/css-color/#funcdef-gray
    - match: \b(gray)(?=\()
      scope: meta.function-call.identifier.css support.function.color.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: percentage-constants
            - include: scalar-constants

    # device-cmyk() - Not yet implemented by browsers
    # https://drafts.csswg.org/css-color/#funcdef-device-cmyk
    - match: \b(device-cmyk)(?=\()
      scope: meta.function-call.identifier.css support.function.color.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: color-adjuster-functions # must be included before `color-values`
            - include: color-values
            - include: percentage-constants
            - include: scalar-constants

    # color-mod() - Not yet implemented by browsers
    # https://drafts.csswg.org/css-color/#funcdef-color-mod
    - match: \b(color)(?=\()
      scope: meta.function-call.identifier.css support.function.color.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: comma-delimiters
            - include: var-functions
            - include: color-adjuster-functions # must be included before `color-values`
            - include: color-values
            - include: angle-constants
            - include: scalar-constants

  # Color Adjuster Functions - Not yet implemented by browsers
  # https://drafts.csswg.org/css-color/#typedef-color-adjuster
  color-adjuster-functions:
    # red(), green(), blue(), alpha() - Not yet implemented by browsers
    - match: \b(red|green|blue|alpha|a)(?=\()
      scope: meta.function-call.identifier.css support.function.color.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: color-adjuster-operators
            - include: percentage-constants
            - include: scalar-constants

    # hue() - Not yet implemented by browsers
    - match: \b(hue|h)(?=\()
      scope: meta.function-call.identifier.css support.function.color.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: color-adjuster-operators
            - include: angle-constants

    # saturation(), lightness(), whiteness(), blackness() - Not yet implemented by browsers
    - match: \b(saturation|lightness|whiteness|blackness|[slwb])(?=\()
      scope: meta.function-call.identifier.css support.function.color.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: color-adjuster-operators
            - include: percentage-constants

    # tint(), shade(), contrast() - Not yet implemented by browsers
    # contrast() interferes with the contrast() filter function;
    # therefore, it is not yet implemented here
    - match: \b(tint|shade)(?=\()
      scope: meta.function-call.identifier.css support.function.color.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - include: var-functions
            - include: percentage-constants

    # blend(), blenda() - Not yet implemented by browsers
    - match: \b(blenda|blend)(?=\()
      scope: meta.function-call.identifier.css support.function.color.css
      push:
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.arguments.css meta.group.css
            - include: group-end
            - match: \b(rgb|hsl|hwb)\b
              scope: keyword.other.color-space.css
            - include: var-functions
            - include: color-values
            - include: percentage-constants

###[ OPERATORS ]###############################################################

  color-adjuster-operators:
    - match: '[-+*](?=\s)'
      scope: keyword.operator.arithmetic.css
    - match: '[-+*/]'
      scope: invalid.illegal.operator.css

  maybe-illegal-operator:
    - match: '[-+](?=\s*\d)'
      scope: invalid.illegal.operator.css
      pop: 1
    - match: \s*([-+])(?=\d)
      captures:
        1: invalid.illegal.operator.css
      pop: 1
    - include: immediately-pop

###[ PUNCTUATION ]#############################################################

  comma-delimiters:
    - match: ','
      scope: punctuation.separator.sequence.css

  group-end:
    - match: \)
      scope: punctuation.section.group.end.css
      pop: 1
    - include: comments

  rule-terminator:
    - match: ;
      scope: punctuation.terminator.rule.css
      pop: 1

  eol-pop:
    - match: $
      pop: 1

  else-pop:
    - match: (?=\S)
      pop: 1

  immediately-pop:
    - match: ''
      pop: 1

###[ CONSTANTS ]###############################################################

  color-constants:
    # https://www.w3.org/TR/CSS22/syndata.html#color-units
    - match: '{{standard_colors}}'
      scope: support.constant.color.w3c.standard.css
    # https://www.w3.org/TR/css3-color/#svg-color
    - match: '{{extended_colors}}'
      scope: support.constant.color.w3c.extended.css
    # Special Color Keywords
    # https://www.w3.org/TR/css3-color/#currentcolor
    # https://www.w3.org/TR/css3-color/#transparent-def
    - match: \b(?i:currentColor|transparent)\b
      scope: support.constant.color.w3c.special.css
    # Hex Color
    - match: (#)(\h{3}|\h{6})\b
      scope: constant.other.color.rgb-value.css
      captures:
        1: punctuation.definition.constant.css
    # RGBA Hexadecimal Colors
    # https://en.wikipedia.org/wiki/RGBA_color_space#RGBA_hexadecimal_.28word-order.29
    - match: (#)(\h{4}|\h{8})\b
      scope: constant.other.color.rgba-value.css
      captures:
        1: punctuation.definition.constant.css

  common-constants:
    - match: '{{property_values}}'
      scope: support.constant.property-value.css
    # Generic Font Families
    # https://www.w3.org/TR/CSS22/fonts.html#generic-font-families
    - match: \b(?i:sans-serif|serif|monospace|fantasy|cursive|system-ui)\b
      scope: support.constant.font-name.css

  # Custom Properties
  # https://drafts.csswg.org/css-variables/#typedef-custom-property
  custom-properties:
    # custom property reference
    - match: (--){{nmchar}}+
      scope: variable.other.custom-property.css
      captures:
        1: punctuation.definition.custom-property.css

###[ NUMERIC CONSTANTS ]#######################################################

  # https://www.w3.org/TR/css3-values/#numeric-constantss
  numeric-constants:
    - include: angle-constants
    - include: frequency-constants
    - include: length-constants
    - include: resolution-constants
    - include: percentage-constants
    - include: time-constants
    - include: scalar-constants

  # Make sure `scalar-constants` is included after any other numeric values
  # as `scalar-constants` will consume all numeric values.
  scalar-constants:
    - include: scalar-float-constants
    - include: scalar-integer-constants

  scalar-float-constants:
    - match: '{{float}}'
      scope: meta.number.float.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: punctuation.separator.decimal.css
      push: maybe-illegal-operator

  scalar-integer-constants:
    - match: '{{integer}}'
      scope: meta.number.integer.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
      push: maybe-illegal-operator

  angle-constants:
    - match: '{{float}}({{angle_units}})\b'
      scope: meta.number.float.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: punctuation.separator.decimal.css
        4: constant.numeric.suffix.css
      push: maybe-illegal-operator
    - match: '{{integer}}({{angle_units}})\b'
      scope: meta.number.integer.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: constant.numeric.suffix.css
      push: maybe-illegal-operator
    - match: \b0\b(?!%)
      scope: meta.number.integer.decimal.css constant.numeric.value.css
      push: maybe-illegal-operator

  frequency-constants:
    - match: '{{float}}({{frequency_units}})\b'
      scope: meta.number.float.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: punctuation.separator.decimal.css
        4: constant.numeric.suffix.css
      push: maybe-illegal-operator
    - match: '{{integer}}({{frequency_units}})\b'
      scope: meta.number.integer.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: constant.numeric.suffix.css
      push: maybe-illegal-operator

  length-constants:
    - match: '{{float}}({{font_relative_lengths}}|{{viewport_percentage_lengths}}|{{absolute_lengths}})\b'
      scope: meta.number.float.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: punctuation.separator.decimal.css
        4: constant.numeric.suffix.css
      push: maybe-illegal-operator
    - match: '{{integer}}({{font_relative_lengths}}|{{viewport_percentage_lengths}}|{{absolute_lengths}})\b'
      scope: meta.number.integer.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: constant.numeric.suffix.css
      push: maybe-illegal-operator
    - match: \b0\b(?!%)
      scope: meta.number.integer.decimal.css constant.numeric.value.css
      push: maybe-illegal-operator

  resolution-constants:
    - match: '{{float}}({{resolution_units}})\b'
      scope: meta.number.float.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: punctuation.separator.decimal.css
        4: constant.numeric.suffix.css
      push: maybe-illegal-operator
    - match: '{{integer}}({{resolution_units}})\b'
      scope: meta.number.integer.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: constant.numeric.suffix.css
      push: maybe-illegal-operator

  percentage-constants:
    - match: '{{float}}(%)'
      scope: meta.number.float.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: punctuation.separator.decimal.css
        4: constant.numeric.suffix.css
      push: maybe-illegal-operator
    - match: '{{integer}}(%)'
      scope: meta.number.integer.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: constant.numeric.suffix.css
      push: maybe-illegal-operator

  time-constants:
    - match: '{{float}}({{duration_units}})\b'
      scope: meta.number.float.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: punctuation.separator.decimal.css
        4: constant.numeric.suffix.css
      push: maybe-illegal-operator
    - match: '{{integer}}({{duration_units}})\b'
      scope: meta.number.integer.decimal.css
      captures:
        1: keyword.operator.arithmetic.css
        2: constant.numeric.value.css
        3: constant.numeric.suffix.css
      push: maybe-illegal-operator

###[ STRING CONSTANTS ]########################################################

  # Named Grid Lines
  # https://drafts.csswg.org/css-grid/#named-lines
  line-names:
    - match: \[
      scope: punctuation.section.brackets.begin.css
      push:
        - meta_scope: meta.line-names.css meta.brackets.css
        - match: '{{ident}}'
          scope: meta.string.css string.unquoted.line-name.css
        - match: \]
          scope: punctuation.section.brackets.end.css
          pop: 1

  quoted-strings:
    - match: \"
      scope: punctuation.definition.string.begin.css
      push: double-quoted-string-content
    - match: \'
      scope: punctuation.definition.string.begin.css
      push: single-quoted-string-content

  quoted-string:
    - match: \"
      scope: punctuation.definition.string.begin.css
      set: double-quoted-string-content
    - match: \'
      scope: punctuation.definition.string.begin.css
      set: single-quoted-string-content

  double-quoted-string-content:
    - meta_include_prototype: false
    - meta_scope: meta.string.css string.quoted.double.css
    - match: \"
      scope: punctuation.definition.string.end.css
      pop: 1
    - include: string-content

  single-quoted-string-content:
    - meta_include_prototype: false
    - meta_scope: meta.string.css string.quoted.single.css
    - match: \'
      scope: punctuation.definition.string.end.css
      pop: 1
    - include: string-content

  string-content:
    - meta_include_prototype: false
    - match: \n
      scope: invalid.illegal.newline.css
      pop: 1
    - match: \\\s*\n
      scope: constant.character.escape.newline.css
    - match: \\(?:\h{1,6}|.)
      scope: constant.character.escape.css

  unquoted-strings:
    - match: '[^\s''"]'
      scope: meta.string.css string.unquoted.css

  unquoted-name-strings:
    - match: '{{ident}}(?:\s+{{ident}}(?!\())*'
      scope: meta.string.css string.unquoted.css

  unicode-ranges:
    - match: |-
        (?xi:
          (u\+)
          ([0-9a-f?]{1,6}
          (?:(-)[0-9a-f]{1,6})?)
        )
      scope: support.unicode-range.css
      captures:
        1: support.constant.unicode-range.prefix.css
        2: constant.codepoint-range.css
        3: punctuation.section.range.css
