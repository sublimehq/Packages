%YAML 1.2
---
name: JSON
scope: source.json
version: 2

file_extensions:
  - json
  - sublime-build
  - sublime-color-scheme
  - sublime-commands
  - sublime-completions
  - sublime-keymap
  - sublime-macro
  - sublime-menu
  - sublime-mousemap
  - sublime-project
  - sublime-settings
  - sublime-theme
  - sublime-workspace
  - ipynb
  - Pipfile.lock
  - gltf

first_line_match: |-
  (?xi:
    ^ \s* // .*? -\*- .*? \bjson\b .*? -\*-  # editorconfig
  )

contexts:

  prototype:
    - include: comments

  main:
    - include: value

  value:
    - include: constant
    - include: number
    - include: string
    - include: array
    - include: object

  array:
    - match: \[
      scope: punctuation.section.sequence.begin.json
      push:
        - meta_scope: meta.sequence.json
        - match: \]
          scope: punctuation.section.sequence.end.json
          pop: 1
        - include: value
        - match: ','
          scope: punctuation.separator.sequence.json
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-sequence-separator.json

  comments:
    - include: line-comments
    - include: block-comments

  block-comments:
    # empty block comments
    - match: /\*\*+/
      scope: comment.block.empty.json punctuation.definition.comment.json
    # documentation block comments
    - match: (/\*)(\*+)
      captures:
        1: punctuation.definition.comment.begin.json
        2: meta.fold.begin.json punctuation.definition.comment.begin.json
      push: jsdoc-comment-body
    # normal block comments
    - match: /\*
      scope: meta.fold.begin.json punctuation.definition.comment.begin.json
      push: block-comment-body

  block-comment-end:
    - match: (\**)(\*/)
      captures:
        1: punctuation.definition.comment.end.json
        2: meta.fold.end.json punctuation.definition.comment.end.json
      pop: true

  block-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.json
    - include: block-comment-end

  jsdoc-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.documentation.json
    - include: block-comment-end
    - match: ^\s*(\*)(?!/)
      captures:
        1: punctuation.definition.comment.json

  line-comments:
    - match: //+
      scope: punctuation.definition.comment.json
      push: line-comment-body

  line-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.double-slash.json
    - match: (//+)?\n
      captures:
        1: punctuation.definition.comment.json
      pop: 1

  constant:
    - match: \b(?:false|true)\b
      scope: constant.language.boolean.json
    - match: \bnull\b
      scope: constant.language.null.json

  number:
    # handles integer and decimal numbers
    - match: (-?)((?:0|[1-9]\d*)(?:(?:(\.)\d+)(?:[eE][-+]?\d+)?|(?:[eE][-+]?\d+)))
      scope: meta.number.float.decimal.json
      captures:
        1: keyword.operator.arithmetic.json
        2: constant.numeric.value.json
        3: punctuation.separator.decimal.json
    - match: (-?)(0|[1-9]\d*)
      scope: meta.number.integer.decimal.json
      captures:
        1: keyword.operator.arithmetic.json
        2: constant.numeric.value.json

  object:
    # a JSON object
    - match: \{
      scope: punctuation.section.mapping.begin.json
      push:
        - meta_scope: meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: 1
        - match: \"
          scope: punctuation.definition.string.begin.json
          push:
            - clear_scopes: 1
            - meta_scope: meta.mapping.key.json string.quoted.double.json
            - meta_include_prototype: false
            - include: inside-string
        - match: ':'
          scope: punctuation.separator.key-value.json
          push:
            - match: ',|\s?(?=\})'
              scope: invalid.illegal.expected-mapping-value.json
              pop: 1
            - match: (?=\S)
              set:
                - clear_scopes: 1
                - meta_scope: meta.mapping.value.json
                - include: value
                - match: ''
                  set:
                    - match: ','
                      scope: punctuation.separator.sequence.json
                      pop: 1
                    - match: \s*(?=\})
                      pop: 1
                    - match: \s(?!/[/*])(?=[^\s,])|[^\s,]
                      scope: invalid.illegal.expected-mapping-separator.json
                      pop: 1
        - match: '[^\s\}]'
          scope: invalid.illegal.expected-mapping-key.json

  string:
    - match: \"
      scope: punctuation.definition.string.begin.json
      push: inside-string

  inside-string:
    - meta_scope: string.quoted.double.json
    - meta_include_prototype: false
    - match: \"
      scope: punctuation.definition.string.end.json
      pop: 1
    - include: string-escape
    - match: \n
      scope: invalid.illegal.unclosed-string.json
      pop: 1

  string-escape:
    - match: |-
        (?x:                # turn on extended mode
          \\                # a literal backslash
          (?:               # ...followed by...
            ["\\/bfnrt]     # one of these characters
            |               # ...or...
            u               # a u
            [0-9a-fA-F]{4}  # and four hex digits
          )
        )
      scope: constant.character.escape.json
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.json
