%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
name: TeX
scope: text.tex
version: 2

file_extensions:
  - sty
  - cls

variables:
  greeks: |-
    (?x: alpha | beta | gamma | delta | epsilon | varepsilon | zeta | eta | theta
    | vartheta | iota | kappa | lambda | mu | nu | xi | o | pi | varpi | rho
    | varrho | sigma | varsigma | tau | upsilon | phi | varphi | chi | psi
    | omega | Gamma | Delta | Theta | Lambda | Xi | Pi | Sigma | Upsilon | Phi
    | Psi | Omega )
  mathfun: |-
    (?x: arccos | cos | csc | exp | ker | limsup | min | sinh
    | arcsin | cosh | deg | gcd | lg | ln | Pr | sup
    | arctan | cot | det | hom | lim | log | sec | tan
    | arg | coth | dim | inf | liminf | max | sin | tan | pmod | bmod)
  relations: |-
    (?x: leq | lq | geq | ge | equiv | prec | succ | sim
    | preceq | succeq | simeq | ll | gg | subset | supset | approx
    | subseteq | supseteq | cong | sqsubseteq | sqsupseteq | bowtie
    | in | notin | ne | ni | owns | vdash | dashv | models | smile | mid
    | doteq | frown | parallel | perp | propto)
  largeops: |-
    (?x: sum | prod | coprod | int | oint | bigcap | bigcup | bigsqcup
    | bigvee | bigwedge | bigodot | bigotimes | bigoplus | biguplus)
  binops: |-
    (?x: pm | mp | setminus | cdot | times | ast | star | diamond | circ | bullet
    | div | cap | cup | uplus | sqcap | sqcup | triangleleft | triangleright
    | wr | bigcirc | bigtriangleup | bigtriangledown | vee | lor
    | wedge | land | oplus | ominus | otimes | oslash | odot | dagger
    | ddagger | amalg)
  accents: |-
    (?x: hat | widehat | check | tilde | widetilde | acute | grave | dot
    | ddot | breve | bar | vec)
  symbols: |-
    (?x: aleph | hbar | imath | jmath | ell | wp | Re | Im | partial | infty
    | prime | emptyset | nabla | surd | top | bot | \| | angle | triangle
    | backslash | forall | exists | neg | lnot | flat | natural | sharp
    | clubsuit | diamondsuit | heartsuit | spadesuit)
  arrows: |-
    (?x: leftarrow | gets | longleftarrow | Leftarrow | Longleftarrow
    | rightarrow | to | longrightarrow | Rightarrow | Longrightarrow
    | leftrightarrow | longleftrightarrow | Leftrightarrow
    | Longleftrightarrow | mapsto | longmapsto | hookleftarrow
    | hookrightarrow | uparrow | Uparrow | downarrow | Downarrow
    | updownarrow | Updownarrow | nearrow | searrow | nwarrow | swarrow)
  delimiters: |-
    (?x: lbrack | lbrace | langle | rbrack | rbrace | rangle
    | vert | lfloor | lceil | Vert | rfloor | rceil)

  registers: |-
    (?x: box | count | dimen | muskip | skip | toks)

  # here, we define variables for the names of the constants and parameters
  # of the TeX algorithm. Some of these are defined in terms of pre-reserved
  # registers instead of built-ins, but in terms of syntax highlighting this
  # should not make a difference
  penalties: |-
    (?x: line | hyphen | exhyphen | binop | rel | club | widow
    | displaywidow | broken | predisplay | postdisplay | interline
    | floating | output | inter(?:display|footnote)line)

  tracings: |-
    (?x: online | macros | stats | paragraphs | pages | output | lostchars
    | commands | restores)

  skips: |-
    (?x: baseline | line | par | (?:above|below)display(?:short)?
    | left | right | top | splittop | tab | space | xspace | parfill
    | (?:thin|med|thick)mu | normalbaseline | normalline | hide)

  constants: |-
    (?x: (?:pre)?tolerance | [hv]badness
    | (?:doublehyphen|finalhyphen|adj)demerits
    | looseness | pausing | holdinginserts | language | uchyph | lefthyphenmin
    | righthyphenmin | globaldefs | maxdeadcycles | hangafter | fam | mag
    | (?:escape|defaulthyphen|defaultskew|endline|newline)char
    | delimiterfactor | time | day | month | year
    | showboxbreadth | showboxdepth | errorcontextlines
    | [hv]fuzz | overfullrule | [hv]size | maxdepth | splitmaxdepth
    | boxmaxdepth | lineskiplimit | delimitershortfall | nulldelimiterspace
    | scriptspace | mathsurround | predisplaysize | displaywidth | displayindent
    | parindent | hangindent | [hv]offset | (?:small|med|big)skipamount
    | normallineskiplimit | jot | {{skips}}skip | tracing{{tracings}}
    | {{penalties}}penalty | maxdimen | centering | p@ | z@ | z@skip | voidb@x
    | magstephalf | magstep\d | @ne | tw@ | thr@@ | sixt@@n | @cclv | @cclvi
    | @m | @M | @MM | m@ne | count@ | dimen@ | dimen@i | dimen@ii | skip@
    | toks@ | insc@unt | allocationnumber)

  # These constants are implemented as macros, and thus cannot be = assigned
  macroconst: |-
    (?x: (?:thin|negthin|en)space | enskip | q?quad | (?:small|med|big)skip
    | [lr]q | [lr]brack | space | empty | null )

  dimunits: |-
    (?x: pt | pc | bp | in | cm | mm | dd | cc | sp | ex | em
    | fil | fill | filll | mu)

  # letters in the sense of macro names. Whether @ is a letter or not can vary
  # from a syntax-highlighting perspective, however, we are much safer to
  # assume it is a letter. Situations where we have `\macro` followed immediately
  # by `@text` that is to be typeset should be very rare, and if it happens, the
  # user can still put an explicit space (ignored by TeX) to ensure correct
  # highlighting. On the other hand, within packages we get lots of \module@macro
  # type names, and if they were highlighted wrongly the user could not fix this.
  letter: '[A-Za-z@]'
  nonletter: '[^A-Za-z@]'
  # look-ahead for end of command sequence
  endcs: '(?!{{letter}})'
  # a command name: either a sequence of letters, or a single non-letter
  cmdname: '(?x: {{letter}}+ | {{nonletter}})'
  # hexadecimal digits in different casing
  lchexdigit: (?:[0-9a-f])
  uchexdigit: (?:[0-9A-F])
  anyhexdigit: (?:[0-9a-fA-F])
  # special notation to refer to (non-printable) characters in TeX
  charbycode: (?:\^\^(?:{{lchexdigit}}{{lchexdigit}}|.))

contexts:
  prototype:
    - include: comments

  main:
    - include: macros
    - include: controls
    - include: character-codes
    - include: braces
    - include: boxes
    - include: block-math
    - include: inline-math
    - include: registers
    - include: tex-constants
    - include: general-constants
    - include: general-commands

###[ COMMENTS ]#################################################################

  comments:
    - match: '%.*$\n?'
      scope: comment.line.percentage.tex

###[ BLOCKS ]###################################################################

  braces:
    - match: \{
      scope: punctuation.definition.group.brace.begin.tex
      push: brace-group-body

  brace-group-begin:
    - meta_include_prototype: false
    - match: \{
      scope: punctuation.definition.group.brace.begin.tex
      pop: 1

  brace-group-body:
    - meta_scope: meta.group.brace.tex
    - include: brace-group-end
    - include: main

  brace-group-end:
    - match: \}
      scope: punctuation.definition.group.brace.end.tex
      pop: 1

  boxes:
    - match: ((\\)[hv]box)\s*(\{)
      captures:
        1: support.function.box.tex
        2: punctuation.definition.backslash.tex
        3: punctuation.definition.group.brace.begin.tex
      push: box-body

  box-body:
    - meta_scope: meta.function.box.tex
    - include: brace-group-end
    - include: main

###[ CHARACTER CODES ]##########################################################

  character-codes:
    - match: (\\)(?:cat|math|uc|lc|del|sf)code{{endcs}}
      scope: keyword.control.character-code.tex
      captures:
        1: punctuation.definition.backslash.tex
      push:
        - character-code-meta
        - character-code-value
        - tex-assignment
        - character-code-number

  character-code-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function.character-code.tex
    - include: immediately-pop

  character-code-number:
    - include: tex-simple-integer
    - include: else-pop
    - include: paragraph-pop

  character-code-assignment:
    - match: =
      scope: keyword.operator.assignment.tex
      pop: 1
    - include: else-pop
    - include: paragraph-pop

  character-code-value:
    - include: tex-simple-integer
    - include: else-pop
    - include: paragraph-pop

###[ CONTROLS ]#################################################################

  controls:
    - match: (\\)ifcase{{endcs}}
      scope: keyword.control.conditional.switch.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)or{{endcs}}
      scope: keyword.control.conditional.case.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)loop{{endcs}}
      scope: keyword.control.loop.do-while.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)repeat{{endcs}}
      scope: keyword.control.loop.end.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)expandafter{{endcs}}
      scope: keyword.control.flow.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)if(?:cat|dim|eof|false|hbox|hmode|inner|mmode|num|odd|true|undefined|vbox|vmode|void|x)?{{endcs}}
      scope: keyword.control.conditional.if.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)else{{endcs}}
      scope: keyword.control.conditional.else.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)fi{{endcs}}
      scope: keyword.control.conditional.end.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)input{{endcs}}
      scope: meta.function.input.tex keyword.control.input.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)relax{{endcs}}
      scope: keyword.control.flow.relax.tex
      captures:
        1: punctuation.definition.backslash.tex

###[ COMMANDS ]#################################################################

  general-commands:
    - match: (\\){{letter}}+
      scope: support.function.general.tex
      captures:
        1: punctuation.definition.backslash.tex

###[ CONSTANTS ]################################################################

  general-constants:
    - match: \\\\
      scope: constant.character.newline.tex
    - match: '&'
      scope: constant.character.ampersand.tex
    - match: '~'
      scope: constant.character.space.tex
    - include: escaped-character

  escaped-character:
    - match: (\\){{nonletter}}
      scope: constant.character.escape.tex
      captures:
        1: punctuation.definition.backslash.tex

  tex-constants:
    - match: (\\){{constants}}{{endcs}}
      scope: support.function.tex
      captures:
        1: punctuation.definition.backslash.tex
      push:
        - tex-dimension-value
        - tex-assignment
    - match: (\\){{macroconst}}{{endcs}}
      scope: support.function.tex
      captures:
        1: punctuation.definition.backslash.tex

###[ REGISTERS ]################################################################

  registers:
    - include: register-allocations
    - include: register-definitions

  register-allocations:
    - match: (\\)new{{registers}}{{endcs}}
      scope: keyword.declaration.register.tex storage.modifier.register.tex
      captures:
        1: punctuation.definition.backslash.tex
      push: register-allocation-identifier

  register-allocation-identifier:
    - meta_scope: meta.register.tex
    - match: (?=\{)
      set:
        - register-allocation-wrapped-identifier
        - brace-group-begin
    - match: (\\){{cmdname}}
      scope: entity.name.constant.tex
      captures:
        1: punctuation.definition.backslash.tex
      pop: 1
    - include: paragraph-pop
    - include: else-pop

  register-allocation-wrapped-identifier:
    - meta_scope: meta.register.tex meta.group.brace.tex
    - include: brace-group-end
    - match: (\\){{cmdname}}
      scope: entity.name.constant.tex
      captures:
        1: punctuation.definition.backslash.tex

  register-definitions:
    - match: (\\)({{registers}}){{endcs}}
      captures:
        1: punctuation.definition.backslash.tex
        2: storage.type.tex
      push: 
        - tex-dimension-value
        - tex-assignment
        - register-definition-identifier

  register-definition-identifier:
    - meta_scope: meta.register.tex
    - match: (\\){{cmdname}}
      scope: support.function.general.tex
      captures:
        1: punctuation.definition.backslash.tex
      pop: 1
    - include: tex-simple-integer
    - include: paragraph-pop
    - include: else-pop

###[ NUMBERS ]##################################################################

  # These match integers/floats that are written in a simple form, i.e. not extending
  # across lines
  # we are also not handling the case where there are multiple signs

  tex-simple-integer:
    - match: ([+-]?)\s*\d+
      scope: meta.number.integer.decimal.tex constant.numeric.value.tex
      captures:
        1: keyword.operator.arithmetic.tex
      pop: 1
    - match: ([+-]?)\s*"{{uchexdigit}}+
      scope: meta.number.integer.hexadecimal.tex constant.numeric.value.tex
      captures:
        1: keyword.operator.arithmetic.tex
      pop: 1
    - match: ([+-]?)\s*'[0-7]+
      scope: meta.number.integer.octal.tex constant.numeric.value.tex
      captures:
        1: keyword.operator.arithmetic.tex
      pop: 1
    - match: ([+-]?)\s*(`)(\\)?({{charbycode}}|.)
      scope: meta.number.integer.tex constant.numeric.value.tex
      captures:
        1: keyword.operator.arithmetic.tex
        2: keyword.operator.tex
        3: punctuation.definition.backslash.tex
        4: constant.character.tex
      pop: 1


###[ DIMENSIONS ]###############################################################

  tex-assignment:
    - match: =
      scope: keyword.operator.assignment.tex
      pop: 1
    - include: else-pop
    - include: paragraph-pop

  tex-dimension-value:
    - match: (-?)(?:\d+(\.)\d*|(\.)\d+)
      scope: constant.numeric.value.tex
      captures:
        1: keyword.operator.arithmetic.tex
        2: punctuation.separator.decimal.tex
        3: punctuation.separator.decimal.tex
      set:
        - tex-dimension-glue
        - tex-dimension-decimal-float
    - match: (-?)\d+
      scope: constant.numeric.value.tex
      captures:
        1: keyword.operator.arithmetic.tex
      set:
        - tex-dimension-glue
        - tex-dimension-decimal-integer
    - match: (`)(\\)?({{charbycode}}|.)
      captures:
        1: keyword.operator.tex
        2: punctuation.definition.backslash.tex
        3: constant.character.tex
      set:
        - tex-dimension-glue
        - tex-dimension-decimal-integer
    - include: else-pop
    - include: paragraph-pop

  tex-dimension-glue:
    - match: (?:plus|minus){{endcs}}
      scope: keyword.operator.arithmetic.tex
      set: tex-dimension-value
    - include: else-pop
    - include: paragraph-pop

  tex-dimension-decimal-float:
    - meta_scope: meta.number.float.decimal.tex
    - include: tex-dimension-suffix

  tex-dimension-decimal-integer:
    - meta_scope: meta.number.integer.decimal.tex
    - include: tex-dimension-suffix

  tex-dimension-suffix:
    - match: '{{dimunits}}'
      scope: constant.numeric.suffix.tex
      pop: 1
    - include: else-pop
    - include: paragraph-pop

###[ MACROS ]##################################################################

  macros:
    - match: (\\)[gex]?def{{endcs}}
      scope: keyword.declaration.function.tex storage.modifier.definition.tex
      captures:
        1: punctuation.definition.backslash.tex
      push: def-function-expect-identifier

    - match: (\\)(?:outer|long|global){{endcs}}
      scope: storage.modifier.definition.tex
      captures:
        1: punctuation.definition.backslash.tex

  def-function-expect-identifier:
    - meta_scope: meta.function.tex
    - match: (?=\\)
      set: def-function-identifier
    - include: paragraph-pop
    - include: else-pop

  def-function-identifier:
    - meta_scope: meta.function.identifier.tex
    - match: (\\){{cmdname}}
      scope: entity.name.definition.tex
      captures:
        1: punctuation.definition.backslash.tex
      set: def-function-parameters
    - include: paragraph-pop
    - include: else-pop

  def-function-parameters:
    - meta_content_scope: meta.function.parameters.tex
    - match: (?=\{)
      set:
        - def-function-body-meta
        - macro-braces-begin
    - match: (\#)[0-9]
      scope: variable.parameter.tex
      captures:
        1: punctuation.definition.variable.tex
    - include: escaped-character
    - include: paragraph-pop

  def-function-body-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function.body.tex
    - include: immediately-pop

  macro-braces:
    - match: \{
      scope: punctuation.definition.group.brace.begin.tex
      push: macro-braces-body

  macro-braces-begin:
    - match: \{
      scope: punctuation.definition.group.brace.begin.tex
      set: macro-braces-body

  macro-braces-end:
     - match: \}
       scope: punctuation.definition.group.brace.end.tex
       pop: 1

  macro-braces-body:
    - meta_scope: meta.group.brace.tex
    - include: macro-braces-end
    - include: macro-braces-content

  # within macros, it is possible that only part of some nested struture
  # is present. Don't include any context's here that break if they are
  # only partially matched.
  macro-braces-content:
    - include: macro-braces
    - include: macro-placeholders
    - include: controls
    - include: registers
    - include: math-builtin
    - include: tex-constants
    - include: general-constants
    - include: general-commands

  macro-placeholders:
    - match: '(#+)(\d)'
      scope: variable.parameter.tex
      captures:
        1: punctuation.definition.placeholder.tex
        2: meta.number.integer.decimal.tex constant.numeric.value.tex

###[ MATH ]####################################################################

  inline-math:
    - match: \$
      scope: string.other.math.tex punctuation.definition.string.begin.tex
      push: inline-math-dollar-body

  inline-math-dollar-body:
    - meta_scope: meta.environment.math.inline.dollar.tex
    - meta_content_scope: markup.math.inline
    - include: inline-math-dollar-end
    - include: math-content

  inline-math-dollar-end:
    - match: \$
      scope: string.other.math.tex punctuation.definition.string.end.tex
      pop: 1

  block-math:
    - match: \$\$
      scope: string.other.math.tex punctuation.definition.string.begin.tex
      push: block-math-dollar-body

  block-math-dollar-body:
    - meta_scope: meta.environment.math.block.dollar.tex
    - meta_content_scope: markup.math.block
    - include: block-math-dollar-end
    - include: math-content

  block-math-dollar-end:
    - match: \$\$
      scope: string.other.math.tex punctuation.definition.string.end.tex
      pop: 1

  math-content:
    - include: math-builtin
    - include: math-brackets
    - include: math-braces
    - include: boxes
    - include: math-commands
    - include: math-operators
    - include: math-variables
    - include: math-numbers
    - include: general-constants

  math-builtin:
    - include: math-greeks
    - include: math-functions
    - include: math-relations
    - include: math-largeops
    - include: math-binops
    - include: math-symbols
    - include: math-accents
    - include: math-arrows
    - include: math-delimiters

  math-greeks:
    - match: (\\){{greeks}}{{endcs}}
      scope: keyword.other.math.greek.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-functions:
    - match: (\\){{mathfun}}{{endcs}}
      scope: keyword.other.math.function.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-relations:
    - match: (\\){{relations}}{{endcs}}
      scope: keyword.other.math.relation.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-largeops:
    - match: (\\){{largeops}}{{endcs}}
      scope: keyword.other.math.large-operator.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-binops:
    - match: (\\){{binops}}{{endcs}}
      scope: keyword.other.math.binary-operator.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-symbols:
    - match: (\\){{symbols}}{{endcs}}
      scope: keyword.other.math.symbol.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-accents:
    - match: (\\){{accents}}{{endcs}}
      scope: keyword.other.math.accent.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-arrows:
    - match: (\\){{arrows}}{{endcs}}
      scope: keyword.other.math.arrow.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-delimiters:
    - match: (\\){{delimiters}}{{endcs}}
      scope: keyword.other.math.delimiter.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-commands:
    - match: (\\){{letter}}+
      scope: support.function.math.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-operators:
    # note: in math notation, = usually denotes that two terms are equal, instead
    # of an assignment.
    - match: '[<>]=?|='
      scope: keyword.operator.comparison.tex
    - match: '[-+*/!]'
      scope: keyword.operator.arithmetic.tex
    - match: _
      scope: punctuation.separator.subscript.tex
    - match: \^
      scope: punctuation.separator.superscript.tex

  math-braces:
    - match: \{
      scope: punctuation.definition.group.brace.begin.tex
      push: math-brace-group-body

  math-brace-group-body:
    - meta_scope: meta.group.brace.tex
    - include: brace-group-end
    - include: math-content

  math-brackets:
    - match: \(
      scope: punctuation.section.parens.begin.tex
    - match: \)
      scope: punctuation.section.parens.end.tex
    - match: \[
      scope: punctuation.section.brackets.begin.tex
    - match: \]
      scope: punctuation.section.brackets.end.tex
    - match: (\\){
      scope: punctuation.section.braces.begin.tex constant.character.escape.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)}
      scope: punctuation.section.braces.end.tex constant.character.escape.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-numbers:
    - match: \d*(\.)\d+
      scope: meta.number.float.decimal.tex constant.numeric.value.tex
      captures:
        1: punctuation.separator.decimal.tex
    - match: \d+
      scope: meta.number.integer.decimal.tex constant.numeric.value.tex

  math-variables:
    - match: '[A-Za-z]+'
      scope: variable.other.math.tex markup.italic.math.tex

###[ PROTOTYPES ]##############################################################

  # matches any nospace and pops the context
  else-pop:
    - match: (?=\S)
      pop: 1

  immediately-pop:
    - match: ''
      pop: 1

  # pops out of the current context if there is a new paragraph
  paragraph-pop:
    - match: ^(?=\s*$)
      pop: 1

  unmatched-brace-pop:
    - match: (?=})
      pop: 1
