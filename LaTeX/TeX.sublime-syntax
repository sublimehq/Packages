%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: TeX
file_extensions:
  - sty
  - cls
scope: text.tex

variables:
  greeks: |-
    (?x: alpha | beta | gamma | delta | epsilon | varepsilon | zeta | eta | theta
    | vartheta | iota | kappa | lambda | mu | nu | xi | o | pi | varpi | rho
    | varrho | sigma | varsigma | tau | upsilon | phi | varphi | chi | psi
    | omega | Gamma | Delta | Theta | Lambda | Xi | Pi | Sigma | Upsilon | Phi
    | Psi | Omega )
  mathfun: |-
    (?x: arccos | cos | csc | exp | ker | limsup | min | sinh
    | arcsin | cosh | deg | gcd | lg | ln | Pr | sup
    | arctan | cot | det | hom | lim | log | sec | tan
    | arg | coth | dim | inf | liminf | max | sin | tan | pmod | bmod)
  relations: |-
    (?x: leq | lq | geq | ge | equiv | prec | succ | sim
    | preceq | succeq | simeq | ll | gg | subset | supset | approx
    | subseteq | supseteq | cong | sqsubseteq | sqsupseteq | bowtie
    | in | notin | ne | ni | owns | vdash | dashv | models | smile | mid
    | doteq | frown | parallel | perp | propto)
  largeops: |-
    (?x: sum | prod | coprod | int | oint | bigcap | bigcup | bigsqcup
    | bigvee | bigwedge | bigodot | bigotimes | bigoplus | biguplus)
  binops: |-
    (?x: pm | mp | setminus | cdot | times | ast | star | diamond | circ | bullet
    | div | cap | cup | uplus | sqcap | sqcup | triangleleft | triangleright
    | wr | bigcirc | bigtriangleup | bigtriangledown | vee | lor
    | wedge | land | oplus | ominus | otimes | oslash | odot | dagger
    | ddagger | amalg)
  accents: |-
    (?x: hat | widehat | check | tilde | widetilde | acute | grave | dot
    | ddot | breve | bar | vec)
  symbols: |-
    (?x: aleph | hbar | imath | jmath | ell | wp | Re | Im | partial | infty
    | prime | emptyset | nabla | surd | top | bot | \| | angle | triangle
    | backslash | forall | exists | neg | lnot | flat | natural | sharp
    | clubsuit | diamondsuit | heartsuit | spadesuit)
  arrows: |-
    (?x: leftarrow | gets | longleftarrow | Leftarrow | Longleftarrow
    | rightarrow | to | longrightarrow | Rightarrow | Longrightarrow
    | leftrightarrow | longleftrightarrow | Leftrightarrow
    | Longleftrightarrow | mapsto | longmapsto | hookleftarrow
    | hookrightarrow | uparrow | Uparrow | downarrow | Downarrow
    | updownarrow | Updownarrow | nearrow | searrow | nwarrow | swarrow)
  delimiters: |-
    (?x: lbrack | lbrace | langle | rbrack | rbrace | rangle
    | vert | lfloor | lceil | Vert | rfloor | rceil)

  registers: |-
    (?x: box | count | dimen | muskip | skip | toks)

  # letters in the sense of macro names. Whether @ is a letter or not can vary
  # from a syntax-highlighting perspective, however, we are much safer to
  # assume it is a letter. Situations where we have `\macro` followed immediately
  # by `@text` that is to be typeset should be very rare, and if it happens, the
  # user can still put an explicit space (ignored by TeX) to ensure correct
  # highlighting. On the other hand, within packages we get lots of \module@macro
  # type names, and if they were highlighted wrongly the user could not fix this.
  letter: '[A-Za-z@]'
  nonletter: '[^A-Za-z@]'
  # look-ahead for end of command sequence
  endcs: '(?!{{letter}})'
  # a command name: either a sequence of letters, or a single non-letter
  cmdname: '(?x: {{letter}}+ | {{nonletter}})'

contexts:
  prototype:
    - include: comments

  main:
    - include: macros
    - include: controls
    - include: catcode
    - include: braces
    - include: boxes
    - include: block-math
    - include: inline-math
    - include: registers
    - include: register-allocations
    - include: general-constants
    - include: general-commands

  # matches any nospace and pops the context
  else-pop:
    - match: (?=\S)
      pop: true

  # pops out of the current context if there is a new paragraph
  paragraph-pop:
    - match: ^(?=\s*$)
      pop: true

  general-commands:
    - match: (\\){{letter}}+
      scope: support.function.general.tex
      captures:
        1: punctuation.definition.backslash.tex

  general-constants:
    - match: \\\\
      scope: constant.character.newline.tex
    - match: '&'
      scope: constant.character.ampersand.tex
    - match: '~'
      scope: constant.character.space.tex
    - include: escaped-character

  escaped-character:
    - match: (\\){{nonletter}}
      scope: constant.character.escape.tex
      captures:
        1: punctuation.definition.backslash.tex

  registers:
    - match: (\\)({{registers}}){{endcs}}
      captures:
        1: punctuation.definition.backslash.tex
        2: storage.type.tex
      push: register-id

  register-id:
    - meta_scope: meta.register.tex
    - match: \d+
      scope: meta.number.integer.decimal constant.numeric.value.tex
      pop: 1
    - include: general-commands
    - include: paragraph-pop
    - include: else-pop

  register-allocations:
    - match: (\\)new{{registers}}{{endcs}}
      scope: keyword.declaration.register.tex storage.modifier.register.tex
      captures:
        1: punctuation.definition.backslash.tex
      push: def-registername

  def-registername:
    - match: \{
      scope: punctuation.definition.group.brace.begin.tex
      push: inside-register-name-group
    - match: (\\){{cmdname}}
      scope: entity.name.constant.tex
      captures:
        1: punctuation.definition.backslash.tex
      pop: 1
    - include: paragraph-pop
    - include: else-pop

  inside-register-name-group:
    - meta_scope: meta.group.brace.latex
    - match: \}
      scope: punctuation.definition.group.brace.end.tex
      pop: 2
    - match: (\\){{cmdname}}
      scope: entity.name.constant.tex
      captures:
        1: punctuation.definition.backslash.tex

  comments:
    - match: '%.*$\n?'
      scope: comment.line.percentage.tex

  controls:
    - match: (\\)ifcase{{endcs}}
      scope: keyword.control.conditional.switch.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)or{{endcs}}
      scope: keyword.control.conditional.case.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)loop{{endcs}}
      scope: keyword.control.loop.do-while.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)repeat{{endcs}}
      scope: keyword.control.loop.end.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)expandafter{{endcs}}
      scope: keyword.control.flow.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)if(?:cat|dim|eof|false|hbox|hmode|inner|mmode|num|odd|true|undefined|vbox|vmode|void|x)?{{endcs}}
      scope: keyword.control.conditional.if.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)else{{endcs}}
      scope: keyword.control.conditional.else.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)fi{{endcs}}
      scope: keyword.control.conditional.end.tex
      captures:
        1: punctuation.definition.backslash.tex
    - match: (\\)input{{endcs}}
      scope: meta.function.input.tex keyword.control.input.tex
      captures:
        1: punctuation.definition.backslash.tex

  catcode:
    - match: ((\\)catcode)`(?:\\)?.=(\d+)
      scope: meta.function.catcode.tex
      captures:
        1: keyword.control.catcode.tex
        2: punctuation.definition.backslash.tex
        3: constant.numeric.category.tex

  braces:
    - match: \{
      scope: punctuation.definition.group.brace.begin.tex
      push:
        - meta_scope: meta.group.brace.tex
        - match: \}
          scope: punctuation.definition.group.brace.end.tex
          pop: true
        - include: main

  # within macros, it is possible that only part of some nested struture
  # is present. To prevent this from causing problems, here we only match
  # elements that are simple, i.e. that do not push to the stack.
  macro-braces:
    - match: \{
      scope: punctuation.definition.group.brace.begin.tex
      push:
        - meta_scope: meta.group.brace.tex
        - match: \}
          scope: punctuation.definition.group.brace.end.tex
          pop: true
        - include: general-constants
        - include: general-commands
        - include: macro-braces

  boxes:
    - match: ((\\)[hv]box)\s*(\{)
      captures:
        1: support.function.box.tex
        2: punctuation.definition.backslash.tex
        3: punctuation.definition.group.brace.begin.tex
      push:
        - meta_scope: meta.function.box.tex
        - match: \}
          scope: punctuation.definition.group.brace.end.tex
          pop: true
        - include: main

  macros:
    # Note \edef and \xdef have slightly different syntax, in that they do not
    # allow for arguments. However, every valid \edef could be a valid \def,
    # so syntax highlighting will work properly with correct code.
    # we need to make sure to match only full commands, so we look-ahead for
    # any following non-letter
    - match: (\\)[gex]?def{{endcs}}
      scope: keyword.declaration.function.tex storage.modifier.definition.tex
      captures:
        1: punctuation.definition.backslash.tex
      push: def-commandname

  def-commandname:
    - meta_scope: meta.function.tex
    - match: (?=\\)
      set:
        - clear_scopes: 1
        - meta_scope: meta.function.identifier.tex
        - match: (\\){{cmdname}}
          scope: entity.name.definition.tex
          captures:
            1: punctuation.definition.backslash.tex
          set: def-argspec
        - include: paragraph-pop
        - include: else-pop
    - include: paragraph-pop
    - include: else-pop

  def-argspec:
    - clear_scopes: 1
    - meta_content_scope: meta.function.parameters.tex
    - include: escaped-character
    - match: (?=\{)
      scope: punctuation.definition.group.bracket.end.tex
      set: def-definition
    - match: (\#)[0-9]
      scope: variable.parameter.tex
      captures:
        1: punctuation.definition.variable.tex
    - include: paragraph-pop

  def-definition:
    - match: \{
      scope: punctuation.definition.group.brace.begin.tex
      set: def-definition-body
    - include: paragraph-pop
    - include: else-pop

  def-definition-body:
    - meta_scope: meta.function.body.tex meta.group.brace.tex
    - match: \}
      scope: punctuation.definition.group.brace.end.tex
      pop: 1
    - include: general-constants
    - include: general-commands
    - include: macro-braces


  math-builtin:
    - include: math-greeks
    - include: math-functions
    - include: math-relations
    - include: math-largeops
    - include: math-binops
    - include: math-symbols
    - include: math-accents
    - include: math-arrows
    - include: math-delimiters

  math-greeks:
    - match: (\\){{greeks}}{{endcs}}
      scope: keyword.other.math.greek.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-functions:
    - match: (\\){{mathfun}}{{endcs}}
      scope: keyword.other.math.function.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-relations:
    - match: (\\){{relations}}{{endcs}}
      scope: keyword.other.math.relation.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-largeops:
    - match: (\\){{largeops}}{{endcs}}
      scope: keyword.other.math.large-operator.tex
      captures:
        1: punctuation.definition.backslash.texpunctuation.definition.backslash.tex

  math-binops:
    - match: (\\){{binops}}{{endcs}}
      scope: keyword.other.math.binary-operator.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-symbols:
    - match: (\\){{symbols}}{{endcs}}
      scope: keyword.other.math.symbol.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-accents:
    - match: (\\){{accents}}{{endcs}}
      scope: keyword.other.math.accent.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-arrows:
    - match: (\\){{arrows}}{{endcs}}
      scope: keyword.other.math.arrow.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-delimiters:
    - match: (\\){{delimiters}}{{endcs}}
      scope: keyword.other.math.delimiter.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-commands:
    - match: (\\){{letter}}+
      scope: support.function.math.tex
      captures:
        1: punctuation.definition.backslash.tex

  math-operators:
    - match: \+|\-|=|-|\*|/|\^|_|<|>
      scope: keyword.operator.math.tex

  math-braces:
    - match: \{
      scope: punctuation.definition.group.brace.begin.tex
      push:
        - meta_scope: meta.group.brace.tex
        - match: \}
          scope: punctuation.definition.group.brace.end.tex
          pop: true
        - include: math-content

  math-brackets:
    - match: '[\(\)]'
      scope: constant.character.parenthesis.tex
    - match: '[\[\]]'
      scope: constant.character.bracket.tex
    - match: (\\)[\{\}]
      scope: constant.character.brace.escape.tex
      captures:
        1: punctuation.definition.backslash.brace.escape.tex

  math-numerics:
    - match: (([[:digit:]]*\.[[:digit:]]+)|[[:digit:]]+)
      scope: constant.numeric.math.tex

  math-characters:
    - match: '[A-Za-z]+'
      scope: variable.other.math.tex

  math-content:
    - include: math-builtin
    - include: math-brackets
    - include: math-braces
    - include: boxes
    - include: math-commands
    - include: math-operators
    - include: math-characters
    - include: math-numerics
    - include: general-constants

  inline-math:
    - match: \$
      scope: string.other.math.tex punctuation.definition.string.begin.tex
      push:
        - meta_scope: meta.environment.math.inline.dollar.tex
        - match: \$
          scope: string.other.math.tex punctuation.definition.string.end.tex
          pop: true
        - include: math-content

  block-math:
    - match: \$\$
      scope: string.other.math.tex punctuation.definition.string.begin.tex
      push:
        - meta_scope: meta.environment.math.block.dollar.tex
        - match: \$\$
          scope: string.other.math.tex punctuation.definition.string.end.tex
          pop: true
        - include: math-content
